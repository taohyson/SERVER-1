// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yyqf/yyqfProto.proto

package protobuf.clazz.yyqf;

public final class YYQFRsp {
  private YYQFRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RoomInfoYYQFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 room_id = 1;
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    boolean hasRoomId();
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    int getRoomId();

    // optional int32 game_type_index = 4;
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    boolean hasGameTypeIndex();
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    int getGameTypeIndex();

    // optional int32 game_rule_index = 2;
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    boolean hasGameRuleIndex();
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    int getGameRuleIndex();

    // repeated int32 game_rule_index_ex = 12;
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    java.util.List<java.lang.Integer> getGameRuleIndexExList();
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    int getGameRuleIndexExCount();
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    int getGameRuleIndexEx(int index);

    // optional string game_rule_des = 3;
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    boolean hasGameRuleDes();
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getGameRuleDes();
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getGameRuleDesBytes();

    // optional int32 game_round = 5;
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    int getGameRound();

    // optional int32 cur_round = 6;
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    int getCurRound();

    // optional int32 game_status = 7;
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    boolean hasGameStatus();
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    int getGameStatus();

    // optional int64 create_player_id = 8;
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    boolean hasCreatePlayerId();
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    long getCreatePlayerId();

    // optional int32 begin_left_card = 9;
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    boolean hasBeginLeftCard();
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    int getBeginLeftCard();

    // optional int32 _banker_player = 10;
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional string create_name = 11;
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    boolean hasCreateName();
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    java.lang.String getCreateName();
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    com.google.protobuf.ByteString
        getCreateNameBytes();
  }
  /**
   * Protobuf type {@code pdk.RoomInfoYYQF}
   *
   * <pre>
   *房间信息
   * </pre>
   */
  public static final class RoomInfoYYQF extends
      com.google.protobuf.GeneratedMessage
      implements RoomInfoYYQFOrBuilder {
    // Use RoomInfoYYQF.newBuilder() to construct.
    private RoomInfoYYQF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomInfoYYQF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomInfoYYQF defaultInstance;
    public static RoomInfoYYQF getDefaultInstance() {
      return defaultInstance;
    }

    public RoomInfoYYQF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomInfoYYQF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              roomId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000004;
              gameRuleIndex_ = input.readInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000008;
              gameRuleDes_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              gameTypeIndex_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              gameRound_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              curRound_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              gameStatus_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              createPlayerId_ = input.readInt64();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              beginLeftCard_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              BankerPlayer_ = input.readInt32();
              break;
            }
            case 90: {
              bitField0_ |= 0x00000400;
              createName_ = input.readBytes();
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              gameRuleIndexEx_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                gameRuleIndexEx_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = java.util.Collections.unmodifiableList(gameRuleIndexEx_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RoomInfoYYQF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RoomInfoYYQF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.class, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomInfoYYQF> PARSER =
        new com.google.protobuf.AbstractParser<RoomInfoYYQF>() {
      public RoomInfoYYQF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomInfoYYQF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomInfoYYQF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 room_id = 1;
    public static final int ROOM_ID_FIELD_NUMBER = 1;
    private int roomId_;
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    public int getRoomId() {
      return roomId_;
    }

    // optional int32 game_type_index = 4;
    public static final int GAME_TYPE_INDEX_FIELD_NUMBER = 4;
    private int gameTypeIndex_;
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public boolean hasGameTypeIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public int getGameTypeIndex() {
      return gameTypeIndex_;
    }

    // optional int32 game_rule_index = 2;
    public static final int GAME_RULE_INDEX_FIELD_NUMBER = 2;
    private int gameRuleIndex_;
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public boolean hasGameRuleIndex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public int getGameRuleIndex() {
      return gameRuleIndex_;
    }

    // repeated int32 game_rule_index_ex = 12;
    public static final int GAME_RULE_INDEX_EX_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> gameRuleIndexEx_;
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getGameRuleIndexExList() {
      return gameRuleIndexEx_;
    }
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public int getGameRuleIndexExCount() {
      return gameRuleIndexEx_.size();
    }
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public int getGameRuleIndexEx(int index) {
      return gameRuleIndexEx_.get(index);
    }

    // optional string game_rule_des = 3;
    public static final int GAME_RULE_DES_FIELD_NUMBER = 3;
    private java.lang.Object gameRuleDes_;
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public boolean hasGameRuleDes() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getGameRuleDes() {
      java.lang.Object ref = gameRuleDes_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          gameRuleDes_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getGameRuleDesBytes() {
      java.lang.Object ref = gameRuleDes_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        gameRuleDes_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 game_round = 5;
    public static final int GAME_ROUND_FIELD_NUMBER = 5;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // optional int32 cur_round = 6;
    public static final int CUR_ROUND_FIELD_NUMBER = 6;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_status = 7;
    public static final int GAME_STATUS_FIELD_NUMBER = 7;
    private int gameStatus_;
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    public boolean hasGameStatus() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    public int getGameStatus() {
      return gameStatus_;
    }

    // optional int64 create_player_id = 8;
    public static final int CREATE_PLAYER_ID_FIELD_NUMBER = 8;
    private long createPlayerId_;
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    public boolean hasCreatePlayerId() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    public long getCreatePlayerId() {
      return createPlayerId_;
    }

    // optional int32 begin_left_card = 9;
    public static final int BEGIN_LEFT_CARD_FIELD_NUMBER = 9;
    private int beginLeftCard_;
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    public boolean hasBeginLeftCard() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    public int getBeginLeftCard() {
      return beginLeftCard_;
    }

    // optional int32 _banker_player = 10;
    public static final int _BANKER_PLAYER_FIELD_NUMBER = 10;
    private int BankerPlayer_;
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return BankerPlayer_;
    }

    // optional string create_name = 11;
    public static final int CREATE_NAME_FIELD_NUMBER = 11;
    private java.lang.Object createName_;
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public boolean hasCreateName() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public java.lang.String getCreateName() {
      java.lang.Object ref = createName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          createName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCreateNameBytes() {
      java.lang.Object ref = createName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        createName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      roomId_ = 0;
      gameTypeIndex_ = 0;
      gameRuleIndex_ = 0;
      gameRuleIndexEx_ = java.util.Collections.emptyList();
      gameRuleDes_ = "";
      gameRound_ = 0;
      curRound_ = 0;
      gameStatus_ = 0;
      createPlayerId_ = 0L;
      beginLeftCard_ = 0;
      BankerPlayer_ = 0;
      createName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, roomId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(2, gameRuleIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(3, getGameRuleDesBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, gameTypeIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, gameRound_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, curRound_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, gameStatus_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt64(8, createPlayerId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, beginLeftCard_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, BankerPlayer_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(11, getCreateNameBytes());
      }
      for (int i = 0; i < gameRuleIndexEx_.size(); i++) {
        output.writeInt32(12, gameRuleIndexEx_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, roomId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, gameRuleIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getGameRuleDesBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, gameTypeIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, gameRound_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curRound_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, gameStatus_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, createPlayerId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, beginLeftCard_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, BankerPlayer_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, getCreateNameBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < gameRuleIndexEx_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(gameRuleIndexEx_.get(i));
        }
        size += dataSize;
        size += 1 * getGameRuleIndexExList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pdk.RoomInfoYYQF}
     *
     * <pre>
     *房间信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RoomInfoYYQF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RoomInfoYYQF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.class, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder.class);
      }

      // Construct using protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        roomId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        gameTypeIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRuleIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRuleIndexEx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        gameRuleDes_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        gameStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        createPlayerId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        beginLeftCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        BankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        createName_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RoomInfoYYQF_descriptor;
      }

      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF getDefaultInstanceForType() {
        return protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
      }

      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF build() {
        protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF buildPartial() {
        protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF result = new protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gameTypeIndex_ = gameTypeIndex_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRuleIndex_ = gameRuleIndex_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = java.util.Collections.unmodifiableList(gameRuleIndexEx_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.gameRuleIndexEx_ = gameRuleIndexEx_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.gameRuleDes_ = gameRuleDes_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gameRound_ = gameRound_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.gameStatus_ = gameStatus_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.createPlayerId_ = createPlayerId_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.beginLeftCard_ = beginLeftCard_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.BankerPlayer_ = BankerPlayer_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.createName_ = createName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF) {
          return mergeFrom((protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF other) {
        if (other == protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasGameTypeIndex()) {
          setGameTypeIndex(other.getGameTypeIndex());
        }
        if (other.hasGameRuleIndex()) {
          setGameRuleIndex(other.getGameRuleIndex());
        }
        if (!other.gameRuleIndexEx_.isEmpty()) {
          if (gameRuleIndexEx_.isEmpty()) {
            gameRuleIndexEx_ = other.gameRuleIndexEx_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureGameRuleIndexExIsMutable();
            gameRuleIndexEx_.addAll(other.gameRuleIndexEx_);
          }
          onChanged();
        }
        if (other.hasGameRuleDes()) {
          bitField0_ |= 0x00000010;
          gameRuleDes_ = other.gameRuleDes_;
          onChanged();
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameStatus()) {
          setGameStatus(other.getGameStatus());
        }
        if (other.hasCreatePlayerId()) {
          setCreatePlayerId(other.getCreatePlayerId());
        }
        if (other.hasBeginLeftCard()) {
          setBeginLeftCard(other.getBeginLeftCard());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCreateName()) {
          bitField0_ |= 0x00000800;
          createName_ = other.createName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 room_id = 1;
      private int roomId_ ;
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public int getRoomId() {
        return roomId_;
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public Builder setRoomId(int value) {
        bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomId_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_type_index = 4;
      private int gameTypeIndex_ ;
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public boolean hasGameTypeIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public int getGameTypeIndex() {
        return gameTypeIndex_;
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder setGameTypeIndex(int value) {
        bitField0_ |= 0x00000002;
        gameTypeIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder clearGameTypeIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        gameTypeIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_rule_index = 2;
      private int gameRuleIndex_ ;
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public boolean hasGameRuleIndex() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public int getGameRuleIndex() {
        return gameRuleIndex_;
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder setGameRuleIndex(int value) {
        bitField0_ |= 0x00000004;
        gameRuleIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder clearGameRuleIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRuleIndex_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 game_rule_index_ex = 12;
      private java.util.List<java.lang.Integer> gameRuleIndexEx_ = java.util.Collections.emptyList();
      private void ensureGameRuleIndexExIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>(gameRuleIndexEx_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getGameRuleIndexExList() {
        return java.util.Collections.unmodifiableList(gameRuleIndexEx_);
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public int getGameRuleIndexExCount() {
        return gameRuleIndexEx_.size();
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public int getGameRuleIndexEx(int index) {
        return gameRuleIndexEx_.get(index);
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder setGameRuleIndexEx(
          int index, int value) {
        ensureGameRuleIndexExIsMutable();
        gameRuleIndexEx_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder addGameRuleIndexEx(int value) {
        ensureGameRuleIndexExIsMutable();
        gameRuleIndexEx_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder addAllGameRuleIndexEx(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGameRuleIndexExIsMutable();
        super.addAll(values, gameRuleIndexEx_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder clearGameRuleIndexEx() {
        gameRuleIndexEx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional string game_rule_des = 3;
      private java.lang.Object gameRuleDes_ = "";
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public boolean hasGameRuleDes() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getGameRuleDes() {
        java.lang.Object ref = gameRuleDes_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          gameRuleDes_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getGameRuleDesBytes() {
        java.lang.Object ref = gameRuleDes_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          gameRuleDes_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setGameRuleDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        gameRuleDes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearGameRuleDes() {
        bitField0_ = (bitField0_ & ~0x00000010);
        gameRuleDes_ = getDefaultInstance().getGameRuleDes();
        onChanged();
        return this;
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setGameRuleDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        gameRuleDes_ = value;
        onChanged();
        return this;
      }

      // optional int32 game_round = 5;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000020;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000020);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_round = 6;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000040;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000040);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_status = 7;
      private int gameStatus_ ;
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public boolean hasGameStatus() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public int getGameStatus() {
        return gameStatus_;
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public Builder setGameStatus(int value) {
        bitField0_ |= 0x00000080;
        gameStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public Builder clearGameStatus() {
        bitField0_ = (bitField0_ & ~0x00000080);
        gameStatus_ = 0;
        onChanged();
        return this;
      }

      // optional int64 create_player_id = 8;
      private long createPlayerId_ ;
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public boolean hasCreatePlayerId() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public long getCreatePlayerId() {
        return createPlayerId_;
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public Builder setCreatePlayerId(long value) {
        bitField0_ |= 0x00000100;
        createPlayerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public Builder clearCreatePlayerId() {
        bitField0_ = (bitField0_ & ~0x00000100);
        createPlayerId_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 begin_left_card = 9;
      private int beginLeftCard_ ;
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public boolean hasBeginLeftCard() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public int getBeginLeftCard() {
        return beginLeftCard_;
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public Builder setBeginLeftCard(int value) {
        bitField0_ |= 0x00000200;
        beginLeftCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public Builder clearBeginLeftCard() {
        bitField0_ = (bitField0_ & ~0x00000200);
        beginLeftCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 _banker_player = 10;
      private int BankerPlayer_ ;
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return BankerPlayer_;
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000400;
        BankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000400);
        BankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional string create_name = 11;
      private java.lang.Object createName_ = "";
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public boolean hasCreateName() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public java.lang.String getCreateName() {
        java.lang.Object ref = createName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          createName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCreateNameBytes() {
        java.lang.Object ref = createName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          createName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder setCreateName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        createName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder clearCreateName() {
        bitField0_ = (bitField0_ & ~0x00000800);
        createName_ = getDefaultInstance().getCreateName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder setCreateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        createName_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pdk.RoomInfoYYQF)
    }

    static {
      defaultInstance = new RoomInfoYYQF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pdk.RoomInfoYYQF)
  }

  public interface RoomPlayerResponseYYQFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int64 account_id = 1;
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    boolean hasAccountId();
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    long getAccountId();

    // optional string user_name = 2;
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    boolean hasUserName();
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    java.lang.String getUserName();
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    com.google.protobuf.ByteString
        getUserNameBytes();

    // optional string head_img_url = 3;
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    boolean hasHeadImgUrl();
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    java.lang.String getHeadImgUrl();
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    com.google.protobuf.ByteString
        getHeadImgUrlBytes();

    // optional int32 seat_index = 4;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    int getSeatIndex();

    // optional string ip = 5;
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    boolean hasIp();
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    java.lang.String getIp();
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpBytes();

    // optional int32 online = 6;
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    boolean hasOnline();
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    int getOnline();

    // optional int32 sex = 7;
    /**
     * <code>optional int32 sex = 7;</code>
     */
    boolean hasSex();
    /**
     * <code>optional int32 sex = 7;</code>
     */
    int getSex();

    // optional float score = 8;
    /**
     * <code>optional float score = 8;</code>
     */
    boolean hasScore();
    /**
     * <code>optional float score = 8;</code>
     */
    float getScore();

    // optional int32 ready = 9;
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    boolean hasReady();
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    int getReady();

    // optional string ip_addr = 10;
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    boolean hasIpAddr();
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    java.lang.String getIpAddr();
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpAddrBytes();

    // optional .LocationInfor locationInfor = 11;
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    boolean hasLocationInfor();
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    protobuf.clazz.Protocol.LocationInfor getLocationInfor();
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder();

    // optional bool is_trustee = 12;
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    boolean hasIsTrustee();
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    boolean getIsTrustee();

    // optional int64 money = 13;
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    boolean hasMoney();
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    long getMoney();

    // optional int64 gold = 14;
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    boolean hasGold();
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    long getGold();

    // optional int32 you = 15;
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     * 游数
     * </pre>
     */
    boolean hasYou();
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     * 游数
     * </pre>
     */
    int getYou();
  }
  /**
   * Protobuf type {@code pdk.RoomPlayerResponseYYQF}
   *
   * <pre>
   *房间的玩家
   * </pre>
   */
  public static final class RoomPlayerResponseYYQF extends
      com.google.protobuf.GeneratedMessage
      implements RoomPlayerResponseYYQFOrBuilder {
    // Use RoomPlayerResponseYYQF.newBuilder() to construct.
    private RoomPlayerResponseYYQF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomPlayerResponseYYQF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomPlayerResponseYYQF defaultInstance;
    public static RoomPlayerResponseYYQF getDefaultInstance() {
      return defaultInstance;
    }

    public RoomPlayerResponseYYQF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomPlayerResponseYYQF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              accountId_ = input.readInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              userName_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              headImgUrl_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              seatIndex_ = input.readInt32();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              ip_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              online_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              sex_ = input.readInt32();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              score_ = input.readFloat();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              ready_ = input.readInt32();
              break;
            }
            case 82: {
              bitField0_ |= 0x00000200;
              ipAddr_ = input.readBytes();
              break;
            }
            case 90: {
              protobuf.clazz.Protocol.LocationInfor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = locationInfor_.toBuilder();
              }
              locationInfor_ = input.readMessage(protobuf.clazz.Protocol.LocationInfor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locationInfor_);
                locationInfor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              isTrustee_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              money_ = input.readInt64();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              gold_ = input.readInt64();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              you_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RoomPlayerResponseYYQF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RoomPlayerResponseYYQF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.class, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomPlayerResponseYYQF> PARSER =
        new com.google.protobuf.AbstractParser<RoomPlayerResponseYYQF>() {
      public RoomPlayerResponseYYQF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomPlayerResponseYYQF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomPlayerResponseYYQF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 account_id = 1;
    public static final int ACCOUNT_ID_FIELD_NUMBER = 1;
    private long accountId_;
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    public boolean hasAccountId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    public long getAccountId() {
      return accountId_;
    }

    // optional string user_name = 2;
    public static final int USER_NAME_FIELD_NUMBER = 2;
    private java.lang.Object userName_;
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public boolean hasUserName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public java.lang.String getUserName() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          userName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUserNameBytes() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string head_img_url = 3;
    public static final int HEAD_IMG_URL_FIELD_NUMBER = 3;
    private java.lang.Object headImgUrl_;
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public boolean hasHeadImgUrl() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public java.lang.String getHeadImgUrl() {
      java.lang.Object ref = headImgUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          headImgUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHeadImgUrlBytes() {
      java.lang.Object ref = headImgUrl_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headImgUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 seat_index = 4;
    public static final int SEAT_INDEX_FIELD_NUMBER = 4;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional string ip = 5;
    public static final int IP_FIELD_NUMBER = 5;
    private java.lang.Object ip_;
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public boolean hasIp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public java.lang.String getIp() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ip_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpBytes() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ip_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 online = 6;
    public static final int ONLINE_FIELD_NUMBER = 6;
    private int online_;
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    public boolean hasOnline() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    public int getOnline() {
      return online_;
    }

    // optional int32 sex = 7;
    public static final int SEX_FIELD_NUMBER = 7;
    private int sex_;
    /**
     * <code>optional int32 sex = 7;</code>
     */
    public boolean hasSex() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 sex = 7;</code>
     */
    public int getSex() {
      return sex_;
    }

    // optional float score = 8;
    public static final int SCORE_FIELD_NUMBER = 8;
    private float score_;
    /**
     * <code>optional float score = 8;</code>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float score = 8;</code>
     */
    public float getScore() {
      return score_;
    }

    // optional int32 ready = 9;
    public static final int READY_FIELD_NUMBER = 9;
    private int ready_;
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    public boolean hasReady() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    public int getReady() {
      return ready_;
    }

    // optional string ip_addr = 10;
    public static final int IP_ADDR_FIELD_NUMBER = 10;
    private java.lang.Object ipAddr_;
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public boolean hasIpAddr() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public java.lang.String getIpAddr() {
      java.lang.Object ref = ipAddr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ipAddr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpAddrBytes() {
      java.lang.Object ref = ipAddr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ipAddr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .LocationInfor locationInfor = 11;
    public static final int LOCATIONINFOR_FIELD_NUMBER = 11;
    private protobuf.clazz.Protocol.LocationInfor locationInfor_;
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public boolean hasLocationInfor() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public protobuf.clazz.Protocol.LocationInfor getLocationInfor() {
      return locationInfor_;
    }
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder() {
      return locationInfor_;
    }

    // optional bool is_trustee = 12;
    public static final int IS_TRUSTEE_FIELD_NUMBER = 12;
    private boolean isTrustee_;
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    public boolean hasIsTrustee() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    public boolean getIsTrustee() {
      return isTrustee_;
    }

    // optional int64 money = 13;
    public static final int MONEY_FIELD_NUMBER = 13;
    private long money_;
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    public boolean hasMoney() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    public long getMoney() {
      return money_;
    }

    // optional int64 gold = 14;
    public static final int GOLD_FIELD_NUMBER = 14;
    private long gold_;
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    public boolean hasGold() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    public long getGold() {
      return gold_;
    }

    // optional int32 you = 15;
    public static final int YOU_FIELD_NUMBER = 15;
    private int you_;
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     * 游数
     * </pre>
     */
    public boolean hasYou() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     * 游数
     * </pre>
     */
    public int getYou() {
      return you_;
    }

    private void initFields() {
      accountId_ = 0L;
      userName_ = "";
      headImgUrl_ = "";
      seatIndex_ = 0;
      ip_ = "";
      online_ = 0;
      sex_ = 0;
      score_ = 0F;
      ready_ = 0;
      ipAddr_ = "";
      locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
      isTrustee_ = false;
      money_ = 0L;
      gold_ = 0L;
      you_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, accountId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getHeadImgUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, seatIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, online_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, sex_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, ready_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, getIpAddrBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, locationInfor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, isTrustee_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt64(13, money_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt64(14, gold_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, you_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, accountId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getHeadImgUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, seatIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, online_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, sex_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, ready_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getIpAddrBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, locationInfor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, isTrustee_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, money_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, gold_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, you_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pdk.RoomPlayerResponseYYQF}
     *
     * <pre>
     *房间的玩家
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RoomPlayerResponseYYQF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RoomPlayerResponseYYQF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.class, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder.class);
      }

      // Construct using protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationInforFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        accountId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        userName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        headImgUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        ip_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        online_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        sex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        score_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        ready_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        ipAddr_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        if (locationInforBuilder_ == null) {
          locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
        } else {
          locationInforBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        isTrustee_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        money_ = 0L;
        bitField0_ = (bitField0_ & ~0x00001000);
        gold_ = 0L;
        bitField0_ = (bitField0_ & ~0x00002000);
        you_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RoomPlayerResponseYYQF_descriptor;
      }

      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF getDefaultInstanceForType() {
        return protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.getDefaultInstance();
      }

      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF build() {
        protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF buildPartial() {
        protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF result = new protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.accountId_ = accountId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.userName_ = userName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.headImgUrl_ = headImgUrl_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.ip_ = ip_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.online_ = online_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.sex_ = sex_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.ready_ = ready_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.ipAddr_ = ipAddr_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (locationInforBuilder_ == null) {
          result.locationInfor_ = locationInfor_;
        } else {
          result.locationInfor_ = locationInforBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.isTrustee_ = isTrustee_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.money_ = money_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.gold_ = gold_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.you_ = you_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF) {
          return mergeFrom((protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF other) {
        if (other == protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.getDefaultInstance()) return this;
        if (other.hasAccountId()) {
          setAccountId(other.getAccountId());
        }
        if (other.hasUserName()) {
          bitField0_ |= 0x00000002;
          userName_ = other.userName_;
          onChanged();
        }
        if (other.hasHeadImgUrl()) {
          bitField0_ |= 0x00000004;
          headImgUrl_ = other.headImgUrl_;
          onChanged();
        }
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasIp()) {
          bitField0_ |= 0x00000010;
          ip_ = other.ip_;
          onChanged();
        }
        if (other.hasOnline()) {
          setOnline(other.getOnline());
        }
        if (other.hasSex()) {
          setSex(other.getSex());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasReady()) {
          setReady(other.getReady());
        }
        if (other.hasIpAddr()) {
          bitField0_ |= 0x00000200;
          ipAddr_ = other.ipAddr_;
          onChanged();
        }
        if (other.hasLocationInfor()) {
          mergeLocationInfor(other.getLocationInfor());
        }
        if (other.hasIsTrustee()) {
          setIsTrustee(other.getIsTrustee());
        }
        if (other.hasMoney()) {
          setMoney(other.getMoney());
        }
        if (other.hasGold()) {
          setGold(other.getGold());
        }
        if (other.hasYou()) {
          setYou(other.getYou());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 account_id = 1;
      private long accountId_ ;
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public boolean hasAccountId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public long getAccountId() {
        return accountId_;
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public Builder setAccountId(long value) {
        bitField0_ |= 0x00000001;
        accountId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public Builder clearAccountId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        accountId_ = 0L;
        onChanged();
        return this;
      }

      // optional string user_name = 2;
      private java.lang.Object userName_ = "";
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public boolean hasUserName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public java.lang.String getUserName() {
        java.lang.Object ref = userName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          userName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public com.google.protobuf.ByteString
          getUserNameBytes() {
        java.lang.Object ref = userName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder setUserName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder clearUserName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        userName_ = getDefaultInstance().getUserName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder setUserNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }

      // optional string head_img_url = 3;
      private java.lang.Object headImgUrl_ = "";
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public boolean hasHeadImgUrl() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public java.lang.String getHeadImgUrl() {
        java.lang.Object ref = headImgUrl_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          headImgUrl_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHeadImgUrlBytes() {
        java.lang.Object ref = headImgUrl_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          headImgUrl_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImgUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        headImgUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder clearHeadImgUrl() {
        bitField0_ = (bitField0_ & ~0x00000004);
        headImgUrl_ = getDefaultInstance().getHeadImgUrl();
        onChanged();
        return this;
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImgUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        headImgUrl_ = value;
        onChanged();
        return this;
      }

      // optional int32 seat_index = 4;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000008;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional string ip = 5;
      private java.lang.Object ip_ = "";
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public boolean hasIp() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public java.lang.String getIp() {
        java.lang.Object ref = ip_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ip_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpBytes() {
        java.lang.Object ref = ip_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ip_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder setIp(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        ip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder clearIp() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ip_ = getDefaultInstance().getIp();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder setIpBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        ip_ = value;
        onChanged();
        return this;
      }

      // optional int32 online = 6;
      private int online_ ;
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public boolean hasOnline() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public int getOnline() {
        return online_;
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public Builder setOnline(int value) {
        bitField0_ |= 0x00000020;
        online_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public Builder clearOnline() {
        bitField0_ = (bitField0_ & ~0x00000020);
        online_ = 0;
        onChanged();
        return this;
      }

      // optional int32 sex = 7;
      private int sex_ ;
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public boolean hasSex() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public int getSex() {
        return sex_;
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public Builder setSex(int value) {
        bitField0_ |= 0x00000040;
        sex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public Builder clearSex() {
        bitField0_ = (bitField0_ & ~0x00000040);
        sex_ = 0;
        onChanged();
        return this;
      }

      // optional float score = 8;
      private float score_ ;
      /**
       * <code>optional float score = 8;</code>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public float getScore() {
        return score_;
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public Builder setScore(float value) {
        bitField0_ |= 0x00000080;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000080);
        score_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 ready = 9;
      private int ready_ ;
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public boolean hasReady() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public int getReady() {
        return ready_;
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public Builder setReady(int value) {
        bitField0_ |= 0x00000100;
        ready_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public Builder clearReady() {
        bitField0_ = (bitField0_ & ~0x00000100);
        ready_ = 0;
        onChanged();
        return this;
      }

      // optional string ip_addr = 10;
      private java.lang.Object ipAddr_ = "";
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public boolean hasIpAddr() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public java.lang.String getIpAddr() {
        java.lang.Object ref = ipAddr_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ipAddr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpAddrBytes() {
        java.lang.Object ref = ipAddr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ipAddr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder setIpAddr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        ipAddr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder clearIpAddr() {
        bitField0_ = (bitField0_ & ~0x00000200);
        ipAddr_ = getDefaultInstance().getIpAddr();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder setIpAddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        ipAddr_ = value;
        onChanged();
        return this;
      }

      // optional .LocationInfor locationInfor = 11;
      private protobuf.clazz.Protocol.LocationInfor locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder> locationInforBuilder_;
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public boolean hasLocationInfor() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInfor getLocationInfor() {
        if (locationInforBuilder_ == null) {
          return locationInfor_;
        } else {
          return locationInforBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder setLocationInfor(protobuf.clazz.Protocol.LocationInfor value) {
        if (locationInforBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          locationInfor_ = value;
          onChanged();
        } else {
          locationInforBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder setLocationInfor(
          protobuf.clazz.Protocol.LocationInfor.Builder builderForValue) {
        if (locationInforBuilder_ == null) {
          locationInfor_ = builderForValue.build();
          onChanged();
        } else {
          locationInforBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder mergeLocationInfor(protobuf.clazz.Protocol.LocationInfor value) {
        if (locationInforBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              locationInfor_ != protobuf.clazz.Protocol.LocationInfor.getDefaultInstance()) {
            locationInfor_ =
              protobuf.clazz.Protocol.LocationInfor.newBuilder(locationInfor_).mergeFrom(value).buildPartial();
          } else {
            locationInfor_ = value;
          }
          onChanged();
        } else {
          locationInforBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder clearLocationInfor() {
        if (locationInforBuilder_ == null) {
          locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
          onChanged();
        } else {
          locationInforBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInfor.Builder getLocationInforBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getLocationInforFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder() {
        if (locationInforBuilder_ != null) {
          return locationInforBuilder_.getMessageOrBuilder();
        } else {
          return locationInfor_;
        }
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder> 
          getLocationInforFieldBuilder() {
        if (locationInforBuilder_ == null) {
          locationInforBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder>(
                  locationInfor_,
                  getParentForChildren(),
                  isClean());
          locationInfor_ = null;
        }
        return locationInforBuilder_;
      }

      // optional bool is_trustee = 12;
      private boolean isTrustee_ ;
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public boolean hasIsTrustee() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public boolean getIsTrustee() {
        return isTrustee_;
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public Builder setIsTrustee(boolean value) {
        bitField0_ |= 0x00000800;
        isTrustee_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public Builder clearIsTrustee() {
        bitField0_ = (bitField0_ & ~0x00000800);
        isTrustee_ = false;
        onChanged();
        return this;
      }

      // optional int64 money = 13;
      private long money_ ;
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public boolean hasMoney() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public long getMoney() {
        return money_;
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public Builder setMoney(long value) {
        bitField0_ |= 0x00001000;
        money_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public Builder clearMoney() {
        bitField0_ = (bitField0_ & ~0x00001000);
        money_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 gold = 14;
      private long gold_ ;
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public boolean hasGold() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public long getGold() {
        return gold_;
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public Builder setGold(long value) {
        bitField0_ |= 0x00002000;
        gold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public Builder clearGold() {
        bitField0_ = (bitField0_ & ~0x00002000);
        gold_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 you = 15;
      private int you_ ;
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       * 游数
       * </pre>
       */
      public boolean hasYou() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       * 游数
       * </pre>
       */
      public int getYou() {
        return you_;
      }
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       * 游数
       * </pre>
       */
      public Builder setYou(int value) {
        bitField0_ |= 0x00004000;
        you_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       * 游数
       * </pre>
       */
      public Builder clearYou() {
        bitField0_ = (bitField0_ & ~0x00004000);
        you_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pdk.RoomPlayerResponseYYQF)
    }

    static {
      defaultInstance = new RoomPlayerResponseYYQF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pdk.RoomPlayerResponseYYQF)
  }

  public interface RefreshCardsYYQFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_count = 1;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pdk.RefreshCardsYYQF}
   *
   * <pre>
   *刷新用户扑克
   * </pre>
   */
  public static final class RefreshCardsYYQF extends
      com.google.protobuf.GeneratedMessage
      implements RefreshCardsYYQFOrBuilder {
    // Use RefreshCardsYYQF.newBuilder() to construct.
    private RefreshCardsYYQF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshCardsYYQF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshCardsYYQF defaultInstance;
    public static RefreshCardsYYQF getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshCardsYYQF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshCardsYYQF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RefreshCardsYYQF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RefreshCardsYYQF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF.class, protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshCardsYYQF> PARSER =
        new com.google.protobuf.AbstractParser<RefreshCardsYYQF>() {
      public RefreshCardsYYQF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshCardsYYQF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshCardsYYQF> getParserForType() {
      return PARSER;
    }

    // repeated int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    private void initFields() {
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(1, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pdk.RefreshCardsYYQF}
     *
     * <pre>
     *刷新用户扑克
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RefreshCardsYYQF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RefreshCardsYYQF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF.class, protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF.Builder.class);
      }

      // Construct using protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_RefreshCardsYYQF_descriptor;
      }

      public protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF getDefaultInstanceForType() {
        return protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF.getDefaultInstance();
      }

      public protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF build() {
        protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF buildPartial() {
        protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF result = new protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF) {
          return mergeFrom((protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF other) {
        if (other == protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF.getDefaultInstance()) return this;
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yyqf.YYQFRsp.RefreshCardsYYQF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_count = 1;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pdk.RefreshCardsYYQF)
    }

    static {
      defaultInstance = new RefreshCardsYYQF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pdk.RefreshCardsYYQF)
  }

  public interface OutCardDataYYQFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // repeated int32 change_cards_data = 3;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getChangeCardsDataList();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsData(int index);

    // optional int32 cards_count = 4;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 5;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 6;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 7;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_change_cards_data = 8;
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // optional int32 pr_cards_count = 9;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 10;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional bool is_first_out = 11;
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    boolean getIsFirstOut();

    // optional int32 display_time = 12;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 you = 13;
    /**
     * <code>optional int32 you = 13;</code>
     *
     * <pre>
     *默认为0 。大于1代表出牌完了。 xx游
     * </pre>
     */
    boolean hasYou();
    /**
     * <code>optional int32 you = 13;</code>
     *
     * <pre>
     *默认为0 。大于1代表出牌完了。 xx游
     * </pre>
     */
    int getYou();

    // optional bool isNewTurn = 14;
    /**
     * <code>optional bool isNewTurn = 14;</code>
     *
     * <pre>
     * 是不是新的一轮
     * </pre>
     */
    boolean hasIsNewTurn();
    /**
     * <code>optional bool isNewTurn = 14;</code>
     *
     * <pre>
     * 是不是新的一轮
     * </pre>
     */
    boolean getIsNewTurn();

    // repeated int32 score_card = 15;
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    java.util.List<java.lang.Integer> getScoreCardList();
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    int getScoreCardCount();
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    int getScoreCard(int index);

    // optional int32 score_turn = 16;
    /**
     * <code>optional int32 score_turn = 16;</code>
     *
     * <pre>
     *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
     * </pre>
     */
    boolean hasScoreTurn();
    /**
     * <code>optional int32 score_turn = 16;</code>
     *
     * <pre>
     *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
     * </pre>
     */
    int getScoreTurn();

    // repeated int32 player_scores = 17;
    /**
     * <code>repeated int32 player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerScoresList();
    /**
     * <code>repeated int32 player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    int getPlayerScoresCount();
    /**
     * <code>repeated int32 player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    int getPlayerScores(int index);

    // repeated int32 round_scores = 18;
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundScoresList();
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    int getRoundScoresCount();
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    int getRoundScores(int index);

    // repeated int32 total_scores = 19;
    /**
     * <code>repeated int32 total_scores = 19;</code>
     *
     * <pre>
     *总得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getTotalScoresList();
    /**
     * <code>repeated int32 total_scores = 19;</code>
     *
     * <pre>
     *总得分
     * </pre>
     */
    int getTotalScoresCount();
    /**
     * <code>repeated int32 total_scores = 19;</code>
     *
     * <pre>
     *总得分
     * </pre>
     */
    int getTotalScores(int index);

    // repeated int32 round_boom_scores = 20;
    /**
     * <code>repeated int32 round_boom_scores = 20;</code>
     *
     * <pre>
     *当局炸弹分数 持续更新
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundBoomScoresList();
    /**
     * <code>repeated int32 round_boom_scores = 20;</code>
     *
     * <pre>
     *当局炸弹分数 持续更新
     * </pre>
     */
    int getRoundBoomScoresCount();
    /**
     * <code>repeated int32 round_boom_scores = 20;</code>
     *
     * <pre>
     *当局炸弹分数 持续更新
     * </pre>
     */
    int getRoundBoomScores(int index);

    // repeated int32 total_boom_scores = 21;
    /**
     * <code>repeated int32 total_boom_scores = 21;</code>
     *
     * <pre>
     *每个玩家的总炸弹分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getTotalBoomScoresList();
    /**
     * <code>repeated int32 total_boom_scores = 21;</code>
     *
     * <pre>
     *每个玩家的总炸弹分数
     * </pre>
     */
    int getTotalBoomScoresCount();
    /**
     * <code>repeated int32 total_boom_scores = 21;</code>
     *
     * <pre>
     *每个玩家的总炸弹分数
     * </pre>
     */
    int getTotalBoomScores(int index);
  }
  /**
   * Protobuf type {@code pdk.OutCardDataYYQF}
   *
   * <pre>
   *用户出牌
   * </pre>
   */
  public static final class OutCardDataYYQF extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataYYQFOrBuilder {
    // Use OutCardDataYYQF.newBuilder() to construct.
    private OutCardDataYYQF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataYYQF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataYYQF defaultInstance;
    public static OutCardDataYYQF getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataYYQF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataYYQF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              changeCardsData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                changeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000100;
              you_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000200;
              isNewTurn_ = input.readBool();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                scoreCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              scoreCard_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                scoreCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                scoreCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              bitField0_ |= 0x00000400;
              scoreTurn_ = input.readInt32();
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                playerScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              playerScores_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                playerScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                roundScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              roundScores_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                roundScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                roundScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                totalScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              totalScores_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                totalScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                totalScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                roundBoomScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              roundBoomScores_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                roundBoomScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                roundBoomScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                totalBoomScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              totalBoomScores_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                totalBoomScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                totalBoomScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          scoreCard_ = java.util.Collections.unmodifiableList(scoreCard_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          playerScores_ = java.util.Collections.unmodifiableList(playerScores_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          roundScores_ = java.util.Collections.unmodifiableList(roundScores_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          totalScores_ = java.util.Collections.unmodifiableList(totalScores_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          roundBoomScores_ = java.util.Collections.unmodifiableList(roundBoomScores_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          totalBoomScores_ = java.util.Collections.unmodifiableList(totalBoomScores_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_OutCardDataYYQF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_OutCardDataYYQF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF.class, protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataYYQF> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataYYQF>() {
      public OutCardDataYYQF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataYYQF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataYYQF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // repeated int32 change_cards_data = 3;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> changeCardsData_;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }

    // optional int32 cards_count = 4;
    public static final int CARDS_COUNT_FIELD_NUMBER = 4;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 5;
    public static final int CARD_TYPE_FIELD_NUMBER = 5;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 6;
    public static final int CUR_PLAYER_FIELD_NUMBER = 6;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 7;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_change_cards_data = 8;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 9;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 9;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 10;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 10;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional bool is_first_out = 11;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 11;
    private boolean isFirstOut_;
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public boolean getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 12;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 12;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 you = 13;
    public static final int YOU_FIELD_NUMBER = 13;
    private int you_;
    /**
     * <code>optional int32 you = 13;</code>
     *
     * <pre>
     *默认为0 。大于1代表出牌完了。 xx游
     * </pre>
     */
    public boolean hasYou() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 you = 13;</code>
     *
     * <pre>
     *默认为0 。大于1代表出牌完了。 xx游
     * </pre>
     */
    public int getYou() {
      return you_;
    }

    // optional bool isNewTurn = 14;
    public static final int ISNEWTURN_FIELD_NUMBER = 14;
    private boolean isNewTurn_;
    /**
     * <code>optional bool isNewTurn = 14;</code>
     *
     * <pre>
     * 是不是新的一轮
     * </pre>
     */
    public boolean hasIsNewTurn() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool isNewTurn = 14;</code>
     *
     * <pre>
     * 是不是新的一轮
     * </pre>
     */
    public boolean getIsNewTurn() {
      return isNewTurn_;
    }

    // repeated int32 score_card = 15;
    public static final int SCORE_CARD_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> scoreCard_;
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getScoreCardList() {
      return scoreCard_;
    }
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    public int getScoreCardCount() {
      return scoreCard_.size();
    }
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    public int getScoreCard(int index) {
      return scoreCard_.get(index);
    }

    // optional int32 score_turn = 16;
    public static final int SCORE_TURN_FIELD_NUMBER = 16;
    private int scoreTurn_;
    /**
     * <code>optional int32 score_turn = 16;</code>
     *
     * <pre>
     *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
     * </pre>
     */
    public boolean hasScoreTurn() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 score_turn = 16;</code>
     *
     * <pre>
     *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
     * </pre>
     */
    public int getScoreTurn() {
      return scoreTurn_;
    }

    // repeated int32 player_scores = 17;
    public static final int PLAYER_SCORES_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> playerScores_;
    /**
     * <code>repeated int32 player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerScoresList() {
      return playerScores_;
    }
    /**
     * <code>repeated int32 player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    public int getPlayerScoresCount() {
      return playerScores_.size();
    }
    /**
     * <code>repeated int32 player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    public int getPlayerScores(int index) {
      return playerScores_.get(index);
    }

    // repeated int32 round_scores = 18;
    public static final int ROUND_SCORES_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> roundScores_;
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundScoresList() {
      return roundScores_;
    }
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    public int getRoundScoresCount() {
      return roundScores_.size();
    }
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    public int getRoundScores(int index) {
      return roundScores_.get(index);
    }

    // repeated int32 total_scores = 19;
    public static final int TOTAL_SCORES_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> totalScores_;
    /**
     * <code>repeated int32 total_scores = 19;</code>
     *
     * <pre>
     *总得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTotalScoresList() {
      return totalScores_;
    }
    /**
     * <code>repeated int32 total_scores = 19;</code>
     *
     * <pre>
     *总得分
     * </pre>
     */
    public int getTotalScoresCount() {
      return totalScores_.size();
    }
    /**
     * <code>repeated int32 total_scores = 19;</code>
     *
     * <pre>
     *总得分
     * </pre>
     */
    public int getTotalScores(int index) {
      return totalScores_.get(index);
    }

    // repeated int32 round_boom_scores = 20;
    public static final int ROUND_BOOM_SCORES_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> roundBoomScores_;
    /**
     * <code>repeated int32 round_boom_scores = 20;</code>
     *
     * <pre>
     *当局炸弹分数 持续更新
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundBoomScoresList() {
      return roundBoomScores_;
    }
    /**
     * <code>repeated int32 round_boom_scores = 20;</code>
     *
     * <pre>
     *当局炸弹分数 持续更新
     * </pre>
     */
    public int getRoundBoomScoresCount() {
      return roundBoomScores_.size();
    }
    /**
     * <code>repeated int32 round_boom_scores = 20;</code>
     *
     * <pre>
     *当局炸弹分数 持续更新
     * </pre>
     */
    public int getRoundBoomScores(int index) {
      return roundBoomScores_.get(index);
    }

    // repeated int32 total_boom_scores = 21;
    public static final int TOTAL_BOOM_SCORES_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> totalBoomScores_;
    /**
     * <code>repeated int32 total_boom_scores = 21;</code>
     *
     * <pre>
     *每个玩家的总炸弹分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTotalBoomScoresList() {
      return totalBoomScores_;
    }
    /**
     * <code>repeated int32 total_boom_scores = 21;</code>
     *
     * <pre>
     *每个玩家的总炸弹分数
     * </pre>
     */
    public int getTotalBoomScoresCount() {
      return totalBoomScores_.size();
    }
    /**
     * <code>repeated int32 total_boom_scores = 21;</code>
     *
     * <pre>
     *每个玩家的总炸弹分数
     * </pre>
     */
    public int getTotalBoomScores(int index) {
      return totalBoomScores_.get(index);
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = false;
      displayTime_ = 0;
      you_ = 0;
      isNewTurn_ = false;
      scoreCard_ = java.util.Collections.emptyList();
      scoreTurn_ = 0;
      playerScores_ = java.util.Collections.emptyList();
      roundScores_ = java.util.Collections.emptyList();
      totalScores_ = java.util.Collections.emptyList();
      roundBoomScores_ = java.util.Collections.emptyList();
      totalBoomScores_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeInt32(3, changeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(7, prCardsData_.get(i));
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(8, prChangeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(11, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(13, you_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(14, isNewTurn_);
      }
      for (int i = 0; i < scoreCard_.size(); i++) {
        output.writeInt32(15, scoreCard_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(16, scoreTurn_);
      }
      for (int i = 0; i < playerScores_.size(); i++) {
        output.writeInt32(17, playerScores_.get(i));
      }
      for (int i = 0; i < roundScores_.size(); i++) {
        output.writeInt32(18, roundScores_.get(i));
      }
      for (int i = 0; i < totalScores_.size(); i++) {
        output.writeInt32(19, totalScores_.get(i));
      }
      for (int i = 0; i < roundBoomScores_.size(); i++) {
        output.writeInt32(20, roundBoomScores_.get(i));
      }
      for (int i = 0; i < totalBoomScores_.size(); i++) {
        output.writeInt32(21, totalBoomScores_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < changeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(changeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, you_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, isNewTurn_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < scoreCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(scoreCard_.get(i));
        }
        size += dataSize;
        size += 1 * getScoreCardList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, scoreTurn_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerScores_.get(i));
        }
        size += dataSize;
        size += 2 * getPlayerScoresList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(roundScores_.get(i));
        }
        size += dataSize;
        size += 2 * getRoundScoresList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < totalScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(totalScores_.get(i));
        }
        size += dataSize;
        size += 2 * getTotalScoresList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundBoomScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(roundBoomScores_.get(i));
        }
        size += dataSize;
        size += 2 * getRoundBoomScoresList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < totalBoomScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(totalBoomScores_.get(i));
        }
        size += dataSize;
        size += 2 * getTotalBoomScoresList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pdk.OutCardDataYYQF}
     *
     * <pre>
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_OutCardDataYYQF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_OutCardDataYYQF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF.class, protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF.Builder.class);
      }

      // Construct using protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        isFirstOut_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        you_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        isNewTurn_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        scoreCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        scoreTurn_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        playerScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        roundScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        totalScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        roundBoomScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        totalBoomScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_OutCardDataYYQF_descriptor;
      }

      public protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF getDefaultInstanceForType() {
        return protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF.getDefaultInstance();
      }

      public protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF build() {
        protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF buildPartial() {
        protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF result = new protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.changeCardsData_ = changeCardsData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.you_ = you_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isNewTurn_ = isNewTurn_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          scoreCard_ = java.util.Collections.unmodifiableList(scoreCard_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.scoreCard_ = scoreCard_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.scoreTurn_ = scoreTurn_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          playerScores_ = java.util.Collections.unmodifiableList(playerScores_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.playerScores_ = playerScores_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          roundScores_ = java.util.Collections.unmodifiableList(roundScores_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.roundScores_ = roundScores_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          totalScores_ = java.util.Collections.unmodifiableList(totalScores_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.totalScores_ = totalScores_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          roundBoomScores_ = java.util.Collections.unmodifiableList(roundBoomScores_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.roundBoomScores_ = roundBoomScores_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          totalBoomScores_ = java.util.Collections.unmodifiableList(totalBoomScores_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.totalBoomScores_ = totalBoomScores_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF) {
          return mergeFrom((protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF other) {
        if (other == protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (!other.changeCardsData_.isEmpty()) {
          if (changeCardsData_.isEmpty()) {
            changeCardsData_ = other.changeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChangeCardsDataIsMutable();
            changeCardsData_.addAll(other.changeCardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasYou()) {
          setYou(other.getYou());
        }
        if (other.hasIsNewTurn()) {
          setIsNewTurn(other.getIsNewTurn());
        }
        if (!other.scoreCard_.isEmpty()) {
          if (scoreCard_.isEmpty()) {
            scoreCard_ = other.scoreCard_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureScoreCardIsMutable();
            scoreCard_.addAll(other.scoreCard_);
          }
          onChanged();
        }
        if (other.hasScoreTurn()) {
          setScoreTurn(other.getScoreTurn());
        }
        if (!other.playerScores_.isEmpty()) {
          if (playerScores_.isEmpty()) {
            playerScores_ = other.playerScores_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensurePlayerScoresIsMutable();
            playerScores_.addAll(other.playerScores_);
          }
          onChanged();
        }
        if (!other.roundScores_.isEmpty()) {
          if (roundScores_.isEmpty()) {
            roundScores_ = other.roundScores_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureRoundScoresIsMutable();
            roundScores_.addAll(other.roundScores_);
          }
          onChanged();
        }
        if (!other.totalScores_.isEmpty()) {
          if (totalScores_.isEmpty()) {
            totalScores_ = other.totalScores_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureTotalScoresIsMutable();
            totalScores_.addAll(other.totalScores_);
          }
          onChanged();
        }
        if (!other.roundBoomScores_.isEmpty()) {
          if (roundBoomScores_.isEmpty()) {
            roundBoomScores_ = other.roundBoomScores_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureRoundBoomScoresIsMutable();
            roundBoomScores_.addAll(other.roundBoomScores_);
          }
          onChanged();
        }
        if (!other.totalBoomScores_.isEmpty()) {
          if (totalBoomScores_.isEmpty()) {
            totalBoomScores_ = other.totalBoomScores_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureTotalBoomScoresIsMutable();
            totalBoomScores_.addAll(other.totalBoomScores_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yyqf.YYQFRsp.OutCardDataYYQF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 change_cards_data = 3;
      private java.util.List<java.lang.Integer> changeCardsData_ = java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = new java.util.ArrayList<java.lang.Integer>(changeCardsData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(changeCardsData_);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        return changeCardsData_.size();
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsData(int index) {
        return changeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChangeCardsDataIsMutable();
        super.addAll(values, changeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 4;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000008;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 5;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 6;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000020;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 7;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 8;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 9;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000100;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 10;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000200;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_first_out = 11;
      private boolean isFirstOut_ ;
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public boolean getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder setIsFirstOut(boolean value) {
        bitField0_ |= 0x00000400;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isFirstOut_ = false;
        onChanged();
        return this;
      }

      // optional int32 display_time = 12;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000800;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 you = 13;
      private int you_ ;
      /**
       * <code>optional int32 you = 13;</code>
       *
       * <pre>
       *默认为0 。大于1代表出牌完了。 xx游
       * </pre>
       */
      public boolean hasYou() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 you = 13;</code>
       *
       * <pre>
       *默认为0 。大于1代表出牌完了。 xx游
       * </pre>
       */
      public int getYou() {
        return you_;
      }
      /**
       * <code>optional int32 you = 13;</code>
       *
       * <pre>
       *默认为0 。大于1代表出牌完了。 xx游
       * </pre>
       */
      public Builder setYou(int value) {
        bitField0_ |= 0x00001000;
        you_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 you = 13;</code>
       *
       * <pre>
       *默认为0 。大于1代表出牌完了。 xx游
       * </pre>
       */
      public Builder clearYou() {
        bitField0_ = (bitField0_ & ~0x00001000);
        you_ = 0;
        onChanged();
        return this;
      }

      // optional bool isNewTurn = 14;
      private boolean isNewTurn_ ;
      /**
       * <code>optional bool isNewTurn = 14;</code>
       *
       * <pre>
       * 是不是新的一轮
       * </pre>
       */
      public boolean hasIsNewTurn() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bool isNewTurn = 14;</code>
       *
       * <pre>
       * 是不是新的一轮
       * </pre>
       */
      public boolean getIsNewTurn() {
        return isNewTurn_;
      }
      /**
       * <code>optional bool isNewTurn = 14;</code>
       *
       * <pre>
       * 是不是新的一轮
       * </pre>
       */
      public Builder setIsNewTurn(boolean value) {
        bitField0_ |= 0x00002000;
        isNewTurn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isNewTurn = 14;</code>
       *
       * <pre>
       * 是不是新的一轮
       * </pre>
       */
      public Builder clearIsNewTurn() {
        bitField0_ = (bitField0_ & ~0x00002000);
        isNewTurn_ = false;
        onChanged();
        return this;
      }

      // repeated int32 score_card = 15;
      private java.util.List<java.lang.Integer> scoreCard_ = java.util.Collections.emptyList();
      private void ensureScoreCardIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          scoreCard_ = new java.util.ArrayList<java.lang.Integer>(scoreCard_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getScoreCardList() {
        return java.util.Collections.unmodifiableList(scoreCard_);
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public int getScoreCardCount() {
        return scoreCard_.size();
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public int getScoreCard(int index) {
        return scoreCard_.get(index);
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public Builder setScoreCard(
          int index, int value) {
        ensureScoreCardIsMutable();
        scoreCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public Builder addScoreCard(int value) {
        ensureScoreCardIsMutable();
        scoreCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public Builder addAllScoreCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureScoreCardIsMutable();
        super.addAll(values, scoreCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public Builder clearScoreCard() {
        scoreCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // optional int32 score_turn = 16;
      private int scoreTurn_ ;
      /**
       * <code>optional int32 score_turn = 16;</code>
       *
       * <pre>
       *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
       * </pre>
       */
      public boolean hasScoreTurn() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 score_turn = 16;</code>
       *
       * <pre>
       *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
       * </pre>
       */
      public int getScoreTurn() {
        return scoreTurn_;
      }
      /**
       * <code>optional int32 score_turn = 16;</code>
       *
       * <pre>
       *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
       * </pre>
       */
      public Builder setScoreTurn(int value) {
        bitField0_ |= 0x00008000;
        scoreTurn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score_turn = 16;</code>
       *
       * <pre>
       *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
       * </pre>
       */
      public Builder clearScoreTurn() {
        bitField0_ = (bitField0_ & ~0x00008000);
        scoreTurn_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 player_scores = 17;
      private java.util.List<java.lang.Integer> playerScores_ = java.util.Collections.emptyList();
      private void ensurePlayerScoresIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          playerScores_ = new java.util.ArrayList<java.lang.Integer>(playerScores_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated int32 player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerScoresList() {
        return java.util.Collections.unmodifiableList(playerScores_);
      }
      /**
       * <code>repeated int32 player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public int getPlayerScoresCount() {
        return playerScores_.size();
      }
      /**
       * <code>repeated int32 player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public int getPlayerScores(int index) {
        return playerScores_.get(index);
      }
      /**
       * <code>repeated int32 player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder setPlayerScores(
          int index, int value) {
        ensurePlayerScoresIsMutable();
        playerScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder addPlayerScores(int value) {
        ensurePlayerScoresIsMutable();
        playerScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder addAllPlayerScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerScoresIsMutable();
        super.addAll(values, playerScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder clearPlayerScores() {
        playerScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      // repeated int32 round_scores = 18;
      private java.util.List<java.lang.Integer> roundScores_ = java.util.Collections.emptyList();
      private void ensureRoundScoresIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          roundScores_ = new java.util.ArrayList<java.lang.Integer>(roundScores_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundScoresList() {
        return java.util.Collections.unmodifiableList(roundScores_);
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public int getRoundScoresCount() {
        return roundScores_.size();
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public int getRoundScores(int index) {
        return roundScores_.get(index);
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public Builder setRoundScores(
          int index, int value) {
        ensureRoundScoresIsMutable();
        roundScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public Builder addRoundScores(int value) {
        ensureRoundScoresIsMutable();
        roundScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public Builder addAllRoundScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundScoresIsMutable();
        super.addAll(values, roundScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public Builder clearRoundScores() {
        roundScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // repeated int32 total_scores = 19;
      private java.util.List<java.lang.Integer> totalScores_ = java.util.Collections.emptyList();
      private void ensureTotalScoresIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          totalScores_ = new java.util.ArrayList<java.lang.Integer>(totalScores_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 total_scores = 19;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTotalScoresList() {
        return java.util.Collections.unmodifiableList(totalScores_);
      }
      /**
       * <code>repeated int32 total_scores = 19;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public int getTotalScoresCount() {
        return totalScores_.size();
      }
      /**
       * <code>repeated int32 total_scores = 19;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public int getTotalScores(int index) {
        return totalScores_.get(index);
      }
      /**
       * <code>repeated int32 total_scores = 19;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public Builder setTotalScores(
          int index, int value) {
        ensureTotalScoresIsMutable();
        totalScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 total_scores = 19;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public Builder addTotalScores(int value) {
        ensureTotalScoresIsMutable();
        totalScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 total_scores = 19;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public Builder addAllTotalScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTotalScoresIsMutable();
        super.addAll(values, totalScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 total_scores = 19;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public Builder clearTotalScores() {
        totalScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // repeated int32 round_boom_scores = 20;
      private java.util.List<java.lang.Integer> roundBoomScores_ = java.util.Collections.emptyList();
      private void ensureRoundBoomScoresIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          roundBoomScores_ = new java.util.ArrayList<java.lang.Integer>(roundBoomScores_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 round_boom_scores = 20;</code>
       *
       * <pre>
       *当局炸弹分数 持续更新
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundBoomScoresList() {
        return java.util.Collections.unmodifiableList(roundBoomScores_);
      }
      /**
       * <code>repeated int32 round_boom_scores = 20;</code>
       *
       * <pre>
       *当局炸弹分数 持续更新
       * </pre>
       */
      public int getRoundBoomScoresCount() {
        return roundBoomScores_.size();
      }
      /**
       * <code>repeated int32 round_boom_scores = 20;</code>
       *
       * <pre>
       *当局炸弹分数 持续更新
       * </pre>
       */
      public int getRoundBoomScores(int index) {
        return roundBoomScores_.get(index);
      }
      /**
       * <code>repeated int32 round_boom_scores = 20;</code>
       *
       * <pre>
       *当局炸弹分数 持续更新
       * </pre>
       */
      public Builder setRoundBoomScores(
          int index, int value) {
        ensureRoundBoomScoresIsMutable();
        roundBoomScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_boom_scores = 20;</code>
       *
       * <pre>
       *当局炸弹分数 持续更新
       * </pre>
       */
      public Builder addRoundBoomScores(int value) {
        ensureRoundBoomScoresIsMutable();
        roundBoomScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_boom_scores = 20;</code>
       *
       * <pre>
       *当局炸弹分数 持续更新
       * </pre>
       */
      public Builder addAllRoundBoomScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundBoomScoresIsMutable();
        super.addAll(values, roundBoomScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_boom_scores = 20;</code>
       *
       * <pre>
       *当局炸弹分数 持续更新
       * </pre>
       */
      public Builder clearRoundBoomScores() {
        roundBoomScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // repeated int32 total_boom_scores = 21;
      private java.util.List<java.lang.Integer> totalBoomScores_ = java.util.Collections.emptyList();
      private void ensureTotalBoomScoresIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          totalBoomScores_ = new java.util.ArrayList<java.lang.Integer>(totalBoomScores_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 total_boom_scores = 21;</code>
       *
       * <pre>
       *每个玩家的总炸弹分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTotalBoomScoresList() {
        return java.util.Collections.unmodifiableList(totalBoomScores_);
      }
      /**
       * <code>repeated int32 total_boom_scores = 21;</code>
       *
       * <pre>
       *每个玩家的总炸弹分数
       * </pre>
       */
      public int getTotalBoomScoresCount() {
        return totalBoomScores_.size();
      }
      /**
       * <code>repeated int32 total_boom_scores = 21;</code>
       *
       * <pre>
       *每个玩家的总炸弹分数
       * </pre>
       */
      public int getTotalBoomScores(int index) {
        return totalBoomScores_.get(index);
      }
      /**
       * <code>repeated int32 total_boom_scores = 21;</code>
       *
       * <pre>
       *每个玩家的总炸弹分数
       * </pre>
       */
      public Builder setTotalBoomScores(
          int index, int value) {
        ensureTotalBoomScoresIsMutable();
        totalBoomScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 total_boom_scores = 21;</code>
       *
       * <pre>
       *每个玩家的总炸弹分数
       * </pre>
       */
      public Builder addTotalBoomScores(int value) {
        ensureTotalBoomScoresIsMutable();
        totalBoomScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 total_boom_scores = 21;</code>
       *
       * <pre>
       *每个玩家的总炸弹分数
       * </pre>
       */
      public Builder addAllTotalBoomScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTotalBoomScoresIsMutable();
        super.addAll(values, totalBoomScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 total_boom_scores = 21;</code>
       *
       * <pre>
       *每个玩家的总炸弹分数
       * </pre>
       */
      public Builder clearTotalBoomScores() {
        totalBoomScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pdk.OutCardDataYYQF)
    }

    static {
      defaultInstance = new OutCardDataYYQF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pdk.OutCardDataYYQF)
  }

  public interface PukeGameEndYYQFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .pdk.RoomInfoYYQF room_info = 1;
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF getRoomInfo();
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder getRoomInfoOrBuilder();

    // repeated int32 card_count = 2;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 3;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 boom_card_num = 4;
    /**
     * <code>repeated int32 boom_card_num = 4;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getBoomCardNumList();
    /**
     * <code>repeated int32 boom_card_num = 4;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    int getBoomCardNumCount();
    /**
     * <code>repeated int32 boom_card_num = 4;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    int getBoomCardNum(int index);

    // optional int32 player_num = 5;
    /**
     * <code>optional int32 player_num = 5;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 5;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 reason = 6;
    /**
     * <code>optional int32 reason = 6;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 6;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 you = 7;
    /**
     * <code>repeated int32 you = 7;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    java.util.List<java.lang.Integer> getYouList();
    /**
     * <code>repeated int32 you = 7;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    int getYouCount();
    /**
     * <code>repeated int32 you = 7;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    int getYou(int index);

    // repeated int32 score = 26;
    /**
     * <code>repeated int32 score = 26;</code>
     *
     * <pre>
     * 本局积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getScoreList();
    /**
     * <code>repeated int32 score = 26;</code>
     *
     * <pre>
     * 本局积分
     * </pre>
     */
    int getScoreCount();
    /**
     * <code>repeated int32 score = 26;</code>
     *
     * <pre>
     * 本局积分
     * </pre>
     */
    int getScore(int index);

    // repeated int32 end_score = 8;
    /**
     * <code>repeated int32 end_score = 8;</code>
     *
     * <pre>
     * 本局最终积分(累计积分)
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 8;</code>
     *
     * <pre>
     * 本局最终积分(累计积分)
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 8;</code>
     *
     * <pre>
     * 本局最终积分(累计积分)
     * </pre>
     */
    int getEndScore(int index);

    // repeated int32 round_extra_score = 9;
    /**
     * <code>repeated int32 round_extra_score = 9;</code>
     *
     * <pre>
     * 本局额外得分(奖分)
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundExtraScoreList();
    /**
     * <code>repeated int32 round_extra_score = 9;</code>
     *
     * <pre>
     * 本局额外得分(奖分)
     * </pre>
     */
    int getRoundExtraScoreCount();
    /**
     * <code>repeated int32 round_extra_score = 9;</code>
     *
     * <pre>
     * 本局额外得分(奖分)
     * </pre>
     */
    int getRoundExtraScore(int index);

    // repeated int32 boom_score = 10;
    /**
     * <code>repeated int32 boom_score = 10;</code>
     *
     * <pre>
     * 本局炸弹得分(喜分、累计喜分)
     * </pre>
     */
    java.util.List<java.lang.Integer> getBoomScoreList();
    /**
     * <code>repeated int32 boom_score = 10;</code>
     *
     * <pre>
     * 本局炸弹得分(喜分、累计喜分)
     * </pre>
     */
    int getBoomScoreCount();
    /**
     * <code>repeated int32 boom_score = 10;</code>
     *
     * <pre>
     * 本局炸弹得分(喜分、累计喜分)
     * </pre>
     */
    int getBoomScore(int index);

    // repeated int32 all_boom_score = 15;
    /**
     * <code>repeated int32 all_boom_score = 15;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllBoomScoreList();
    /**
     * <code>repeated int32 all_boom_score = 15;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllBoomScoreCount();
    /**
     * <code>repeated int32 all_boom_score = 15;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllBoomScore(int index);

    // repeated int32 all_extra_score = 27;
    /**
     * <code>repeated int32 all_extra_score = 27;</code>
     *
     * <pre>
     *总奖分(奖分)
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllExtraScoreList();
    /**
     * <code>repeated int32 all_extra_score = 27;</code>
     *
     * <pre>
     *总奖分(奖分)
     * </pre>
     */
    int getAllExtraScoreCount();
    /**
     * <code>repeated int32 all_extra_score = 27;</code>
     *
     * <pre>
     *总奖分(奖分)
     * </pre>
     */
    int getAllExtraScore(int index);

    // repeated int32 all_score = 28;
    /**
     * <code>repeated int32 all_score = 28;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllScoreList();
    /**
     * <code>repeated int32 all_score = 28;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getAllScoreCount();
    /**
     * <code>repeated int32 all_score = 28;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getAllScore(int index);

    // repeated int32 all_boom_card_num = 16;
    /**
     * <code>repeated int32 all_boom_card_num = 16;</code>
     *
     * <pre>
     *总炸弹数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllBoomCardNumList();
    /**
     * <code>repeated int32 all_boom_card_num = 16;</code>
     *
     * <pre>
     *总炸弹数量
     * </pre>
     */
    int getAllBoomCardNumCount();
    /**
     * <code>repeated int32 all_boom_card_num = 16;</code>
     *
     * <pre>
     *总炸弹数量
     * </pre>
     */
    int getAllBoomCardNum(int index);

    // repeated int32 all_end_score = 17;
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated int32 end_score_max = 18;
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreMaxList();
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMaxCount();
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMax(int index);

    // repeated int32 win_num = 19;
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinNumList();
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNumCount();
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNum(int index);

    // repeated int32 lose_num = 20;
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getLoseNumList();
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNumCount();
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNum(int index);

    // repeated .pdk.RoomPlayerResponseYYQF players = 21;
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> 
        getPlayersList();
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF getPlayers(int index);
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    java.util.List<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 final_score = 22;
    /**
     * <code>repeated int32 final_score = 22;</code>
     *
     * <pre>
     * 最终得分 = 总喜分 +总积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getFinalScoreList();
    /**
     * <code>repeated int32 final_score = 22;</code>
     *
     * <pre>
     * 最终得分 = 总喜分 +总积分
     * </pre>
     */
    int getFinalScoreCount();
    /**
     * <code>repeated int32 final_score = 22;</code>
     *
     * <pre>
     * 最终得分 = 总喜分 +总积分
     * </pre>
     */
    int getFinalScore(int index);

    // repeated int32 rounding_score = 23;
    /**
     * <code>repeated int32 rounding_score = 23;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundingScoreList();
    /**
     * <code>repeated int32 rounding_score = 23;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    int getRoundingScoreCount();
    /**
     * <code>repeated int32 rounding_score = 23;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    int getRoundingScore(int index);

    // repeated int32 rest_datas = 24;
    /**
     * <code>repeated int32 rest_datas = 24;</code>
     *
     * <pre>
     * 剩余卡牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getRestDatasList();
    /**
     * <code>repeated int32 rest_datas = 24;</code>
     *
     * <pre>
     * 剩余卡牌数据
     * </pre>
     */
    int getRestDatasCount();
    /**
     * <code>repeated int32 rest_datas = 24;</code>
     *
     * <pre>
     * 剩余卡牌数据
     * </pre>
     */
    int getRestDatas(int index);

    // optional int32 rest_count = 25;
    /**
     * <code>optional int32 rest_count = 25;</code>
     *
     * <pre>
     * 剩余卡牌数量
     * </pre>
     */
    boolean hasRestCount();
    /**
     * <code>optional int32 rest_count = 25;</code>
     *
     * <pre>
     * 剩余卡牌数量
     * </pre>
     */
    int getRestCount();

    // repeated int32 sys_score = 29;
    /**
     * <code>repeated int32 sys_score = 29;</code>
     *
     * <pre>
     * 系统计算
     * </pre>
     */
    java.util.List<java.lang.Integer> getSysScoreList();
    /**
     * <code>repeated int32 sys_score = 29;</code>
     *
     * <pre>
     * 系统计算
     * </pre>
     */
    int getSysScoreCount();
    /**
     * <code>repeated int32 sys_score = 29;</code>
     *
     * <pre>
     * 系统计算
     * </pre>
     */
    int getSysScore(int index);

    // optional int64 create_player_id = 30;
    /**
     * <code>optional int64 create_player_id = 30;</code>
     *
     * <pre>
     * 创建者ID
     * </pre>
     */
    boolean hasCreatePlayerId();
    /**
     * <code>optional int64 create_player_id = 30;</code>
     *
     * <pre>
     * 创建者ID
     * </pre>
     */
    long getCreatePlayerId();
  }
  /**
   * Protobuf type {@code pdk.PukeGameEndYYQF}
   *
   * <pre>
   *结算
   * </pre>
   */
  public static final class PukeGameEndYYQF extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndYYQFOrBuilder {
    // Use PukeGameEndYYQF.newBuilder() to construct.
    private PukeGameEndYYQF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndYYQF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndYYQF defaultInstance;
    public static PukeGameEndYYQF getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndYYQF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndYYQF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              boomCardNum_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                boomCardNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              playerNum_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              reason_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                you_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              you_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                you_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                you_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                roundExtraScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              roundExtraScore_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                roundExtraScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                roundExtraScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                boomScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              boomScore_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                boomScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                boomScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                allBoomScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              allBoomScore_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                allBoomScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                allBoomScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              allBoomCardNum_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allBoomCardNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              endScoreMax_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              winNum_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              loseNum_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                loseNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 170: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF>();
                mutable_bitField0_ |= 0x00080000;
              }
              players_.add(input.readMessage(protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.PARSER, extensionRegistry));
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                finalScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              finalScore_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                finalScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                finalScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                roundingScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              roundingScore_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                roundingScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                roundingScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                restDatas_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              restDatas_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                restDatas_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                restDatas_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 200: {
              bitField0_ |= 0x00000008;
              restCount_ = input.readInt32();
              break;
            }
            case 208: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                score_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              score_.add(input.readInt32());
              break;
            }
            case 210: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                score_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                score_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 216: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                allExtraScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              allExtraScore_.add(input.readInt32());
              break;
            }
            case 218: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                allExtraScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allExtraScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 224: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                allScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              allScore_.add(input.readInt32());
              break;
            }
            case 226: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                allScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 232: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                sysScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              sysScore_.add(input.readInt32());
              break;
            }
            case 234: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                sysScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                sysScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 240: {
              bitField0_ |= 0x00000010;
              createPlayerId_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          you_ = java.util.Collections.unmodifiableList(you_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          roundExtraScore_ = java.util.Collections.unmodifiableList(roundExtraScore_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          boomScore_ = java.util.Collections.unmodifiableList(boomScore_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          allBoomScore_ = java.util.Collections.unmodifiableList(allBoomScore_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          allBoomCardNum_ = java.util.Collections.unmodifiableList(allBoomCardNum_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          finalScore_ = java.util.Collections.unmodifiableList(finalScore_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          roundingScore_ = java.util.Collections.unmodifiableList(roundingScore_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          restDatas_ = java.util.Collections.unmodifiableList(restDatas_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          score_ = java.util.Collections.unmodifiableList(score_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          allExtraScore_ = java.util.Collections.unmodifiableList(allExtraScore_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          allScore_ = java.util.Collections.unmodifiableList(allScore_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          sysScore_ = java.util.Collections.unmodifiableList(sysScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_PukeGameEndYYQF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_PukeGameEndYYQF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF.class, protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndYYQF> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndYYQF>() {
      public PukeGameEndYYQF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndYYQF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndYYQF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .pdk.RoomInfoYYQF room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF roomInfo_;
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 boom_card_num = 4;
    public static final int BOOM_CARD_NUM_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> boomCardNum_;
    /**
     * <code>repeated int32 boom_card_num = 4;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBoomCardNumList() {
      return boomCardNum_;
    }
    /**
     * <code>repeated int32 boom_card_num = 4;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public int getBoomCardNumCount() {
      return boomCardNum_.size();
    }
    /**
     * <code>repeated int32 boom_card_num = 4;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public int getBoomCardNum(int index) {
      return boomCardNum_.get(index);
    }

    // optional int32 player_num = 5;
    public static final int PLAYER_NUM_FIELD_NUMBER = 5;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 5;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 player_num = 5;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 reason = 6;
    public static final int REASON_FIELD_NUMBER = 6;
    private int reason_;
    /**
     * <code>optional int32 reason = 6;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 reason = 6;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 you = 7;
    public static final int YOU_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> you_;
    /**
     * <code>repeated int32 you = 7;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getYouList() {
      return you_;
    }
    /**
     * <code>repeated int32 you = 7;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    public int getYouCount() {
      return you_.size();
    }
    /**
     * <code>repeated int32 you = 7;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    public int getYou(int index) {
      return you_.get(index);
    }

    // repeated int32 score = 26;
    public static final int SCORE_FIELD_NUMBER = 26;
    private java.util.List<java.lang.Integer> score_;
    /**
     * <code>repeated int32 score = 26;</code>
     *
     * <pre>
     * 本局积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getScoreList() {
      return score_;
    }
    /**
     * <code>repeated int32 score = 26;</code>
     *
     * <pre>
     * 本局积分
     * </pre>
     */
    public int getScoreCount() {
      return score_.size();
    }
    /**
     * <code>repeated int32 score = 26;</code>
     *
     * <pre>
     * 本局积分
     * </pre>
     */
    public int getScore(int index) {
      return score_.get(index);
    }

    // repeated int32 end_score = 8;
    public static final int END_SCORE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 8;</code>
     *
     * <pre>
     * 本局最终积分(累计积分)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 8;</code>
     *
     * <pre>
     * 本局最终积分(累计积分)
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 8;</code>
     *
     * <pre>
     * 本局最终积分(累计积分)
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // repeated int32 round_extra_score = 9;
    public static final int ROUND_EXTRA_SCORE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> roundExtraScore_;
    /**
     * <code>repeated int32 round_extra_score = 9;</code>
     *
     * <pre>
     * 本局额外得分(奖分)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundExtraScoreList() {
      return roundExtraScore_;
    }
    /**
     * <code>repeated int32 round_extra_score = 9;</code>
     *
     * <pre>
     * 本局额外得分(奖分)
     * </pre>
     */
    public int getRoundExtraScoreCount() {
      return roundExtraScore_.size();
    }
    /**
     * <code>repeated int32 round_extra_score = 9;</code>
     *
     * <pre>
     * 本局额外得分(奖分)
     * </pre>
     */
    public int getRoundExtraScore(int index) {
      return roundExtraScore_.get(index);
    }

    // repeated int32 boom_score = 10;
    public static final int BOOM_SCORE_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> boomScore_;
    /**
     * <code>repeated int32 boom_score = 10;</code>
     *
     * <pre>
     * 本局炸弹得分(喜分、累计喜分)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBoomScoreList() {
      return boomScore_;
    }
    /**
     * <code>repeated int32 boom_score = 10;</code>
     *
     * <pre>
     * 本局炸弹得分(喜分、累计喜分)
     * </pre>
     */
    public int getBoomScoreCount() {
      return boomScore_.size();
    }
    /**
     * <code>repeated int32 boom_score = 10;</code>
     *
     * <pre>
     * 本局炸弹得分(喜分、累计喜分)
     * </pre>
     */
    public int getBoomScore(int index) {
      return boomScore_.get(index);
    }

    // repeated int32 all_boom_score = 15;
    public static final int ALL_BOOM_SCORE_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> allBoomScore_;
    /**
     * <code>repeated int32 all_boom_score = 15;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllBoomScoreList() {
      return allBoomScore_;
    }
    /**
     * <code>repeated int32 all_boom_score = 15;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllBoomScoreCount() {
      return allBoomScore_.size();
    }
    /**
     * <code>repeated int32 all_boom_score = 15;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllBoomScore(int index) {
      return allBoomScore_.get(index);
    }

    // repeated int32 all_extra_score = 27;
    public static final int ALL_EXTRA_SCORE_FIELD_NUMBER = 27;
    private java.util.List<java.lang.Integer> allExtraScore_;
    /**
     * <code>repeated int32 all_extra_score = 27;</code>
     *
     * <pre>
     *总奖分(奖分)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllExtraScoreList() {
      return allExtraScore_;
    }
    /**
     * <code>repeated int32 all_extra_score = 27;</code>
     *
     * <pre>
     *总奖分(奖分)
     * </pre>
     */
    public int getAllExtraScoreCount() {
      return allExtraScore_.size();
    }
    /**
     * <code>repeated int32 all_extra_score = 27;</code>
     *
     * <pre>
     *总奖分(奖分)
     * </pre>
     */
    public int getAllExtraScore(int index) {
      return allExtraScore_.get(index);
    }

    // repeated int32 all_score = 28;
    public static final int ALL_SCORE_FIELD_NUMBER = 28;
    private java.util.List<java.lang.Integer> allScore_;
    /**
     * <code>repeated int32 all_score = 28;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllScoreList() {
      return allScore_;
    }
    /**
     * <code>repeated int32 all_score = 28;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getAllScoreCount() {
      return allScore_.size();
    }
    /**
     * <code>repeated int32 all_score = 28;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getAllScore(int index) {
      return allScore_.get(index);
    }

    // repeated int32 all_boom_card_num = 16;
    public static final int ALL_BOOM_CARD_NUM_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> allBoomCardNum_;
    /**
     * <code>repeated int32 all_boom_card_num = 16;</code>
     *
     * <pre>
     *总炸弹数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllBoomCardNumList() {
      return allBoomCardNum_;
    }
    /**
     * <code>repeated int32 all_boom_card_num = 16;</code>
     *
     * <pre>
     *总炸弹数量
     * </pre>
     */
    public int getAllBoomCardNumCount() {
      return allBoomCardNum_.size();
    }
    /**
     * <code>repeated int32 all_boom_card_num = 16;</code>
     *
     * <pre>
     *总炸弹数量
     * </pre>
     */
    public int getAllBoomCardNum(int index) {
      return allBoomCardNum_.get(index);
    }

    // repeated int32 all_end_score = 17;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 end_score_max = 18;
    public static final int END_SCORE_MAX_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> endScoreMax_;
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreMaxList() {
      return endScoreMax_;
    }
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMaxCount() {
      return endScoreMax_.size();
    }
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMax(int index) {
      return endScoreMax_.get(index);
    }

    // repeated int32 win_num = 19;
    public static final int WIN_NUM_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> winNum_;
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinNumList() {
      return winNum_;
    }
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNumCount() {
      return winNum_.size();
    }
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNum(int index) {
      return winNum_.get(index);
    }

    // repeated int32 lose_num = 20;
    public static final int LOSE_NUM_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> loseNum_;
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLoseNumList() {
      return loseNum_;
    }
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNumCount() {
      return loseNum_.size();
    }
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNum(int index) {
      return loseNum_.get(index);
    }

    // repeated .pdk.RoomPlayerResponseYYQF players = 21;
    public static final int PLAYERS_FIELD_NUMBER = 21;
    private java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> players_;
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    public java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    public java.util.List<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 final_score = 22;
    public static final int FINAL_SCORE_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> finalScore_;
    /**
     * <code>repeated int32 final_score = 22;</code>
     *
     * <pre>
     * 最终得分 = 总喜分 +总积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getFinalScoreList() {
      return finalScore_;
    }
    /**
     * <code>repeated int32 final_score = 22;</code>
     *
     * <pre>
     * 最终得分 = 总喜分 +总积分
     * </pre>
     */
    public int getFinalScoreCount() {
      return finalScore_.size();
    }
    /**
     * <code>repeated int32 final_score = 22;</code>
     *
     * <pre>
     * 最终得分 = 总喜分 +总积分
     * </pre>
     */
    public int getFinalScore(int index) {
      return finalScore_.get(index);
    }

    // repeated int32 rounding_score = 23;
    public static final int ROUNDING_SCORE_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> roundingScore_;
    /**
     * <code>repeated int32 rounding_score = 23;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundingScoreList() {
      return roundingScore_;
    }
    /**
     * <code>repeated int32 rounding_score = 23;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    public int getRoundingScoreCount() {
      return roundingScore_.size();
    }
    /**
     * <code>repeated int32 rounding_score = 23;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    public int getRoundingScore(int index) {
      return roundingScore_.get(index);
    }

    // repeated int32 rest_datas = 24;
    public static final int REST_DATAS_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> restDatas_;
    /**
     * <code>repeated int32 rest_datas = 24;</code>
     *
     * <pre>
     * 剩余卡牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRestDatasList() {
      return restDatas_;
    }
    /**
     * <code>repeated int32 rest_datas = 24;</code>
     *
     * <pre>
     * 剩余卡牌数据
     * </pre>
     */
    public int getRestDatasCount() {
      return restDatas_.size();
    }
    /**
     * <code>repeated int32 rest_datas = 24;</code>
     *
     * <pre>
     * 剩余卡牌数据
     * </pre>
     */
    public int getRestDatas(int index) {
      return restDatas_.get(index);
    }

    // optional int32 rest_count = 25;
    public static final int REST_COUNT_FIELD_NUMBER = 25;
    private int restCount_;
    /**
     * <code>optional int32 rest_count = 25;</code>
     *
     * <pre>
     * 剩余卡牌数量
     * </pre>
     */
    public boolean hasRestCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 rest_count = 25;</code>
     *
     * <pre>
     * 剩余卡牌数量
     * </pre>
     */
    public int getRestCount() {
      return restCount_;
    }

    // repeated int32 sys_score = 29;
    public static final int SYS_SCORE_FIELD_NUMBER = 29;
    private java.util.List<java.lang.Integer> sysScore_;
    /**
     * <code>repeated int32 sys_score = 29;</code>
     *
     * <pre>
     * 系统计算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSysScoreList() {
      return sysScore_;
    }
    /**
     * <code>repeated int32 sys_score = 29;</code>
     *
     * <pre>
     * 系统计算
     * </pre>
     */
    public int getSysScoreCount() {
      return sysScore_.size();
    }
    /**
     * <code>repeated int32 sys_score = 29;</code>
     *
     * <pre>
     * 系统计算
     * </pre>
     */
    public int getSysScore(int index) {
      return sysScore_.get(index);
    }

    // optional int64 create_player_id = 30;
    public static final int CREATE_PLAYER_ID_FIELD_NUMBER = 30;
    private long createPlayerId_;
    /**
     * <code>optional int64 create_player_id = 30;</code>
     *
     * <pre>
     * 创建者ID
     * </pre>
     */
    public boolean hasCreatePlayerId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int64 create_player_id = 30;</code>
     *
     * <pre>
     * 创建者ID
     * </pre>
     */
    public long getCreatePlayerId() {
      return createPlayerId_;
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      boomCardNum_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      reason_ = 0;
      you_ = java.util.Collections.emptyList();
      score_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      roundExtraScore_ = java.util.Collections.emptyList();
      boomScore_ = java.util.Collections.emptyList();
      allBoomScore_ = java.util.Collections.emptyList();
      allExtraScore_ = java.util.Collections.emptyList();
      allScore_ = java.util.Collections.emptyList();
      allBoomCardNum_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      endScoreMax_ = java.util.Collections.emptyList();
      winNum_ = java.util.Collections.emptyList();
      loseNum_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
      finalScore_ = java.util.Collections.emptyList();
      roundingScore_ = java.util.Collections.emptyList();
      restDatas_ = java.util.Collections.emptyList();
      restCount_ = 0;
      sysScore_ = java.util.Collections.emptyList();
      createPlayerId_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(2, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(3, cardsData_.get(i));
      }
      for (int i = 0; i < boomCardNum_.size(); i++) {
        output.writeInt32(4, boomCardNum_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(5, playerNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(6, reason_);
      }
      for (int i = 0; i < you_.size(); i++) {
        output.writeInt32(7, you_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(8, endScore_.get(i));
      }
      for (int i = 0; i < roundExtraScore_.size(); i++) {
        output.writeInt32(9, roundExtraScore_.get(i));
      }
      for (int i = 0; i < boomScore_.size(); i++) {
        output.writeInt32(10, boomScore_.get(i));
      }
      for (int i = 0; i < allBoomScore_.size(); i++) {
        output.writeInt32(15, allBoomScore_.get(i));
      }
      for (int i = 0; i < allBoomCardNum_.size(); i++) {
        output.writeInt32(16, allBoomCardNum_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(17, allEndScore_.get(i));
      }
      for (int i = 0; i < endScoreMax_.size(); i++) {
        output.writeInt32(18, endScoreMax_.get(i));
      }
      for (int i = 0; i < winNum_.size(); i++) {
        output.writeInt32(19, winNum_.get(i));
      }
      for (int i = 0; i < loseNum_.size(); i++) {
        output.writeInt32(20, loseNum_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(21, players_.get(i));
      }
      for (int i = 0; i < finalScore_.size(); i++) {
        output.writeInt32(22, finalScore_.get(i));
      }
      for (int i = 0; i < roundingScore_.size(); i++) {
        output.writeInt32(23, roundingScore_.get(i));
      }
      for (int i = 0; i < restDatas_.size(); i++) {
        output.writeInt32(24, restDatas_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(25, restCount_);
      }
      for (int i = 0; i < score_.size(); i++) {
        output.writeInt32(26, score_.get(i));
      }
      for (int i = 0; i < allExtraScore_.size(); i++) {
        output.writeInt32(27, allExtraScore_.get(i));
      }
      for (int i = 0; i < allScore_.size(); i++) {
        output.writeInt32(28, allScore_.get(i));
      }
      for (int i = 0; i < sysScore_.size(); i++) {
        output.writeInt32(29, sysScore_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt64(30, createPlayerId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boomCardNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boomCardNum_.get(i));
        }
        size += dataSize;
        size += 1 * getBoomCardNumList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, playerNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < you_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(you_.get(i));
        }
        size += dataSize;
        size += 1 * getYouList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundExtraScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(roundExtraScore_.get(i));
        }
        size += dataSize;
        size += 1 * getRoundExtraScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boomScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boomScore_.get(i));
        }
        size += dataSize;
        size += 1 * getBoomScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allBoomScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allBoomScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllBoomScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allBoomCardNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allBoomCardNum_.get(i));
        }
        size += dataSize;
        size += 2 * getAllBoomCardNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 2 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScoreMax_.get(i));
        }
        size += dataSize;
        size += 2 * getEndScoreMaxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winNum_.get(i));
        }
        size += dataSize;
        size += 2 * getWinNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < loseNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(loseNum_.get(i));
        }
        size += dataSize;
        size += 2 * getLoseNumList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < finalScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(finalScore_.get(i));
        }
        size += dataSize;
        size += 2 * getFinalScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundingScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(roundingScore_.get(i));
        }
        size += dataSize;
        size += 2 * getRoundingScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < restDatas_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(restDatas_.get(i));
        }
        size += dataSize;
        size += 2 * getRestDatasList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, restCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < score_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(score_.get(i));
        }
        size += dataSize;
        size += 2 * getScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allExtraScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allExtraScore_.get(i));
        }
        size += dataSize;
        size += 2 * getAllExtraScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allScore_.get(i));
        }
        size += dataSize;
        size += 2 * getAllScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sysScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(sysScore_.get(i));
        }
        size += dataSize;
        size += 2 * getSysScoreList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(30, createPlayerId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pdk.PukeGameEndYYQF}
     *
     * <pre>
     *结算
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_PukeGameEndYYQF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_PukeGameEndYYQF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF.class, protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF.Builder.class);
      }

      // Construct using protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          cardsDataBuilder_.clear();
        }
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        you_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        score_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        roundExtraScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        boomScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        allBoomScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        allExtraScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        allScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        allBoomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
        } else {
          playersBuilder_.clear();
        }
        finalScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        roundingScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        restDatas_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        restCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        sysScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        createPlayerId_ = 0L;
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_PukeGameEndYYQF_descriptor;
      }

      public protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF getDefaultInstanceForType() {
        return protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF.getDefaultInstance();
      }

      public protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF build() {
        protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF buildPartial() {
        protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF result = new protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.boomCardNum_ = boomCardNum_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          you_ = java.util.Collections.unmodifiableList(you_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.you_ = you_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          score_ = java.util.Collections.unmodifiableList(score_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.score_ = score_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.endScore_ = endScore_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          roundExtraScore_ = java.util.Collections.unmodifiableList(roundExtraScore_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.roundExtraScore_ = roundExtraScore_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          boomScore_ = java.util.Collections.unmodifiableList(boomScore_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.boomScore_ = boomScore_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          allBoomScore_ = java.util.Collections.unmodifiableList(allBoomScore_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.allBoomScore_ = allBoomScore_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          allExtraScore_ = java.util.Collections.unmodifiableList(allExtraScore_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.allExtraScore_ = allExtraScore_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          allScore_ = java.util.Collections.unmodifiableList(allScore_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.allScore_ = allScore_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          allBoomCardNum_ = java.util.Collections.unmodifiableList(allBoomCardNum_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.allBoomCardNum_ = allBoomCardNum_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.endScoreMax_ = endScoreMax_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.winNum_ = winNum_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.loseNum_ = loseNum_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00080000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          finalScore_ = java.util.Collections.unmodifiableList(finalScore_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.finalScore_ = finalScore_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          roundingScore_ = java.util.Collections.unmodifiableList(roundingScore_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.roundingScore_ = roundingScore_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          restDatas_ = java.util.Collections.unmodifiableList(restDatas_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.restDatas_ = restDatas_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00000008;
        }
        result.restCount_ = restCount_;
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          sysScore_ = java.util.Collections.unmodifiableList(sysScore_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.sysScore_ = sysScore_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.createPlayerId_ = createPlayerId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF) {
          return mergeFrom((protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF other) {
        if (other == protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.boomCardNum_.isEmpty()) {
          if (boomCardNum_.isEmpty()) {
            boomCardNum_ = other.boomCardNum_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureBoomCardNumIsMutable();
            boomCardNum_.addAll(other.boomCardNum_);
          }
          onChanged();
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.you_.isEmpty()) {
          if (you_.isEmpty()) {
            you_ = other.you_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureYouIsMutable();
            you_.addAll(other.you_);
          }
          onChanged();
        }
        if (!other.score_.isEmpty()) {
          if (score_.isEmpty()) {
            score_ = other.score_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureScoreIsMutable();
            score_.addAll(other.score_);
          }
          onChanged();
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (!other.roundExtraScore_.isEmpty()) {
          if (roundExtraScore_.isEmpty()) {
            roundExtraScore_ = other.roundExtraScore_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureRoundExtraScoreIsMutable();
            roundExtraScore_.addAll(other.roundExtraScore_);
          }
          onChanged();
        }
        if (!other.boomScore_.isEmpty()) {
          if (boomScore_.isEmpty()) {
            boomScore_ = other.boomScore_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureBoomScoreIsMutable();
            boomScore_.addAll(other.boomScore_);
          }
          onChanged();
        }
        if (!other.allBoomScore_.isEmpty()) {
          if (allBoomScore_.isEmpty()) {
            allBoomScore_ = other.allBoomScore_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureAllBoomScoreIsMutable();
            allBoomScore_.addAll(other.allBoomScore_);
          }
          onChanged();
        }
        if (!other.allExtraScore_.isEmpty()) {
          if (allExtraScore_.isEmpty()) {
            allExtraScore_ = other.allExtraScore_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureAllExtraScoreIsMutable();
            allExtraScore_.addAll(other.allExtraScore_);
          }
          onChanged();
        }
        if (!other.allScore_.isEmpty()) {
          if (allScore_.isEmpty()) {
            allScore_ = other.allScore_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureAllScoreIsMutable();
            allScore_.addAll(other.allScore_);
          }
          onChanged();
        }
        if (!other.allBoomCardNum_.isEmpty()) {
          if (allBoomCardNum_.isEmpty()) {
            allBoomCardNum_ = other.allBoomCardNum_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureAllBoomCardNumIsMutable();
            allBoomCardNum_.addAll(other.allBoomCardNum_);
          }
          onChanged();
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.endScoreMax_.isEmpty()) {
          if (endScoreMax_.isEmpty()) {
            endScoreMax_ = other.endScoreMax_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureEndScoreMaxIsMutable();
            endScoreMax_.addAll(other.endScoreMax_);
          }
          onChanged();
        }
        if (!other.winNum_.isEmpty()) {
          if (winNum_.isEmpty()) {
            winNum_ = other.winNum_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureWinNumIsMutable();
            winNum_.addAll(other.winNum_);
          }
          onChanged();
        }
        if (!other.loseNum_.isEmpty()) {
          if (loseNum_.isEmpty()) {
            loseNum_ = other.loseNum_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureLoseNumIsMutable();
            loseNum_.addAll(other.loseNum_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00080000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00080000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.finalScore_.isEmpty()) {
          if (finalScore_.isEmpty()) {
            finalScore_ = other.finalScore_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureFinalScoreIsMutable();
            finalScore_.addAll(other.finalScore_);
          }
          onChanged();
        }
        if (!other.roundingScore_.isEmpty()) {
          if (roundingScore_.isEmpty()) {
            roundingScore_ = other.roundingScore_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureRoundingScoreIsMutable();
            roundingScore_.addAll(other.roundingScore_);
          }
          onChanged();
        }
        if (!other.restDatas_.isEmpty()) {
          if (restDatas_.isEmpty()) {
            restDatas_ = other.restDatas_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureRestDatasIsMutable();
            restDatas_.addAll(other.restDatas_);
          }
          onChanged();
        }
        if (other.hasRestCount()) {
          setRestCount(other.getRestCount());
        }
        if (!other.sysScore_.isEmpty()) {
          if (sysScore_.isEmpty()) {
            sysScore_ = other.sysScore_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureSysScoreIsMutable();
            sysScore_.addAll(other.sysScore_);
          }
          onChanged();
        }
        if (other.hasCreatePlayerId()) {
          setCreatePlayerId(other.getCreatePlayerId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yyqf.YYQFRsp.PukeGameEndYYQF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .pdk.RoomInfoYYQF room_info = 1;
      private protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated int32 card_count = 2;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 boom_card_num = 4;
      private java.util.List<java.lang.Integer> boomCardNum_ = java.util.Collections.emptyList();
      private void ensureBoomCardNumIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          boomCardNum_ = new java.util.ArrayList<java.lang.Integer>(boomCardNum_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 boom_card_num = 4;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBoomCardNumList() {
        return java.util.Collections.unmodifiableList(boomCardNum_);
      }
      /**
       * <code>repeated int32 boom_card_num = 4;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public int getBoomCardNumCount() {
        return boomCardNum_.size();
      }
      /**
       * <code>repeated int32 boom_card_num = 4;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public int getBoomCardNum(int index) {
        return boomCardNum_.get(index);
      }
      /**
       * <code>repeated int32 boom_card_num = 4;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder setBoomCardNum(
          int index, int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 4;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder addBoomCardNum(int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 4;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder addAllBoomCardNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoomCardNumIsMutable();
        super.addAll(values, boomCardNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 4;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder clearBoomCardNum() {
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional int32 player_num = 5;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 5;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 player_num = 5;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 5;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000010;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 5;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000010);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 6;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 6;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 reason = 6;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 6;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000020;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 6;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000020);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 you = 7;
      private java.util.List<java.lang.Integer> you_ = java.util.Collections.emptyList();
      private void ensureYouIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          you_ = new java.util.ArrayList<java.lang.Integer>(you_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 you = 7;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getYouList() {
        return java.util.Collections.unmodifiableList(you_);
      }
      /**
       * <code>repeated int32 you = 7;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public int getYouCount() {
        return you_.size();
      }
      /**
       * <code>repeated int32 you = 7;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public int getYou(int index) {
        return you_.get(index);
      }
      /**
       * <code>repeated int32 you = 7;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public Builder setYou(
          int index, int value) {
        ensureYouIsMutable();
        you_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 you = 7;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public Builder addYou(int value) {
        ensureYouIsMutable();
        you_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 you = 7;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public Builder addAllYou(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureYouIsMutable();
        super.addAll(values, you_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 you = 7;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public Builder clearYou() {
        you_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 score = 26;
      private java.util.List<java.lang.Integer> score_ = java.util.Collections.emptyList();
      private void ensureScoreIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          score_ = new java.util.ArrayList<java.lang.Integer>(score_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 score = 26;</code>
       *
       * <pre>
       * 本局积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getScoreList() {
        return java.util.Collections.unmodifiableList(score_);
      }
      /**
       * <code>repeated int32 score = 26;</code>
       *
       * <pre>
       * 本局积分
       * </pre>
       */
      public int getScoreCount() {
        return score_.size();
      }
      /**
       * <code>repeated int32 score = 26;</code>
       *
       * <pre>
       * 本局积分
       * </pre>
       */
      public int getScore(int index) {
        return score_.get(index);
      }
      /**
       * <code>repeated int32 score = 26;</code>
       *
       * <pre>
       * 本局积分
       * </pre>
       */
      public Builder setScore(
          int index, int value) {
        ensureScoreIsMutable();
        score_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score = 26;</code>
       *
       * <pre>
       * 本局积分
       * </pre>
       */
      public Builder addScore(int value) {
        ensureScoreIsMutable();
        score_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score = 26;</code>
       *
       * <pre>
       * 本局积分
       * </pre>
       */
      public Builder addAllScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureScoreIsMutable();
        super.addAll(values, score_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score = 26;</code>
       *
       * <pre>
       * 本局积分
       * </pre>
       */
      public Builder clearScore() {
        score_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 end_score = 8;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 end_score = 8;</code>
       *
       * <pre>
       * 本局最终积分(累计积分)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 8;</code>
       *
       * <pre>
       * 本局最终积分(累计积分)
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 8;</code>
       *
       * <pre>
       * 本局最终积分(累计积分)
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 8;</code>
       *
       * <pre>
       * 本局最终积分(累计积分)
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 8;</code>
       *
       * <pre>
       * 本局最终积分(累计积分)
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 8;</code>
       *
       * <pre>
       * 本局最终积分(累计积分)
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 8;</code>
       *
       * <pre>
       * 本局最终积分(累计积分)
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated int32 round_extra_score = 9;
      private java.util.List<java.lang.Integer> roundExtraScore_ = java.util.Collections.emptyList();
      private void ensureRoundExtraScoreIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          roundExtraScore_ = new java.util.ArrayList<java.lang.Integer>(roundExtraScore_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 round_extra_score = 9;</code>
       *
       * <pre>
       * 本局额外得分(奖分)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundExtraScoreList() {
        return java.util.Collections.unmodifiableList(roundExtraScore_);
      }
      /**
       * <code>repeated int32 round_extra_score = 9;</code>
       *
       * <pre>
       * 本局额外得分(奖分)
       * </pre>
       */
      public int getRoundExtraScoreCount() {
        return roundExtraScore_.size();
      }
      /**
       * <code>repeated int32 round_extra_score = 9;</code>
       *
       * <pre>
       * 本局额外得分(奖分)
       * </pre>
       */
      public int getRoundExtraScore(int index) {
        return roundExtraScore_.get(index);
      }
      /**
       * <code>repeated int32 round_extra_score = 9;</code>
       *
       * <pre>
       * 本局额外得分(奖分)
       * </pre>
       */
      public Builder setRoundExtraScore(
          int index, int value) {
        ensureRoundExtraScoreIsMutable();
        roundExtraScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_extra_score = 9;</code>
       *
       * <pre>
       * 本局额外得分(奖分)
       * </pre>
       */
      public Builder addRoundExtraScore(int value) {
        ensureRoundExtraScoreIsMutable();
        roundExtraScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_extra_score = 9;</code>
       *
       * <pre>
       * 本局额外得分(奖分)
       * </pre>
       */
      public Builder addAllRoundExtraScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundExtraScoreIsMutable();
        super.addAll(values, roundExtraScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_extra_score = 9;</code>
       *
       * <pre>
       * 本局额外得分(奖分)
       * </pre>
       */
      public Builder clearRoundExtraScore() {
        roundExtraScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 boom_score = 10;
      private java.util.List<java.lang.Integer> boomScore_ = java.util.Collections.emptyList();
      private void ensureBoomScoreIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          boomScore_ = new java.util.ArrayList<java.lang.Integer>(boomScore_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 boom_score = 10;</code>
       *
       * <pre>
       * 本局炸弹得分(喜分、累计喜分)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBoomScoreList() {
        return java.util.Collections.unmodifiableList(boomScore_);
      }
      /**
       * <code>repeated int32 boom_score = 10;</code>
       *
       * <pre>
       * 本局炸弹得分(喜分、累计喜分)
       * </pre>
       */
      public int getBoomScoreCount() {
        return boomScore_.size();
      }
      /**
       * <code>repeated int32 boom_score = 10;</code>
       *
       * <pre>
       * 本局炸弹得分(喜分、累计喜分)
       * </pre>
       */
      public int getBoomScore(int index) {
        return boomScore_.get(index);
      }
      /**
       * <code>repeated int32 boom_score = 10;</code>
       *
       * <pre>
       * 本局炸弹得分(喜分、累计喜分)
       * </pre>
       */
      public Builder setBoomScore(
          int index, int value) {
        ensureBoomScoreIsMutable();
        boomScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_score = 10;</code>
       *
       * <pre>
       * 本局炸弹得分(喜分、累计喜分)
       * </pre>
       */
      public Builder addBoomScore(int value) {
        ensureBoomScoreIsMutable();
        boomScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_score = 10;</code>
       *
       * <pre>
       * 本局炸弹得分(喜分、累计喜分)
       * </pre>
       */
      public Builder addAllBoomScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoomScoreIsMutable();
        super.addAll(values, boomScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_score = 10;</code>
       *
       * <pre>
       * 本局炸弹得分(喜分、累计喜分)
       * </pre>
       */
      public Builder clearBoomScore() {
        boomScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 all_boom_score = 15;
      private java.util.List<java.lang.Integer> allBoomScore_ = java.util.Collections.emptyList();
      private void ensureAllBoomScoreIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          allBoomScore_ = new java.util.ArrayList<java.lang.Integer>(allBoomScore_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 all_boom_score = 15;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllBoomScoreList() {
        return java.util.Collections.unmodifiableList(allBoomScore_);
      }
      /**
       * <code>repeated int32 all_boom_score = 15;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllBoomScoreCount() {
        return allBoomScore_.size();
      }
      /**
       * <code>repeated int32 all_boom_score = 15;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllBoomScore(int index) {
        return allBoomScore_.get(index);
      }
      /**
       * <code>repeated int32 all_boom_score = 15;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllBoomScore(
          int index, int value) {
        ensureAllBoomScoreIsMutable();
        allBoomScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_score = 15;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllBoomScore(int value) {
        ensureAllBoomScoreIsMutable();
        allBoomScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_score = 15;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllBoomScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllBoomScoreIsMutable();
        super.addAll(values, allBoomScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_score = 15;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllBoomScore() {
        allBoomScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated int32 all_extra_score = 27;
      private java.util.List<java.lang.Integer> allExtraScore_ = java.util.Collections.emptyList();
      private void ensureAllExtraScoreIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          allExtraScore_ = new java.util.ArrayList<java.lang.Integer>(allExtraScore_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 all_extra_score = 27;</code>
       *
       * <pre>
       *总奖分(奖分)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllExtraScoreList() {
        return java.util.Collections.unmodifiableList(allExtraScore_);
      }
      /**
       * <code>repeated int32 all_extra_score = 27;</code>
       *
       * <pre>
       *总奖分(奖分)
       * </pre>
       */
      public int getAllExtraScoreCount() {
        return allExtraScore_.size();
      }
      /**
       * <code>repeated int32 all_extra_score = 27;</code>
       *
       * <pre>
       *总奖分(奖分)
       * </pre>
       */
      public int getAllExtraScore(int index) {
        return allExtraScore_.get(index);
      }
      /**
       * <code>repeated int32 all_extra_score = 27;</code>
       *
       * <pre>
       *总奖分(奖分)
       * </pre>
       */
      public Builder setAllExtraScore(
          int index, int value) {
        ensureAllExtraScoreIsMutable();
        allExtraScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_extra_score = 27;</code>
       *
       * <pre>
       *总奖分(奖分)
       * </pre>
       */
      public Builder addAllExtraScore(int value) {
        ensureAllExtraScoreIsMutable();
        allExtraScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_extra_score = 27;</code>
       *
       * <pre>
       *总奖分(奖分)
       * </pre>
       */
      public Builder addAllAllExtraScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllExtraScoreIsMutable();
        super.addAll(values, allExtraScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_extra_score = 27;</code>
       *
       * <pre>
       *总奖分(奖分)
       * </pre>
       */
      public Builder clearAllExtraScore() {
        allExtraScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 all_score = 28;
      private java.util.List<java.lang.Integer> allScore_ = java.util.Collections.emptyList();
      private void ensureAllScoreIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          allScore_ = new java.util.ArrayList<java.lang.Integer>(allScore_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 all_score = 28;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllScoreList() {
        return java.util.Collections.unmodifiableList(allScore_);
      }
      /**
       * <code>repeated int32 all_score = 28;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getAllScoreCount() {
        return allScore_.size();
      }
      /**
       * <code>repeated int32 all_score = 28;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getAllScore(int index) {
        return allScore_.get(index);
      }
      /**
       * <code>repeated int32 all_score = 28;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder setAllScore(
          int index, int value) {
        ensureAllScoreIsMutable();
        allScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_score = 28;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder addAllScore(int value) {
        ensureAllScoreIsMutable();
        allScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_score = 28;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder addAllAllScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllScoreIsMutable();
        super.addAll(values, allScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_score = 28;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder clearAllScore() {
        allScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 all_boom_card_num = 16;
      private java.util.List<java.lang.Integer> allBoomCardNum_ = java.util.Collections.emptyList();
      private void ensureAllBoomCardNumIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>(allBoomCardNum_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 all_boom_card_num = 16;</code>
       *
       * <pre>
       *总炸弹数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllBoomCardNumList() {
        return java.util.Collections.unmodifiableList(allBoomCardNum_);
      }
      /**
       * <code>repeated int32 all_boom_card_num = 16;</code>
       *
       * <pre>
       *总炸弹数量
       * </pre>
       */
      public int getAllBoomCardNumCount() {
        return allBoomCardNum_.size();
      }
      /**
       * <code>repeated int32 all_boom_card_num = 16;</code>
       *
       * <pre>
       *总炸弹数量
       * </pre>
       */
      public int getAllBoomCardNum(int index) {
        return allBoomCardNum_.get(index);
      }
      /**
       * <code>repeated int32 all_boom_card_num = 16;</code>
       *
       * <pre>
       *总炸弹数量
       * </pre>
       */
      public Builder setAllBoomCardNum(
          int index, int value) {
        ensureAllBoomCardNumIsMutable();
        allBoomCardNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 16;</code>
       *
       * <pre>
       *总炸弹数量
       * </pre>
       */
      public Builder addAllBoomCardNum(int value) {
        ensureAllBoomCardNumIsMutable();
        allBoomCardNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 16;</code>
       *
       * <pre>
       *总炸弹数量
       * </pre>
       */
      public Builder addAllAllBoomCardNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllBoomCardNumIsMutable();
        super.addAll(values, allBoomCardNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 16;</code>
       *
       * <pre>
       *总炸弹数量
       * </pre>
       */
      public Builder clearAllBoomCardNum() {
        allBoomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated int32 all_end_score = 17;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated int32 end_score_max = 18;
      private java.util.List<java.lang.Integer> endScoreMax_ = java.util.Collections.emptyList();
      private void ensureEndScoreMaxIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          endScoreMax_ = new java.util.ArrayList<java.lang.Integer>(endScoreMax_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreMaxList() {
        return java.util.Collections.unmodifiableList(endScoreMax_);
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMaxCount() {
        return endScoreMax_.size();
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMax(int index) {
        return endScoreMax_.get(index);
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder setEndScoreMax(
          int index, int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addEndScoreMax(int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addAllEndScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreMaxIsMutable();
        super.addAll(values, endScoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder clearEndScoreMax() {
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      // repeated int32 win_num = 19;
      private java.util.List<java.lang.Integer> winNum_ = java.util.Collections.emptyList();
      private void ensureWinNumIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          winNum_ = new java.util.ArrayList<java.lang.Integer>(winNum_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinNumList() {
        return java.util.Collections.unmodifiableList(winNum_);
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNumCount() {
        return winNum_.size();
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNum(int index) {
        return winNum_.get(index);
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder setWinNum(
          int index, int value) {
        ensureWinNumIsMutable();
        winNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addWinNum(int value) {
        ensureWinNumIsMutable();
        winNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addAllWinNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinNumIsMutable();
        super.addAll(values, winNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder clearWinNum() {
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // repeated int32 lose_num = 20;
      private java.util.List<java.lang.Integer> loseNum_ = java.util.Collections.emptyList();
      private void ensureLoseNumIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          loseNum_ = new java.util.ArrayList<java.lang.Integer>(loseNum_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLoseNumList() {
        return java.util.Collections.unmodifiableList(loseNum_);
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNumCount() {
        return loseNum_.size();
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNum(int index) {
        return loseNum_.get(index);
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder setLoseNum(
          int index, int value) {
        ensureLoseNumIsMutable();
        loseNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addLoseNum(int value) {
        ensureLoseNumIsMutable();
        loseNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addAllLoseNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLoseNumIsMutable();
        super.addAll(values, loseNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder clearLoseNum() {
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // repeated .pdk.RoomPlayerResponseYYQF players = 21;
      private java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF>(players_);
          bitField0_ |= 0x00080000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> playersBuilder_;

      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder addPlayers(protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public java.util.List<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.getDefaultInstance());
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.getDefaultInstance());
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00080000) == 0x00080000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 final_score = 22;
      private java.util.List<java.lang.Integer> finalScore_ = java.util.Collections.emptyList();
      private void ensureFinalScoreIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          finalScore_ = new java.util.ArrayList<java.lang.Integer>(finalScore_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 final_score = 22;</code>
       *
       * <pre>
       * 最终得分 = 总喜分 +总积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getFinalScoreList() {
        return java.util.Collections.unmodifiableList(finalScore_);
      }
      /**
       * <code>repeated int32 final_score = 22;</code>
       *
       * <pre>
       * 最终得分 = 总喜分 +总积分
       * </pre>
       */
      public int getFinalScoreCount() {
        return finalScore_.size();
      }
      /**
       * <code>repeated int32 final_score = 22;</code>
       *
       * <pre>
       * 最终得分 = 总喜分 +总积分
       * </pre>
       */
      public int getFinalScore(int index) {
        return finalScore_.get(index);
      }
      /**
       * <code>repeated int32 final_score = 22;</code>
       *
       * <pre>
       * 最终得分 = 总喜分 +总积分
       * </pre>
       */
      public Builder setFinalScore(
          int index, int value) {
        ensureFinalScoreIsMutable();
        finalScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 final_score = 22;</code>
       *
       * <pre>
       * 最终得分 = 总喜分 +总积分
       * </pre>
       */
      public Builder addFinalScore(int value) {
        ensureFinalScoreIsMutable();
        finalScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 final_score = 22;</code>
       *
       * <pre>
       * 最终得分 = 总喜分 +总积分
       * </pre>
       */
      public Builder addAllFinalScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFinalScoreIsMutable();
        super.addAll(values, finalScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 final_score = 22;</code>
       *
       * <pre>
       * 最终得分 = 总喜分 +总积分
       * </pre>
       */
      public Builder clearFinalScore() {
        finalScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated int32 rounding_score = 23;
      private java.util.List<java.lang.Integer> roundingScore_ = java.util.Collections.emptyList();
      private void ensureRoundingScoreIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          roundingScore_ = new java.util.ArrayList<java.lang.Integer>(roundingScore_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 rounding_score = 23;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundingScoreList() {
        return java.util.Collections.unmodifiableList(roundingScore_);
      }
      /**
       * <code>repeated int32 rounding_score = 23;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public int getRoundingScoreCount() {
        return roundingScore_.size();
      }
      /**
       * <code>repeated int32 rounding_score = 23;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public int getRoundingScore(int index) {
        return roundingScore_.get(index);
      }
      /**
       * <code>repeated int32 rounding_score = 23;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public Builder setRoundingScore(
          int index, int value) {
        ensureRoundingScoreIsMutable();
        roundingScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rounding_score = 23;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public Builder addRoundingScore(int value) {
        ensureRoundingScoreIsMutable();
        roundingScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rounding_score = 23;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public Builder addAllRoundingScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundingScoreIsMutable();
        super.addAll(values, roundingScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rounding_score = 23;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public Builder clearRoundingScore() {
        roundingScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 rest_datas = 24;
      private java.util.List<java.lang.Integer> restDatas_ = java.util.Collections.emptyList();
      private void ensureRestDatasIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          restDatas_ = new java.util.ArrayList<java.lang.Integer>(restDatas_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 rest_datas = 24;</code>
       *
       * <pre>
       * 剩余卡牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRestDatasList() {
        return java.util.Collections.unmodifiableList(restDatas_);
      }
      /**
       * <code>repeated int32 rest_datas = 24;</code>
       *
       * <pre>
       * 剩余卡牌数据
       * </pre>
       */
      public int getRestDatasCount() {
        return restDatas_.size();
      }
      /**
       * <code>repeated int32 rest_datas = 24;</code>
       *
       * <pre>
       * 剩余卡牌数据
       * </pre>
       */
      public int getRestDatas(int index) {
        return restDatas_.get(index);
      }
      /**
       * <code>repeated int32 rest_datas = 24;</code>
       *
       * <pre>
       * 剩余卡牌数据
       * </pre>
       */
      public Builder setRestDatas(
          int index, int value) {
        ensureRestDatasIsMutable();
        restDatas_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rest_datas = 24;</code>
       *
       * <pre>
       * 剩余卡牌数据
       * </pre>
       */
      public Builder addRestDatas(int value) {
        ensureRestDatasIsMutable();
        restDatas_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rest_datas = 24;</code>
       *
       * <pre>
       * 剩余卡牌数据
       * </pre>
       */
      public Builder addAllRestDatas(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRestDatasIsMutable();
        super.addAll(values, restDatas_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rest_datas = 24;</code>
       *
       * <pre>
       * 剩余卡牌数据
       * </pre>
       */
      public Builder clearRestDatas() {
        restDatas_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // optional int32 rest_count = 25;
      private int restCount_ ;
      /**
       * <code>optional int32 rest_count = 25;</code>
       *
       * <pre>
       * 剩余卡牌数量
       * </pre>
       */
      public boolean hasRestCount() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 rest_count = 25;</code>
       *
       * <pre>
       * 剩余卡牌数量
       * </pre>
       */
      public int getRestCount() {
        return restCount_;
      }
      /**
       * <code>optional int32 rest_count = 25;</code>
       *
       * <pre>
       * 剩余卡牌数量
       * </pre>
       */
      public Builder setRestCount(int value) {
        bitField0_ |= 0x00800000;
        restCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rest_count = 25;</code>
       *
       * <pre>
       * 剩余卡牌数量
       * </pre>
       */
      public Builder clearRestCount() {
        bitField0_ = (bitField0_ & ~0x00800000);
        restCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 sys_score = 29;
      private java.util.List<java.lang.Integer> sysScore_ = java.util.Collections.emptyList();
      private void ensureSysScoreIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          sysScore_ = new java.util.ArrayList<java.lang.Integer>(sysScore_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated int32 sys_score = 29;</code>
       *
       * <pre>
       * 系统计算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSysScoreList() {
        return java.util.Collections.unmodifiableList(sysScore_);
      }
      /**
       * <code>repeated int32 sys_score = 29;</code>
       *
       * <pre>
       * 系统计算
       * </pre>
       */
      public int getSysScoreCount() {
        return sysScore_.size();
      }
      /**
       * <code>repeated int32 sys_score = 29;</code>
       *
       * <pre>
       * 系统计算
       * </pre>
       */
      public int getSysScore(int index) {
        return sysScore_.get(index);
      }
      /**
       * <code>repeated int32 sys_score = 29;</code>
       *
       * <pre>
       * 系统计算
       * </pre>
       */
      public Builder setSysScore(
          int index, int value) {
        ensureSysScoreIsMutable();
        sysScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sys_score = 29;</code>
       *
       * <pre>
       * 系统计算
       * </pre>
       */
      public Builder addSysScore(int value) {
        ensureSysScoreIsMutable();
        sysScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sys_score = 29;</code>
       *
       * <pre>
       * 系统计算
       * </pre>
       */
      public Builder addAllSysScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSysScoreIsMutable();
        super.addAll(values, sysScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sys_score = 29;</code>
       *
       * <pre>
       * 系统计算
       * </pre>
       */
      public Builder clearSysScore() {
        sysScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      // optional int64 create_player_id = 30;
      private long createPlayerId_ ;
      /**
       * <code>optional int64 create_player_id = 30;</code>
       *
       * <pre>
       * 创建者ID
       * </pre>
       */
      public boolean hasCreatePlayerId() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int64 create_player_id = 30;</code>
       *
       * <pre>
       * 创建者ID
       * </pre>
       */
      public long getCreatePlayerId() {
        return createPlayerId_;
      }
      /**
       * <code>optional int64 create_player_id = 30;</code>
       *
       * <pre>
       * 创建者ID
       * </pre>
       */
      public Builder setCreatePlayerId(long value) {
        bitField0_ |= 0x02000000;
        createPlayerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 create_player_id = 30;</code>
       *
       * <pre>
       * 创建者ID
       * </pre>
       */
      public Builder clearCreatePlayerId() {
        bitField0_ = (bitField0_ & ~0x02000000);
        createPlayerId_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pdk.PukeGameEndYYQF)
    }

    static {
      defaultInstance = new PukeGameEndYYQF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pdk.PukeGameEndYYQF)
  }

  public interface TableResponseYYQFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated .Int32ArrayResponse change_cards_data = 6;
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getChangeCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChangeCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 7;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_pass = 8;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // repeated int32 card_type = 9;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 10;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_change_cards_data = 11;
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // repeated int32 pr_cards_data = 12;
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 13;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 14;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 magic_card = 15;
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    boolean hasMagicCard();
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    int getMagicCard();

    // optional int32 is_first_out = 16;
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 17;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 18;
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 19;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .pdk.RoomInfoYYQF room_info = 20;
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF getRoomInfo();
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder getRoomInfoOrBuilder();

    // repeated .pdk.RoomPlayerResponseYYQF players = 21;
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> 
        getPlayersList();
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF getPlayers(int index);
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    java.util.List<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 player_you = 22;
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    java.util.List<java.lang.Integer> getPlayerYouList();
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    int getPlayerYouCount();
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    int getPlayerYou(int index);

    // repeated int32 score_card = 24;
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getScoreCardList();
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    int getScoreCardCount();
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    int getScoreCard(int index);

    // repeated int32 player_scores = 25;
    /**
     * <code>repeated int32 player_scores = 25;</code>
     *
     * <pre>
     *每个玩家的总分数 持续更新
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerScoresList();
    /**
     * <code>repeated int32 player_scores = 25;</code>
     *
     * <pre>
     *每个玩家的总分数 持续更新
     * </pre>
     */
    int getPlayerScoresCount();
    /**
     * <code>repeated int32 player_scores = 25;</code>
     *
     * <pre>
     *每个玩家的总分数 持续更新
     * </pre>
     */
    int getPlayerScores(int index);

    // optional int64 out_card_time = 26;
    /**
     * <code>optional int64 out_card_time = 26;</code>
     *
     * <pre>
     * 如果轮到自己出牌，会下发自己的出牌时间戳
     * </pre>
     */
    boolean hasOutCardTime();
    /**
     * <code>optional int64 out_card_time = 26;</code>
     *
     * <pre>
     * 如果轮到自己出牌，会下发自己的出牌时间戳
     * </pre>
     */
    long getOutCardTime();

    // repeated int32 round_scores = 27;
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家当前局的分数 持续更新
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundScoresList();
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家当前局的分数 持续更新
     * </pre>
     */
    int getRoundScoresCount();
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家当前局的分数 持续更新
     * </pre>
     */
    int getRoundScores(int index);

    // repeated int32 boom_scores = 28;
    /**
     * <code>repeated int32 boom_scores = 28;</code>
     *
     * <pre>
     *每个玩家的炸弹分数 持续更新
     * </pre>
     */
    java.util.List<java.lang.Integer> getBoomScoresList();
    /**
     * <code>repeated int32 boom_scores = 28;</code>
     *
     * <pre>
     *每个玩家的炸弹分数 持续更新
     * </pre>
     */
    int getBoomScoresCount();
    /**
     * <code>repeated int32 boom_scores = 28;</code>
     *
     * <pre>
     *每个玩家的炸弹分数 持续更新
     * </pre>
     */
    int getBoomScores(int index);

    // repeated int32 round_boom_scores = 29;
    /**
     * <code>repeated int32 round_boom_scores = 29;</code>
     *
     * <pre>
     *每个玩家当前局的炸弹分数 持续更新
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundBoomScoresList();
    /**
     * <code>repeated int32 round_boom_scores = 29;</code>
     *
     * <pre>
     *每个玩家当前局的炸弹分数 持续更新
     * </pre>
     */
    int getRoundBoomScoresCount();
    /**
     * <code>repeated int32 round_boom_scores = 29;</code>
     *
     * <pre>
     *每个玩家当前局的炸弹分数 持续更新
     * </pre>
     */
    int getRoundBoomScores(int index);

    // optional int32 base_cards_count = 30;
    /**
     * <code>optional int32 base_cards_count = 30;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    boolean hasBaseCardsCount();
    /**
     * <code>optional int32 base_cards_count = 30;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    int getBaseCardsCount();

    // repeated int32 base_cards_data = 31;
    /**
     * <code>repeated int32 base_cards_data = 31;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getBaseCardsDataList();
    /**
     * <code>repeated int32 base_cards_data = 31;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    int getBaseCardsDataCount();
    /**
     * <code>repeated int32 base_cards_data = 31;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    int getBaseCardsData(int index);

    // optional bool is_end = 32;
    /**
     * <code>optional bool is_end = 32;</code>
     *
     * <pre>
     * 是否需要结算(false:正常打牌 true:一局结算开始展示底牌)
     * </pre>
     */
    boolean hasIsEnd();
    /**
     * <code>optional bool is_end = 32;</code>
     *
     * <pre>
     * 是否需要结算(false:正常打牌 true:一局结算开始展示底牌)
     * </pre>
     */
    boolean getIsEnd();
  }
  /**
   * Protobuf type {@code pdk.TableResponseYYQF}
   */
  public static final class TableResponseYYQF extends
      com.google.protobuf.GeneratedMessage
      implements TableResponseYYQFOrBuilder {
    // Use TableResponseYYQF.newBuilder() to construct.
    private TableResponseYYQF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponseYYQF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponseYYQF defaultInstance;
    public static TableResponseYYQF getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponseYYQF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponseYYQF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                changeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000020;
              }
              changeCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000040;
              magicCard_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000080;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000100;
              displayTime_ = input.readInt32();
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00040000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 162: {
              protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 170: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF>();
                mutable_bitField0_ |= 0x00100000;
              }
              players_.add(input.readMessage(protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.PARSER, extensionRegistry));
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                playerYou_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              playerYou_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                playerYou_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerYou_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                scoreCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              scoreCard_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                scoreCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                scoreCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 200: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                playerScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              playerScores_.add(input.readInt32());
              break;
            }
            case 202: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                playerScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 208: {
              bitField0_ |= 0x00000400;
              outCardTime_ = input.readInt64();
              break;
            }
            case 216: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                roundScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              roundScores_.add(input.readInt32());
              break;
            }
            case 218: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                roundScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                roundScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 224: {
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
                boomScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              boomScores_.add(input.readInt32());
              break;
            }
            case 226: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000) && input.getBytesUntilLimit() > 0) {
                boomScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                boomScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 232: {
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
                roundBoomScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x08000000;
              }
              roundBoomScores_.add(input.readInt32());
              break;
            }
            case 234: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000) && input.getBytesUntilLimit() > 0) {
                roundBoomScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x08000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                roundBoomScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 240: {
              bitField0_ |= 0x00000800;
              baseCardsCount_ = input.readInt32();
              break;
            }
            case 248: {
              if (!((mutable_bitField0_ & 0x20000000) == 0x20000000)) {
                baseCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x20000000;
              }
              baseCardsData_.add(input.readInt32());
              break;
            }
            case 250: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x20000000) == 0x20000000) && input.getBytesUntilLimit() > 0) {
                baseCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x20000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                baseCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 256: {
              bitField0_ |= 0x00001000;
              isEnd_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          playerYou_ = java.util.Collections.unmodifiableList(playerYou_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          scoreCard_ = java.util.Collections.unmodifiableList(scoreCard_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          playerScores_ = java.util.Collections.unmodifiableList(playerScores_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          roundScores_ = java.util.Collections.unmodifiableList(roundScores_);
        }
        if (((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
          boomScores_ = java.util.Collections.unmodifiableList(boomScores_);
        }
        if (((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
          roundBoomScores_ = java.util.Collections.unmodifiableList(roundBoomScores_);
        }
        if (((mutable_bitField0_ & 0x20000000) == 0x20000000)) {
          baseCardsData_ = java.util.Collections.unmodifiableList(baseCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_TableResponseYYQF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_TableResponseYYQF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF.class, protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponseYYQF> PARSER =
        new com.google.protobuf.AbstractParser<TableResponseYYQF>() {
      public TableResponseYYQF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponseYYQF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponseYYQF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated .Int32ArrayResponse change_cards_data = 6;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> changeCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChangeCardsDataOrBuilderList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
        int index) {
      return changeCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 7;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_pass = 8;
    public static final int PLAYER_PASS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // repeated int32 card_type = 9;
    public static final int CARD_TYPE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 10;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 10;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_change_cards_data = 11;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // repeated int32 pr_cards_data = 12;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 13;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 13;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 14;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 14;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 magic_card = 15;
    public static final int MAGIC_CARD_FIELD_NUMBER = 15;
    private int magicCard_;
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    public boolean hasMagicCard() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    public int getMagicCard() {
      return magicCard_;
    }

    // optional int32 is_first_out = 16;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 16;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 17;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 17;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 18;
    public static final int CARD_COUNT_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 19;
    public static final int CARDS_DATA_FIELD_NUMBER = 19;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .pdk.RoomInfoYYQF room_info = 20;
    public static final int ROOM_INFO_FIELD_NUMBER = 20;
    private protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF roomInfo_;
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .pdk.RoomPlayerResponseYYQF players = 21;
    public static final int PLAYERS_FIELD_NUMBER = 21;
    private java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> players_;
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    public java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    public java.util.List<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 player_you = 22;
    public static final int PLAYER_YOU_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> playerYou_;
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    public java.util.List<java.lang.Integer>
        getPlayerYouList() {
      return playerYou_;
    }
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    public int getPlayerYouCount() {
      return playerYou_.size();
    }
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    public int getPlayerYou(int index) {
      return playerYou_.get(index);
    }

    // repeated int32 score_card = 24;
    public static final int SCORE_CARD_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> scoreCard_;
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getScoreCardList() {
      return scoreCard_;
    }
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    public int getScoreCardCount() {
      return scoreCard_.size();
    }
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    public int getScoreCard(int index) {
      return scoreCard_.get(index);
    }

    // repeated int32 player_scores = 25;
    public static final int PLAYER_SCORES_FIELD_NUMBER = 25;
    private java.util.List<java.lang.Integer> playerScores_;
    /**
     * <code>repeated int32 player_scores = 25;</code>
     *
     * <pre>
     *每个玩家的总分数 持续更新
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerScoresList() {
      return playerScores_;
    }
    /**
     * <code>repeated int32 player_scores = 25;</code>
     *
     * <pre>
     *每个玩家的总分数 持续更新
     * </pre>
     */
    public int getPlayerScoresCount() {
      return playerScores_.size();
    }
    /**
     * <code>repeated int32 player_scores = 25;</code>
     *
     * <pre>
     *每个玩家的总分数 持续更新
     * </pre>
     */
    public int getPlayerScores(int index) {
      return playerScores_.get(index);
    }

    // optional int64 out_card_time = 26;
    public static final int OUT_CARD_TIME_FIELD_NUMBER = 26;
    private long outCardTime_;
    /**
     * <code>optional int64 out_card_time = 26;</code>
     *
     * <pre>
     * 如果轮到自己出牌，会下发自己的出牌时间戳
     * </pre>
     */
    public boolean hasOutCardTime() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int64 out_card_time = 26;</code>
     *
     * <pre>
     * 如果轮到自己出牌，会下发自己的出牌时间戳
     * </pre>
     */
    public long getOutCardTime() {
      return outCardTime_;
    }

    // repeated int32 round_scores = 27;
    public static final int ROUND_SCORES_FIELD_NUMBER = 27;
    private java.util.List<java.lang.Integer> roundScores_;
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家当前局的分数 持续更新
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundScoresList() {
      return roundScores_;
    }
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家当前局的分数 持续更新
     * </pre>
     */
    public int getRoundScoresCount() {
      return roundScores_.size();
    }
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家当前局的分数 持续更新
     * </pre>
     */
    public int getRoundScores(int index) {
      return roundScores_.get(index);
    }

    // repeated int32 boom_scores = 28;
    public static final int BOOM_SCORES_FIELD_NUMBER = 28;
    private java.util.List<java.lang.Integer> boomScores_;
    /**
     * <code>repeated int32 boom_scores = 28;</code>
     *
     * <pre>
     *每个玩家的炸弹分数 持续更新
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBoomScoresList() {
      return boomScores_;
    }
    /**
     * <code>repeated int32 boom_scores = 28;</code>
     *
     * <pre>
     *每个玩家的炸弹分数 持续更新
     * </pre>
     */
    public int getBoomScoresCount() {
      return boomScores_.size();
    }
    /**
     * <code>repeated int32 boom_scores = 28;</code>
     *
     * <pre>
     *每个玩家的炸弹分数 持续更新
     * </pre>
     */
    public int getBoomScores(int index) {
      return boomScores_.get(index);
    }

    // repeated int32 round_boom_scores = 29;
    public static final int ROUND_BOOM_SCORES_FIELD_NUMBER = 29;
    private java.util.List<java.lang.Integer> roundBoomScores_;
    /**
     * <code>repeated int32 round_boom_scores = 29;</code>
     *
     * <pre>
     *每个玩家当前局的炸弹分数 持续更新
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundBoomScoresList() {
      return roundBoomScores_;
    }
    /**
     * <code>repeated int32 round_boom_scores = 29;</code>
     *
     * <pre>
     *每个玩家当前局的炸弹分数 持续更新
     * </pre>
     */
    public int getRoundBoomScoresCount() {
      return roundBoomScores_.size();
    }
    /**
     * <code>repeated int32 round_boom_scores = 29;</code>
     *
     * <pre>
     *每个玩家当前局的炸弹分数 持续更新
     * </pre>
     */
    public int getRoundBoomScores(int index) {
      return roundBoomScores_.get(index);
    }

    // optional int32 base_cards_count = 30;
    public static final int BASE_CARDS_COUNT_FIELD_NUMBER = 30;
    private int baseCardsCount_;
    /**
     * <code>optional int32 base_cards_count = 30;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    public boolean hasBaseCardsCount() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 base_cards_count = 30;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    public int getBaseCardsCount() {
      return baseCardsCount_;
    }

    // repeated int32 base_cards_data = 31;
    public static final int BASE_CARDS_DATA_FIELD_NUMBER = 31;
    private java.util.List<java.lang.Integer> baseCardsData_;
    /**
     * <code>repeated int32 base_cards_data = 31;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBaseCardsDataList() {
      return baseCardsData_;
    }
    /**
     * <code>repeated int32 base_cards_data = 31;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public int getBaseCardsDataCount() {
      return baseCardsData_.size();
    }
    /**
     * <code>repeated int32 base_cards_data = 31;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public int getBaseCardsData(int index) {
      return baseCardsData_.get(index);
    }

    // optional bool is_end = 32;
    public static final int IS_END_FIELD_NUMBER = 32;
    private boolean isEnd_;
    /**
     * <code>optional bool is_end = 32;</code>
     *
     * <pre>
     * 是否需要结算(false:正常打牌 true:一局结算开始展示底牌)
     * </pre>
     */
    public boolean hasIsEnd() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool is_end = 32;</code>
     *
     * <pre>
     * 是否需要结算(false:正常打牌 true:一局结算开始展示底牌)
     * </pre>
     */
    public boolean getIsEnd() {
      return isEnd_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerPass_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      magicCard_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      playerYou_ = java.util.Collections.emptyList();
      scoreCard_ = java.util.Collections.emptyList();
      playerScores_ = java.util.Collections.emptyList();
      outCardTime_ = 0L;
      roundScores_ = java.util.Collections.emptyList();
      boomScores_ = java.util.Collections.emptyList();
      roundBoomScores_ = java.util.Collections.emptyList();
      baseCardsCount_ = 0;
      baseCardsData_ = java.util.Collections.emptyList();
      isEnd_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeMessage(6, changeCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(7, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(8, playerPass_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(9, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(10, prOutCardPlayer_);
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(11, prChangeCardsData_.get(i));
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(12, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(15, magicCard_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(16, isFirstOut_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(17, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(18, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(19, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(20, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(21, players_.get(i));
      }
      for (int i = 0; i < playerYou_.size(); i++) {
        output.writeInt32(22, playerYou_.get(i));
      }
      for (int i = 0; i < scoreCard_.size(); i++) {
        output.writeInt32(24, scoreCard_.get(i));
      }
      for (int i = 0; i < playerScores_.size(); i++) {
        output.writeInt32(25, playerScores_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt64(26, outCardTime_);
      }
      for (int i = 0; i < roundScores_.size(); i++) {
        output.writeInt32(27, roundScores_.get(i));
      }
      for (int i = 0; i < boomScores_.size(); i++) {
        output.writeInt32(28, boomScores_.get(i));
      }
      for (int i = 0; i < roundBoomScores_.size(); i++) {
        output.writeInt32(29, roundBoomScores_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(30, baseCardsCount_);
      }
      for (int i = 0; i < baseCardsData_.size(); i++) {
        output.writeInt32(31, baseCardsData_.get(i));
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(32, isEnd_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, changeCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerPassList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, magicCard_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, isFirstOut_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerYou_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerYou_.get(i));
        }
        size += dataSize;
        size += 2 * getPlayerYouList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < scoreCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(scoreCard_.get(i));
        }
        size += dataSize;
        size += 2 * getScoreCardList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerScores_.get(i));
        }
        size += dataSize;
        size += 2 * getPlayerScoresList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(26, outCardTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(roundScores_.get(i));
        }
        size += dataSize;
        size += 2 * getRoundScoresList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boomScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boomScores_.get(i));
        }
        size += dataSize;
        size += 2 * getBoomScoresList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundBoomScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(roundBoomScores_.get(i));
        }
        size += dataSize;
        size += 2 * getRoundBoomScoresList().size();
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, baseCardsCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < baseCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(baseCardsData_.get(i));
        }
        size += dataSize;
        size += 2 * getBaseCardsDataList().size();
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(32, isEnd_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pdk.TableResponseYYQF}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_TableResponseYYQF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_TableResponseYYQF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF.class, protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF.Builder.class);
      }

      // Construct using protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getChangeCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        if (changeCardsDataBuilder_ == null) {
          changeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          changeCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        magicCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
        } else {
          playersBuilder_.clear();
        }
        playerYou_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        scoreCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        playerScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        outCardTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x01000000);
        roundScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        boomScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        roundBoomScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        baseCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        baseCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x20000000);
        isEnd_ = false;
        bitField0_ = (bitField0_ & ~0x40000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_TableResponseYYQF_descriptor;
      }

      public protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF getDefaultInstanceForType() {
        return protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF.getDefaultInstance();
      }

      public protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF build() {
        protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF buildPartial() {
        protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF result = new protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (changeCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.changeCardsData_ = changeCardsData_;
        } else {
          result.changeCardsData_ = changeCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.playerPass_ = playerPass_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.magicCard_ = magicCard_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000200;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00100000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          playerYou_ = java.util.Collections.unmodifiableList(playerYou_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.playerYou_ = playerYou_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          scoreCard_ = java.util.Collections.unmodifiableList(scoreCard_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.scoreCard_ = scoreCard_;
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          playerScores_ = java.util.Collections.unmodifiableList(playerScores_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.playerScores_ = playerScores_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.outCardTime_ = outCardTime_;
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          roundScores_ = java.util.Collections.unmodifiableList(roundScores_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.roundScores_ = roundScores_;
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          boomScores_ = java.util.Collections.unmodifiableList(boomScores_);
          bitField0_ = (bitField0_ & ~0x04000000);
        }
        result.boomScores_ = boomScores_;
        if (((bitField0_ & 0x08000000) == 0x08000000)) {
          roundBoomScores_ = java.util.Collections.unmodifiableList(roundBoomScores_);
          bitField0_ = (bitField0_ & ~0x08000000);
        }
        result.roundBoomScores_ = roundBoomScores_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.baseCardsCount_ = baseCardsCount_;
        if (((bitField0_ & 0x20000000) == 0x20000000)) {
          baseCardsData_ = java.util.Collections.unmodifiableList(baseCardsData_);
          bitField0_ = (bitField0_ & ~0x20000000);
        }
        result.baseCardsData_ = baseCardsData_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.isEnd_ = isEnd_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF) {
          return mergeFrom((protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF other) {
        if (other == protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (changeCardsDataBuilder_ == null) {
          if (!other.changeCardsData_.isEmpty()) {
            if (changeCardsData_.isEmpty()) {
              changeCardsData_ = other.changeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureChangeCardsDataIsMutable();
              changeCardsData_.addAll(other.changeCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.changeCardsData_.isEmpty()) {
            if (changeCardsDataBuilder_.isEmpty()) {
              changeCardsDataBuilder_.dispose();
              changeCardsDataBuilder_ = null;
              changeCardsData_ = other.changeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
              changeCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChangeCardsDataFieldBuilder() : null;
            } else {
              changeCardsDataBuilder_.addAllMessages(other.changeCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasMagicCard()) {
          setMagicCard(other.getMagicCard());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00040000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00100000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00100000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.playerYou_.isEmpty()) {
          if (playerYou_.isEmpty()) {
            playerYou_ = other.playerYou_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensurePlayerYouIsMutable();
            playerYou_.addAll(other.playerYou_);
          }
          onChanged();
        }
        if (!other.scoreCard_.isEmpty()) {
          if (scoreCard_.isEmpty()) {
            scoreCard_ = other.scoreCard_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureScoreCardIsMutable();
            scoreCard_.addAll(other.scoreCard_);
          }
          onChanged();
        }
        if (!other.playerScores_.isEmpty()) {
          if (playerScores_.isEmpty()) {
            playerScores_ = other.playerScores_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensurePlayerScoresIsMutable();
            playerScores_.addAll(other.playerScores_);
          }
          onChanged();
        }
        if (other.hasOutCardTime()) {
          setOutCardTime(other.getOutCardTime());
        }
        if (!other.roundScores_.isEmpty()) {
          if (roundScores_.isEmpty()) {
            roundScores_ = other.roundScores_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureRoundScoresIsMutable();
            roundScores_.addAll(other.roundScores_);
          }
          onChanged();
        }
        if (!other.boomScores_.isEmpty()) {
          if (boomScores_.isEmpty()) {
            boomScores_ = other.boomScores_;
            bitField0_ = (bitField0_ & ~0x04000000);
          } else {
            ensureBoomScoresIsMutable();
            boomScores_.addAll(other.boomScores_);
          }
          onChanged();
        }
        if (!other.roundBoomScores_.isEmpty()) {
          if (roundBoomScores_.isEmpty()) {
            roundBoomScores_ = other.roundBoomScores_;
            bitField0_ = (bitField0_ & ~0x08000000);
          } else {
            ensureRoundBoomScoresIsMutable();
            roundBoomScores_.addAll(other.roundBoomScores_);
          }
          onChanged();
        }
        if (other.hasBaseCardsCount()) {
          setBaseCardsCount(other.getBaseCardsCount());
        }
        if (!other.baseCardsData_.isEmpty()) {
          if (baseCardsData_.isEmpty()) {
            baseCardsData_ = other.baseCardsData_;
            bitField0_ = (bitField0_ & ~0x20000000);
          } else {
            ensureBaseCardsDataIsMutable();
            baseCardsData_.addAll(other.baseCardsData_);
          }
          onChanged();
        }
        if (other.hasIsEnd()) {
          setIsEnd(other.getIsEnd());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yyqf.YYQFRsp.TableResponseYYQF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated .Int32ArrayResponse change_cards_data = 6;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> changeCardsData_ =
        java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          changeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(changeCardsData_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> changeCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChangeCardsDataList() {
        if (changeCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(changeCardsData_);
        } else {
          return changeCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.size();
        } else {
          return changeCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index) {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.get(index);
        } else {
          return changeCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.set(index, value);
          onChanged();
        } else {
          changeCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(value);
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(index, value);
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          super.addAll(values, changeCardsData_);
          onChanged();
        } else {
          changeCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        if (changeCardsDataBuilder_ == null) {
          changeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          changeCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder removeChangeCardsData(int index) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.remove(index);
          onChanged();
        } else {
          changeCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getChangeCardsDataBuilder(
          int index) {
        return getChangeCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
          int index) {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.get(index);  } else {
          return changeCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getChangeCardsDataOrBuilderList() {
        if (changeCardsDataBuilder_ != null) {
          return changeCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(changeCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChangeCardsDataBuilder() {
        return getChangeCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChangeCardsDataBuilder(
          int index) {
        return getChangeCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getChangeCardsDataBuilderList() {
        return getChangeCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getChangeCardsDataFieldBuilder() {
        if (changeCardsDataBuilder_ == null) {
          changeCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  changeCardsData_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          changeCardsData_ = null;
        }
        return changeCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 7;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 8;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 9;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 10;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000200;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 11;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 12;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 13;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00001000;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00001000);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 14;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00002000;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00002000);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 magic_card = 15;
      private int magicCard_ ;
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public boolean hasMagicCard() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public int getMagicCard() {
        return magicCard_;
      }
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public Builder setMagicCard(int value) {
        bitField0_ |= 0x00004000;
        magicCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public Builder clearMagicCard() {
        bitField0_ = (bitField0_ & ~0x00004000);
        magicCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 16;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00008000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00008000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 17;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00010000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00010000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 18;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 19;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00040000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00040000) == 0x00040000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .pdk.RoomInfoYYQF room_info = 20;
      private protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              roomInfo_ != protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .pdk.RoomPlayerResponseYYQF players = 21;
      private java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF>(players_);
          bitField0_ |= 0x00100000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> playersBuilder_;

      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder addPlayers(protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public java.util.List<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.getDefaultInstance());
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.getDefaultInstance());
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 21;</code>
       */
      public java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00100000) == 0x00100000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 player_you = 22;
      private java.util.List<java.lang.Integer> playerYou_ = java.util.Collections.emptyList();
      private void ensurePlayerYouIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          playerYou_ = new java.util.ArrayList<java.lang.Integer>(playerYou_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public java.util.List<java.lang.Integer>
          getPlayerYouList() {
        return java.util.Collections.unmodifiableList(playerYou_);
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public int getPlayerYouCount() {
        return playerYou_.size();
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public int getPlayerYou(int index) {
        return playerYou_.get(index);
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public Builder setPlayerYou(
          int index, int value) {
        ensurePlayerYouIsMutable();
        playerYou_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public Builder addPlayerYou(int value) {
        ensurePlayerYouIsMutable();
        playerYou_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public Builder addAllPlayerYou(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerYouIsMutable();
        super.addAll(values, playerYou_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public Builder clearPlayerYou() {
        playerYou_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 score_card = 24;
      private java.util.List<java.lang.Integer> scoreCard_ = java.util.Collections.emptyList();
      private void ensureScoreCardIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          scoreCard_ = new java.util.ArrayList<java.lang.Integer>(scoreCard_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getScoreCardList() {
        return java.util.Collections.unmodifiableList(scoreCard_);
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public int getScoreCardCount() {
        return scoreCard_.size();
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public int getScoreCard(int index) {
        return scoreCard_.get(index);
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public Builder setScoreCard(
          int index, int value) {
        ensureScoreCardIsMutable();
        scoreCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public Builder addScoreCard(int value) {
        ensureScoreCardIsMutable();
        scoreCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public Builder addAllScoreCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureScoreCardIsMutable();
        super.addAll(values, scoreCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public Builder clearScoreCard() {
        scoreCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // repeated int32 player_scores = 25;
      private java.util.List<java.lang.Integer> playerScores_ = java.util.Collections.emptyList();
      private void ensurePlayerScoresIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          playerScores_ = new java.util.ArrayList<java.lang.Integer>(playerScores_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated int32 player_scores = 25;</code>
       *
       * <pre>
       *每个玩家的总分数 持续更新
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerScoresList() {
        return java.util.Collections.unmodifiableList(playerScores_);
      }
      /**
       * <code>repeated int32 player_scores = 25;</code>
       *
       * <pre>
       *每个玩家的总分数 持续更新
       * </pre>
       */
      public int getPlayerScoresCount() {
        return playerScores_.size();
      }
      /**
       * <code>repeated int32 player_scores = 25;</code>
       *
       * <pre>
       *每个玩家的总分数 持续更新
       * </pre>
       */
      public int getPlayerScores(int index) {
        return playerScores_.get(index);
      }
      /**
       * <code>repeated int32 player_scores = 25;</code>
       *
       * <pre>
       *每个玩家的总分数 持续更新
       * </pre>
       */
      public Builder setPlayerScores(
          int index, int value) {
        ensurePlayerScoresIsMutable();
        playerScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_scores = 25;</code>
       *
       * <pre>
       *每个玩家的总分数 持续更新
       * </pre>
       */
      public Builder addPlayerScores(int value) {
        ensurePlayerScoresIsMutable();
        playerScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_scores = 25;</code>
       *
       * <pre>
       *每个玩家的总分数 持续更新
       * </pre>
       */
      public Builder addAllPlayerScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerScoresIsMutable();
        super.addAll(values, playerScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_scores = 25;</code>
       *
       * <pre>
       *每个玩家的总分数 持续更新
       * </pre>
       */
      public Builder clearPlayerScores() {
        playerScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      // optional int64 out_card_time = 26;
      private long outCardTime_ ;
      /**
       * <code>optional int64 out_card_time = 26;</code>
       *
       * <pre>
       * 如果轮到自己出牌，会下发自己的出牌时间戳
       * </pre>
       */
      public boolean hasOutCardTime() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int64 out_card_time = 26;</code>
       *
       * <pre>
       * 如果轮到自己出牌，会下发自己的出牌时间戳
       * </pre>
       */
      public long getOutCardTime() {
        return outCardTime_;
      }
      /**
       * <code>optional int64 out_card_time = 26;</code>
       *
       * <pre>
       * 如果轮到自己出牌，会下发自己的出牌时间戳
       * </pre>
       */
      public Builder setOutCardTime(long value) {
        bitField0_ |= 0x01000000;
        outCardTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 out_card_time = 26;</code>
       *
       * <pre>
       * 如果轮到自己出牌，会下发自己的出牌时间戳
       * </pre>
       */
      public Builder clearOutCardTime() {
        bitField0_ = (bitField0_ & ~0x01000000);
        outCardTime_ = 0L;
        onChanged();
        return this;
      }

      // repeated int32 round_scores = 27;
      private java.util.List<java.lang.Integer> roundScores_ = java.util.Collections.emptyList();
      private void ensureRoundScoresIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          roundScores_ = new java.util.ArrayList<java.lang.Integer>(roundScores_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家当前局的分数 持续更新
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundScoresList() {
        return java.util.Collections.unmodifiableList(roundScores_);
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家当前局的分数 持续更新
       * </pre>
       */
      public int getRoundScoresCount() {
        return roundScores_.size();
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家当前局的分数 持续更新
       * </pre>
       */
      public int getRoundScores(int index) {
        return roundScores_.get(index);
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家当前局的分数 持续更新
       * </pre>
       */
      public Builder setRoundScores(
          int index, int value) {
        ensureRoundScoresIsMutable();
        roundScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家当前局的分数 持续更新
       * </pre>
       */
      public Builder addRoundScores(int value) {
        ensureRoundScoresIsMutable();
        roundScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家当前局的分数 持续更新
       * </pre>
       */
      public Builder addAllRoundScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundScoresIsMutable();
        super.addAll(values, roundScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家当前局的分数 持续更新
       * </pre>
       */
      public Builder clearRoundScores() {
        roundScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      // repeated int32 boom_scores = 28;
      private java.util.List<java.lang.Integer> boomScores_ = java.util.Collections.emptyList();
      private void ensureBoomScoresIsMutable() {
        if (!((bitField0_ & 0x04000000) == 0x04000000)) {
          boomScores_ = new java.util.ArrayList<java.lang.Integer>(boomScores_);
          bitField0_ |= 0x04000000;
         }
      }
      /**
       * <code>repeated int32 boom_scores = 28;</code>
       *
       * <pre>
       *每个玩家的炸弹分数 持续更新
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBoomScoresList() {
        return java.util.Collections.unmodifiableList(boomScores_);
      }
      /**
       * <code>repeated int32 boom_scores = 28;</code>
       *
       * <pre>
       *每个玩家的炸弹分数 持续更新
       * </pre>
       */
      public int getBoomScoresCount() {
        return boomScores_.size();
      }
      /**
       * <code>repeated int32 boom_scores = 28;</code>
       *
       * <pre>
       *每个玩家的炸弹分数 持续更新
       * </pre>
       */
      public int getBoomScores(int index) {
        return boomScores_.get(index);
      }
      /**
       * <code>repeated int32 boom_scores = 28;</code>
       *
       * <pre>
       *每个玩家的炸弹分数 持续更新
       * </pre>
       */
      public Builder setBoomScores(
          int index, int value) {
        ensureBoomScoresIsMutable();
        boomScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_scores = 28;</code>
       *
       * <pre>
       *每个玩家的炸弹分数 持续更新
       * </pre>
       */
      public Builder addBoomScores(int value) {
        ensureBoomScoresIsMutable();
        boomScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_scores = 28;</code>
       *
       * <pre>
       *每个玩家的炸弹分数 持续更新
       * </pre>
       */
      public Builder addAllBoomScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoomScoresIsMutable();
        super.addAll(values, boomScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_scores = 28;</code>
       *
       * <pre>
       *每个玩家的炸弹分数 持续更新
       * </pre>
       */
      public Builder clearBoomScores() {
        boomScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        onChanged();
        return this;
      }

      // repeated int32 round_boom_scores = 29;
      private java.util.List<java.lang.Integer> roundBoomScores_ = java.util.Collections.emptyList();
      private void ensureRoundBoomScoresIsMutable() {
        if (!((bitField0_ & 0x08000000) == 0x08000000)) {
          roundBoomScores_ = new java.util.ArrayList<java.lang.Integer>(roundBoomScores_);
          bitField0_ |= 0x08000000;
         }
      }
      /**
       * <code>repeated int32 round_boom_scores = 29;</code>
       *
       * <pre>
       *每个玩家当前局的炸弹分数 持续更新
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundBoomScoresList() {
        return java.util.Collections.unmodifiableList(roundBoomScores_);
      }
      /**
       * <code>repeated int32 round_boom_scores = 29;</code>
       *
       * <pre>
       *每个玩家当前局的炸弹分数 持续更新
       * </pre>
       */
      public int getRoundBoomScoresCount() {
        return roundBoomScores_.size();
      }
      /**
       * <code>repeated int32 round_boom_scores = 29;</code>
       *
       * <pre>
       *每个玩家当前局的炸弹分数 持续更新
       * </pre>
       */
      public int getRoundBoomScores(int index) {
        return roundBoomScores_.get(index);
      }
      /**
       * <code>repeated int32 round_boom_scores = 29;</code>
       *
       * <pre>
       *每个玩家当前局的炸弹分数 持续更新
       * </pre>
       */
      public Builder setRoundBoomScores(
          int index, int value) {
        ensureRoundBoomScoresIsMutable();
        roundBoomScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_boom_scores = 29;</code>
       *
       * <pre>
       *每个玩家当前局的炸弹分数 持续更新
       * </pre>
       */
      public Builder addRoundBoomScores(int value) {
        ensureRoundBoomScoresIsMutable();
        roundBoomScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_boom_scores = 29;</code>
       *
       * <pre>
       *每个玩家当前局的炸弹分数 持续更新
       * </pre>
       */
      public Builder addAllRoundBoomScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundBoomScoresIsMutable();
        super.addAll(values, roundBoomScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_boom_scores = 29;</code>
       *
       * <pre>
       *每个玩家当前局的炸弹分数 持续更新
       * </pre>
       */
      public Builder clearRoundBoomScores() {
        roundBoomScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        onChanged();
        return this;
      }

      // optional int32 base_cards_count = 30;
      private int baseCardsCount_ ;
      /**
       * <code>optional int32 base_cards_count = 30;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public boolean hasBaseCardsCount() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional int32 base_cards_count = 30;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public int getBaseCardsCount() {
        return baseCardsCount_;
      }
      /**
       * <code>optional int32 base_cards_count = 30;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public Builder setBaseCardsCount(int value) {
        bitField0_ |= 0x10000000;
        baseCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 base_cards_count = 30;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public Builder clearBaseCardsCount() {
        bitField0_ = (bitField0_ & ~0x10000000);
        baseCardsCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 base_cards_data = 31;
      private java.util.List<java.lang.Integer> baseCardsData_ = java.util.Collections.emptyList();
      private void ensureBaseCardsDataIsMutable() {
        if (!((bitField0_ & 0x20000000) == 0x20000000)) {
          baseCardsData_ = new java.util.ArrayList<java.lang.Integer>(baseCardsData_);
          bitField0_ |= 0x20000000;
         }
      }
      /**
       * <code>repeated int32 base_cards_data = 31;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBaseCardsDataList() {
        return java.util.Collections.unmodifiableList(baseCardsData_);
      }
      /**
       * <code>repeated int32 base_cards_data = 31;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public int getBaseCardsDataCount() {
        return baseCardsData_.size();
      }
      /**
       * <code>repeated int32 base_cards_data = 31;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public int getBaseCardsData(int index) {
        return baseCardsData_.get(index);
      }
      /**
       * <code>repeated int32 base_cards_data = 31;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder setBaseCardsData(
          int index, int value) {
        ensureBaseCardsDataIsMutable();
        baseCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 31;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder addBaseCardsData(int value) {
        ensureBaseCardsDataIsMutable();
        baseCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 31;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder addAllBaseCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBaseCardsDataIsMutable();
        super.addAll(values, baseCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 31;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder clearBaseCardsData() {
        baseCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x20000000);
        onChanged();
        return this;
      }

      // optional bool is_end = 32;
      private boolean isEnd_ ;
      /**
       * <code>optional bool is_end = 32;</code>
       *
       * <pre>
       * 是否需要结算(false:正常打牌 true:一局结算开始展示底牌)
       * </pre>
       */
      public boolean hasIsEnd() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional bool is_end = 32;</code>
       *
       * <pre>
       * 是否需要结算(false:正常打牌 true:一局结算开始展示底牌)
       * </pre>
       */
      public boolean getIsEnd() {
        return isEnd_;
      }
      /**
       * <code>optional bool is_end = 32;</code>
       *
       * <pre>
       * 是否需要结算(false:正常打牌 true:一局结算开始展示底牌)
       * </pre>
       */
      public Builder setIsEnd(boolean value) {
        bitField0_ |= 0x40000000;
        isEnd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_end = 32;</code>
       *
       * <pre>
       * 是否需要结算(false:正常打牌 true:一局结算开始展示底牌)
       * </pre>
       */
      public Builder clearIsEnd() {
        bitField0_ = (bitField0_ & ~0x40000000);
        isEnd_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pdk.TableResponseYYQF)
    }

    static {
      defaultInstance = new TableResponseYYQF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pdk.TableResponseYYQF)
  }

  public interface GameStartYYQFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .pdk.RoomInfoYYQF room_info = 5;
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF getRoomInfo();
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder getRoomInfoOrBuilder();

    // repeated .pdk.RoomPlayerResponseYYQF players = 7;
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
     */
    java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> 
        getPlayersList();
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF getPlayers(int index);
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
     */
    java.util.List<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
     */
    protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 cur_banker = 1;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    int getCurBanker();

    // repeated int32 card_count = 2;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 3;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 display_time = 6;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 base_cards_count = 8;
    /**
     * <code>optional int32 base_cards_count = 8;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    boolean hasBaseCardsCount();
    /**
     * <code>optional int32 base_cards_count = 8;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    int getBaseCardsCount();

    // repeated int32 base_cards_data = 9;
    /**
     * <code>repeated int32 base_cards_data = 9;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getBaseCardsDataList();
    /**
     * <code>repeated int32 base_cards_data = 9;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    int getBaseCardsDataCount();
    /**
     * <code>repeated int32 base_cards_data = 9;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    int getBaseCardsData(int index);
  }
  /**
   * Protobuf type {@code pdk.GameStartYYQF}
   */
  public static final class GameStartYYQF extends
      com.google.protobuf.GeneratedMessage
      implements GameStartYYQFOrBuilder {
    // Use GameStartYYQF.newBuilder() to construct.
    private GameStartYYQF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStartYYQF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStartYYQF defaultInstance;
    public static GameStartYYQF getDefaultInstance() {
      return defaultInstance;
    }

    public GameStartYYQF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStartYYQF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              curBanker_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              displayTime_ = input.readInt32();
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                players_ = new java.util.ArrayList<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(input.readMessage(protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.PARSER, extensionRegistry));
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              baseCardsCount_ = input.readInt32();
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                baseCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              baseCardsData_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                baseCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                baseCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          baseCardsData_ = java.util.Collections.unmodifiableList(baseCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_GameStartYYQF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_GameStartYYQF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF.class, protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStartYYQF> PARSER =
        new com.google.protobuf.AbstractParser<GameStartYYQF>() {
      public GameStartYYQF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStartYYQF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStartYYQF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .pdk.RoomInfoYYQF room_info = 5;
    public static final int ROOM_INFO_FIELD_NUMBER = 5;
    private protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF roomInfo_;
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .pdk.RoomPlayerResponseYYQF players = 7;
    public static final int PLAYERS_FIELD_NUMBER = 7;
    private java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> players_;
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
     */
    public java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
     */
    public java.util.List<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
     */
    public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 cur_banker = 1;
    public static final int CUR_BANKER_FIELD_NUMBER = 1;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // repeated int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 display_time = 6;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 6;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 base_cards_count = 8;
    public static final int BASE_CARDS_COUNT_FIELD_NUMBER = 8;
    private int baseCardsCount_;
    /**
     * <code>optional int32 base_cards_count = 8;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    public boolean hasBaseCardsCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 base_cards_count = 8;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    public int getBaseCardsCount() {
      return baseCardsCount_;
    }

    // repeated int32 base_cards_data = 9;
    public static final int BASE_CARDS_DATA_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> baseCardsData_;
    /**
     * <code>repeated int32 base_cards_data = 9;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBaseCardsDataList() {
      return baseCardsData_;
    }
    /**
     * <code>repeated int32 base_cards_data = 9;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public int getBaseCardsDataCount() {
      return baseCardsData_.size();
    }
    /**
     * <code>repeated int32 base_cards_data = 9;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public int getBaseCardsData(int index) {
      return baseCardsData_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      curBanker_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      baseCardsCount_ = 0;
      baseCardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(1, curBanker_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(2, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(5, roomInfo_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(6, displayTime_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(7, players_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, baseCardsCount_);
      }
      for (int i = 0; i < baseCardsData_.size(); i++) {
        output.writeInt32(9, baseCardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curBanker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, roomInfo_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, displayTime_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, players_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, baseCardsCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < baseCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(baseCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getBaseCardsDataList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pdk.GameStartYYQF}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yyqf.YYQFRsp.GameStartYYQFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_GameStartYYQF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_GameStartYYQF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF.class, protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF.Builder.class);
      }

      // Construct using protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        baseCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        baseCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_GameStartYYQF_descriptor;
      }

      public protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF getDefaultInstanceForType() {
        return protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF.getDefaultInstance();
      }

      public protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF build() {
        protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF buildPartial() {
        protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF result = new protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curBanker_ = curBanker_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.baseCardsCount_ = baseCardsCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          baseCardsData_ = java.util.Collections.unmodifiableList(baseCardsData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.baseCardsData_ = baseCardsData_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF) {
          return mergeFrom((protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF other) {
        if (other == protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasBaseCardsCount()) {
          setBaseCardsCount(other.getBaseCardsCount());
        }
        if (!other.baseCardsData_.isEmpty()) {
          if (baseCardsData_.isEmpty()) {
            baseCardsData_ = other.baseCardsData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureBaseCardsDataIsMutable();
            baseCardsData_.addAll(other.baseCardsData_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yyqf.YYQFRsp.GameStartYYQF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .pdk.RoomInfoYYQF room_info = 5;
      private protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .pdk.RoomInfoYYQF room_info = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomInfoYYQFOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .pdk.RoomPlayerResponseYYQF players = 7;
      private java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = new java.util.ArrayList<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> playersBuilder_;

      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public Builder addPlayers(protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public java.util.List<? extends protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.getDefaultInstance());
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.getDefaultInstance());
      }
      /**
       * <code>repeated .pdk.RoomPlayerResponseYYQF players = 7;</code>
       */
      public java.util.List<protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQF.Builder, protobuf.clazz.yyqf.YYQFRsp.RoomPlayerResponseYYQFOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 cur_banker = 1;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000004;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000004);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 2;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 display_time = 6;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000020;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 base_cards_count = 8;
      private int baseCardsCount_ ;
      /**
       * <code>optional int32 base_cards_count = 8;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public boolean hasBaseCardsCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 base_cards_count = 8;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public int getBaseCardsCount() {
        return baseCardsCount_;
      }
      /**
       * <code>optional int32 base_cards_count = 8;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public Builder setBaseCardsCount(int value) {
        bitField0_ |= 0x00000040;
        baseCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 base_cards_count = 8;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public Builder clearBaseCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        baseCardsCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 base_cards_data = 9;
      private java.util.List<java.lang.Integer> baseCardsData_ = java.util.Collections.emptyList();
      private void ensureBaseCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          baseCardsData_ = new java.util.ArrayList<java.lang.Integer>(baseCardsData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 base_cards_data = 9;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBaseCardsDataList() {
        return java.util.Collections.unmodifiableList(baseCardsData_);
      }
      /**
       * <code>repeated int32 base_cards_data = 9;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public int getBaseCardsDataCount() {
        return baseCardsData_.size();
      }
      /**
       * <code>repeated int32 base_cards_data = 9;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public int getBaseCardsData(int index) {
        return baseCardsData_.get(index);
      }
      /**
       * <code>repeated int32 base_cards_data = 9;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder setBaseCardsData(
          int index, int value) {
        ensureBaseCardsDataIsMutable();
        baseCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 9;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder addBaseCardsData(int value) {
        ensureBaseCardsDataIsMutable();
        baseCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 9;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder addAllBaseCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBaseCardsDataIsMutable();
        super.addAll(values, baseCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 9;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder clearBaseCardsData() {
        baseCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pdk.GameStartYYQF)
    }

    static {
      defaultInstance = new GameStartYYQF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pdk.GameStartYYQF)
  }

  public interface CutCardOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cut_card_player = 1;
    /**
     * <code>optional int32 cut_card_player = 1;</code>
     *
     * <pre>
     * 切牌玩家
     * </pre>
     */
    boolean hasCutCardPlayer();
    /**
     * <code>optional int32 cut_card_player = 1;</code>
     *
     * <pre>
     * 切牌玩家
     * </pre>
     */
    int getCutCardPlayer();

    // optional int32 cut_card_data = 2;
    /**
     * <code>optional int32 cut_card_data = 2;</code>
     *
     * <pre>
     * 切牌数据
     * </pre>
     */
    boolean hasCutCardData();
    /**
     * <code>optional int32 cut_card_data = 2;</code>
     *
     * <pre>
     * 切牌数据
     * </pre>
     */
    int getCutCardData();

    // optional int32 display_time = 3;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code pdk.CutCard}
   */
  public static final class CutCard extends
      com.google.protobuf.GeneratedMessage
      implements CutCardOrBuilder {
    // Use CutCard.newBuilder() to construct.
    private CutCard(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CutCard(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CutCard defaultInstance;
    public static CutCard getDefaultInstance() {
      return defaultInstance;
    }

    public CutCard getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CutCard(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cutCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cutCardData_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_CutCard_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_CutCard_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yyqf.YYQFRsp.CutCard.class, protobuf.clazz.yyqf.YYQFRsp.CutCard.Builder.class);
    }

    public static com.google.protobuf.Parser<CutCard> PARSER =
        new com.google.protobuf.AbstractParser<CutCard>() {
      public CutCard parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CutCard(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CutCard> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cut_card_player = 1;
    public static final int CUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int cutCardPlayer_;
    /**
     * <code>optional int32 cut_card_player = 1;</code>
     *
     * <pre>
     * 切牌玩家
     * </pre>
     */
    public boolean hasCutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cut_card_player = 1;</code>
     *
     * <pre>
     * 切牌玩家
     * </pre>
     */
    public int getCutCardPlayer() {
      return cutCardPlayer_;
    }

    // optional int32 cut_card_data = 2;
    public static final int CUT_CARD_DATA_FIELD_NUMBER = 2;
    private int cutCardData_;
    /**
     * <code>optional int32 cut_card_data = 2;</code>
     *
     * <pre>
     * 切牌数据
     * </pre>
     */
    public boolean hasCutCardData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cut_card_data = 2;</code>
     *
     * <pre>
     * 切牌数据
     * </pre>
     */
    public int getCutCardData() {
      return cutCardData_;
    }

    // optional int32 display_time = 3;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 3;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      cutCardPlayer_ = 0;
      cutCardData_ = 0;
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cutCardPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, cutCardData_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cutCardPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cutCardData_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yyqf.YYQFRsp.CutCard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.CutCard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.CutCard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.CutCard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.CutCard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.CutCard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.CutCard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.CutCard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.CutCard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.CutCard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yyqf.YYQFRsp.CutCard prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pdk.CutCard}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yyqf.YYQFRsp.CutCardOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_CutCard_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_CutCard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yyqf.YYQFRsp.CutCard.class, protobuf.clazz.yyqf.YYQFRsp.CutCard.Builder.class);
      }

      // Construct using protobuf.clazz.yyqf.YYQFRsp.CutCard.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cutCardData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_CutCard_descriptor;
      }

      public protobuf.clazz.yyqf.YYQFRsp.CutCard getDefaultInstanceForType() {
        return protobuf.clazz.yyqf.YYQFRsp.CutCard.getDefaultInstance();
      }

      public protobuf.clazz.yyqf.YYQFRsp.CutCard build() {
        protobuf.clazz.yyqf.YYQFRsp.CutCard result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yyqf.YYQFRsp.CutCard buildPartial() {
        protobuf.clazz.yyqf.YYQFRsp.CutCard result = new protobuf.clazz.yyqf.YYQFRsp.CutCard(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cutCardPlayer_ = cutCardPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cutCardData_ = cutCardData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yyqf.YYQFRsp.CutCard) {
          return mergeFrom((protobuf.clazz.yyqf.YYQFRsp.CutCard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yyqf.YYQFRsp.CutCard other) {
        if (other == protobuf.clazz.yyqf.YYQFRsp.CutCard.getDefaultInstance()) return this;
        if (other.hasCutCardPlayer()) {
          setCutCardPlayer(other.getCutCardPlayer());
        }
        if (other.hasCutCardData()) {
          setCutCardData(other.getCutCardData());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yyqf.YYQFRsp.CutCard parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yyqf.YYQFRsp.CutCard) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cut_card_player = 1;
      private int cutCardPlayer_ ;
      /**
       * <code>optional int32 cut_card_player = 1;</code>
       *
       * <pre>
       * 切牌玩家
       * </pre>
       */
      public boolean hasCutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cut_card_player = 1;</code>
       *
       * <pre>
       * 切牌玩家
       * </pre>
       */
      public int getCutCardPlayer() {
        return cutCardPlayer_;
      }
      /**
       * <code>optional int32 cut_card_player = 1;</code>
       *
       * <pre>
       * 切牌玩家
       * </pre>
       */
      public Builder setCutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        cutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cut_card_player = 1;</code>
       *
       * <pre>
       * 切牌玩家
       * </pre>
       */
      public Builder clearCutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cut_card_data = 2;
      private int cutCardData_ ;
      /**
       * <code>optional int32 cut_card_data = 2;</code>
       *
       * <pre>
       * 切牌数据
       * </pre>
       */
      public boolean hasCutCardData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cut_card_data = 2;</code>
       *
       * <pre>
       * 切牌数据
       * </pre>
       */
      public int getCutCardData() {
        return cutCardData_;
      }
      /**
       * <code>optional int32 cut_card_data = 2;</code>
       *
       * <pre>
       * 切牌数据
       * </pre>
       */
      public Builder setCutCardData(int value) {
        bitField0_ |= 0x00000002;
        cutCardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cut_card_data = 2;</code>
       *
       * <pre>
       * 切牌数据
       * </pre>
       */
      public Builder clearCutCardData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cutCardData_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 3;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000004;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pdk.CutCard)
    }

    static {
      defaultInstance = new CutCard(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pdk.CutCard)
  }

  public interface ShowLastCardOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 rank_first_player = 1;
    /**
     * <code>optional int32 rank_first_player = 1;</code>
     *
     * <pre>
     * 一游玩家
     * </pre>
     */
    boolean hasRankFirstPlayer();
    /**
     * <code>optional int32 rank_first_player = 1;</code>
     *
     * <pre>
     * 一游玩家
     * </pre>
     */
    int getRankFirstPlayer();

    // optional int32 base_cards_count = 2;
    /**
     * <code>optional int32 base_cards_count = 2;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    boolean hasBaseCardsCount();
    /**
     * <code>optional int32 base_cards_count = 2;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    int getBaseCardsCount();

    // repeated int32 base_cards_data = 3;
    /**
     * <code>repeated int32 base_cards_data = 3;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getBaseCardsDataList();
    /**
     * <code>repeated int32 base_cards_data = 3;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    int getBaseCardsDataCount();
    /**
     * <code>repeated int32 base_cards_data = 3;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    int getBaseCardsData(int index);

    // optional int32 base_cards_score = 4;
    /**
     * <code>optional int32 base_cards_score = 4;</code>
     *
     * <pre>
     * 底牌分数
     * </pre>
     */
    boolean hasBaseCardsScore();
    /**
     * <code>optional int32 base_cards_score = 4;</code>
     *
     * <pre>
     * 底牌分数
     * </pre>
     */
    int getBaseCardsScore();

    // optional int32 display_time = 5;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 round_scores = 7;
    /**
     * <code>optional int32 round_scores = 7;</code>
     *
     * <pre>
     * 一游玩家当局积分
     * </pre>
     */
    boolean hasRoundScores();
    /**
     * <code>optional int32 round_scores = 7;</code>
     *
     * <pre>
     * 一游玩家当局积分
     * </pre>
     */
    int getRoundScores();

    // optional int32 total_scores = 8;
    /**
     * <code>optional int32 total_scores = 8;</code>
     *
     * <pre>
     * 一游玩家总积分
     * </pre>
     */
    boolean hasTotalScores();
    /**
     * <code>optional int32 total_scores = 8;</code>
     *
     * <pre>
     * 一游玩家总积分
     * </pre>
     */
    int getTotalScores();

    // optional int32 round_boom_scores = 9;
    /**
     * <code>optional int32 round_boom_scores = 9;</code>
     *
     * <pre>
     * 一游玩家当局喜分
     * </pre>
     */
    boolean hasRoundBoomScores();
    /**
     * <code>optional int32 round_boom_scores = 9;</code>
     *
     * <pre>
     * 一游玩家当局喜分
     * </pre>
     */
    int getRoundBoomScores();

    // optional int32 total_boom_scores = 10;
    /**
     * <code>optional int32 total_boom_scores = 10;</code>
     *
     * <pre>
     * 一游玩家总喜分
     * </pre>
     */
    boolean hasTotalBoomScores();
    /**
     * <code>optional int32 total_boom_scores = 10;</code>
     *
     * <pre>
     * 一游玩家总喜分
     * </pre>
     */
    int getTotalBoomScores();
  }
  /**
   * Protobuf type {@code pdk.ShowLastCard}
   */
  public static final class ShowLastCard extends
      com.google.protobuf.GeneratedMessage
      implements ShowLastCardOrBuilder {
    // Use ShowLastCard.newBuilder() to construct.
    private ShowLastCard(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ShowLastCard(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ShowLastCard defaultInstance;
    public static ShowLastCard getDefaultInstance() {
      return defaultInstance;
    }

    public ShowLastCard getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ShowLastCard(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              rankFirstPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              baseCardsCount_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                baseCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              baseCardsData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                baseCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                baseCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              baseCardsScore_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              displayTime_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              roundScores_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              totalScores_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              roundBoomScores_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000080;
              totalBoomScores_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          baseCardsData_ = java.util.Collections.unmodifiableList(baseCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_ShowLastCard_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_ShowLastCard_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yyqf.YYQFRsp.ShowLastCard.class, protobuf.clazz.yyqf.YYQFRsp.ShowLastCard.Builder.class);
    }

    public static com.google.protobuf.Parser<ShowLastCard> PARSER =
        new com.google.protobuf.AbstractParser<ShowLastCard>() {
      public ShowLastCard parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ShowLastCard(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ShowLastCard> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 rank_first_player = 1;
    public static final int RANK_FIRST_PLAYER_FIELD_NUMBER = 1;
    private int rankFirstPlayer_;
    /**
     * <code>optional int32 rank_first_player = 1;</code>
     *
     * <pre>
     * 一游玩家
     * </pre>
     */
    public boolean hasRankFirstPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 rank_first_player = 1;</code>
     *
     * <pre>
     * 一游玩家
     * </pre>
     */
    public int getRankFirstPlayer() {
      return rankFirstPlayer_;
    }

    // optional int32 base_cards_count = 2;
    public static final int BASE_CARDS_COUNT_FIELD_NUMBER = 2;
    private int baseCardsCount_;
    /**
     * <code>optional int32 base_cards_count = 2;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    public boolean hasBaseCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 base_cards_count = 2;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    public int getBaseCardsCount() {
      return baseCardsCount_;
    }

    // repeated int32 base_cards_data = 3;
    public static final int BASE_CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> baseCardsData_;
    /**
     * <code>repeated int32 base_cards_data = 3;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBaseCardsDataList() {
      return baseCardsData_;
    }
    /**
     * <code>repeated int32 base_cards_data = 3;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public int getBaseCardsDataCount() {
      return baseCardsData_.size();
    }
    /**
     * <code>repeated int32 base_cards_data = 3;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public int getBaseCardsData(int index) {
      return baseCardsData_.get(index);
    }

    // optional int32 base_cards_score = 4;
    public static final int BASE_CARDS_SCORE_FIELD_NUMBER = 4;
    private int baseCardsScore_;
    /**
     * <code>optional int32 base_cards_score = 4;</code>
     *
     * <pre>
     * 底牌分数
     * </pre>
     */
    public boolean hasBaseCardsScore() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 base_cards_score = 4;</code>
     *
     * <pre>
     * 底牌分数
     * </pre>
     */
    public int getBaseCardsScore() {
      return baseCardsScore_;
    }

    // optional int32 display_time = 5;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 5;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 round_scores = 7;
    public static final int ROUND_SCORES_FIELD_NUMBER = 7;
    private int roundScores_;
    /**
     * <code>optional int32 round_scores = 7;</code>
     *
     * <pre>
     * 一游玩家当局积分
     * </pre>
     */
    public boolean hasRoundScores() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 round_scores = 7;</code>
     *
     * <pre>
     * 一游玩家当局积分
     * </pre>
     */
    public int getRoundScores() {
      return roundScores_;
    }

    // optional int32 total_scores = 8;
    public static final int TOTAL_SCORES_FIELD_NUMBER = 8;
    private int totalScores_;
    /**
     * <code>optional int32 total_scores = 8;</code>
     *
     * <pre>
     * 一游玩家总积分
     * </pre>
     */
    public boolean hasTotalScores() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 total_scores = 8;</code>
     *
     * <pre>
     * 一游玩家总积分
     * </pre>
     */
    public int getTotalScores() {
      return totalScores_;
    }

    // optional int32 round_boom_scores = 9;
    public static final int ROUND_BOOM_SCORES_FIELD_NUMBER = 9;
    private int roundBoomScores_;
    /**
     * <code>optional int32 round_boom_scores = 9;</code>
     *
     * <pre>
     * 一游玩家当局喜分
     * </pre>
     */
    public boolean hasRoundBoomScores() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 round_boom_scores = 9;</code>
     *
     * <pre>
     * 一游玩家当局喜分
     * </pre>
     */
    public int getRoundBoomScores() {
      return roundBoomScores_;
    }

    // optional int32 total_boom_scores = 10;
    public static final int TOTAL_BOOM_SCORES_FIELD_NUMBER = 10;
    private int totalBoomScores_;
    /**
     * <code>optional int32 total_boom_scores = 10;</code>
     *
     * <pre>
     * 一游玩家总喜分
     * </pre>
     */
    public boolean hasTotalBoomScores() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 total_boom_scores = 10;</code>
     *
     * <pre>
     * 一游玩家总喜分
     * </pre>
     */
    public int getTotalBoomScores() {
      return totalBoomScores_;
    }

    private void initFields() {
      rankFirstPlayer_ = 0;
      baseCardsCount_ = 0;
      baseCardsData_ = java.util.Collections.emptyList();
      baseCardsScore_ = 0;
      displayTime_ = 0;
      roundScores_ = 0;
      totalScores_ = 0;
      roundBoomScores_ = 0;
      totalBoomScores_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, rankFirstPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, baseCardsCount_);
      }
      for (int i = 0; i < baseCardsData_.size(); i++) {
        output.writeInt32(3, baseCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, baseCardsScore_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, displayTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, roundScores_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, totalScores_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(9, roundBoomScores_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(10, totalBoomScores_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, rankFirstPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, baseCardsCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < baseCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(baseCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getBaseCardsDataList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, baseCardsScore_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, displayTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, roundScores_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, totalScores_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, roundBoomScores_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, totalBoomScores_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yyqf.YYQFRsp.ShowLastCard prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pdk.ShowLastCard}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yyqf.YYQFRsp.ShowLastCardOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_ShowLastCard_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_ShowLastCard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yyqf.YYQFRsp.ShowLastCard.class, protobuf.clazz.yyqf.YYQFRsp.ShowLastCard.Builder.class);
      }

      // Construct using protobuf.clazz.yyqf.YYQFRsp.ShowLastCard.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rankFirstPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        baseCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        baseCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        baseCardsScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        roundScores_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        totalScores_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        roundBoomScores_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        totalBoomScores_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yyqf.YYQFRsp.internal_static_pdk_ShowLastCard_descriptor;
      }

      public protobuf.clazz.yyqf.YYQFRsp.ShowLastCard getDefaultInstanceForType() {
        return protobuf.clazz.yyqf.YYQFRsp.ShowLastCard.getDefaultInstance();
      }

      public protobuf.clazz.yyqf.YYQFRsp.ShowLastCard build() {
        protobuf.clazz.yyqf.YYQFRsp.ShowLastCard result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yyqf.YYQFRsp.ShowLastCard buildPartial() {
        protobuf.clazz.yyqf.YYQFRsp.ShowLastCard result = new protobuf.clazz.yyqf.YYQFRsp.ShowLastCard(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.rankFirstPlayer_ = rankFirstPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.baseCardsCount_ = baseCardsCount_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          baseCardsData_ = java.util.Collections.unmodifiableList(baseCardsData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.baseCardsData_ = baseCardsData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.baseCardsScore_ = baseCardsScore_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.roundScores_ = roundScores_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.totalScores_ = totalScores_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.roundBoomScores_ = roundBoomScores_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.totalBoomScores_ = totalBoomScores_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yyqf.YYQFRsp.ShowLastCard) {
          return mergeFrom((protobuf.clazz.yyqf.YYQFRsp.ShowLastCard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yyqf.YYQFRsp.ShowLastCard other) {
        if (other == protobuf.clazz.yyqf.YYQFRsp.ShowLastCard.getDefaultInstance()) return this;
        if (other.hasRankFirstPlayer()) {
          setRankFirstPlayer(other.getRankFirstPlayer());
        }
        if (other.hasBaseCardsCount()) {
          setBaseCardsCount(other.getBaseCardsCount());
        }
        if (!other.baseCardsData_.isEmpty()) {
          if (baseCardsData_.isEmpty()) {
            baseCardsData_ = other.baseCardsData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureBaseCardsDataIsMutable();
            baseCardsData_.addAll(other.baseCardsData_);
          }
          onChanged();
        }
        if (other.hasBaseCardsScore()) {
          setBaseCardsScore(other.getBaseCardsScore());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasRoundScores()) {
          setRoundScores(other.getRoundScores());
        }
        if (other.hasTotalScores()) {
          setTotalScores(other.getTotalScores());
        }
        if (other.hasRoundBoomScores()) {
          setRoundBoomScores(other.getRoundBoomScores());
        }
        if (other.hasTotalBoomScores()) {
          setTotalBoomScores(other.getTotalBoomScores());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yyqf.YYQFRsp.ShowLastCard parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yyqf.YYQFRsp.ShowLastCard) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 rank_first_player = 1;
      private int rankFirstPlayer_ ;
      /**
       * <code>optional int32 rank_first_player = 1;</code>
       *
       * <pre>
       * 一游玩家
       * </pre>
       */
      public boolean hasRankFirstPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 rank_first_player = 1;</code>
       *
       * <pre>
       * 一游玩家
       * </pre>
       */
      public int getRankFirstPlayer() {
        return rankFirstPlayer_;
      }
      /**
       * <code>optional int32 rank_first_player = 1;</code>
       *
       * <pre>
       * 一游玩家
       * </pre>
       */
      public Builder setRankFirstPlayer(int value) {
        bitField0_ |= 0x00000001;
        rankFirstPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rank_first_player = 1;</code>
       *
       * <pre>
       * 一游玩家
       * </pre>
       */
      public Builder clearRankFirstPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        rankFirstPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 base_cards_count = 2;
      private int baseCardsCount_ ;
      /**
       * <code>optional int32 base_cards_count = 2;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public boolean hasBaseCardsCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 base_cards_count = 2;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public int getBaseCardsCount() {
        return baseCardsCount_;
      }
      /**
       * <code>optional int32 base_cards_count = 2;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public Builder setBaseCardsCount(int value) {
        bitField0_ |= 0x00000002;
        baseCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 base_cards_count = 2;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public Builder clearBaseCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        baseCardsCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 base_cards_data = 3;
      private java.util.List<java.lang.Integer> baseCardsData_ = java.util.Collections.emptyList();
      private void ensureBaseCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          baseCardsData_ = new java.util.ArrayList<java.lang.Integer>(baseCardsData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 base_cards_data = 3;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBaseCardsDataList() {
        return java.util.Collections.unmodifiableList(baseCardsData_);
      }
      /**
       * <code>repeated int32 base_cards_data = 3;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public int getBaseCardsDataCount() {
        return baseCardsData_.size();
      }
      /**
       * <code>repeated int32 base_cards_data = 3;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public int getBaseCardsData(int index) {
        return baseCardsData_.get(index);
      }
      /**
       * <code>repeated int32 base_cards_data = 3;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder setBaseCardsData(
          int index, int value) {
        ensureBaseCardsDataIsMutable();
        baseCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 3;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder addBaseCardsData(int value) {
        ensureBaseCardsDataIsMutable();
        baseCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 3;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder addAllBaseCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBaseCardsDataIsMutable();
        super.addAll(values, baseCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 3;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder clearBaseCardsData() {
        baseCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 base_cards_score = 4;
      private int baseCardsScore_ ;
      /**
       * <code>optional int32 base_cards_score = 4;</code>
       *
       * <pre>
       * 底牌分数
       * </pre>
       */
      public boolean hasBaseCardsScore() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 base_cards_score = 4;</code>
       *
       * <pre>
       * 底牌分数
       * </pre>
       */
      public int getBaseCardsScore() {
        return baseCardsScore_;
      }
      /**
       * <code>optional int32 base_cards_score = 4;</code>
       *
       * <pre>
       * 底牌分数
       * </pre>
       */
      public Builder setBaseCardsScore(int value) {
        bitField0_ |= 0x00000008;
        baseCardsScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 base_cards_score = 4;</code>
       *
       * <pre>
       * 底牌分数
       * </pre>
       */
      public Builder clearBaseCardsScore() {
        bitField0_ = (bitField0_ & ~0x00000008);
        baseCardsScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 5;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000010;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 round_scores = 7;
      private int roundScores_ ;
      /**
       * <code>optional int32 round_scores = 7;</code>
       *
       * <pre>
       * 一游玩家当局积分
       * </pre>
       */
      public boolean hasRoundScores() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 round_scores = 7;</code>
       *
       * <pre>
       * 一游玩家当局积分
       * </pre>
       */
      public int getRoundScores() {
        return roundScores_;
      }
      /**
       * <code>optional int32 round_scores = 7;</code>
       *
       * <pre>
       * 一游玩家当局积分
       * </pre>
       */
      public Builder setRoundScores(int value) {
        bitField0_ |= 0x00000020;
        roundScores_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 round_scores = 7;</code>
       *
       * <pre>
       * 一游玩家当局积分
       * </pre>
       */
      public Builder clearRoundScores() {
        bitField0_ = (bitField0_ & ~0x00000020);
        roundScores_ = 0;
        onChanged();
        return this;
      }

      // optional int32 total_scores = 8;
      private int totalScores_ ;
      /**
       * <code>optional int32 total_scores = 8;</code>
       *
       * <pre>
       * 一游玩家总积分
       * </pre>
       */
      public boolean hasTotalScores() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 total_scores = 8;</code>
       *
       * <pre>
       * 一游玩家总积分
       * </pre>
       */
      public int getTotalScores() {
        return totalScores_;
      }
      /**
       * <code>optional int32 total_scores = 8;</code>
       *
       * <pre>
       * 一游玩家总积分
       * </pre>
       */
      public Builder setTotalScores(int value) {
        bitField0_ |= 0x00000040;
        totalScores_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 total_scores = 8;</code>
       *
       * <pre>
       * 一游玩家总积分
       * </pre>
       */
      public Builder clearTotalScores() {
        bitField0_ = (bitField0_ & ~0x00000040);
        totalScores_ = 0;
        onChanged();
        return this;
      }

      // optional int32 round_boom_scores = 9;
      private int roundBoomScores_ ;
      /**
       * <code>optional int32 round_boom_scores = 9;</code>
       *
       * <pre>
       * 一游玩家当局喜分
       * </pre>
       */
      public boolean hasRoundBoomScores() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 round_boom_scores = 9;</code>
       *
       * <pre>
       * 一游玩家当局喜分
       * </pre>
       */
      public int getRoundBoomScores() {
        return roundBoomScores_;
      }
      /**
       * <code>optional int32 round_boom_scores = 9;</code>
       *
       * <pre>
       * 一游玩家当局喜分
       * </pre>
       */
      public Builder setRoundBoomScores(int value) {
        bitField0_ |= 0x00000080;
        roundBoomScores_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 round_boom_scores = 9;</code>
       *
       * <pre>
       * 一游玩家当局喜分
       * </pre>
       */
      public Builder clearRoundBoomScores() {
        bitField0_ = (bitField0_ & ~0x00000080);
        roundBoomScores_ = 0;
        onChanged();
        return this;
      }

      // optional int32 total_boom_scores = 10;
      private int totalBoomScores_ ;
      /**
       * <code>optional int32 total_boom_scores = 10;</code>
       *
       * <pre>
       * 一游玩家总喜分
       * </pre>
       */
      public boolean hasTotalBoomScores() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 total_boom_scores = 10;</code>
       *
       * <pre>
       * 一游玩家总喜分
       * </pre>
       */
      public int getTotalBoomScores() {
        return totalBoomScores_;
      }
      /**
       * <code>optional int32 total_boom_scores = 10;</code>
       *
       * <pre>
       * 一游玩家总喜分
       * </pre>
       */
      public Builder setTotalBoomScores(int value) {
        bitField0_ |= 0x00000100;
        totalBoomScores_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 total_boom_scores = 10;</code>
       *
       * <pre>
       * 一游玩家总喜分
       * </pre>
       */
      public Builder clearTotalBoomScores() {
        bitField0_ = (bitField0_ & ~0x00000100);
        totalBoomScores_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pdk.ShowLastCard)
    }

    static {
      defaultInstance = new ShowLastCard(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pdk.ShowLastCard)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pdk_RoomInfoYYQF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pdk_RoomInfoYYQF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pdk_RoomPlayerResponseYYQF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pdk_RoomPlayerResponseYYQF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pdk_RefreshCardsYYQF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pdk_RefreshCardsYYQF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pdk_OutCardDataYYQF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pdk_OutCardDataYYQF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pdk_PukeGameEndYYQF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pdk_PukeGameEndYYQF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pdk_TableResponseYYQF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pdk_TableResponseYYQF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pdk_GameStartYYQF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pdk_GameStartYYQF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pdk_CutCard_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pdk_CutCard_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pdk_ShowLastCard_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pdk_ShowLastCard_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024yyqf/yyqfProto.proto\022\003pdk\032\024basic/proto" +
      "col.proto\"\240\002\n\014RoomInfoYYQF\022\017\n\007room_id\030\001 " +
      "\001(\005\022\027\n\017game_type_index\030\004 \001(\005\022\027\n\017game_rul" +
      "e_index\030\002 \001(\005\022\032\n\022game_rule_index_ex\030\014 \003(" +
      "\005\022\025\n\rgame_rule_des\030\003 \001(\t\022\022\n\ngame_round\030\005" +
      " \001(\005\022\021\n\tcur_round\030\006 \001(\005\022\023\n\013game_status\030\007" +
      " \001(\005\022\030\n\020create_player_id\030\010 \001(\003\022\027\n\017begin_" +
      "left_card\030\t \001(\005\022\026\n\016_banker_player\030\n \001(\005\022" +
      "\023\n\013create_name\030\013 \001(\t\"\246\002\n\026RoomPlayerRespo" +
      "nseYYQF\022\022\n\naccount_id\030\001 \001(\003\022\021\n\tuser_name",
      "\030\002 \001(\t\022\024\n\014head_img_url\030\003 \001(\t\022\022\n\nseat_ind" +
      "ex\030\004 \001(\005\022\n\n\002ip\030\005 \001(\t\022\016\n\006online\030\006 \001(\005\022\013\n\003" +
      "sex\030\007 \001(\005\022\r\n\005score\030\010 \001(\002\022\r\n\005ready\030\t \001(\005\022" +
      "\017\n\007ip_addr\030\n \001(\t\022%\n\rlocationInfor\030\013 \001(\0132" +
      "\016.LocationInfor\022\022\n\nis_trustee\030\014 \001(\010\022\r\n\005m" +
      "oney\030\r \001(\003\022\014\n\004gold\030\016 \001(\003\022\013\n\003you\030\017 \001(\005\"O\n" +
      "\020RefreshCardsYYQF\022\022\n\ncard_count\030\001 \003(\005\022\'\n" +
      "\ncards_data\030\002 \003(\0132\023.Int32ArrayResponse\"\351" +
      "\003\n\017OutCardDataYYQF\022\027\n\017out_card_player\030\001 " +
      "\001(\005\022\022\n\ncards_data\030\002 \003(\005\022\031\n\021change_cards_",
      "data\030\003 \003(\005\022\023\n\013cards_count\030\004 \001(\005\022\021\n\tcard_" +
      "type\030\005 \001(\005\022\022\n\ncur_player\030\006 \001(\005\022\025\n\rpr_car" +
      "ds_data\030\007 \003(\005\022\034\n\024pr_change_cards_data\030\010 " +
      "\003(\005\022\026\n\016pr_cards_count\030\t \001(\005\022\030\n\020pr_out_ca" +
      "rd_type\030\n \001(\005\022\024\n\014is_first_out\030\013 \001(\010\022\024\n\014d" +
      "isplay_time\030\014 \001(\005\022\013\n\003you\030\r \001(\005\022\021\n\tisNewT" +
      "urn\030\016 \001(\010\022\022\n\nscore_card\030\017 \003(\005\022\022\n\nscore_t" +
      "urn\030\020 \001(\005\022\025\n\rplayer_scores\030\021 \003(\005\022\024\n\014roun" +
      "d_scores\030\022 \003(\005\022\024\n\014total_scores\030\023 \003(\005\022\031\n\021" +
      "round_boom_scores\030\024 \003(\005\022\031\n\021total_boom_sc",
      "ores\030\025 \003(\005\"\355\004\n\017PukeGameEndYYQF\022$\n\troom_i" +
      "nfo\030\001 \001(\0132\021.pdk.RoomInfoYYQF\022\022\n\ncard_cou" +
      "nt\030\002 \003(\005\022\'\n\ncards_data\030\003 \003(\0132\023.Int32Arra" +
      "yResponse\022\025\n\rboom_card_num\030\004 \003(\005\022\022\n\nplay" +
      "er_num\030\005 \001(\005\022\016\n\006reason\030\006 \001(\005\022\013\n\003you\030\007 \003(" +
      "\005\022\r\n\005score\030\032 \003(\005\022\021\n\tend_score\030\010 \003(\005\022\031\n\021r" +
      "ound_extra_score\030\t \003(\005\022\022\n\nboom_score\030\n \003" +
      "(\005\022\026\n\016all_boom_score\030\017 \003(\005\022\027\n\017all_extra_" +
      "score\030\033 \003(\005\022\021\n\tall_score\030\034 \003(\005\022\031\n\021all_bo" +
      "om_card_num\030\020 \003(\005\022\025\n\rall_end_score\030\021 \003(\005",
      "\022\025\n\rend_score_max\030\022 \003(\005\022\017\n\007win_num\030\023 \003(\005" +
      "\022\020\n\010lose_num\030\024 \003(\005\022,\n\007players\030\025 \003(\0132\033.pd" +
      "k.RoomPlayerResponseYYQF\022\023\n\013final_score\030" +
      "\026 \003(\005\022\026\n\016rounding_score\030\027 \003(\005\022\022\n\nrest_da" +
      "tas\030\030 \003(\005\022\022\n\nrest_count\030\031 \001(\005\022\021\n\tsys_sco" +
      "re\030\035 \003(\005\022\030\n\020create_player_id\030\036 \001(\003\"\271\006\n\021T" +
      "ableResponseYYQF\022\025\n\rbanker_player\030\001 \001(\005\022" +
      "\026\n\016current_player\030\002 \001(\005\022\023\n\013prev_player\030\003" +
      " \001(\005\022\017\n\007trustee\030\004 \003(\010\022+\n\016out_cards_data\030" +
      "\005 \003(\0132\023.Int32ArrayResponse\022.\n\021change_car",
      "ds_data\030\006 \003(\0132\023.Int32ArrayResponse\022\027\n\017ou" +
      "t_cards_count\030\007 \003(\005\022\023\n\013player_pass\030\010 \003(\005" +
      "\022\021\n\tcard_type\030\t \003(\005\022\032\n\022pr_out_card_playe" +
      "r\030\n \001(\005\022\034\n\024pr_change_cards_data\030\013 \003(\005\022\025\n" +
      "\rpr_cards_data\030\014 \003(\005\022\026\n\016pr_cards_count\030\r" +
      " \001(\005\022\030\n\020pr_out_card_type\030\016 \001(\005\022\022\n\nmagic_" +
      "card\030\017 \001(\005\022\024\n\014is_first_out\030\020 \001(\005\022\024\n\014disp" +
      "lay_time\030\021 \001(\005\022\022\n\ncard_count\030\022 \003(\005\022\'\n\nca" +
      "rds_data\030\023 \003(\0132\023.Int32ArrayResponse\022$\n\tr" +
      "oom_info\030\024 \001(\0132\021.pdk.RoomInfoYYQF\022,\n\007pla",
      "yers\030\025 \003(\0132\033.pdk.RoomPlayerResponseYYQF\022" +
      "\022\n\nplayer_you\030\026 \003(\005\022\022\n\nscore_card\030\030 \003(\005\022" +
      "\025\n\rplayer_scores\030\031 \003(\005\022\025\n\rout_card_time\030" +
      "\032 \001(\003\022\024\n\014round_scores\030\033 \003(\005\022\023\n\013boom_scor" +
      "es\030\034 \003(\005\022\031\n\021round_boom_scores\030\035 \003(\005\022\030\n\020b" +
      "ase_cards_count\030\036 \001(\005\022\027\n\017base_cards_data" +
      "\030\037 \003(\005\022\016\n\006is_end\030  \001(\010\"\375\001\n\rGameStartYYQF" +
      "\022$\n\troom_info\030\005 \001(\0132\021.pdk.RoomInfoYYQF\022," +
      "\n\007players\030\007 \003(\0132\033.pdk.RoomPlayerResponse" +
      "YYQF\022\022\n\ncur_banker\030\001 \001(\005\022\022\n\ncard_count\030\002",
      " \003(\005\022\'\n\ncards_data\030\003 \003(\0132\023.Int32ArrayRes" +
      "ponse\022\024\n\014display_time\030\006 \001(\005\022\030\n\020base_card" +
      "s_count\030\010 \001(\005\022\027\n\017base_cards_data\030\t \003(\005\"O" +
      "\n\007CutCard\022\027\n\017cut_card_player\030\001 \001(\005\022\025\n\rcu" +
      "t_card_data\030\002 \001(\005\022\024\n\014display_time\030\003 \001(\005\"" +
      "\356\001\n\014ShowLastCard\022\031\n\021rank_first_player\030\001 " +
      "\001(\005\022\030\n\020base_cards_count\030\002 \001(\005\022\027\n\017base_ca" +
      "rds_data\030\003 \003(\005\022\030\n\020base_cards_score\030\004 \001(\005" +
      "\022\024\n\014display_time\030\005 \001(\005\022\024\n\014round_scores\030\007" +
      " \001(\005\022\024\n\014total_scores\030\010 \001(\005\022\031\n\021round_boom",
      "_scores\030\t \001(\005\022\031\n\021total_boom_scores\030\n \001(\005" +
      "B\036\n\023protobuf.clazz.yyqfB\007YYQFRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_pdk_RoomInfoYYQF_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_pdk_RoomInfoYYQF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pdk_RoomInfoYYQF_descriptor,
              new java.lang.String[] { "RoomId", "GameTypeIndex", "GameRuleIndex", "GameRuleIndexEx", "GameRuleDes", "GameRound", "CurRound", "GameStatus", "CreatePlayerId", "BeginLeftCard", "BankerPlayer", "CreateName", });
          internal_static_pdk_RoomPlayerResponseYYQF_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_pdk_RoomPlayerResponseYYQF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pdk_RoomPlayerResponseYYQF_descriptor,
              new java.lang.String[] { "AccountId", "UserName", "HeadImgUrl", "SeatIndex", "Ip", "Online", "Sex", "Score", "Ready", "IpAddr", "LocationInfor", "IsTrustee", "Money", "Gold", "You", });
          internal_static_pdk_RefreshCardsYYQF_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_pdk_RefreshCardsYYQF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pdk_RefreshCardsYYQF_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", });
          internal_static_pdk_OutCardDataYYQF_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_pdk_OutCardDataYYQF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pdk_OutCardDataYYQF_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "ChangeCardsData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrChangeCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "You", "IsNewTurn", "ScoreCard", "ScoreTurn", "PlayerScores", "RoundScores", "TotalScores", "RoundBoomScores", "TotalBoomScores", });
          internal_static_pdk_PukeGameEndYYQF_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_pdk_PukeGameEndYYQF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pdk_PukeGameEndYYQF_descriptor,
              new java.lang.String[] { "RoomInfo", "CardCount", "CardsData", "BoomCardNum", "PlayerNum", "Reason", "You", "Score", "EndScore", "RoundExtraScore", "BoomScore", "AllBoomScore", "AllExtraScore", "AllScore", "AllBoomCardNum", "AllEndScore", "EndScoreMax", "WinNum", "LoseNum", "Players", "FinalScore", "RoundingScore", "RestDatas", "RestCount", "SysScore", "CreatePlayerId", });
          internal_static_pdk_TableResponseYYQF_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_pdk_TableResponseYYQF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pdk_TableResponseYYQF_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "ChangeCardsData", "OutCardsCount", "PlayerPass", "CardType", "PrOutCardPlayer", "PrChangeCardsData", "PrCardsData", "PrCardsCount", "PrOutCardType", "MagicCard", "IsFirstOut", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "PlayerYou", "ScoreCard", "PlayerScores", "OutCardTime", "RoundScores", "BoomScores", "RoundBoomScores", "BaseCardsCount", "BaseCardsData", "IsEnd", });
          internal_static_pdk_GameStartYYQF_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_pdk_GameStartYYQF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pdk_GameStartYYQF_descriptor,
              new java.lang.String[] { "RoomInfo", "Players", "CurBanker", "CardCount", "CardsData", "DisplayTime", "BaseCardsCount", "BaseCardsData", });
          internal_static_pdk_CutCard_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_pdk_CutCard_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pdk_CutCard_descriptor,
              new java.lang.String[] { "CutCardPlayer", "CutCardData", "DisplayTime", });
          internal_static_pdk_ShowLastCard_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_pdk_ShowLastCard_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pdk_ShowLastCard_descriptor,
              new java.lang.String[] { "RankFirstPlayer", "BaseCardsCount", "BaseCardsData", "BaseCardsScore", "DisplayTime", "RoundScores", "TotalScores", "RoundBoomScores", "TotalBoomScores", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
