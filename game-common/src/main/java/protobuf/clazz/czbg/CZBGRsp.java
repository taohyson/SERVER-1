// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: czbg/czbgProto.proto

package protobuf.clazz.czbg;

public final class CZBGRsp {
  private CZBGRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RoomPlayerResponseCZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int64 account_id = 1;
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    boolean hasAccountId();
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    long getAccountId();

    // optional string user_name = 2;
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    boolean hasUserName();
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    java.lang.String getUserName();
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    com.google.protobuf.ByteString
        getUserNameBytes();

    // optional string head_img_url = 3;
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    boolean hasHeadImgUrl();
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    java.lang.String getHeadImgUrl();
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    com.google.protobuf.ByteString
        getHeadImgUrlBytes();

    // optional int32 seat_index = 4;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    int getSeatIndex();

    // optional string ip = 5;
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    boolean hasIp();
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    java.lang.String getIp();
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpBytes();

    // optional int32 online = 6;
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    boolean hasOnline();
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    int getOnline();

    // optional int32 sex = 7;
    /**
     * <code>optional int32 sex = 7;</code>
     */
    boolean hasSex();
    /**
     * <code>optional int32 sex = 7;</code>
     */
    int getSex();

    // optional float score = 8;
    /**
     * <code>optional float score = 8;</code>
     */
    boolean hasScore();
    /**
     * <code>optional float score = 8;</code>
     */
    float getScore();

    // optional int32 ready = 9;
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    boolean hasReady();
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    int getReady();

    // optional string ip_addr = 10;
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    boolean hasIpAddr();
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    java.lang.String getIpAddr();
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpAddrBytes();

    // optional .LocationInfor locationInfor = 11;
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    boolean hasLocationInfor();
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    protobuf.clazz.Protocol.LocationInfor getLocationInfor();
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder();

    // optional bool is_trustee = 12;
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    boolean hasIsTrustee();
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    boolean getIsTrustee();

    // optional int64 money = 13;
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    boolean hasMoney();
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    long getMoney();

    // optional int64 gold = 14;
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    boolean hasGold();
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    long getGold();

    // optional int32 you = 15;
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     * 游数
     * </pre>
     */
    boolean hasYou();
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     * 游数
     * </pre>
     */
    int getYou();
  }
  /**
   * Protobuf type {@code czbg.RoomPlayerResponseCZBG}
   *
   * <pre>
   *房间的玩家
   * </pre>
   */
  public static final class RoomPlayerResponseCZBG extends
      com.google.protobuf.GeneratedMessage
      implements RoomPlayerResponseCZBGOrBuilder {
    // Use RoomPlayerResponseCZBG.newBuilder() to construct.
    private RoomPlayerResponseCZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomPlayerResponseCZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomPlayerResponseCZBG defaultInstance;
    public static RoomPlayerResponseCZBG getDefaultInstance() {
      return defaultInstance;
    }

    public RoomPlayerResponseCZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomPlayerResponseCZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              accountId_ = input.readInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              userName_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              headImgUrl_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              seatIndex_ = input.readInt32();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              ip_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              online_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              sex_ = input.readInt32();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              score_ = input.readFloat();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              ready_ = input.readInt32();
              break;
            }
            case 82: {
              bitField0_ |= 0x00000200;
              ipAddr_ = input.readBytes();
              break;
            }
            case 90: {
              protobuf.clazz.Protocol.LocationInfor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = locationInfor_.toBuilder();
              }
              locationInfor_ = input.readMessage(protobuf.clazz.Protocol.LocationInfor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locationInfor_);
                locationInfor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              isTrustee_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              money_ = input.readInt64();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              gold_ = input.readInt64();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              you_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_RoomPlayerResponseCZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_RoomPlayerResponseCZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.class, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomPlayerResponseCZBG> PARSER =
        new com.google.protobuf.AbstractParser<RoomPlayerResponseCZBG>() {
      public RoomPlayerResponseCZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomPlayerResponseCZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomPlayerResponseCZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 account_id = 1;
    public static final int ACCOUNT_ID_FIELD_NUMBER = 1;
    private long accountId_;
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    public boolean hasAccountId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    public long getAccountId() {
      return accountId_;
    }

    // optional string user_name = 2;
    public static final int USER_NAME_FIELD_NUMBER = 2;
    private java.lang.Object userName_;
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public boolean hasUserName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public java.lang.String getUserName() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          userName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUserNameBytes() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string head_img_url = 3;
    public static final int HEAD_IMG_URL_FIELD_NUMBER = 3;
    private java.lang.Object headImgUrl_;
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public boolean hasHeadImgUrl() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public java.lang.String getHeadImgUrl() {
      java.lang.Object ref = headImgUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          headImgUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHeadImgUrlBytes() {
      java.lang.Object ref = headImgUrl_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headImgUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 seat_index = 4;
    public static final int SEAT_INDEX_FIELD_NUMBER = 4;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional string ip = 5;
    public static final int IP_FIELD_NUMBER = 5;
    private java.lang.Object ip_;
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public boolean hasIp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public java.lang.String getIp() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ip_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpBytes() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ip_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 online = 6;
    public static final int ONLINE_FIELD_NUMBER = 6;
    private int online_;
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    public boolean hasOnline() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    public int getOnline() {
      return online_;
    }

    // optional int32 sex = 7;
    public static final int SEX_FIELD_NUMBER = 7;
    private int sex_;
    /**
     * <code>optional int32 sex = 7;</code>
     */
    public boolean hasSex() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 sex = 7;</code>
     */
    public int getSex() {
      return sex_;
    }

    // optional float score = 8;
    public static final int SCORE_FIELD_NUMBER = 8;
    private float score_;
    /**
     * <code>optional float score = 8;</code>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float score = 8;</code>
     */
    public float getScore() {
      return score_;
    }

    // optional int32 ready = 9;
    public static final int READY_FIELD_NUMBER = 9;
    private int ready_;
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    public boolean hasReady() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    public int getReady() {
      return ready_;
    }

    // optional string ip_addr = 10;
    public static final int IP_ADDR_FIELD_NUMBER = 10;
    private java.lang.Object ipAddr_;
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public boolean hasIpAddr() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public java.lang.String getIpAddr() {
      java.lang.Object ref = ipAddr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ipAddr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpAddrBytes() {
      java.lang.Object ref = ipAddr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ipAddr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .LocationInfor locationInfor = 11;
    public static final int LOCATIONINFOR_FIELD_NUMBER = 11;
    private protobuf.clazz.Protocol.LocationInfor locationInfor_;
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public boolean hasLocationInfor() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public protobuf.clazz.Protocol.LocationInfor getLocationInfor() {
      return locationInfor_;
    }
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder() {
      return locationInfor_;
    }

    // optional bool is_trustee = 12;
    public static final int IS_TRUSTEE_FIELD_NUMBER = 12;
    private boolean isTrustee_;
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    public boolean hasIsTrustee() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    public boolean getIsTrustee() {
      return isTrustee_;
    }

    // optional int64 money = 13;
    public static final int MONEY_FIELD_NUMBER = 13;
    private long money_;
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    public boolean hasMoney() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    public long getMoney() {
      return money_;
    }

    // optional int64 gold = 14;
    public static final int GOLD_FIELD_NUMBER = 14;
    private long gold_;
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    public boolean hasGold() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    public long getGold() {
      return gold_;
    }

    // optional int32 you = 15;
    public static final int YOU_FIELD_NUMBER = 15;
    private int you_;
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     * 游数
     * </pre>
     */
    public boolean hasYou() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     * 游数
     * </pre>
     */
    public int getYou() {
      return you_;
    }

    private void initFields() {
      accountId_ = 0L;
      userName_ = "";
      headImgUrl_ = "";
      seatIndex_ = 0;
      ip_ = "";
      online_ = 0;
      sex_ = 0;
      score_ = 0F;
      ready_ = 0;
      ipAddr_ = "";
      locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
      isTrustee_ = false;
      money_ = 0L;
      gold_ = 0L;
      you_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, accountId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getHeadImgUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, seatIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, online_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, sex_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, ready_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, getIpAddrBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, locationInfor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, isTrustee_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt64(13, money_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt64(14, gold_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, you_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, accountId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getHeadImgUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, seatIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, online_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, sex_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, ready_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getIpAddrBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, locationInfor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, isTrustee_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, money_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, gold_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, you_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.RoomPlayerResponseCZBG}
     *
     * <pre>
     *房间的玩家
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_RoomPlayerResponseCZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_RoomPlayerResponseCZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.class, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationInforFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        accountId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        userName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        headImgUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        ip_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        online_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        sex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        score_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        ready_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        ipAddr_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        if (locationInforBuilder_ == null) {
          locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
        } else {
          locationInforBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        isTrustee_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        money_ = 0L;
        bitField0_ = (bitField0_ & ~0x00001000);
        gold_ = 0L;
        bitField0_ = (bitField0_ & ~0x00002000);
        you_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_RoomPlayerResponseCZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG build() {
        protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG result = new protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.accountId_ = accountId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.userName_ = userName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.headImgUrl_ = headImgUrl_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.ip_ = ip_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.online_ = online_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.sex_ = sex_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.ready_ = ready_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.ipAddr_ = ipAddr_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (locationInforBuilder_ == null) {
          result.locationInfor_ = locationInfor_;
        } else {
          result.locationInfor_ = locationInforBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.isTrustee_ = isTrustee_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.money_ = money_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.gold_ = gold_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.you_ = you_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.getDefaultInstance()) return this;
        if (other.hasAccountId()) {
          setAccountId(other.getAccountId());
        }
        if (other.hasUserName()) {
          bitField0_ |= 0x00000002;
          userName_ = other.userName_;
          onChanged();
        }
        if (other.hasHeadImgUrl()) {
          bitField0_ |= 0x00000004;
          headImgUrl_ = other.headImgUrl_;
          onChanged();
        }
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasIp()) {
          bitField0_ |= 0x00000010;
          ip_ = other.ip_;
          onChanged();
        }
        if (other.hasOnline()) {
          setOnline(other.getOnline());
        }
        if (other.hasSex()) {
          setSex(other.getSex());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasReady()) {
          setReady(other.getReady());
        }
        if (other.hasIpAddr()) {
          bitField0_ |= 0x00000200;
          ipAddr_ = other.ipAddr_;
          onChanged();
        }
        if (other.hasLocationInfor()) {
          mergeLocationInfor(other.getLocationInfor());
        }
        if (other.hasIsTrustee()) {
          setIsTrustee(other.getIsTrustee());
        }
        if (other.hasMoney()) {
          setMoney(other.getMoney());
        }
        if (other.hasGold()) {
          setGold(other.getGold());
        }
        if (other.hasYou()) {
          setYou(other.getYou());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 account_id = 1;
      private long accountId_ ;
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public boolean hasAccountId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public long getAccountId() {
        return accountId_;
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public Builder setAccountId(long value) {
        bitField0_ |= 0x00000001;
        accountId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public Builder clearAccountId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        accountId_ = 0L;
        onChanged();
        return this;
      }

      // optional string user_name = 2;
      private java.lang.Object userName_ = "";
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public boolean hasUserName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public java.lang.String getUserName() {
        java.lang.Object ref = userName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          userName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public com.google.protobuf.ByteString
          getUserNameBytes() {
        java.lang.Object ref = userName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder setUserName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder clearUserName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        userName_ = getDefaultInstance().getUserName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder setUserNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }

      // optional string head_img_url = 3;
      private java.lang.Object headImgUrl_ = "";
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public boolean hasHeadImgUrl() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public java.lang.String getHeadImgUrl() {
        java.lang.Object ref = headImgUrl_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          headImgUrl_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHeadImgUrlBytes() {
        java.lang.Object ref = headImgUrl_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          headImgUrl_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImgUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        headImgUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder clearHeadImgUrl() {
        bitField0_ = (bitField0_ & ~0x00000004);
        headImgUrl_ = getDefaultInstance().getHeadImgUrl();
        onChanged();
        return this;
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImgUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        headImgUrl_ = value;
        onChanged();
        return this;
      }

      // optional int32 seat_index = 4;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000008;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional string ip = 5;
      private java.lang.Object ip_ = "";
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public boolean hasIp() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public java.lang.String getIp() {
        java.lang.Object ref = ip_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ip_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpBytes() {
        java.lang.Object ref = ip_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ip_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder setIp(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        ip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder clearIp() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ip_ = getDefaultInstance().getIp();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder setIpBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        ip_ = value;
        onChanged();
        return this;
      }

      // optional int32 online = 6;
      private int online_ ;
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public boolean hasOnline() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public int getOnline() {
        return online_;
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public Builder setOnline(int value) {
        bitField0_ |= 0x00000020;
        online_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public Builder clearOnline() {
        bitField0_ = (bitField0_ & ~0x00000020);
        online_ = 0;
        onChanged();
        return this;
      }

      // optional int32 sex = 7;
      private int sex_ ;
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public boolean hasSex() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public int getSex() {
        return sex_;
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public Builder setSex(int value) {
        bitField0_ |= 0x00000040;
        sex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public Builder clearSex() {
        bitField0_ = (bitField0_ & ~0x00000040);
        sex_ = 0;
        onChanged();
        return this;
      }

      // optional float score = 8;
      private float score_ ;
      /**
       * <code>optional float score = 8;</code>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public float getScore() {
        return score_;
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public Builder setScore(float value) {
        bitField0_ |= 0x00000080;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000080);
        score_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 ready = 9;
      private int ready_ ;
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public boolean hasReady() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public int getReady() {
        return ready_;
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public Builder setReady(int value) {
        bitField0_ |= 0x00000100;
        ready_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public Builder clearReady() {
        bitField0_ = (bitField0_ & ~0x00000100);
        ready_ = 0;
        onChanged();
        return this;
      }

      // optional string ip_addr = 10;
      private java.lang.Object ipAddr_ = "";
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public boolean hasIpAddr() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public java.lang.String getIpAddr() {
        java.lang.Object ref = ipAddr_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ipAddr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpAddrBytes() {
        java.lang.Object ref = ipAddr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ipAddr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder setIpAddr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        ipAddr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder clearIpAddr() {
        bitField0_ = (bitField0_ & ~0x00000200);
        ipAddr_ = getDefaultInstance().getIpAddr();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder setIpAddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        ipAddr_ = value;
        onChanged();
        return this;
      }

      // optional .LocationInfor locationInfor = 11;
      private protobuf.clazz.Protocol.LocationInfor locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder> locationInforBuilder_;
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public boolean hasLocationInfor() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInfor getLocationInfor() {
        if (locationInforBuilder_ == null) {
          return locationInfor_;
        } else {
          return locationInforBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder setLocationInfor(protobuf.clazz.Protocol.LocationInfor value) {
        if (locationInforBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          locationInfor_ = value;
          onChanged();
        } else {
          locationInforBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder setLocationInfor(
          protobuf.clazz.Protocol.LocationInfor.Builder builderForValue) {
        if (locationInforBuilder_ == null) {
          locationInfor_ = builderForValue.build();
          onChanged();
        } else {
          locationInforBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder mergeLocationInfor(protobuf.clazz.Protocol.LocationInfor value) {
        if (locationInforBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              locationInfor_ != protobuf.clazz.Protocol.LocationInfor.getDefaultInstance()) {
            locationInfor_ =
              protobuf.clazz.Protocol.LocationInfor.newBuilder(locationInfor_).mergeFrom(value).buildPartial();
          } else {
            locationInfor_ = value;
          }
          onChanged();
        } else {
          locationInforBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder clearLocationInfor() {
        if (locationInforBuilder_ == null) {
          locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
          onChanged();
        } else {
          locationInforBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInfor.Builder getLocationInforBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getLocationInforFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder() {
        if (locationInforBuilder_ != null) {
          return locationInforBuilder_.getMessageOrBuilder();
        } else {
          return locationInfor_;
        }
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder> 
          getLocationInforFieldBuilder() {
        if (locationInforBuilder_ == null) {
          locationInforBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder>(
                  locationInfor_,
                  getParentForChildren(),
                  isClean());
          locationInfor_ = null;
        }
        return locationInforBuilder_;
      }

      // optional bool is_trustee = 12;
      private boolean isTrustee_ ;
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public boolean hasIsTrustee() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public boolean getIsTrustee() {
        return isTrustee_;
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public Builder setIsTrustee(boolean value) {
        bitField0_ |= 0x00000800;
        isTrustee_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public Builder clearIsTrustee() {
        bitField0_ = (bitField0_ & ~0x00000800);
        isTrustee_ = false;
        onChanged();
        return this;
      }

      // optional int64 money = 13;
      private long money_ ;
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public boolean hasMoney() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public long getMoney() {
        return money_;
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public Builder setMoney(long value) {
        bitField0_ |= 0x00001000;
        money_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public Builder clearMoney() {
        bitField0_ = (bitField0_ & ~0x00001000);
        money_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 gold = 14;
      private long gold_ ;
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public boolean hasGold() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public long getGold() {
        return gold_;
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public Builder setGold(long value) {
        bitField0_ |= 0x00002000;
        gold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public Builder clearGold() {
        bitField0_ = (bitField0_ & ~0x00002000);
        gold_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 you = 15;
      private int you_ ;
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       * 游数
       * </pre>
       */
      public boolean hasYou() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       * 游数
       * </pre>
       */
      public int getYou() {
        return you_;
      }
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       * 游数
       * </pre>
       */
      public Builder setYou(int value) {
        bitField0_ |= 0x00004000;
        you_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       * 游数
       * </pre>
       */
      public Builder clearYou() {
        bitField0_ = (bitField0_ & ~0x00004000);
        you_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.RoomPlayerResponseCZBG)
    }

    static {
      defaultInstance = new RoomPlayerResponseCZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.RoomPlayerResponseCZBG)
  }

  public interface PukeGameEndCZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 8;
    /**
     * <code>optional .RoomInfo room_info = 8;</code>
     *
     * <pre>
     * 房间信息
     * </pre>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 8;</code>
     *
     * <pre>
     * 房间信息
     * </pre>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 8;</code>
     *
     * <pre>
     * 房间信息
     * </pre>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated int32 win_counts = 9;
    /**
     * <code>repeated int32 win_counts = 9;</code>
     *
     * <pre>
     * 赢局数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinCountsList();
    /**
     * <code>repeated int32 win_counts = 9;</code>
     *
     * <pre>
     * 赢局数
     * </pre>
     */
    int getWinCountsCount();
    /**
     * <code>repeated int32 win_counts = 9;</code>
     *
     * <pre>
     * 赢局数
     * </pre>
     */
    int getWinCounts(int index);

    // repeated int32 lose_counts = 10;
    /**
     * <code>repeated int32 lose_counts = 10;</code>
     *
     * <pre>
     *输局数
     * </pre>
     */
    java.util.List<java.lang.Integer> getLoseCountsList();
    /**
     * <code>repeated int32 lose_counts = 10;</code>
     *
     * <pre>
     *输局数
     * </pre>
     */
    int getLoseCountsCount();
    /**
     * <code>repeated int32 lose_counts = 10;</code>
     *
     * <pre>
     *输局数
     * </pre>
     */
    int getLoseCounts(int index);

    // repeated int32 score_max = 11;
    /**
     * <code>repeated int32 score_max = 11;</code>
     *
     * <pre>
     * 赢的最大分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getScoreMaxList();
    /**
     * <code>repeated int32 score_max = 11;</code>
     *
     * <pre>
     * 赢的最大分数
     * </pre>
     */
    int getScoreMaxCount();
    /**
     * <code>repeated int32 score_max = 11;</code>
     *
     * <pre>
     * 赢的最大分数
     * </pre>
     */
    int getScoreMax(int index);

    // repeated float score = 12;
    /**
     * <code>repeated float score = 12;</code>
     *
     * <pre>
     * 当前轮分数
     * </pre>
     */
    java.util.List<java.lang.Float> getScoreList();
    /**
     * <code>repeated float score = 12;</code>
     *
     * <pre>
     * 当前轮分数
     * </pre>
     */
    int getScoreCount();
    /**
     * <code>repeated float score = 12;</code>
     *
     * <pre>
     * 当前轮分数
     * </pre>
     */
    float getScore(int index);

    // repeated float end_score = 13;
    /**
     * <code>repeated float end_score = 13;</code>
     *
     * <pre>
     * 当前总分数
     * </pre>
     */
    java.util.List<java.lang.Float> getEndScoreList();
    /**
     * <code>repeated float end_score = 13;</code>
     *
     * <pre>
     * 当前总分数
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated float end_score = 13;</code>
     *
     * <pre>
     * 当前总分数
     * </pre>
     */
    float getEndScore(int index);

    // repeated .czbg.OpenCard_CZBG open_card = 14;
    /**
     * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
     *
     * <pre>
     * 开牌
     * </pre>
     */
    java.util.List<protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG> 
        getOpenCardList();
    /**
     * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
     *
     * <pre>
     * 开牌
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG getOpenCard(int index);
    /**
     * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
     *
     * <pre>
     * 开牌
     * </pre>
     */
    int getOpenCardCount();
    /**
     * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
     *
     * <pre>
     * 开牌
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBGOrBuilder> 
        getOpenCardOrBuilderList();
    /**
     * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
     *
     * <pre>
     * 开牌
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBGOrBuilder getOpenCardOrBuilder(
        int index);

    // optional int32 reason = 15;
    /**
     * <code>optional int32 reason = 15;</code>
     *
     * <pre>
     * 结束原因
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 15;</code>
     *
     * <pre>
     * 结束原因
     * </pre>
     */
    int getReason();

    // repeated int32 first_score = 16;
    /**
     * <code>repeated int32 first_score = 16;</code>
     */
    java.util.List<java.lang.Integer> getFirstScoreList();
    /**
     * <code>repeated int32 first_score = 16;</code>
     */
    int getFirstScoreCount();
    /**
     * <code>repeated int32 first_score = 16;</code>
     */
    int getFirstScore(int index);

    // repeated int32 second_score = 17;
    /**
     * <code>repeated int32 second_score = 17;</code>
     */
    java.util.List<java.lang.Integer> getSecondScoreList();
    /**
     * <code>repeated int32 second_score = 17;</code>
     */
    int getSecondScoreCount();
    /**
     * <code>repeated int32 second_score = 17;</code>
     */
    int getSecondScore(int index);

    // repeated int32 three_score = 18;
    /**
     * <code>repeated int32 three_score = 18;</code>
     */
    java.util.List<java.lang.Integer> getThreeScoreList();
    /**
     * <code>repeated int32 three_score = 18;</code>
     */
    int getThreeScoreCount();
    /**
     * <code>repeated int32 three_score = 18;</code>
     */
    int getThreeScore(int index);
  }
  /**
   * Protobuf type {@code czbg.PukeGameEndCZBG}
   *
   * <pre>
   *结算
   * </pre>
   */
  public static final class PukeGameEndCZBG extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndCZBGOrBuilder {
    // Use PukeGameEndCZBG.newBuilder() to construct.
    private PukeGameEndCZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndCZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndCZBG defaultInstance;
    public static PukeGameEndCZBG getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndCZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndCZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 66: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                winCounts_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              winCounts_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                winCounts_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                winCounts_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                loseCounts_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              loseCounts_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                loseCounts_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                loseCounts_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                scoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              scoreMax_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                scoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                scoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 101: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                score_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              score_.add(input.readFloat());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                score_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                score_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 109: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                endScore_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              endScore_.add(input.readFloat());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                openCard_ = new java.util.ArrayList<protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG>();
                mutable_bitField0_ |= 0x00000040;
              }
              openCard_.add(input.readMessage(protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.PARSER, extensionRegistry));
              break;
            }
            case 120: {
              bitField0_ |= 0x00000002;
              reason_ = input.readInt32();
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                firstScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              firstScore_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                firstScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                firstScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                secondScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              secondScore_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                secondScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                secondScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                threeScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              threeScore_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                threeScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                threeScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          winCounts_ = java.util.Collections.unmodifiableList(winCounts_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          loseCounts_ = java.util.Collections.unmodifiableList(loseCounts_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          scoreMax_ = java.util.Collections.unmodifiableList(scoreMax_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          score_ = java.util.Collections.unmodifiableList(score_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          openCard_ = java.util.Collections.unmodifiableList(openCard_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          firstScore_ = java.util.Collections.unmodifiableList(firstScore_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          secondScore_ = java.util.Collections.unmodifiableList(secondScore_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          threeScore_ = java.util.Collections.unmodifiableList(threeScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_PukeGameEndCZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_PukeGameEndCZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG.class, protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndCZBG> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndCZBG>() {
      public PukeGameEndCZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndCZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndCZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 8;
    public static final int ROOM_INFO_FIELD_NUMBER = 8;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 8;</code>
     *
     * <pre>
     * 房间信息
     * </pre>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 8;</code>
     *
     * <pre>
     * 房间信息
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 8;</code>
     *
     * <pre>
     * 房间信息
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated int32 win_counts = 9;
    public static final int WIN_COUNTS_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> winCounts_;
    /**
     * <code>repeated int32 win_counts = 9;</code>
     *
     * <pre>
     * 赢局数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinCountsList() {
      return winCounts_;
    }
    /**
     * <code>repeated int32 win_counts = 9;</code>
     *
     * <pre>
     * 赢局数
     * </pre>
     */
    public int getWinCountsCount() {
      return winCounts_.size();
    }
    /**
     * <code>repeated int32 win_counts = 9;</code>
     *
     * <pre>
     * 赢局数
     * </pre>
     */
    public int getWinCounts(int index) {
      return winCounts_.get(index);
    }

    // repeated int32 lose_counts = 10;
    public static final int LOSE_COUNTS_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> loseCounts_;
    /**
     * <code>repeated int32 lose_counts = 10;</code>
     *
     * <pre>
     *输局数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLoseCountsList() {
      return loseCounts_;
    }
    /**
     * <code>repeated int32 lose_counts = 10;</code>
     *
     * <pre>
     *输局数
     * </pre>
     */
    public int getLoseCountsCount() {
      return loseCounts_.size();
    }
    /**
     * <code>repeated int32 lose_counts = 10;</code>
     *
     * <pre>
     *输局数
     * </pre>
     */
    public int getLoseCounts(int index) {
      return loseCounts_.get(index);
    }

    // repeated int32 score_max = 11;
    public static final int SCORE_MAX_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> scoreMax_;
    /**
     * <code>repeated int32 score_max = 11;</code>
     *
     * <pre>
     * 赢的最大分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getScoreMaxList() {
      return scoreMax_;
    }
    /**
     * <code>repeated int32 score_max = 11;</code>
     *
     * <pre>
     * 赢的最大分数
     * </pre>
     */
    public int getScoreMaxCount() {
      return scoreMax_.size();
    }
    /**
     * <code>repeated int32 score_max = 11;</code>
     *
     * <pre>
     * 赢的最大分数
     * </pre>
     */
    public int getScoreMax(int index) {
      return scoreMax_.get(index);
    }

    // repeated float score = 12;
    public static final int SCORE_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Float> score_;
    /**
     * <code>repeated float score = 12;</code>
     *
     * <pre>
     * 当前轮分数
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getScoreList() {
      return score_;
    }
    /**
     * <code>repeated float score = 12;</code>
     *
     * <pre>
     * 当前轮分数
     * </pre>
     */
    public int getScoreCount() {
      return score_.size();
    }
    /**
     * <code>repeated float score = 12;</code>
     *
     * <pre>
     * 当前轮分数
     * </pre>
     */
    public float getScore(int index) {
      return score_.get(index);
    }

    // repeated float end_score = 13;
    public static final int END_SCORE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Float> endScore_;
    /**
     * <code>repeated float end_score = 13;</code>
     *
     * <pre>
     * 当前总分数
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated float end_score = 13;</code>
     *
     * <pre>
     * 当前总分数
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated float end_score = 13;</code>
     *
     * <pre>
     * 当前总分数
     * </pre>
     */
    public float getEndScore(int index) {
      return endScore_.get(index);
    }

    // repeated .czbg.OpenCard_CZBG open_card = 14;
    public static final int OPEN_CARD_FIELD_NUMBER = 14;
    private java.util.List<protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG> openCard_;
    /**
     * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
     *
     * <pre>
     * 开牌
     * </pre>
     */
    public java.util.List<protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG> getOpenCardList() {
      return openCard_;
    }
    /**
     * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
     *
     * <pre>
     * 开牌
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBGOrBuilder> 
        getOpenCardOrBuilderList() {
      return openCard_;
    }
    /**
     * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
     *
     * <pre>
     * 开牌
     * </pre>
     */
    public int getOpenCardCount() {
      return openCard_.size();
    }
    /**
     * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
     *
     * <pre>
     * 开牌
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG getOpenCard(int index) {
      return openCard_.get(index);
    }
    /**
     * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
     *
     * <pre>
     * 开牌
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBGOrBuilder getOpenCardOrBuilder(
        int index) {
      return openCard_.get(index);
    }

    // optional int32 reason = 15;
    public static final int REASON_FIELD_NUMBER = 15;
    private int reason_;
    /**
     * <code>optional int32 reason = 15;</code>
     *
     * <pre>
     * 结束原因
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 reason = 15;</code>
     *
     * <pre>
     * 结束原因
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 first_score = 16;
    public static final int FIRST_SCORE_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> firstScore_;
    /**
     * <code>repeated int32 first_score = 16;</code>
     */
    public java.util.List<java.lang.Integer>
        getFirstScoreList() {
      return firstScore_;
    }
    /**
     * <code>repeated int32 first_score = 16;</code>
     */
    public int getFirstScoreCount() {
      return firstScore_.size();
    }
    /**
     * <code>repeated int32 first_score = 16;</code>
     */
    public int getFirstScore(int index) {
      return firstScore_.get(index);
    }

    // repeated int32 second_score = 17;
    public static final int SECOND_SCORE_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> secondScore_;
    /**
     * <code>repeated int32 second_score = 17;</code>
     */
    public java.util.List<java.lang.Integer>
        getSecondScoreList() {
      return secondScore_;
    }
    /**
     * <code>repeated int32 second_score = 17;</code>
     */
    public int getSecondScoreCount() {
      return secondScore_.size();
    }
    /**
     * <code>repeated int32 second_score = 17;</code>
     */
    public int getSecondScore(int index) {
      return secondScore_.get(index);
    }

    // repeated int32 three_score = 18;
    public static final int THREE_SCORE_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> threeScore_;
    /**
     * <code>repeated int32 three_score = 18;</code>
     */
    public java.util.List<java.lang.Integer>
        getThreeScoreList() {
      return threeScore_;
    }
    /**
     * <code>repeated int32 three_score = 18;</code>
     */
    public int getThreeScoreCount() {
      return threeScore_.size();
    }
    /**
     * <code>repeated int32 three_score = 18;</code>
     */
    public int getThreeScore(int index) {
      return threeScore_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      winCounts_ = java.util.Collections.emptyList();
      loseCounts_ = java.util.Collections.emptyList();
      scoreMax_ = java.util.Collections.emptyList();
      score_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      openCard_ = java.util.Collections.emptyList();
      reason_ = 0;
      firstScore_ = java.util.Collections.emptyList();
      secondScore_ = java.util.Collections.emptyList();
      threeScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(8, roomInfo_);
      }
      for (int i = 0; i < winCounts_.size(); i++) {
        output.writeInt32(9, winCounts_.get(i));
      }
      for (int i = 0; i < loseCounts_.size(); i++) {
        output.writeInt32(10, loseCounts_.get(i));
      }
      for (int i = 0; i < scoreMax_.size(); i++) {
        output.writeInt32(11, scoreMax_.get(i));
      }
      for (int i = 0; i < score_.size(); i++) {
        output.writeFloat(12, score_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeFloat(13, endScore_.get(i));
      }
      for (int i = 0; i < openCard_.size(); i++) {
        output.writeMessage(14, openCard_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(15, reason_);
      }
      for (int i = 0; i < firstScore_.size(); i++) {
        output.writeInt32(16, firstScore_.get(i));
      }
      for (int i = 0; i < secondScore_.size(); i++) {
        output.writeInt32(17, secondScore_.get(i));
      }
      for (int i = 0; i < threeScore_.size(); i++) {
        output.writeInt32(18, threeScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, roomInfo_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winCounts_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winCounts_.get(i));
        }
        size += dataSize;
        size += 1 * getWinCountsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < loseCounts_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(loseCounts_.get(i));
        }
        size += dataSize;
        size += 1 * getLoseCountsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < scoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(scoreMax_.get(i));
        }
        size += dataSize;
        size += 1 * getScoreMaxList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getScoreList().size();
        size += dataSize;
        size += 1 * getScoreList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getEndScoreList().size();
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      for (int i = 0; i < openCard_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, openCard_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < firstScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(firstScore_.get(i));
        }
        size += dataSize;
        size += 2 * getFirstScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < secondScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(secondScore_.get(i));
        }
        size += dataSize;
        size += 2 * getSecondScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < threeScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(threeScore_.get(i));
        }
        size += dataSize;
        size += 2 * getThreeScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.PukeGameEndCZBG}
     *
     * <pre>
     *结算
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_PukeGameEndCZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_PukeGameEndCZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG.class, protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getOpenCardFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        winCounts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        loseCounts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        scoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        score_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        if (openCardBuilder_ == null) {
          openCard_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          openCardBuilder_.clear();
        }
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        firstScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        secondScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        threeScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_PukeGameEndCZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG build() {
        protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG result = new protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          winCounts_ = java.util.Collections.unmodifiableList(winCounts_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.winCounts_ = winCounts_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          loseCounts_ = java.util.Collections.unmodifiableList(loseCounts_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.loseCounts_ = loseCounts_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          scoreMax_ = java.util.Collections.unmodifiableList(scoreMax_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.scoreMax_ = scoreMax_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          score_ = java.util.Collections.unmodifiableList(score_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.score_ = score_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.endScore_ = endScore_;
        if (openCardBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            openCard_ = java.util.Collections.unmodifiableList(openCard_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.openCard_ = openCard_;
        } else {
          result.openCard_ = openCardBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000002;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          firstScore_ = java.util.Collections.unmodifiableList(firstScore_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.firstScore_ = firstScore_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          secondScore_ = java.util.Collections.unmodifiableList(secondScore_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.secondScore_ = secondScore_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          threeScore_ = java.util.Collections.unmodifiableList(threeScore_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.threeScore_ = threeScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (!other.winCounts_.isEmpty()) {
          if (winCounts_.isEmpty()) {
            winCounts_ = other.winCounts_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureWinCountsIsMutable();
            winCounts_.addAll(other.winCounts_);
          }
          onChanged();
        }
        if (!other.loseCounts_.isEmpty()) {
          if (loseCounts_.isEmpty()) {
            loseCounts_ = other.loseCounts_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureLoseCountsIsMutable();
            loseCounts_.addAll(other.loseCounts_);
          }
          onChanged();
        }
        if (!other.scoreMax_.isEmpty()) {
          if (scoreMax_.isEmpty()) {
            scoreMax_ = other.scoreMax_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureScoreMaxIsMutable();
            scoreMax_.addAll(other.scoreMax_);
          }
          onChanged();
        }
        if (!other.score_.isEmpty()) {
          if (score_.isEmpty()) {
            score_ = other.score_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureScoreIsMutable();
            score_.addAll(other.score_);
          }
          onChanged();
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (openCardBuilder_ == null) {
          if (!other.openCard_.isEmpty()) {
            if (openCard_.isEmpty()) {
              openCard_ = other.openCard_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureOpenCardIsMutable();
              openCard_.addAll(other.openCard_);
            }
            onChanged();
          }
        } else {
          if (!other.openCard_.isEmpty()) {
            if (openCardBuilder_.isEmpty()) {
              openCardBuilder_.dispose();
              openCardBuilder_ = null;
              openCard_ = other.openCard_;
              bitField0_ = (bitField0_ & ~0x00000040);
              openCardBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOpenCardFieldBuilder() : null;
            } else {
              openCardBuilder_.addAllMessages(other.openCard_);
            }
          }
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.firstScore_.isEmpty()) {
          if (firstScore_.isEmpty()) {
            firstScore_ = other.firstScore_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureFirstScoreIsMutable();
            firstScore_.addAll(other.firstScore_);
          }
          onChanged();
        }
        if (!other.secondScore_.isEmpty()) {
          if (secondScore_.isEmpty()) {
            secondScore_ = other.secondScore_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureSecondScoreIsMutable();
            secondScore_.addAll(other.secondScore_);
          }
          onChanged();
        }
        if (!other.threeScore_.isEmpty()) {
          if (threeScore_.isEmpty()) {
            threeScore_ = other.threeScore_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureThreeScoreIsMutable();
            threeScore_.addAll(other.threeScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.PukeGameEndCZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 8;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 8;</code>
       *
       * <pre>
       * 房间信息
       * </pre>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 8;</code>
       *
       * <pre>
       * 房间信息
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 8;</code>
       *
       * <pre>
       * 房间信息
       * </pre>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 8;</code>
       *
       * <pre>
       * 房间信息
       * </pre>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 8;</code>
       *
       * <pre>
       * 房间信息
       * </pre>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 8;</code>
       *
       * <pre>
       * 房间信息
       * </pre>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 8;</code>
       *
       * <pre>
       * 房间信息
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 8;</code>
       *
       * <pre>
       * 房间信息
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 8;</code>
       *
       * <pre>
       * 房间信息
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated int32 win_counts = 9;
      private java.util.List<java.lang.Integer> winCounts_ = java.util.Collections.emptyList();
      private void ensureWinCountsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          winCounts_ = new java.util.ArrayList<java.lang.Integer>(winCounts_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 win_counts = 9;</code>
       *
       * <pre>
       * 赢局数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinCountsList() {
        return java.util.Collections.unmodifiableList(winCounts_);
      }
      /**
       * <code>repeated int32 win_counts = 9;</code>
       *
       * <pre>
       * 赢局数
       * </pre>
       */
      public int getWinCountsCount() {
        return winCounts_.size();
      }
      /**
       * <code>repeated int32 win_counts = 9;</code>
       *
       * <pre>
       * 赢局数
       * </pre>
       */
      public int getWinCounts(int index) {
        return winCounts_.get(index);
      }
      /**
       * <code>repeated int32 win_counts = 9;</code>
       *
       * <pre>
       * 赢局数
       * </pre>
       */
      public Builder setWinCounts(
          int index, int value) {
        ensureWinCountsIsMutable();
        winCounts_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_counts = 9;</code>
       *
       * <pre>
       * 赢局数
       * </pre>
       */
      public Builder addWinCounts(int value) {
        ensureWinCountsIsMutable();
        winCounts_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_counts = 9;</code>
       *
       * <pre>
       * 赢局数
       * </pre>
       */
      public Builder addAllWinCounts(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinCountsIsMutable();
        super.addAll(values, winCounts_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_counts = 9;</code>
       *
       * <pre>
       * 赢局数
       * </pre>
       */
      public Builder clearWinCounts() {
        winCounts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 lose_counts = 10;
      private java.util.List<java.lang.Integer> loseCounts_ = java.util.Collections.emptyList();
      private void ensureLoseCountsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          loseCounts_ = new java.util.ArrayList<java.lang.Integer>(loseCounts_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 lose_counts = 10;</code>
       *
       * <pre>
       *输局数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLoseCountsList() {
        return java.util.Collections.unmodifiableList(loseCounts_);
      }
      /**
       * <code>repeated int32 lose_counts = 10;</code>
       *
       * <pre>
       *输局数
       * </pre>
       */
      public int getLoseCountsCount() {
        return loseCounts_.size();
      }
      /**
       * <code>repeated int32 lose_counts = 10;</code>
       *
       * <pre>
       *输局数
       * </pre>
       */
      public int getLoseCounts(int index) {
        return loseCounts_.get(index);
      }
      /**
       * <code>repeated int32 lose_counts = 10;</code>
       *
       * <pre>
       *输局数
       * </pre>
       */
      public Builder setLoseCounts(
          int index, int value) {
        ensureLoseCountsIsMutable();
        loseCounts_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_counts = 10;</code>
       *
       * <pre>
       *输局数
       * </pre>
       */
      public Builder addLoseCounts(int value) {
        ensureLoseCountsIsMutable();
        loseCounts_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_counts = 10;</code>
       *
       * <pre>
       *输局数
       * </pre>
       */
      public Builder addAllLoseCounts(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLoseCountsIsMutable();
        super.addAll(values, loseCounts_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_counts = 10;</code>
       *
       * <pre>
       *输局数
       * </pre>
       */
      public Builder clearLoseCounts() {
        loseCounts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated int32 score_max = 11;
      private java.util.List<java.lang.Integer> scoreMax_ = java.util.Collections.emptyList();
      private void ensureScoreMaxIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          scoreMax_ = new java.util.ArrayList<java.lang.Integer>(scoreMax_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 score_max = 11;</code>
       *
       * <pre>
       * 赢的最大分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getScoreMaxList() {
        return java.util.Collections.unmodifiableList(scoreMax_);
      }
      /**
       * <code>repeated int32 score_max = 11;</code>
       *
       * <pre>
       * 赢的最大分数
       * </pre>
       */
      public int getScoreMaxCount() {
        return scoreMax_.size();
      }
      /**
       * <code>repeated int32 score_max = 11;</code>
       *
       * <pre>
       * 赢的最大分数
       * </pre>
       */
      public int getScoreMax(int index) {
        return scoreMax_.get(index);
      }
      /**
       * <code>repeated int32 score_max = 11;</code>
       *
       * <pre>
       * 赢的最大分数
       * </pre>
       */
      public Builder setScoreMax(
          int index, int value) {
        ensureScoreMaxIsMutable();
        scoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_max = 11;</code>
       *
       * <pre>
       * 赢的最大分数
       * </pre>
       */
      public Builder addScoreMax(int value) {
        ensureScoreMaxIsMutable();
        scoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_max = 11;</code>
       *
       * <pre>
       * 赢的最大分数
       * </pre>
       */
      public Builder addAllScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureScoreMaxIsMutable();
        super.addAll(values, scoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_max = 11;</code>
       *
       * <pre>
       * 赢的最大分数
       * </pre>
       */
      public Builder clearScoreMax() {
        scoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated float score = 12;
      private java.util.List<java.lang.Float> score_ = java.util.Collections.emptyList();
      private void ensureScoreIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          score_ = new java.util.ArrayList<java.lang.Float>(score_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated float score = 12;</code>
       *
       * <pre>
       * 当前轮分数
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getScoreList() {
        return java.util.Collections.unmodifiableList(score_);
      }
      /**
       * <code>repeated float score = 12;</code>
       *
       * <pre>
       * 当前轮分数
       * </pre>
       */
      public int getScoreCount() {
        return score_.size();
      }
      /**
       * <code>repeated float score = 12;</code>
       *
       * <pre>
       * 当前轮分数
       * </pre>
       */
      public float getScore(int index) {
        return score_.get(index);
      }
      /**
       * <code>repeated float score = 12;</code>
       *
       * <pre>
       * 当前轮分数
       * </pre>
       */
      public Builder setScore(
          int index, float value) {
        ensureScoreIsMutable();
        score_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float score = 12;</code>
       *
       * <pre>
       * 当前轮分数
       * </pre>
       */
      public Builder addScore(float value) {
        ensureScoreIsMutable();
        score_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float score = 12;</code>
       *
       * <pre>
       * 当前轮分数
       * </pre>
       */
      public Builder addAllScore(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureScoreIsMutable();
        super.addAll(values, score_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float score = 12;</code>
       *
       * <pre>
       * 当前轮分数
       * </pre>
       */
      public Builder clearScore() {
        score_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated float end_score = 13;
      private java.util.List<java.lang.Float> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          endScore_ = new java.util.ArrayList<java.lang.Float>(endScore_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float end_score = 13;</code>
       *
       * <pre>
       * 当前总分数
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated float end_score = 13;</code>
       *
       * <pre>
       * 当前总分数
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated float end_score = 13;</code>
       *
       * <pre>
       * 当前总分数
       * </pre>
       */
      public float getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated float end_score = 13;</code>
       *
       * <pre>
       * 当前总分数
       * </pre>
       */
      public Builder setEndScore(
          int index, float value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float end_score = 13;</code>
       *
       * <pre>
       * 当前总分数
       * </pre>
       */
      public Builder addEndScore(float value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float end_score = 13;</code>
       *
       * <pre>
       * 当前总分数
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float end_score = 13;</code>
       *
       * <pre>
       * 当前总分数
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated .czbg.OpenCard_CZBG open_card = 14;
      private java.util.List<protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG> openCard_ =
        java.util.Collections.emptyList();
      private void ensureOpenCardIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          openCard_ = new java.util.ArrayList<protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG>(openCard_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBGOrBuilder> openCardBuilder_;

      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public java.util.List<protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG> getOpenCardList() {
        if (openCardBuilder_ == null) {
          return java.util.Collections.unmodifiableList(openCard_);
        } else {
          return openCardBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public int getOpenCardCount() {
        if (openCardBuilder_ == null) {
          return openCard_.size();
        } else {
          return openCardBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG getOpenCard(int index) {
        if (openCardBuilder_ == null) {
          return openCard_.get(index);
        } else {
          return openCardBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public Builder setOpenCard(
          int index, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG value) {
        if (openCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOpenCardIsMutable();
          openCard_.set(index, value);
          onChanged();
        } else {
          openCardBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public Builder setOpenCard(
          int index, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder builderForValue) {
        if (openCardBuilder_ == null) {
          ensureOpenCardIsMutable();
          openCard_.set(index, builderForValue.build());
          onChanged();
        } else {
          openCardBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public Builder addOpenCard(protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG value) {
        if (openCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOpenCardIsMutable();
          openCard_.add(value);
          onChanged();
        } else {
          openCardBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public Builder addOpenCard(
          int index, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG value) {
        if (openCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOpenCardIsMutable();
          openCard_.add(index, value);
          onChanged();
        } else {
          openCardBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public Builder addOpenCard(
          protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder builderForValue) {
        if (openCardBuilder_ == null) {
          ensureOpenCardIsMutable();
          openCard_.add(builderForValue.build());
          onChanged();
        } else {
          openCardBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public Builder addOpenCard(
          int index, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder builderForValue) {
        if (openCardBuilder_ == null) {
          ensureOpenCardIsMutable();
          openCard_.add(index, builderForValue.build());
          onChanged();
        } else {
          openCardBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public Builder addAllOpenCard(
          java.lang.Iterable<? extends protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG> values) {
        if (openCardBuilder_ == null) {
          ensureOpenCardIsMutable();
          super.addAll(values, openCard_);
          onChanged();
        } else {
          openCardBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public Builder clearOpenCard() {
        if (openCardBuilder_ == null) {
          openCard_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          openCardBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public Builder removeOpenCard(int index) {
        if (openCardBuilder_ == null) {
          ensureOpenCardIsMutable();
          openCard_.remove(index);
          onChanged();
        } else {
          openCardBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder getOpenCardBuilder(
          int index) {
        return getOpenCardFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBGOrBuilder getOpenCardOrBuilder(
          int index) {
        if (openCardBuilder_ == null) {
          return openCard_.get(index);  } else {
          return openCardBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBGOrBuilder> 
           getOpenCardOrBuilderList() {
        if (openCardBuilder_ != null) {
          return openCardBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(openCard_);
        }
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder addOpenCardBuilder() {
        return getOpenCardFieldBuilder().addBuilder(
            protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.getDefaultInstance());
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder addOpenCardBuilder(
          int index) {
        return getOpenCardFieldBuilder().addBuilder(
            index, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.getDefaultInstance());
      }
      /**
       * <code>repeated .czbg.OpenCard_CZBG open_card = 14;</code>
       *
       * <pre>
       * 开牌
       * </pre>
       */
      public java.util.List<protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder> 
           getOpenCardBuilderList() {
        return getOpenCardFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBGOrBuilder> 
          getOpenCardFieldBuilder() {
        if (openCardBuilder_ == null) {
          openCardBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBGOrBuilder>(
                  openCard_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          openCard_ = null;
        }
        return openCardBuilder_;
      }

      // optional int32 reason = 15;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 15;</code>
       *
       * <pre>
       * 结束原因
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 reason = 15;</code>
       *
       * <pre>
       * 结束原因
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 15;</code>
       *
       * <pre>
       * 结束原因
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000080;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 15;</code>
       *
       * <pre>
       * 结束原因
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000080);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 first_score = 16;
      private java.util.List<java.lang.Integer> firstScore_ = java.util.Collections.emptyList();
      private void ensureFirstScoreIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          firstScore_ = new java.util.ArrayList<java.lang.Integer>(firstScore_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 first_score = 16;</code>
       */
      public java.util.List<java.lang.Integer>
          getFirstScoreList() {
        return java.util.Collections.unmodifiableList(firstScore_);
      }
      /**
       * <code>repeated int32 first_score = 16;</code>
       */
      public int getFirstScoreCount() {
        return firstScore_.size();
      }
      /**
       * <code>repeated int32 first_score = 16;</code>
       */
      public int getFirstScore(int index) {
        return firstScore_.get(index);
      }
      /**
       * <code>repeated int32 first_score = 16;</code>
       */
      public Builder setFirstScore(
          int index, int value) {
        ensureFirstScoreIsMutable();
        firstScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 first_score = 16;</code>
       */
      public Builder addFirstScore(int value) {
        ensureFirstScoreIsMutable();
        firstScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 first_score = 16;</code>
       */
      public Builder addAllFirstScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFirstScoreIsMutable();
        super.addAll(values, firstScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 first_score = 16;</code>
       */
      public Builder clearFirstScore() {
        firstScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated int32 second_score = 17;
      private java.util.List<java.lang.Integer> secondScore_ = java.util.Collections.emptyList();
      private void ensureSecondScoreIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          secondScore_ = new java.util.ArrayList<java.lang.Integer>(secondScore_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 second_score = 17;</code>
       */
      public java.util.List<java.lang.Integer>
          getSecondScoreList() {
        return java.util.Collections.unmodifiableList(secondScore_);
      }
      /**
       * <code>repeated int32 second_score = 17;</code>
       */
      public int getSecondScoreCount() {
        return secondScore_.size();
      }
      /**
       * <code>repeated int32 second_score = 17;</code>
       */
      public int getSecondScore(int index) {
        return secondScore_.get(index);
      }
      /**
       * <code>repeated int32 second_score = 17;</code>
       */
      public Builder setSecondScore(
          int index, int value) {
        ensureSecondScoreIsMutable();
        secondScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 second_score = 17;</code>
       */
      public Builder addSecondScore(int value) {
        ensureSecondScoreIsMutable();
        secondScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 second_score = 17;</code>
       */
      public Builder addAllSecondScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSecondScoreIsMutable();
        super.addAll(values, secondScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 second_score = 17;</code>
       */
      public Builder clearSecondScore() {
        secondScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 three_score = 18;
      private java.util.List<java.lang.Integer> threeScore_ = java.util.Collections.emptyList();
      private void ensureThreeScoreIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          threeScore_ = new java.util.ArrayList<java.lang.Integer>(threeScore_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 three_score = 18;</code>
       */
      public java.util.List<java.lang.Integer>
          getThreeScoreList() {
        return java.util.Collections.unmodifiableList(threeScore_);
      }
      /**
       * <code>repeated int32 three_score = 18;</code>
       */
      public int getThreeScoreCount() {
        return threeScore_.size();
      }
      /**
       * <code>repeated int32 three_score = 18;</code>
       */
      public int getThreeScore(int index) {
        return threeScore_.get(index);
      }
      /**
       * <code>repeated int32 three_score = 18;</code>
       */
      public Builder setThreeScore(
          int index, int value) {
        ensureThreeScoreIsMutable();
        threeScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 three_score = 18;</code>
       */
      public Builder addThreeScore(int value) {
        ensureThreeScoreIsMutable();
        threeScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 three_score = 18;</code>
       */
      public Builder addAllThreeScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureThreeScoreIsMutable();
        super.addAll(values, threeScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 three_score = 18;</code>
       */
      public Builder clearThreeScore() {
        threeScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.PukeGameEndCZBG)
    }

    static {
      defaultInstance = new PukeGameEndCZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.PukeGameEndCZBG)
  }

  public interface TableResponse_CZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cell_score = 1;
    /**
     * <code>optional int32 cell_score = 1;</code>
     *
     * <pre>
     *单元积分
     * </pre>
     */
    boolean hasCellScore();
    /**
     * <code>optional int32 cell_score = 1;</code>
     *
     * <pre>
     *单元积分
     * </pre>
     */
    int getCellScore();

    // optional int32 banker_player = 2;
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家用户 -1: 表示这一局没有庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家用户 -1: 表示这一局没有庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 3;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前用户
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前用户
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 scene_info = 4;
    /**
     * <code>optional int32 scene_info = 4;</code>
     */
    boolean hasSceneInfo();
    /**
     * <code>optional int32 scene_info = 4;</code>
     */
    int getSceneInfo();

    // repeated int32 add_jetter = 5;
    /**
     * <code>repeated int32 add_jetter = 5;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    java.util.List<java.lang.Integer> getAddJetterList();
    /**
     * <code>repeated int32 add_jetter = 5;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    int getAddJetterCount();
    /**
     * <code>repeated int32 add_jetter = 5;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    int getAddJetter(int index);

    // repeated bool trustee = 6;
    /**
     * <code>repeated bool trustee = 6;</code>
     *
     * <pre>
     * 状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 6;</code>
     *
     * <pre>
     * 状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 6;</code>
     *
     * <pre>
     * 状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated int32 winner_order = 7;
    /**
     * <code>repeated int32 winner_order = 7;</code>
     */
    java.util.List<java.lang.Integer> getWinnerOrderList();
    /**
     * <code>repeated int32 winner_order = 7;</code>
     */
    int getWinnerOrderCount();
    /**
     * <code>repeated int32 winner_order = 7;</code>
     */
    int getWinnerOrder(int index);

    // repeated int32 card_count = 8;
    /**
     * <code>repeated int32 card_count = 8;</code>
     *
     * <pre>
     * 扑克数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 8;</code>
     *
     * <pre>
     * 扑克数据
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 8;</code>
     *
     * <pre>
     * 扑克数据
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 9;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated bool open_card = 10;
    /**
     * <code>repeated bool open_card = 10;</code>
     *
     * <pre>
     * 是否开牌
     * </pre>
     */
    java.util.List<java.lang.Boolean> getOpenCardList();
    /**
     * <code>repeated bool open_card = 10;</code>
     *
     * <pre>
     * 是否开牌
     * </pre>
     */
    int getOpenCardCount();
    /**
     * <code>repeated bool open_card = 10;</code>
     *
     * <pre>
     * 是否开牌
     * </pre>
     */
    boolean getOpenCard(int index);

    // repeated int32 end_score = 12;
    /**
     * <code>repeated int32 end_score = 12;</code>
     *
     * <pre>
     *用户分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 12;</code>
     *
     * <pre>
     *用户分数
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 12;</code>
     *
     * <pre>
     *用户分数
     * </pre>
     */
    int getEndScore(int index);

    // repeated int32 call_banker_info = 13;
    /**
     * <code>repeated int32 call_banker_info = 13;</code>
     *
     * <pre>
     * 叫庄
     * </pre>
     */
    java.util.List<java.lang.Integer> getCallBankerInfoList();
    /**
     * <code>repeated int32 call_banker_info = 13;</code>
     *
     * <pre>
     * 叫庄
     * </pre>
     */
    int getCallBankerInfoCount();
    /**
     * <code>repeated int32 call_banker_info = 13;</code>
     *
     * <pre>
     * 叫庄
     * </pre>
     */
    int getCallBankerInfo(int index);

    // optional bool player_status = 14;
    /**
     * <code>optional bool player_status = 14;</code>
     *
     * <pre>
     * 是否在游戏
     * </pre>
     */
    boolean hasPlayerStatus();
    /**
     * <code>optional bool player_status = 14;</code>
     *
     * <pre>
     * 是否在游戏
     * </pre>
     */
    boolean getPlayerStatus();

    // repeated int32 card_type = 15;
    /**
     * <code>repeated int32 card_type = 15;</code>
     *
     * <pre>
     *牌的类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 15;</code>
     *
     * <pre>
     *牌的类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 15;</code>
     *
     * <pre>
     *牌的类型
     * </pre>
     */
    int getCardType(int index);

    // repeated int32 game_time = 16;
    /**
     * <code>repeated int32 game_time = 16;</code>
     *
     * <pre>
     *牌倍数
     * </pre>
     */
    java.util.List<java.lang.Integer> getGameTimeList();
    /**
     * <code>repeated int32 game_time = 16;</code>
     *
     * <pre>
     *牌倍数
     * </pre>
     */
    int getGameTimeCount();
    /**
     * <code>repeated int32 game_time = 16;</code>
     *
     * <pre>
     *牌倍数
     * </pre>
     */
    int getGameTime(int index);

    // repeated float point = 24;
    /**
     * <code>repeated float point = 24;</code>
     */
    java.util.List<java.lang.Float> getPointList();
    /**
     * <code>repeated float point = 24;</code>
     */
    int getPointCount();
    /**
     * <code>repeated float point = 24;</code>
     */
    float getPoint(int index);

    // optional int32 trustee_type = 17;
    /**
     * <code>optional int32 trustee_type = 17;</code>
     *
     * <pre>
     *托管的内容
     * </pre>
     */
    boolean hasTrusteeType();
    /**
     * <code>optional int32 trustee_type = 17;</code>
     *
     * <pre>
     *托管的内容
     * </pre>
     */
    int getTrusteeType();

    // optional .RoomInfo room_info = 20;
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .czbg.RoomPlayerResponseCZBG players = 21;
    /**
     * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
     */
    java.util.List<protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG> 
        getPlayersList();
    /**
     * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
     */
    protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG getPlayers(int index);
    /**
     * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
     */
    java.util.List<? extends protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBGOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
     */
    protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBGOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 display_time = 18;
    /**
     * <code>optional int32 display_time = 18;</code>
     *
     * <pre>
     * 当前操作的播放时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 18;</code>
     *
     * <pre>
     * 当前操作的播放时间
     * </pre>
     */
    int getDisplayTime();

    // optional .czbg.CardType_CZBG send_card = 19;
    /**
     * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
     *
     * <pre>
     * 发牌 (开牌阶段)
     * </pre>
     */
    boolean hasSendCard();
    /**
     * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
     *
     * <pre>
     * 发牌 (开牌阶段)
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.CardType_CZBG getSendCard();
    /**
     * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
     *
     * <pre>
     * 发牌 (开牌阶段)
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder getSendCardOrBuilder();

    // optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
     *
     * <pre>
     * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
     * </pre>
     */
    boolean hasCallBankerInfoCzbg();
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
     *
     * <pre>
     * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG getCallBankerInfoCzbg();
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
     *
     * <pre>
     * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder getCallBankerInfoCzbgOrBuilder();

    // repeated float score = 23;
    /**
     * <code>repeated float score = 23;</code>
     *
     * <pre>
     * 当前局分数
     * </pre>
     */
    java.util.List<java.lang.Float> getScoreList();
    /**
     * <code>repeated float score = 23;</code>
     *
     * <pre>
     * 当前局分数
     * </pre>
     */
    int getScoreCount();
    /**
     * <code>repeated float score = 23;</code>
     *
     * <pre>
     * 当前局分数
     * </pre>
     */
    float getScore(int index);

    // optional .czbg.AddJetton_CZBG add_jetton_info = 25;
    /**
     * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    boolean hasAddJettonInfo();
    /**
     * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG getAddJettonInfo();
    /**
     * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBGOrBuilder getAddJettonInfoOrBuilder();

    // repeated int32 beishu = 26;
    /**
     * <code>repeated int32 beishu = 26;</code>
     *
     * <pre>
     * 倍数信息
     * </pre>
     */
    java.util.List<java.lang.Integer> getBeishuList();
    /**
     * <code>repeated int32 beishu = 26;</code>
     *
     * <pre>
     * 倍数信息
     * </pre>
     */
    int getBeishuCount();
    /**
     * <code>repeated int32 beishu = 26;</code>
     *
     * <pre>
     * 倍数信息
     * </pre>
     */
    int getBeishu(int index);

    // repeated int32 fenshu = 27;
    /**
     * <code>repeated int32 fenshu = 27;</code>
     *
     * <pre>
     * 分数信息
     * </pre>
     */
    java.util.List<java.lang.Integer> getFenshuList();
    /**
     * <code>repeated int32 fenshu = 27;</code>
     *
     * <pre>
     * 分数信息
     * </pre>
     */
    int getFenshuCount();
    /**
     * <code>repeated int32 fenshu = 27;</code>
     *
     * <pre>
     * 分数信息
     * </pre>
     */
    int getFenshu(int index);

    // optional bool can_bao_dao = 28;
    /**
     * <code>optional bool can_bao_dao = 28;</code>
     *
     * <pre>
     * 能否报道
     * </pre>
     */
    boolean hasCanBaoDao();
    /**
     * <code>optional bool can_bao_dao = 28;</code>
     *
     * <pre>
     * 能否报道
     * </pre>
     */
    boolean getCanBaoDao();
  }
  /**
   * Protobuf type {@code czbg.TableResponse_CZBG}
   */
  public static final class TableResponse_CZBG extends
      com.google.protobuf.GeneratedMessage
      implements TableResponse_CZBGOrBuilder {
    // Use TableResponse_CZBG.newBuilder() to construct.
    private TableResponse_CZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponse_CZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponse_CZBG defaultInstance;
    public static TableResponse_CZBG getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponse_CZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponse_CZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cellScore_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              sceneInfo_ = input.readInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                addJetter_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              addJetter_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                addJetter_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                addJetter_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000020;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                winnerOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              winnerOrder_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                winnerOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                winnerOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                openCard_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000200;
              }
              openCard_.add(input.readBool());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                openCard_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                openCard_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                callBankerInfo_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              callBankerInfo_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                callBankerInfo_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                callBankerInfo_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              bitField0_ |= 0x00000010;
              playerStatus_ = input.readBool();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                gameTime_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              gameTime_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                gameTime_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                gameTime_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              bitField0_ |= 0x00000020;
              trusteeType_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 154: {
              protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = sendCard_.toBuilder();
              }
              sendCard_ = input.readMessage(protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sendCard_);
                sendCard_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 162: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 170: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG>();
                mutable_bitField0_ |= 0x00040000;
              }
              players_.add(input.readMessage(protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.PARSER, extensionRegistry));
              break;
            }
            case 178: {
              protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = callBankerInfoCzbg_.toBuilder();
              }
              callBankerInfoCzbg_ = input.readMessage(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(callBankerInfoCzbg_);
                callBankerInfoCzbg_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 189: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                score_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00400000;
              }
              score_.add(input.readFloat());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                score_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                score_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 197: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                point_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00008000;
              }
              point_.add(input.readFloat());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                point_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                point_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 202: {
              protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = addJettonInfo_.toBuilder();
              }
              addJettonInfo_ = input.readMessage(protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(addJettonInfo_);
                addJettonInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 208: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                beishu_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              beishu_.add(input.readInt32());
              break;
            }
            case 210: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                beishu_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                beishu_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 216: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                fenshu_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              fenshu_.add(input.readInt32());
              break;
            }
            case 218: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                fenshu_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                fenshu_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 224: {
              bitField0_ |= 0x00000800;
              canBaoDao_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          addJetter_ = java.util.Collections.unmodifiableList(addJetter_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          winnerOrder_ = java.util.Collections.unmodifiableList(winnerOrder_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          openCard_ = java.util.Collections.unmodifiableList(openCard_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          callBankerInfo_ = java.util.Collections.unmodifiableList(callBankerInfo_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          gameTime_ = java.util.Collections.unmodifiableList(gameTime_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          score_ = java.util.Collections.unmodifiableList(score_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          point_ = java.util.Collections.unmodifiableList(point_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          beishu_ = java.util.Collections.unmodifiableList(beishu_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          fenshu_ = java.util.Collections.unmodifiableList(fenshu_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_TableResponse_CZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_TableResponse_CZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG.class, protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponse_CZBG> PARSER =
        new com.google.protobuf.AbstractParser<TableResponse_CZBG>() {
      public TableResponse_CZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponse_CZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponse_CZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cell_score = 1;
    public static final int CELL_SCORE_FIELD_NUMBER = 1;
    private int cellScore_;
    /**
     * <code>optional int32 cell_score = 1;</code>
     *
     * <pre>
     *单元积分
     * </pre>
     */
    public boolean hasCellScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cell_score = 1;</code>
     *
     * <pre>
     *单元积分
     * </pre>
     */
    public int getCellScore() {
      return cellScore_;
    }

    // optional int32 banker_player = 2;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 2;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家用户 -1: 表示这一局没有庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家用户 -1: 表示这一局没有庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 3;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 3;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前用户
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前用户
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 scene_info = 4;
    public static final int SCENE_INFO_FIELD_NUMBER = 4;
    private int sceneInfo_;
    /**
     * <code>optional int32 scene_info = 4;</code>
     */
    public boolean hasSceneInfo() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 scene_info = 4;</code>
     */
    public int getSceneInfo() {
      return sceneInfo_;
    }

    // repeated int32 add_jetter = 5;
    public static final int ADD_JETTER_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> addJetter_;
    /**
     * <code>repeated int32 add_jetter = 5;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAddJetterList() {
      return addJetter_;
    }
    /**
     * <code>repeated int32 add_jetter = 5;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    public int getAddJetterCount() {
      return addJetter_.size();
    }
    /**
     * <code>repeated int32 add_jetter = 5;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    public int getAddJetter(int index) {
      return addJetter_.get(index);
    }

    // repeated bool trustee = 6;
    public static final int TRUSTEE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 6;</code>
     *
     * <pre>
     * 状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 6;</code>
     *
     * <pre>
     * 状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 6;</code>
     *
     * <pre>
     * 状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated int32 winner_order = 7;
    public static final int WINNER_ORDER_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> winnerOrder_;
    /**
     * <code>repeated int32 winner_order = 7;</code>
     */
    public java.util.List<java.lang.Integer>
        getWinnerOrderList() {
      return winnerOrder_;
    }
    /**
     * <code>repeated int32 winner_order = 7;</code>
     */
    public int getWinnerOrderCount() {
      return winnerOrder_.size();
    }
    /**
     * <code>repeated int32 winner_order = 7;</code>
     */
    public int getWinnerOrder(int index) {
      return winnerOrder_.get(index);
    }

    // repeated int32 card_count = 8;
    public static final int CARD_COUNT_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 8;</code>
     *
     * <pre>
     * 扑克数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 8;</code>
     *
     * <pre>
     * 扑克数据
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 8;</code>
     *
     * <pre>
     * 扑克数据
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 9;
    public static final int CARDS_DATA_FIELD_NUMBER = 9;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated bool open_card = 10;
    public static final int OPEN_CARD_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Boolean> openCard_;
    /**
     * <code>repeated bool open_card = 10;</code>
     *
     * <pre>
     * 是否开牌
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getOpenCardList() {
      return openCard_;
    }
    /**
     * <code>repeated bool open_card = 10;</code>
     *
     * <pre>
     * 是否开牌
     * </pre>
     */
    public int getOpenCardCount() {
      return openCard_.size();
    }
    /**
     * <code>repeated bool open_card = 10;</code>
     *
     * <pre>
     * 是否开牌
     * </pre>
     */
    public boolean getOpenCard(int index) {
      return openCard_.get(index);
    }

    // repeated int32 end_score = 12;
    public static final int END_SCORE_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 12;</code>
     *
     * <pre>
     *用户分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 12;</code>
     *
     * <pre>
     *用户分数
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 12;</code>
     *
     * <pre>
     *用户分数
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // repeated int32 call_banker_info = 13;
    public static final int CALL_BANKER_INFO_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> callBankerInfo_;
    /**
     * <code>repeated int32 call_banker_info = 13;</code>
     *
     * <pre>
     * 叫庄
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCallBankerInfoList() {
      return callBankerInfo_;
    }
    /**
     * <code>repeated int32 call_banker_info = 13;</code>
     *
     * <pre>
     * 叫庄
     * </pre>
     */
    public int getCallBankerInfoCount() {
      return callBankerInfo_.size();
    }
    /**
     * <code>repeated int32 call_banker_info = 13;</code>
     *
     * <pre>
     * 叫庄
     * </pre>
     */
    public int getCallBankerInfo(int index) {
      return callBankerInfo_.get(index);
    }

    // optional bool player_status = 14;
    public static final int PLAYER_STATUS_FIELD_NUMBER = 14;
    private boolean playerStatus_;
    /**
     * <code>optional bool player_status = 14;</code>
     *
     * <pre>
     * 是否在游戏
     * </pre>
     */
    public boolean hasPlayerStatus() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool player_status = 14;</code>
     *
     * <pre>
     * 是否在游戏
     * </pre>
     */
    public boolean getPlayerStatus() {
      return playerStatus_;
    }

    // repeated int32 card_type = 15;
    public static final int CARD_TYPE_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 15;</code>
     *
     * <pre>
     *牌的类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 15;</code>
     *
     * <pre>
     *牌的类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 15;</code>
     *
     * <pre>
     *牌的类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // repeated int32 game_time = 16;
    public static final int GAME_TIME_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> gameTime_;
    /**
     * <code>repeated int32 game_time = 16;</code>
     *
     * <pre>
     *牌倍数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getGameTimeList() {
      return gameTime_;
    }
    /**
     * <code>repeated int32 game_time = 16;</code>
     *
     * <pre>
     *牌倍数
     * </pre>
     */
    public int getGameTimeCount() {
      return gameTime_.size();
    }
    /**
     * <code>repeated int32 game_time = 16;</code>
     *
     * <pre>
     *牌倍数
     * </pre>
     */
    public int getGameTime(int index) {
      return gameTime_.get(index);
    }

    // repeated float point = 24;
    public static final int POINT_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Float> point_;
    /**
     * <code>repeated float point = 24;</code>
     */
    public java.util.List<java.lang.Float>
        getPointList() {
      return point_;
    }
    /**
     * <code>repeated float point = 24;</code>
     */
    public int getPointCount() {
      return point_.size();
    }
    /**
     * <code>repeated float point = 24;</code>
     */
    public float getPoint(int index) {
      return point_.get(index);
    }

    // optional int32 trustee_type = 17;
    public static final int TRUSTEE_TYPE_FIELD_NUMBER = 17;
    private int trusteeType_;
    /**
     * <code>optional int32 trustee_type = 17;</code>
     *
     * <pre>
     *托管的内容
     * </pre>
     */
    public boolean hasTrusteeType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 trustee_type = 17;</code>
     *
     * <pre>
     *托管的内容
     * </pre>
     */
    public int getTrusteeType() {
      return trusteeType_;
    }

    // optional .RoomInfo room_info = 20;
    public static final int ROOM_INFO_FIELD_NUMBER = 20;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .czbg.RoomPlayerResponseCZBG players = 21;
    public static final int PLAYERS_FIELD_NUMBER = 21;
    private java.util.List<protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG> players_;
    /**
     * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
     */
    public java.util.List<protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
     */
    public java.util.List<? extends protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBGOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
     */
    public protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
     */
    public protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBGOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 display_time = 18;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 18;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 18;</code>
     *
     * <pre>
     * 当前操作的播放时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 18;</code>
     *
     * <pre>
     * 当前操作的播放时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional .czbg.CardType_CZBG send_card = 19;
    public static final int SEND_CARD_FIELD_NUMBER = 19;
    private protobuf.clazz.czbg.CZBGRsp.CardType_CZBG sendCard_;
    /**
     * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
     *
     * <pre>
     * 发牌 (开牌阶段)
     * </pre>
     */
    public boolean hasSendCard() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
     *
     * <pre>
     * 发牌 (开牌阶段)
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.CardType_CZBG getSendCard() {
      return sendCard_;
    }
    /**
     * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
     *
     * <pre>
     * 发牌 (开牌阶段)
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder getSendCardOrBuilder() {
      return sendCard_;
    }

    // optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;
    public static final int CALL_BANKER_INFO_CZBG_FIELD_NUMBER = 22;
    private protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG callBankerInfoCzbg_;
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
     *
     * <pre>
     * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
     * </pre>
     */
    public boolean hasCallBankerInfoCzbg() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
     *
     * <pre>
     * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG getCallBankerInfoCzbg() {
      return callBankerInfoCzbg_;
    }
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
     *
     * <pre>
     * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder getCallBankerInfoCzbgOrBuilder() {
      return callBankerInfoCzbg_;
    }

    // repeated float score = 23;
    public static final int SCORE_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Float> score_;
    /**
     * <code>repeated float score = 23;</code>
     *
     * <pre>
     * 当前局分数
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getScoreList() {
      return score_;
    }
    /**
     * <code>repeated float score = 23;</code>
     *
     * <pre>
     * 当前局分数
     * </pre>
     */
    public int getScoreCount() {
      return score_.size();
    }
    /**
     * <code>repeated float score = 23;</code>
     *
     * <pre>
     * 当前局分数
     * </pre>
     */
    public float getScore(int index) {
      return score_.get(index);
    }

    // optional .czbg.AddJetton_CZBG add_jetton_info = 25;
    public static final int ADD_JETTON_INFO_FIELD_NUMBER = 25;
    private protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG addJettonInfo_;
    /**
     * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    public boolean hasAddJettonInfo() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG getAddJettonInfo() {
      return addJettonInfo_;
    }
    /**
     * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBGOrBuilder getAddJettonInfoOrBuilder() {
      return addJettonInfo_;
    }

    // repeated int32 beishu = 26;
    public static final int BEISHU_FIELD_NUMBER = 26;
    private java.util.List<java.lang.Integer> beishu_;
    /**
     * <code>repeated int32 beishu = 26;</code>
     *
     * <pre>
     * 倍数信息
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBeishuList() {
      return beishu_;
    }
    /**
     * <code>repeated int32 beishu = 26;</code>
     *
     * <pre>
     * 倍数信息
     * </pre>
     */
    public int getBeishuCount() {
      return beishu_.size();
    }
    /**
     * <code>repeated int32 beishu = 26;</code>
     *
     * <pre>
     * 倍数信息
     * </pre>
     */
    public int getBeishu(int index) {
      return beishu_.get(index);
    }

    // repeated int32 fenshu = 27;
    public static final int FENSHU_FIELD_NUMBER = 27;
    private java.util.List<java.lang.Integer> fenshu_;
    /**
     * <code>repeated int32 fenshu = 27;</code>
     *
     * <pre>
     * 分数信息
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getFenshuList() {
      return fenshu_;
    }
    /**
     * <code>repeated int32 fenshu = 27;</code>
     *
     * <pre>
     * 分数信息
     * </pre>
     */
    public int getFenshuCount() {
      return fenshu_.size();
    }
    /**
     * <code>repeated int32 fenshu = 27;</code>
     *
     * <pre>
     * 分数信息
     * </pre>
     */
    public int getFenshu(int index) {
      return fenshu_.get(index);
    }

    // optional bool can_bao_dao = 28;
    public static final int CAN_BAO_DAO_FIELD_NUMBER = 28;
    private boolean canBaoDao_;
    /**
     * <code>optional bool can_bao_dao = 28;</code>
     *
     * <pre>
     * 能否报道
     * </pre>
     */
    public boolean hasCanBaoDao() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool can_bao_dao = 28;</code>
     *
     * <pre>
     * 能否报道
     * </pre>
     */
    public boolean getCanBaoDao() {
      return canBaoDao_;
    }

    private void initFields() {
      cellScore_ = 0;
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      sceneInfo_ = 0;
      addJetter_ = java.util.Collections.emptyList();
      trustee_ = java.util.Collections.emptyList();
      winnerOrder_ = java.util.Collections.emptyList();
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      openCard_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      callBankerInfo_ = java.util.Collections.emptyList();
      playerStatus_ = false;
      cardType_ = java.util.Collections.emptyList();
      gameTime_ = java.util.Collections.emptyList();
      point_ = java.util.Collections.emptyList();
      trusteeType_ = 0;
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      sendCard_ = protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance();
      callBankerInfoCzbg_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
      score_ = java.util.Collections.emptyList();
      addJettonInfo_ = protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.getDefaultInstance();
      beishu_ = java.util.Collections.emptyList();
      fenshu_ = java.util.Collections.emptyList();
      canBaoDao_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cellScore_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, sceneInfo_);
      }
      for (int i = 0; i < addJetter_.size(); i++) {
        output.writeInt32(5, addJetter_.get(i));
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(6, trustee_.get(i));
      }
      for (int i = 0; i < winnerOrder_.size(); i++) {
        output.writeInt32(7, winnerOrder_.get(i));
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(8, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(9, cardsData_.get(i));
      }
      for (int i = 0; i < openCard_.size(); i++) {
        output.writeBool(10, openCard_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(12, endScore_.get(i));
      }
      for (int i = 0; i < callBankerInfo_.size(); i++) {
        output.writeInt32(13, callBankerInfo_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(14, playerStatus_);
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(15, cardType_.get(i));
      }
      for (int i = 0; i < gameTime_.size(); i++) {
        output.writeInt32(16, gameTime_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(17, trusteeType_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(18, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(19, sendCard_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(20, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(21, players_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(22, callBankerInfoCzbg_);
      }
      for (int i = 0; i < score_.size(); i++) {
        output.writeFloat(23, score_.get(i));
      }
      for (int i = 0; i < point_.size(); i++) {
        output.writeFloat(24, point_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(25, addJettonInfo_);
      }
      for (int i = 0; i < beishu_.size(); i++) {
        output.writeInt32(26, beishu_.get(i));
      }
      for (int i = 0; i < fenshu_.size(); i++) {
        output.writeInt32(27, fenshu_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(28, canBaoDao_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cellScore_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, sceneInfo_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < addJetter_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(addJetter_.get(i));
        }
        size += dataSize;
        size += 1 * getAddJetterList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winnerOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winnerOrder_.get(i));
        }
        size += dataSize;
        size += 1 * getWinnerOrderList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        dataSize = 1 * getOpenCardList().size();
        size += dataSize;
        size += 1 * getOpenCardList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < callBankerInfo_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callBankerInfo_.get(i));
        }
        size += dataSize;
        size += 1 * getCallBankerInfoList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, playerStatus_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < gameTime_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(gameTime_.get(i));
        }
        size += dataSize;
        size += 2 * getGameTimeList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, trusteeType_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, sendCard_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, players_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, callBankerInfoCzbg_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getScoreList().size();
        size += dataSize;
        size += 2 * getScoreList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getPointList().size();
        size += dataSize;
        size += 2 * getPointList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, addJettonInfo_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < beishu_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(beishu_.get(i));
        }
        size += dataSize;
        size += 2 * getBeishuList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < fenshu_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(fenshu_.get(i));
        }
        size += dataSize;
        size += 2 * getFenshuList().size();
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(28, canBaoDao_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.TableResponse_CZBG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_TableResponse_CZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_TableResponse_CZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG.class, protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
          getSendCardFieldBuilder();
          getCallBankerInfoCzbgFieldBuilder();
          getAddJettonInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cellScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        sceneInfo_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        addJetter_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        winnerOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          cardsDataBuilder_.clear();
        }
        openCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        callBankerInfo_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        playerStatus_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        gameTime_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        point_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        trusteeType_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
        } else {
          playersBuilder_.clear();
        }
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        if (sendCardBuilder_ == null) {
          sendCard_ = protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance();
        } else {
          sendCardBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (callBankerInfoCzbgBuilder_ == null) {
          callBankerInfoCzbg_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
        } else {
          callBankerInfoCzbgBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        score_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        if (addJettonInfoBuilder_ == null) {
          addJettonInfo_ = protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.getDefaultInstance();
        } else {
          addJettonInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        beishu_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        fenshu_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        canBaoDao_ = false;
        bitField0_ = (bitField0_ & ~0x04000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_TableResponse_CZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG build() {
        protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG result = new protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cellScore_ = cellScore_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.sceneInfo_ = sceneInfo_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          addJetter_ = java.util.Collections.unmodifiableList(addJetter_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.addJetter_ = addJetter_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.trustee_ = trustee_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          winnerOrder_ = java.util.Collections.unmodifiableList(winnerOrder_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.winnerOrder_ = winnerOrder_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          openCard_ = java.util.Collections.unmodifiableList(openCard_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.openCard_ = openCard_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.endScore_ = endScore_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          callBankerInfo_ = java.util.Collections.unmodifiableList(callBankerInfo_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.callBankerInfo_ = callBankerInfo_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.playerStatus_ = playerStatus_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.cardType_ = cardType_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          gameTime_ = java.util.Collections.unmodifiableList(gameTime_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.gameTime_ = gameTime_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          point_ = java.util.Collections.unmodifiableList(point_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.point_ = point_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.trusteeType_ = trusteeType_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000040;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (sendCardBuilder_ == null) {
          result.sendCard_ = sendCard_;
        } else {
          result.sendCard_ = sendCardBuilder_.build();
        }
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00000200;
        }
        if (callBankerInfoCzbgBuilder_ == null) {
          result.callBankerInfoCzbg_ = callBankerInfoCzbg_;
        } else {
          result.callBankerInfoCzbg_ = callBankerInfoCzbgBuilder_.build();
        }
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          score_ = java.util.Collections.unmodifiableList(score_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00000400;
        }
        if (addJettonInfoBuilder_ == null) {
          result.addJettonInfo_ = addJettonInfo_;
        } else {
          result.addJettonInfo_ = addJettonInfoBuilder_.build();
        }
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          beishu_ = java.util.Collections.unmodifiableList(beishu_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.beishu_ = beishu_;
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          fenshu_ = java.util.Collections.unmodifiableList(fenshu_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.fenshu_ = fenshu_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.canBaoDao_ = canBaoDao_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG.getDefaultInstance()) return this;
        if (other.hasCellScore()) {
          setCellScore(other.getCellScore());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasSceneInfo()) {
          setSceneInfo(other.getSceneInfo());
        }
        if (!other.addJetter_.isEmpty()) {
          if (addJetter_.isEmpty()) {
            addJetter_ = other.addJetter_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureAddJetterIsMutable();
            addJetter_.addAll(other.addJetter_);
          }
          onChanged();
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (!other.winnerOrder_.isEmpty()) {
          if (winnerOrder_.isEmpty()) {
            winnerOrder_ = other.winnerOrder_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureWinnerOrderIsMutable();
            winnerOrder_.addAll(other.winnerOrder_);
          }
          onChanged();
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000100);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.openCard_.isEmpty()) {
          if (openCard_.isEmpty()) {
            openCard_ = other.openCard_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureOpenCardIsMutable();
            openCard_.addAll(other.openCard_);
          }
          onChanged();
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (!other.callBankerInfo_.isEmpty()) {
          if (callBankerInfo_.isEmpty()) {
            callBankerInfo_ = other.callBankerInfo_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureCallBankerInfoIsMutable();
            callBankerInfo_.addAll(other.callBankerInfo_);
          }
          onChanged();
        }
        if (other.hasPlayerStatus()) {
          setPlayerStatus(other.getPlayerStatus());
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (!other.gameTime_.isEmpty()) {
          if (gameTime_.isEmpty()) {
            gameTime_ = other.gameTime_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureGameTimeIsMutable();
            gameTime_.addAll(other.gameTime_);
          }
          onChanged();
        }
        if (!other.point_.isEmpty()) {
          if (point_.isEmpty()) {
            point_ = other.point_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensurePointIsMutable();
            point_.addAll(other.point_);
          }
          onChanged();
        }
        if (other.hasTrusteeType()) {
          setTrusteeType(other.getTrusteeType());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00040000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasSendCard()) {
          mergeSendCard(other.getSendCard());
        }
        if (other.hasCallBankerInfoCzbg()) {
          mergeCallBankerInfoCzbg(other.getCallBankerInfoCzbg());
        }
        if (!other.score_.isEmpty()) {
          if (score_.isEmpty()) {
            score_ = other.score_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureScoreIsMutable();
            score_.addAll(other.score_);
          }
          onChanged();
        }
        if (other.hasAddJettonInfo()) {
          mergeAddJettonInfo(other.getAddJettonInfo());
        }
        if (!other.beishu_.isEmpty()) {
          if (beishu_.isEmpty()) {
            beishu_ = other.beishu_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureBeishuIsMutable();
            beishu_.addAll(other.beishu_);
          }
          onChanged();
        }
        if (!other.fenshu_.isEmpty()) {
          if (fenshu_.isEmpty()) {
            fenshu_ = other.fenshu_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureFenshuIsMutable();
            fenshu_.addAll(other.fenshu_);
          }
          onChanged();
        }
        if (other.hasCanBaoDao()) {
          setCanBaoDao(other.getCanBaoDao());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.TableResponse_CZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cell_score = 1;
      private int cellScore_ ;
      /**
       * <code>optional int32 cell_score = 1;</code>
       *
       * <pre>
       *单元积分
       * </pre>
       */
      public boolean hasCellScore() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cell_score = 1;</code>
       *
       * <pre>
       *单元积分
       * </pre>
       */
      public int getCellScore() {
        return cellScore_;
      }
      /**
       * <code>optional int32 cell_score = 1;</code>
       *
       * <pre>
       *单元积分
       * </pre>
       */
      public Builder setCellScore(int value) {
        bitField0_ |= 0x00000001;
        cellScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cell_score = 1;</code>
       *
       * <pre>
       *单元积分
       * </pre>
       */
      public Builder clearCellScore() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cellScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 2;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家用户 -1: 表示这一局没有庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家用户 -1: 表示这一局没有庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家用户 -1: 表示这一局没有庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000002;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家用户 -1: 表示这一局没有庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 3;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前用户
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前用户
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前用户
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000004;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前用户
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 scene_info = 4;
      private int sceneInfo_ ;
      /**
       * <code>optional int32 scene_info = 4;</code>
       */
      public boolean hasSceneInfo() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 scene_info = 4;</code>
       */
      public int getSceneInfo() {
        return sceneInfo_;
      }
      /**
       * <code>optional int32 scene_info = 4;</code>
       */
      public Builder setSceneInfo(int value) {
        bitField0_ |= 0x00000008;
        sceneInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 scene_info = 4;</code>
       */
      public Builder clearSceneInfo() {
        bitField0_ = (bitField0_ & ~0x00000008);
        sceneInfo_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 add_jetter = 5;
      private java.util.List<java.lang.Integer> addJetter_ = java.util.Collections.emptyList();
      private void ensureAddJetterIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          addJetter_ = new java.util.ArrayList<java.lang.Integer>(addJetter_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 add_jetter = 5;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAddJetterList() {
        return java.util.Collections.unmodifiableList(addJetter_);
      }
      /**
       * <code>repeated int32 add_jetter = 5;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public int getAddJetterCount() {
        return addJetter_.size();
      }
      /**
       * <code>repeated int32 add_jetter = 5;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public int getAddJetter(int index) {
        return addJetter_.get(index);
      }
      /**
       * <code>repeated int32 add_jetter = 5;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder setAddJetter(
          int index, int value) {
        ensureAddJetterIsMutable();
        addJetter_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 add_jetter = 5;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder addAddJetter(int value) {
        ensureAddJetterIsMutable();
        addJetter_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 add_jetter = 5;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder addAllAddJetter(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddJetterIsMutable();
        super.addAll(values, addJetter_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 add_jetter = 5;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder clearAddJetter() {
        addJetter_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated bool trustee = 6;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated bool trustee = 6;</code>
       *
       * <pre>
       * 状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 6;</code>
       *
       * <pre>
       * 状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 6;</code>
       *
       * <pre>
       * 状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 6;</code>
       *
       * <pre>
       * 状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 6;</code>
       *
       * <pre>
       * 状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 6;</code>
       *
       * <pre>
       * 状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 6;</code>
       *
       * <pre>
       * 状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 winner_order = 7;
      private java.util.List<java.lang.Integer> winnerOrder_ = java.util.Collections.emptyList();
      private void ensureWinnerOrderIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          winnerOrder_ = new java.util.ArrayList<java.lang.Integer>(winnerOrder_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 winner_order = 7;</code>
       */
      public java.util.List<java.lang.Integer>
          getWinnerOrderList() {
        return java.util.Collections.unmodifiableList(winnerOrder_);
      }
      /**
       * <code>repeated int32 winner_order = 7;</code>
       */
      public int getWinnerOrderCount() {
        return winnerOrder_.size();
      }
      /**
       * <code>repeated int32 winner_order = 7;</code>
       */
      public int getWinnerOrder(int index) {
        return winnerOrder_.get(index);
      }
      /**
       * <code>repeated int32 winner_order = 7;</code>
       */
      public Builder setWinnerOrder(
          int index, int value) {
        ensureWinnerOrderIsMutable();
        winnerOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 winner_order = 7;</code>
       */
      public Builder addWinnerOrder(int value) {
        ensureWinnerOrderIsMutable();
        winnerOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 winner_order = 7;</code>
       */
      public Builder addAllWinnerOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinnerOrderIsMutable();
        super.addAll(values, winnerOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 winner_order = 7;</code>
       */
      public Builder clearWinnerOrder() {
        winnerOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 card_count = 8;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 card_count = 8;</code>
       *
       * <pre>
       * 扑克数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 8;</code>
       *
       * <pre>
       * 扑克数据
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 8;</code>
       *
       * <pre>
       * 扑克数据
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 8;</code>
       *
       * <pre>
       * 扑克数据
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 8;</code>
       *
       * <pre>
       * 扑克数据
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 8;</code>
       *
       * <pre>
       * 扑克数据
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 8;</code>
       *
       * <pre>
       * 扑克数据
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 9;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 9;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated bool open_card = 10;
      private java.util.List<java.lang.Boolean> openCard_ = java.util.Collections.emptyList();
      private void ensureOpenCardIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          openCard_ = new java.util.ArrayList<java.lang.Boolean>(openCard_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated bool open_card = 10;</code>
       *
       * <pre>
       * 是否开牌
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getOpenCardList() {
        return java.util.Collections.unmodifiableList(openCard_);
      }
      /**
       * <code>repeated bool open_card = 10;</code>
       *
       * <pre>
       * 是否开牌
       * </pre>
       */
      public int getOpenCardCount() {
        return openCard_.size();
      }
      /**
       * <code>repeated bool open_card = 10;</code>
       *
       * <pre>
       * 是否开牌
       * </pre>
       */
      public boolean getOpenCard(int index) {
        return openCard_.get(index);
      }
      /**
       * <code>repeated bool open_card = 10;</code>
       *
       * <pre>
       * 是否开牌
       * </pre>
       */
      public Builder setOpenCard(
          int index, boolean value) {
        ensureOpenCardIsMutable();
        openCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool open_card = 10;</code>
       *
       * <pre>
       * 是否开牌
       * </pre>
       */
      public Builder addOpenCard(boolean value) {
        ensureOpenCardIsMutable();
        openCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool open_card = 10;</code>
       *
       * <pre>
       * 是否开牌
       * </pre>
       */
      public Builder addAllOpenCard(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureOpenCardIsMutable();
        super.addAll(values, openCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool open_card = 10;</code>
       *
       * <pre>
       * 是否开牌
       * </pre>
       */
      public Builder clearOpenCard() {
        openCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 end_score = 12;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 end_score = 12;</code>
       *
       * <pre>
       *用户分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 12;</code>
       *
       * <pre>
       *用户分数
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 12;</code>
       *
       * <pre>
       *用户分数
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 12;</code>
       *
       * <pre>
       *用户分数
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 12;</code>
       *
       * <pre>
       *用户分数
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 12;</code>
       *
       * <pre>
       *用户分数
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 12;</code>
       *
       * <pre>
       *用户分数
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 call_banker_info = 13;
      private java.util.List<java.lang.Integer> callBankerInfo_ = java.util.Collections.emptyList();
      private void ensureCallBankerInfoIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          callBankerInfo_ = new java.util.ArrayList<java.lang.Integer>(callBankerInfo_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 call_banker_info = 13;</code>
       *
       * <pre>
       * 叫庄
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCallBankerInfoList() {
        return java.util.Collections.unmodifiableList(callBankerInfo_);
      }
      /**
       * <code>repeated int32 call_banker_info = 13;</code>
       *
       * <pre>
       * 叫庄
       * </pre>
       */
      public int getCallBankerInfoCount() {
        return callBankerInfo_.size();
      }
      /**
       * <code>repeated int32 call_banker_info = 13;</code>
       *
       * <pre>
       * 叫庄
       * </pre>
       */
      public int getCallBankerInfo(int index) {
        return callBankerInfo_.get(index);
      }
      /**
       * <code>repeated int32 call_banker_info = 13;</code>
       *
       * <pre>
       * 叫庄
       * </pre>
       */
      public Builder setCallBankerInfo(
          int index, int value) {
        ensureCallBankerInfoIsMutable();
        callBankerInfo_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker_info = 13;</code>
       *
       * <pre>
       * 叫庄
       * </pre>
       */
      public Builder addCallBankerInfo(int value) {
        ensureCallBankerInfoIsMutable();
        callBankerInfo_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker_info = 13;</code>
       *
       * <pre>
       * 叫庄
       * </pre>
       */
      public Builder addAllCallBankerInfo(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallBankerInfoIsMutable();
        super.addAll(values, callBankerInfo_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker_info = 13;</code>
       *
       * <pre>
       * 叫庄
       * </pre>
       */
      public Builder clearCallBankerInfo() {
        callBankerInfo_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional bool player_status = 14;
      private boolean playerStatus_ ;
      /**
       * <code>optional bool player_status = 14;</code>
       *
       * <pre>
       * 是否在游戏
       * </pre>
       */
      public boolean hasPlayerStatus() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional bool player_status = 14;</code>
       *
       * <pre>
       * 是否在游戏
       * </pre>
       */
      public boolean getPlayerStatus() {
        return playerStatus_;
      }
      /**
       * <code>optional bool player_status = 14;</code>
       *
       * <pre>
       * 是否在游戏
       * </pre>
       */
      public Builder setPlayerStatus(boolean value) {
        bitField0_ |= 0x00001000;
        playerStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool player_status = 14;</code>
       *
       * <pre>
       * 是否在游戏
       * </pre>
       */
      public Builder clearPlayerStatus() {
        bitField0_ = (bitField0_ & ~0x00001000);
        playerStatus_ = false;
        onChanged();
        return this;
      }

      // repeated int32 card_type = 15;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 card_type = 15;</code>
       *
       * <pre>
       *牌的类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 15;</code>
       *
       * <pre>
       *牌的类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 15;</code>
       *
       * <pre>
       *牌的类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 15;</code>
       *
       * <pre>
       *牌的类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 15;</code>
       *
       * <pre>
       *牌的类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 15;</code>
       *
       * <pre>
       *牌的类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 15;</code>
       *
       * <pre>
       *牌的类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 game_time = 16;
      private java.util.List<java.lang.Integer> gameTime_ = java.util.Collections.emptyList();
      private void ensureGameTimeIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          gameTime_ = new java.util.ArrayList<java.lang.Integer>(gameTime_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 game_time = 16;</code>
       *
       * <pre>
       *牌倍数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getGameTimeList() {
        return java.util.Collections.unmodifiableList(gameTime_);
      }
      /**
       * <code>repeated int32 game_time = 16;</code>
       *
       * <pre>
       *牌倍数
       * </pre>
       */
      public int getGameTimeCount() {
        return gameTime_.size();
      }
      /**
       * <code>repeated int32 game_time = 16;</code>
       *
       * <pre>
       *牌倍数
       * </pre>
       */
      public int getGameTime(int index) {
        return gameTime_.get(index);
      }
      /**
       * <code>repeated int32 game_time = 16;</code>
       *
       * <pre>
       *牌倍数
       * </pre>
       */
      public Builder setGameTime(
          int index, int value) {
        ensureGameTimeIsMutable();
        gameTime_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_time = 16;</code>
       *
       * <pre>
       *牌倍数
       * </pre>
       */
      public Builder addGameTime(int value) {
        ensureGameTimeIsMutable();
        gameTime_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_time = 16;</code>
       *
       * <pre>
       *牌倍数
       * </pre>
       */
      public Builder addAllGameTime(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGameTimeIsMutable();
        super.addAll(values, gameTime_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_time = 16;</code>
       *
       * <pre>
       *牌倍数
       * </pre>
       */
      public Builder clearGameTime() {
        gameTime_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated float point = 24;
      private java.util.List<java.lang.Float> point_ = java.util.Collections.emptyList();
      private void ensurePointIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          point_ = new java.util.ArrayList<java.lang.Float>(point_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated float point = 24;</code>
       */
      public java.util.List<java.lang.Float>
          getPointList() {
        return java.util.Collections.unmodifiableList(point_);
      }
      /**
       * <code>repeated float point = 24;</code>
       */
      public int getPointCount() {
        return point_.size();
      }
      /**
       * <code>repeated float point = 24;</code>
       */
      public float getPoint(int index) {
        return point_.get(index);
      }
      /**
       * <code>repeated float point = 24;</code>
       */
      public Builder setPoint(
          int index, float value) {
        ensurePointIsMutable();
        point_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float point = 24;</code>
       */
      public Builder addPoint(float value) {
        ensurePointIsMutable();
        point_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float point = 24;</code>
       */
      public Builder addAllPoint(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensurePointIsMutable();
        super.addAll(values, point_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float point = 24;</code>
       */
      public Builder clearPoint() {
        point_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // optional int32 trustee_type = 17;
      private int trusteeType_ ;
      /**
       * <code>optional int32 trustee_type = 17;</code>
       *
       * <pre>
       *托管的内容
       * </pre>
       */
      public boolean hasTrusteeType() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 trustee_type = 17;</code>
       *
       * <pre>
       *托管的内容
       * </pre>
       */
      public int getTrusteeType() {
        return trusteeType_;
      }
      /**
       * <code>optional int32 trustee_type = 17;</code>
       *
       * <pre>
       *托管的内容
       * </pre>
       */
      public Builder setTrusteeType(int value) {
        bitField0_ |= 0x00010000;
        trusteeType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 trustee_type = 17;</code>
       *
       * <pre>
       *托管的内容
       * </pre>
       */
      public Builder clearTrusteeType() {
        bitField0_ = (bitField0_ & ~0x00010000);
        trusteeType_ = 0;
        onChanged();
        return this;
      }

      // optional .RoomInfo room_info = 20;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .czbg.RoomPlayerResponseCZBG players = 21;
      private java.util.List<protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG>(players_);
          bitField0_ |= 0x00040000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBGOrBuilder> playersBuilder_;

      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public java.util.List<protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public Builder addPlayers(protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBGOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public java.util.List<? extends protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBGOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.getDefaultInstance());
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.getDefaultInstance());
      }
      /**
       * <code>repeated .czbg.RoomPlayerResponseCZBG players = 21;</code>
       */
      public java.util.List<protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBGOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBG.Builder, protobuf.clazz.czbg.CZBGRsp.RoomPlayerResponseCZBGOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00040000) == 0x00040000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 display_time = 18;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 18;</code>
       *
       * <pre>
       * 当前操作的播放时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 display_time = 18;</code>
       *
       * <pre>
       * 当前操作的播放时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 18;</code>
       *
       * <pre>
       * 当前操作的播放时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00080000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 18;</code>
       *
       * <pre>
       * 当前操作的播放时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00080000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional .czbg.CardType_CZBG send_card = 19;
      private protobuf.clazz.czbg.CZBGRsp.CardType_CZBG sendCard_ = protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.CardType_CZBG, protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder> sendCardBuilder_;
      /**
       * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
       *
       * <pre>
       * 发牌 (开牌阶段)
       * </pre>
       */
      public boolean hasSendCard() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
       *
       * <pre>
       * 发牌 (开牌阶段)
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CardType_CZBG getSendCard() {
        if (sendCardBuilder_ == null) {
          return sendCard_;
        } else {
          return sendCardBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
       *
       * <pre>
       * 发牌 (开牌阶段)
       * </pre>
       */
      public Builder setSendCard(protobuf.clazz.czbg.CZBGRsp.CardType_CZBG value) {
        if (sendCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sendCard_ = value;
          onChanged();
        } else {
          sendCardBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
       *
       * <pre>
       * 发牌 (开牌阶段)
       * </pre>
       */
      public Builder setSendCard(
          protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder builderForValue) {
        if (sendCardBuilder_ == null) {
          sendCard_ = builderForValue.build();
          onChanged();
        } else {
          sendCardBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
       *
       * <pre>
       * 发牌 (开牌阶段)
       * </pre>
       */
      public Builder mergeSendCard(protobuf.clazz.czbg.CZBGRsp.CardType_CZBG value) {
        if (sendCardBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              sendCard_ != protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance()) {
            sendCard_ =
              protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.newBuilder(sendCard_).mergeFrom(value).buildPartial();
          } else {
            sendCard_ = value;
          }
          onChanged();
        } else {
          sendCardBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
       *
       * <pre>
       * 发牌 (开牌阶段)
       * </pre>
       */
      public Builder clearSendCard() {
        if (sendCardBuilder_ == null) {
          sendCard_ = protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance();
          onChanged();
        } else {
          sendCardBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
       *
       * <pre>
       * 发牌 (开牌阶段)
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder getSendCardBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getSendCardFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
       *
       * <pre>
       * 发牌 (开牌阶段)
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder getSendCardOrBuilder() {
        if (sendCardBuilder_ != null) {
          return sendCardBuilder_.getMessageOrBuilder();
        } else {
          return sendCard_;
        }
      }
      /**
       * <code>optional .czbg.CardType_CZBG send_card = 19;</code>
       *
       * <pre>
       * 发牌 (开牌阶段)
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.CardType_CZBG, protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder> 
          getSendCardFieldBuilder() {
        if (sendCardBuilder_ == null) {
          sendCardBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.czbg.CZBGRsp.CardType_CZBG, protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder>(
                  sendCard_,
                  getParentForChildren(),
                  isClean());
          sendCard_ = null;
        }
        return sendCardBuilder_;
      }

      // optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;
      private protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG callBankerInfoCzbg_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder> callBankerInfoCzbgBuilder_;
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
       *
       * <pre>
       * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
       * </pre>
       */
      public boolean hasCallBankerInfoCzbg() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
       *
       * <pre>
       * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG getCallBankerInfoCzbg() {
        if (callBankerInfoCzbgBuilder_ == null) {
          return callBankerInfoCzbg_;
        } else {
          return callBankerInfoCzbgBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
       *
       * <pre>
       * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
       * </pre>
       */
      public Builder setCallBankerInfoCzbg(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG value) {
        if (callBankerInfoCzbgBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          callBankerInfoCzbg_ = value;
          onChanged();
        } else {
          callBankerInfoCzbgBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
       *
       * <pre>
       * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
       * </pre>
       */
      public Builder setCallBankerInfoCzbg(
          protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder builderForValue) {
        if (callBankerInfoCzbgBuilder_ == null) {
          callBankerInfoCzbg_ = builderForValue.build();
          onChanged();
        } else {
          callBankerInfoCzbgBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
       *
       * <pre>
       * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
       * </pre>
       */
      public Builder mergeCallBankerInfoCzbg(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG value) {
        if (callBankerInfoCzbgBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000) &&
              callBankerInfoCzbg_ != protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance()) {
            callBankerInfoCzbg_ =
              protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.newBuilder(callBankerInfoCzbg_).mergeFrom(value).buildPartial();
          } else {
            callBankerInfoCzbg_ = value;
          }
          onChanged();
        } else {
          callBankerInfoCzbgBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
       *
       * <pre>
       * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
       * </pre>
       */
      public Builder clearCallBankerInfoCzbg() {
        if (callBankerInfoCzbgBuilder_ == null) {
          callBankerInfoCzbg_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
          onChanged();
        } else {
          callBankerInfoCzbgBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
       *
       * <pre>
       * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder getCallBankerInfoCzbgBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getCallBankerInfoCzbgFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
       *
       * <pre>
       * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder getCallBankerInfoCzbgOrBuilder() {
        if (callBankerInfoCzbgBuilder_ != null) {
          return callBankerInfoCzbgBuilder_.getMessageOrBuilder();
        } else {
          return callBankerInfoCzbg_;
        }
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info_czbg = 22;</code>
       *
       * <pre>
       * 用户叫庄信息（如果有 里有有玩家的叫分数据）（叫庄阶段）
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder> 
          getCallBankerInfoCzbgFieldBuilder() {
        if (callBankerInfoCzbgBuilder_ == null) {
          callBankerInfoCzbgBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder>(
                  callBankerInfoCzbg_,
                  getParentForChildren(),
                  isClean());
          callBankerInfoCzbg_ = null;
        }
        return callBankerInfoCzbgBuilder_;
      }

      // repeated float score = 23;
      private java.util.List<java.lang.Float> score_ = java.util.Collections.emptyList();
      private void ensureScoreIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          score_ = new java.util.ArrayList<java.lang.Float>(score_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated float score = 23;</code>
       *
       * <pre>
       * 当前局分数
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getScoreList() {
        return java.util.Collections.unmodifiableList(score_);
      }
      /**
       * <code>repeated float score = 23;</code>
       *
       * <pre>
       * 当前局分数
       * </pre>
       */
      public int getScoreCount() {
        return score_.size();
      }
      /**
       * <code>repeated float score = 23;</code>
       *
       * <pre>
       * 当前局分数
       * </pre>
       */
      public float getScore(int index) {
        return score_.get(index);
      }
      /**
       * <code>repeated float score = 23;</code>
       *
       * <pre>
       * 当前局分数
       * </pre>
       */
      public Builder setScore(
          int index, float value) {
        ensureScoreIsMutable();
        score_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float score = 23;</code>
       *
       * <pre>
       * 当前局分数
       * </pre>
       */
      public Builder addScore(float value) {
        ensureScoreIsMutable();
        score_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float score = 23;</code>
       *
       * <pre>
       * 当前局分数
       * </pre>
       */
      public Builder addAllScore(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureScoreIsMutable();
        super.addAll(values, score_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float score = 23;</code>
       *
       * <pre>
       * 当前局分数
       * </pre>
       */
      public Builder clearScore() {
        score_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // optional .czbg.AddJetton_CZBG add_jetton_info = 25;
      private protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG addJettonInfo_ = protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG, protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBGOrBuilder> addJettonInfoBuilder_;
      /**
       * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public boolean hasAddJettonInfo() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG getAddJettonInfo() {
        if (addJettonInfoBuilder_ == null) {
          return addJettonInfo_;
        } else {
          return addJettonInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder setAddJettonInfo(protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG value) {
        if (addJettonInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          addJettonInfo_ = value;
          onChanged();
        } else {
          addJettonInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder setAddJettonInfo(
          protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.Builder builderForValue) {
        if (addJettonInfoBuilder_ == null) {
          addJettonInfo_ = builderForValue.build();
          onChanged();
        } else {
          addJettonInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder mergeAddJettonInfo(protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG value) {
        if (addJettonInfoBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000) &&
              addJettonInfo_ != protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.getDefaultInstance()) {
            addJettonInfo_ =
              protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.newBuilder(addJettonInfo_).mergeFrom(value).buildPartial();
          } else {
            addJettonInfo_ = value;
          }
          onChanged();
        } else {
          addJettonInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder clearAddJettonInfo() {
        if (addJettonInfoBuilder_ == null) {
          addJettonInfo_ = protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.getDefaultInstance();
          onChanged();
        } else {
          addJettonInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }
      /**
       * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.Builder getAddJettonInfoBuilder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getAddJettonInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBGOrBuilder getAddJettonInfoOrBuilder() {
        if (addJettonInfoBuilder_ != null) {
          return addJettonInfoBuilder_.getMessageOrBuilder();
        } else {
          return addJettonInfo_;
        }
      }
      /**
       * <code>optional .czbg.AddJetton_CZBG add_jetton_info = 25;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG, protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBGOrBuilder> 
          getAddJettonInfoFieldBuilder() {
        if (addJettonInfoBuilder_ == null) {
          addJettonInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG, protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBGOrBuilder>(
                  addJettonInfo_,
                  getParentForChildren(),
                  isClean());
          addJettonInfo_ = null;
        }
        return addJettonInfoBuilder_;
      }

      // repeated int32 beishu = 26;
      private java.util.List<java.lang.Integer> beishu_ = java.util.Collections.emptyList();
      private void ensureBeishuIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          beishu_ = new java.util.ArrayList<java.lang.Integer>(beishu_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated int32 beishu = 26;</code>
       *
       * <pre>
       * 倍数信息
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBeishuList() {
        return java.util.Collections.unmodifiableList(beishu_);
      }
      /**
       * <code>repeated int32 beishu = 26;</code>
       *
       * <pre>
       * 倍数信息
       * </pre>
       */
      public int getBeishuCount() {
        return beishu_.size();
      }
      /**
       * <code>repeated int32 beishu = 26;</code>
       *
       * <pre>
       * 倍数信息
       * </pre>
       */
      public int getBeishu(int index) {
        return beishu_.get(index);
      }
      /**
       * <code>repeated int32 beishu = 26;</code>
       *
       * <pre>
       * 倍数信息
       * </pre>
       */
      public Builder setBeishu(
          int index, int value) {
        ensureBeishuIsMutable();
        beishu_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 beishu = 26;</code>
       *
       * <pre>
       * 倍数信息
       * </pre>
       */
      public Builder addBeishu(int value) {
        ensureBeishuIsMutable();
        beishu_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 beishu = 26;</code>
       *
       * <pre>
       * 倍数信息
       * </pre>
       */
      public Builder addAllBeishu(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBeishuIsMutable();
        super.addAll(values, beishu_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 beishu = 26;</code>
       *
       * <pre>
       * 倍数信息
       * </pre>
       */
      public Builder clearBeishu() {
        beishu_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      // repeated int32 fenshu = 27;
      private java.util.List<java.lang.Integer> fenshu_ = java.util.Collections.emptyList();
      private void ensureFenshuIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          fenshu_ = new java.util.ArrayList<java.lang.Integer>(fenshu_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated int32 fenshu = 27;</code>
       *
       * <pre>
       * 分数信息
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getFenshuList() {
        return java.util.Collections.unmodifiableList(fenshu_);
      }
      /**
       * <code>repeated int32 fenshu = 27;</code>
       *
       * <pre>
       * 分数信息
       * </pre>
       */
      public int getFenshuCount() {
        return fenshu_.size();
      }
      /**
       * <code>repeated int32 fenshu = 27;</code>
       *
       * <pre>
       * 分数信息
       * </pre>
       */
      public int getFenshu(int index) {
        return fenshu_.get(index);
      }
      /**
       * <code>repeated int32 fenshu = 27;</code>
       *
       * <pre>
       * 分数信息
       * </pre>
       */
      public Builder setFenshu(
          int index, int value) {
        ensureFenshuIsMutable();
        fenshu_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fenshu = 27;</code>
       *
       * <pre>
       * 分数信息
       * </pre>
       */
      public Builder addFenshu(int value) {
        ensureFenshuIsMutable();
        fenshu_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fenshu = 27;</code>
       *
       * <pre>
       * 分数信息
       * </pre>
       */
      public Builder addAllFenshu(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFenshuIsMutable();
        super.addAll(values, fenshu_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fenshu = 27;</code>
       *
       * <pre>
       * 分数信息
       * </pre>
       */
      public Builder clearFenshu() {
        fenshu_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      // optional bool can_bao_dao = 28;
      private boolean canBaoDao_ ;
      /**
       * <code>optional bool can_bao_dao = 28;</code>
       *
       * <pre>
       * 能否报道
       * </pre>
       */
      public boolean hasCanBaoDao() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional bool can_bao_dao = 28;</code>
       *
       * <pre>
       * 能否报道
       * </pre>
       */
      public boolean getCanBaoDao() {
        return canBaoDao_;
      }
      /**
       * <code>optional bool can_bao_dao = 28;</code>
       *
       * <pre>
       * 能否报道
       * </pre>
       */
      public Builder setCanBaoDao(boolean value) {
        bitField0_ |= 0x04000000;
        canBaoDao_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool can_bao_dao = 28;</code>
       *
       * <pre>
       * 能否报道
       * </pre>
       */
      public Builder clearCanBaoDao() {
        bitField0_ = (bitField0_ & ~0x04000000);
        canBaoDao_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.TableResponse_CZBG)
    }

    static {
      defaultInstance = new TableResponse_CZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.TableResponse_CZBG)
  }

  public interface CallBankerInfo_CZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 call_banker_info = 1;
    /**
     * <code>repeated int32 call_banker_info = 1;</code>
     *
     * <pre>
     *叫庄数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCallBankerInfoList();
    /**
     * <code>repeated int32 call_banker_info = 1;</code>
     *
     * <pre>
     *叫庄数据
     * </pre>
     */
    int getCallBankerInfoCount();
    /**
     * <code>repeated int32 call_banker_info = 1;</code>
     *
     * <pre>
     *叫庄数据
     * </pre>
     */
    int getCallBankerInfo(int index);

    // optional int32 display_time = 2;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 cur_player = 3;
    /**
     * <code>optional int32 cur_player = 3;</code>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 3;</code>
     */
    int getCurPlayer();

    // repeated int32 call_button = 4;
    /**
     * <code>repeated int32 call_button = 4;</code>
     *
     * <pre>
     * 叫庄按钮数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCallButtonList();
    /**
     * <code>repeated int32 call_button = 4;</code>
     *
     * <pre>
     * 叫庄按钮数据
     * </pre>
     */
    int getCallButtonCount();
    /**
     * <code>repeated int32 call_button = 4;</code>
     *
     * <pre>
     * 叫庄按钮数据
     * </pre>
     */
    int getCallButton(int index);
  }
  /**
   * Protobuf type {@code czbg.CallBankerInfo_CZBG}
   *
   * <pre>
   * 用户叫庄信息
   * </pre>
   */
  public static final class CallBankerInfo_CZBG extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerInfo_CZBGOrBuilder {
    // Use CallBankerInfo_CZBG.newBuilder() to construct.
    private CallBankerInfo_CZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerInfo_CZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerInfo_CZBG defaultInstance;
    public static CallBankerInfo_CZBG getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerInfo_CZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerInfo_CZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                callBankerInfo_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              callBankerInfo_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                callBankerInfo_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                callBankerInfo_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              displayTime_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              curPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                callButton_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              callButton_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                callButton_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                callButton_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          callBankerInfo_ = java.util.Collections.unmodifiableList(callBankerInfo_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          callButton_ = java.util.Collections.unmodifiableList(callButton_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_CallBankerInfo_CZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_CallBankerInfo_CZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.class, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerInfo_CZBG> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerInfo_CZBG>() {
      public CallBankerInfo_CZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerInfo_CZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerInfo_CZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 call_banker_info = 1;
    public static final int CALL_BANKER_INFO_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> callBankerInfo_;
    /**
     * <code>repeated int32 call_banker_info = 1;</code>
     *
     * <pre>
     *叫庄数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCallBankerInfoList() {
      return callBankerInfo_;
    }
    /**
     * <code>repeated int32 call_banker_info = 1;</code>
     *
     * <pre>
     *叫庄数据
     * </pre>
     */
    public int getCallBankerInfoCount() {
      return callBankerInfo_.size();
    }
    /**
     * <code>repeated int32 call_banker_info = 1;</code>
     *
     * <pre>
     *叫庄数据
     * </pre>
     */
    public int getCallBankerInfo(int index) {
      return callBankerInfo_.get(index);
    }

    // optional int32 display_time = 2;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 2;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 cur_player = 3;
    public static final int CUR_PLAYER_FIELD_NUMBER = 3;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 3;</code>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_player = 3;</code>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 call_button = 4;
    public static final int CALL_BUTTON_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> callButton_;
    /**
     * <code>repeated int32 call_button = 4;</code>
     *
     * <pre>
     * 叫庄按钮数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCallButtonList() {
      return callButton_;
    }
    /**
     * <code>repeated int32 call_button = 4;</code>
     *
     * <pre>
     * 叫庄按钮数据
     * </pre>
     */
    public int getCallButtonCount() {
      return callButton_.size();
    }
    /**
     * <code>repeated int32 call_button = 4;</code>
     *
     * <pre>
     * 叫庄按钮数据
     * </pre>
     */
    public int getCallButton(int index) {
      return callButton_.get(index);
    }

    private void initFields() {
      callBankerInfo_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      curPlayer_ = 0;
      callButton_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < callBankerInfo_.size(); i++) {
        output.writeInt32(1, callBankerInfo_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, displayTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, curPlayer_);
      }
      for (int i = 0; i < callButton_.size(); i++) {
        output.writeInt32(4, callButton_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < callBankerInfo_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callBankerInfo_.get(i));
        }
        size += dataSize;
        size += 1 * getCallBankerInfoList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, displayTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < callButton_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callButton_.get(i));
        }
        size += dataSize;
        size += 1 * getCallButtonList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.CallBankerInfo_CZBG}
     *
     * <pre>
     * 用户叫庄信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_CallBankerInfo_CZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_CallBankerInfo_CZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.class, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        callBankerInfo_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        callButton_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_CallBankerInfo_CZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG build() {
        protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG result = new protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          callBankerInfo_ = java.util.Collections.unmodifiableList(callBankerInfo_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.callBankerInfo_ = callBankerInfo_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          callButton_ = java.util.Collections.unmodifiableList(callButton_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.callButton_ = callButton_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance()) return this;
        if (!other.callBankerInfo_.isEmpty()) {
          if (callBankerInfo_.isEmpty()) {
            callBankerInfo_ = other.callBankerInfo_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCallBankerInfoIsMutable();
            callBankerInfo_.addAll(other.callBankerInfo_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.callButton_.isEmpty()) {
          if (callButton_.isEmpty()) {
            callButton_ = other.callButton_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCallButtonIsMutable();
            callButton_.addAll(other.callButton_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 call_banker_info = 1;
      private java.util.List<java.lang.Integer> callBankerInfo_ = java.util.Collections.emptyList();
      private void ensureCallBankerInfoIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          callBankerInfo_ = new java.util.ArrayList<java.lang.Integer>(callBankerInfo_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 call_banker_info = 1;</code>
       *
       * <pre>
       *叫庄数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCallBankerInfoList() {
        return java.util.Collections.unmodifiableList(callBankerInfo_);
      }
      /**
       * <code>repeated int32 call_banker_info = 1;</code>
       *
       * <pre>
       *叫庄数据
       * </pre>
       */
      public int getCallBankerInfoCount() {
        return callBankerInfo_.size();
      }
      /**
       * <code>repeated int32 call_banker_info = 1;</code>
       *
       * <pre>
       *叫庄数据
       * </pre>
       */
      public int getCallBankerInfo(int index) {
        return callBankerInfo_.get(index);
      }
      /**
       * <code>repeated int32 call_banker_info = 1;</code>
       *
       * <pre>
       *叫庄数据
       * </pre>
       */
      public Builder setCallBankerInfo(
          int index, int value) {
        ensureCallBankerInfoIsMutable();
        callBankerInfo_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker_info = 1;</code>
       *
       * <pre>
       *叫庄数据
       * </pre>
       */
      public Builder addCallBankerInfo(int value) {
        ensureCallBankerInfoIsMutable();
        callBankerInfo_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker_info = 1;</code>
       *
       * <pre>
       *叫庄数据
       * </pre>
       */
      public Builder addAllCallBankerInfo(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallBankerInfoIsMutable();
        super.addAll(values, callBankerInfo_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker_info = 1;</code>
       *
       * <pre>
       *叫庄数据
       * </pre>
       */
      public Builder clearCallBankerInfo() {
        callBankerInfo_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 display_time = 2;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000002;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 3;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 3;</code>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cur_player = 3;</code>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 3;</code>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000004;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 3;</code>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 call_button = 4;
      private java.util.List<java.lang.Integer> callButton_ = java.util.Collections.emptyList();
      private void ensureCallButtonIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          callButton_ = new java.util.ArrayList<java.lang.Integer>(callButton_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 call_button = 4;</code>
       *
       * <pre>
       * 叫庄按钮数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCallButtonList() {
        return java.util.Collections.unmodifiableList(callButton_);
      }
      /**
       * <code>repeated int32 call_button = 4;</code>
       *
       * <pre>
       * 叫庄按钮数据
       * </pre>
       */
      public int getCallButtonCount() {
        return callButton_.size();
      }
      /**
       * <code>repeated int32 call_button = 4;</code>
       *
       * <pre>
       * 叫庄按钮数据
       * </pre>
       */
      public int getCallButton(int index) {
        return callButton_.get(index);
      }
      /**
       * <code>repeated int32 call_button = 4;</code>
       *
       * <pre>
       * 叫庄按钮数据
       * </pre>
       */
      public Builder setCallButton(
          int index, int value) {
        ensureCallButtonIsMutable();
        callButton_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_button = 4;</code>
       *
       * <pre>
       * 叫庄按钮数据
       * </pre>
       */
      public Builder addCallButton(int value) {
        ensureCallButtonIsMutable();
        callButton_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_button = 4;</code>
       *
       * <pre>
       * 叫庄按钮数据
       * </pre>
       */
      public Builder addAllCallButton(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallButtonIsMutable();
        super.addAll(values, callButton_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_button = 4;</code>
       *
       * <pre>
       * 叫庄按钮数据
       * </pre>
       */
      public Builder clearCallButton() {
        callButton_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.CallBankerInfo_CZBG)
    }

    static {
      defaultInstance = new CallBankerInfo_CZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.CallBankerInfo_CZBG)
  }

  public interface AddJetton_CZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 min_value = 1;
    /**
     * <code>optional int32 min_value = 1;</code>
     *
     * <pre>
     * 最低叫分
     * </pre>
     */
    boolean hasMinValue();
    /**
     * <code>optional int32 min_value = 1;</code>
     *
     * <pre>
     * 最低叫分
     * </pre>
     */
    int getMinValue();

    // optional int32 max_value = 2;
    /**
     * <code>optional int32 max_value = 2;</code>
     *
     * <pre>
     * 最高叫分
     * </pre>
     */
    boolean hasMaxValue();
    /**
     * <code>optional int32 max_value = 2;</code>
     *
     * <pre>
     * 最高叫分
     * </pre>
     */
    int getMaxValue();

    // optional int32 cur_player = 3;
    /**
     * <code>optional int32 cur_player = 3;</code>
     *
     * <pre>
     * 当前操作玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 3;</code>
     *
     * <pre>
     * 当前操作玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 add_jettion_info = 4;
    /**
     * <code>repeated int32 add_jettion_info = 4;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    java.util.List<java.lang.Integer> getAddJettionInfoList();
    /**
     * <code>repeated int32 add_jettion_info = 4;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    int getAddJettionInfoCount();
    /**
     * <code>repeated int32 add_jettion_info = 4;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    int getAddJettionInfo(int index);

    // optional .czbg.CallBankerInfo_CZBG callBanker = 5;
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
     *
     * <pre>
     * 抢庄动画播放
     * </pre>
     */
    boolean hasCallBanker();
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
     *
     * <pre>
     * 抢庄动画播放
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG getCallBanker();
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
     *
     * <pre>
     * 抢庄动画播放
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder getCallBankerOrBuilder();

    // optional int32 cur_banker = 6;
    /**
     * <code>optional int32 cur_banker = 6;</code>
     *
     * <pre>
     * 当前庄家
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 6;</code>
     *
     * <pre>
     * 当前庄家
     * </pre>
     */
    int getCurBanker();
  }
  /**
   * Protobuf type {@code czbg.AddJetton_CZBG}
   */
  public static final class AddJetton_CZBG extends
      com.google.protobuf.GeneratedMessage
      implements AddJetton_CZBGOrBuilder {
    // Use AddJetton_CZBG.newBuilder() to construct.
    private AddJetton_CZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AddJetton_CZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AddJetton_CZBG defaultInstance;
    public static AddJetton_CZBG getDefaultInstance() {
      return defaultInstance;
    }

    public AddJetton_CZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AddJetton_CZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              minValue_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              maxValue_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              curPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                addJettionInfo_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              addJettionInfo_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                addJettionInfo_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                addJettionInfo_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = callBanker_.toBuilder();
              }
              callBanker_ = input.readMessage(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(callBanker_);
                callBanker_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              curBanker_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          addJettionInfo_ = java.util.Collections.unmodifiableList(addJettionInfo_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_AddJetton_CZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_AddJetton_CZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.class, protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<AddJetton_CZBG> PARSER =
        new com.google.protobuf.AbstractParser<AddJetton_CZBG>() {
      public AddJetton_CZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AddJetton_CZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AddJetton_CZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 min_value = 1;
    public static final int MIN_VALUE_FIELD_NUMBER = 1;
    private int minValue_;
    /**
     * <code>optional int32 min_value = 1;</code>
     *
     * <pre>
     * 最低叫分
     * </pre>
     */
    public boolean hasMinValue() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 min_value = 1;</code>
     *
     * <pre>
     * 最低叫分
     * </pre>
     */
    public int getMinValue() {
      return minValue_;
    }

    // optional int32 max_value = 2;
    public static final int MAX_VALUE_FIELD_NUMBER = 2;
    private int maxValue_;
    /**
     * <code>optional int32 max_value = 2;</code>
     *
     * <pre>
     * 最高叫分
     * </pre>
     */
    public boolean hasMaxValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 max_value = 2;</code>
     *
     * <pre>
     * 最高叫分
     * </pre>
     */
    public int getMaxValue() {
      return maxValue_;
    }

    // optional int32 cur_player = 3;
    public static final int CUR_PLAYER_FIELD_NUMBER = 3;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 3;</code>
     *
     * <pre>
     * 当前操作玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 cur_player = 3;</code>
     *
     * <pre>
     * 当前操作玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 add_jettion_info = 4;
    public static final int ADD_JETTION_INFO_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> addJettionInfo_;
    /**
     * <code>repeated int32 add_jettion_info = 4;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAddJettionInfoList() {
      return addJettionInfo_;
    }
    /**
     * <code>repeated int32 add_jettion_info = 4;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    public int getAddJettionInfoCount() {
      return addJettionInfo_.size();
    }
    /**
     * <code>repeated int32 add_jettion_info = 4;</code>
     *
     * <pre>
     * 下注信息
     * </pre>
     */
    public int getAddJettionInfo(int index) {
      return addJettionInfo_.get(index);
    }

    // optional .czbg.CallBankerInfo_CZBG callBanker = 5;
    public static final int CALLBANKER_FIELD_NUMBER = 5;
    private protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG callBanker_;
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
     *
     * <pre>
     * 抢庄动画播放
     * </pre>
     */
    public boolean hasCallBanker() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
     *
     * <pre>
     * 抢庄动画播放
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG getCallBanker() {
      return callBanker_;
    }
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
     *
     * <pre>
     * 抢庄动画播放
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder getCallBankerOrBuilder() {
      return callBanker_;
    }

    // optional int32 cur_banker = 6;
    public static final int CUR_BANKER_FIELD_NUMBER = 6;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 6;</code>
     *
     * <pre>
     * 当前庄家
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 cur_banker = 6;</code>
     *
     * <pre>
     * 当前庄家
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    private void initFields() {
      minValue_ = 0;
      maxValue_ = 0;
      curPlayer_ = 0;
      addJettionInfo_ = java.util.Collections.emptyList();
      callBanker_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
      curBanker_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, minValue_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, maxValue_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, curPlayer_);
      }
      for (int i = 0; i < addJettionInfo_.size(); i++) {
        output.writeInt32(4, addJettionInfo_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(5, callBanker_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, curBanker_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, minValue_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, maxValue_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < addJettionInfo_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(addJettionInfo_.get(i));
        }
        size += dataSize;
        size += 1 * getAddJettionInfoList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, callBanker_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curBanker_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.AddJetton_CZBG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_AddJetton_CZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_AddJetton_CZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.class, protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCallBankerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        minValue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        maxValue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        addJettionInfo_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (callBankerBuilder_ == null) {
          callBanker_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
        } else {
          callBankerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_AddJetton_CZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG build() {
        protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG result = new protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.minValue_ = minValue_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.maxValue_ = maxValue_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          addJettionInfo_ = java.util.Collections.unmodifiableList(addJettionInfo_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.addJettionInfo_ = addJettionInfo_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        if (callBankerBuilder_ == null) {
          result.callBanker_ = callBanker_;
        } else {
          result.callBanker_ = callBankerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.curBanker_ = curBanker_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG.getDefaultInstance()) return this;
        if (other.hasMinValue()) {
          setMinValue(other.getMinValue());
        }
        if (other.hasMaxValue()) {
          setMaxValue(other.getMaxValue());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.addJettionInfo_.isEmpty()) {
          if (addJettionInfo_.isEmpty()) {
            addJettionInfo_ = other.addJettionInfo_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureAddJettionInfoIsMutable();
            addJettionInfo_.addAll(other.addJettionInfo_);
          }
          onChanged();
        }
        if (other.hasCallBanker()) {
          mergeCallBanker(other.getCallBanker());
        }
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.AddJetton_CZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 min_value = 1;
      private int minValue_ ;
      /**
       * <code>optional int32 min_value = 1;</code>
       *
       * <pre>
       * 最低叫分
       * </pre>
       */
      public boolean hasMinValue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 min_value = 1;</code>
       *
       * <pre>
       * 最低叫分
       * </pre>
       */
      public int getMinValue() {
        return minValue_;
      }
      /**
       * <code>optional int32 min_value = 1;</code>
       *
       * <pre>
       * 最低叫分
       * </pre>
       */
      public Builder setMinValue(int value) {
        bitField0_ |= 0x00000001;
        minValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 min_value = 1;</code>
       *
       * <pre>
       * 最低叫分
       * </pre>
       */
      public Builder clearMinValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        minValue_ = 0;
        onChanged();
        return this;
      }

      // optional int32 max_value = 2;
      private int maxValue_ ;
      /**
       * <code>optional int32 max_value = 2;</code>
       *
       * <pre>
       * 最高叫分
       * </pre>
       */
      public boolean hasMaxValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 max_value = 2;</code>
       *
       * <pre>
       * 最高叫分
       * </pre>
       */
      public int getMaxValue() {
        return maxValue_;
      }
      /**
       * <code>optional int32 max_value = 2;</code>
       *
       * <pre>
       * 最高叫分
       * </pre>
       */
      public Builder setMaxValue(int value) {
        bitField0_ |= 0x00000002;
        maxValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_value = 2;</code>
       *
       * <pre>
       * 最高叫分
       * </pre>
       */
      public Builder clearMaxValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxValue_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 3;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 3;</code>
       *
       * <pre>
       * 当前操作玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cur_player = 3;</code>
       *
       * <pre>
       * 当前操作玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 3;</code>
       *
       * <pre>
       * 当前操作玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000004;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 3;</code>
       *
       * <pre>
       * 当前操作玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 add_jettion_info = 4;
      private java.util.List<java.lang.Integer> addJettionInfo_ = java.util.Collections.emptyList();
      private void ensureAddJettionInfoIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          addJettionInfo_ = new java.util.ArrayList<java.lang.Integer>(addJettionInfo_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 add_jettion_info = 4;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAddJettionInfoList() {
        return java.util.Collections.unmodifiableList(addJettionInfo_);
      }
      /**
       * <code>repeated int32 add_jettion_info = 4;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public int getAddJettionInfoCount() {
        return addJettionInfo_.size();
      }
      /**
       * <code>repeated int32 add_jettion_info = 4;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public int getAddJettionInfo(int index) {
        return addJettionInfo_.get(index);
      }
      /**
       * <code>repeated int32 add_jettion_info = 4;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder setAddJettionInfo(
          int index, int value) {
        ensureAddJettionInfoIsMutable();
        addJettionInfo_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 add_jettion_info = 4;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder addAddJettionInfo(int value) {
        ensureAddJettionInfoIsMutable();
        addJettionInfo_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 add_jettion_info = 4;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder addAllAddJettionInfo(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddJettionInfoIsMutable();
        super.addAll(values, addJettionInfo_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 add_jettion_info = 4;</code>
       *
       * <pre>
       * 下注信息
       * </pre>
       */
      public Builder clearAddJettionInfo() {
        addJettionInfo_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional .czbg.CallBankerInfo_CZBG callBanker = 5;
      private protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG callBanker_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder> callBankerBuilder_;
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
       *
       * <pre>
       * 抢庄动画播放
       * </pre>
       */
      public boolean hasCallBanker() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
       *
       * <pre>
       * 抢庄动画播放
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG getCallBanker() {
        if (callBankerBuilder_ == null) {
          return callBanker_;
        } else {
          return callBankerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
       *
       * <pre>
       * 抢庄动画播放
       * </pre>
       */
      public Builder setCallBanker(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG value) {
        if (callBankerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          callBanker_ = value;
          onChanged();
        } else {
          callBankerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
       *
       * <pre>
       * 抢庄动画播放
       * </pre>
       */
      public Builder setCallBanker(
          protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder builderForValue) {
        if (callBankerBuilder_ == null) {
          callBanker_ = builderForValue.build();
          onChanged();
        } else {
          callBankerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
       *
       * <pre>
       * 抢庄动画播放
       * </pre>
       */
      public Builder mergeCallBanker(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG value) {
        if (callBankerBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              callBanker_ != protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance()) {
            callBanker_ =
              protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.newBuilder(callBanker_).mergeFrom(value).buildPartial();
          } else {
            callBanker_ = value;
          }
          onChanged();
        } else {
          callBankerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
       *
       * <pre>
       * 抢庄动画播放
       * </pre>
       */
      public Builder clearCallBanker() {
        if (callBankerBuilder_ == null) {
          callBanker_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
          onChanged();
        } else {
          callBankerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
       *
       * <pre>
       * 抢庄动画播放
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder getCallBankerBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getCallBankerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
       *
       * <pre>
       * 抢庄动画播放
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder getCallBankerOrBuilder() {
        if (callBankerBuilder_ != null) {
          return callBankerBuilder_.getMessageOrBuilder();
        } else {
          return callBanker_;
        }
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG callBanker = 5;</code>
       *
       * <pre>
       * 抢庄动画播放
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder> 
          getCallBankerFieldBuilder() {
        if (callBankerBuilder_ == null) {
          callBankerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder>(
                  callBanker_,
                  getParentForChildren(),
                  isClean());
          callBanker_ = null;
        }
        return callBankerBuilder_;
      }

      // optional int32 cur_banker = 6;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 6;</code>
       *
       * <pre>
       * 当前庄家
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_banker = 6;</code>
       *
       * <pre>
       * 当前庄家
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 6;</code>
       *
       * <pre>
       * 当前庄家
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000020;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 6;</code>
       *
       * <pre>
       * 当前庄家
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000020);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.AddJetton_CZBG)
    }

    static {
      defaultInstance = new AddJetton_CZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.AddJetton_CZBG)
  }

  public interface GameStart_CZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Int32ArrayResponse jetton_cell = 1;
    /**
     * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
     *
     * <pre>
     * 下注筹码
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getJettonCellList();
    /**
     * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
     *
     * <pre>
     * 下注筹码
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getJettonCell(int index);
    /**
     * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
     *
     * <pre>
     * 下注筹码
     * </pre>
     */
    int getJettonCellCount();
    /**
     * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
     *
     * <pre>
     * 下注筹码
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getJettonCellOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
     *
     * <pre>
     * 下注筹码
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getJettonCellOrBuilder(
        int index);

    // optional int32 cur_banker = 3;
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     * 当前庄家 -1表示没有庄家
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     * 当前庄家 -1表示没有庄家
     * </pre>
     */
    int getCurBanker();

    // optional int32 display_time = 4;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional .czbg.SendCard_CZBG send_card = 5;
    /**
     * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
     *
     * <pre>
     * 卡牌信息
     * </pre>
     */
    boolean hasSendCard();
    /**
     * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
     *
     * <pre>
     * 卡牌信息
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG getSendCard();
    /**
     * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
     *
     * <pre>
     * 卡牌信息
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.SendCard_CZBGOrBuilder getSendCardOrBuilder();

    // optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
     *
     * <pre>
     * 用户叫庄信息
     * </pre>
     */
    boolean hasCallBankerInfo();
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
     *
     * <pre>
     * 用户叫庄信息
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG getCallBankerInfo();
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
     *
     * <pre>
     * 用户叫庄信息
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder getCallBankerInfoOrBuilder();

    // optional .RoomInfo room_info = 7;
    /**
     * <code>optional .RoomInfo room_info = 7;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 7;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 7;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional bool is_fifth = 8;
    /**
     * <code>optional bool is_fifth = 8;</code>
     *
     * <pre>
     * 看四张时是否第五张
     * </pre>
     */
    boolean hasIsFifth();
    /**
     * <code>optional bool is_fifth = 8;</code>
     *
     * <pre>
     * 看四张时是否第五张
     * </pre>
     */
    boolean getIsFifth();

    // optional bool can_bao_dao = 9;
    /**
     * <code>optional bool can_bao_dao = 9;</code>
     *
     * <pre>
     * 能否报道
     * </pre>
     */
    boolean hasCanBaoDao();
    /**
     * <code>optional bool can_bao_dao = 9;</code>
     *
     * <pre>
     * 能否报道
     * </pre>
     */
    boolean getCanBaoDao();
  }
  /**
   * Protobuf type {@code czbg.GameStart_CZBG}
   *
   * <pre>
   * 确认庄家游戏开始
   * </pre>
   */
  public static final class GameStart_CZBG extends
      com.google.protobuf.GeneratedMessage
      implements GameStart_CZBGOrBuilder {
    // Use GameStart_CZBG.newBuilder() to construct.
    private GameStart_CZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStart_CZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStart_CZBG defaultInstance;
    public static GameStart_CZBG getDefaultInstance() {
      return defaultInstance;
    }

    public GameStart_CZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStart_CZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                jettonCell_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000001;
              }
              jettonCell_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              curBanker_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
            case 42: {
              protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = sendCard_.toBuilder();
              }
              sendCard_ = input.readMessage(protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sendCard_);
                sendCard_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 50: {
              protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = callBankerInfo_.toBuilder();
              }
              callBankerInfo_ = input.readMessage(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(callBankerInfo_);
                callBankerInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 58: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              isFifth_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              canBaoDao_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          jettonCell_ = java.util.Collections.unmodifiableList(jettonCell_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_GameStart_CZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_GameStart_CZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG.class, protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStart_CZBG> PARSER =
        new com.google.protobuf.AbstractParser<GameStart_CZBG>() {
      public GameStart_CZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStart_CZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStart_CZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .Int32ArrayResponse jetton_cell = 1;
    public static final int JETTON_CELL_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> jettonCell_;
    /**
     * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
     *
     * <pre>
     * 下注筹码
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getJettonCellList() {
      return jettonCell_;
    }
    /**
     * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
     *
     * <pre>
     * 下注筹码
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getJettonCellOrBuilderList() {
      return jettonCell_;
    }
    /**
     * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
     *
     * <pre>
     * 下注筹码
     * </pre>
     */
    public int getJettonCellCount() {
      return jettonCell_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
     *
     * <pre>
     * 下注筹码
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getJettonCell(int index) {
      return jettonCell_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
     *
     * <pre>
     * 下注筹码
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getJettonCellOrBuilder(
        int index) {
      return jettonCell_.get(index);
    }

    // optional int32 cur_banker = 3;
    public static final int CUR_BANKER_FIELD_NUMBER = 3;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     * 当前庄家 -1表示没有庄家
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     * 当前庄家 -1表示没有庄家
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // optional int32 display_time = 4;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 4;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional .czbg.SendCard_CZBG send_card = 5;
    public static final int SEND_CARD_FIELD_NUMBER = 5;
    private protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG sendCard_;
    /**
     * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
     *
     * <pre>
     * 卡牌信息
     * </pre>
     */
    public boolean hasSendCard() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
     *
     * <pre>
     * 卡牌信息
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG getSendCard() {
      return sendCard_;
    }
    /**
     * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
     *
     * <pre>
     * 卡牌信息
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.SendCard_CZBGOrBuilder getSendCardOrBuilder() {
      return sendCard_;
    }

    // optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;
    public static final int CALL_BANKER_INFO_FIELD_NUMBER = 6;
    private protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG callBankerInfo_;
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
     *
     * <pre>
     * 用户叫庄信息
     * </pre>
     */
    public boolean hasCallBankerInfo() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
     *
     * <pre>
     * 用户叫庄信息
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG getCallBankerInfo() {
      return callBankerInfo_;
    }
    /**
     * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
     *
     * <pre>
     * 用户叫庄信息
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder getCallBankerInfoOrBuilder() {
      return callBankerInfo_;
    }

    // optional .RoomInfo room_info = 7;
    public static final int ROOM_INFO_FIELD_NUMBER = 7;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 7;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .RoomInfo room_info = 7;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 7;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional bool is_fifth = 8;
    public static final int IS_FIFTH_FIELD_NUMBER = 8;
    private boolean isFifth_;
    /**
     * <code>optional bool is_fifth = 8;</code>
     *
     * <pre>
     * 看四张时是否第五张
     * </pre>
     */
    public boolean hasIsFifth() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool is_fifth = 8;</code>
     *
     * <pre>
     * 看四张时是否第五张
     * </pre>
     */
    public boolean getIsFifth() {
      return isFifth_;
    }

    // optional bool can_bao_dao = 9;
    public static final int CAN_BAO_DAO_FIELD_NUMBER = 9;
    private boolean canBaoDao_;
    /**
     * <code>optional bool can_bao_dao = 9;</code>
     *
     * <pre>
     * 能否报道
     * </pre>
     */
    public boolean hasCanBaoDao() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool can_bao_dao = 9;</code>
     *
     * <pre>
     * 能否报道
     * </pre>
     */
    public boolean getCanBaoDao() {
      return canBaoDao_;
    }

    private void initFields() {
      jettonCell_ = java.util.Collections.emptyList();
      curBanker_ = 0;
      displayTime_ = 0;
      sendCard_ = protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.getDefaultInstance();
      callBankerInfo_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      isFifth_ = false;
      canBaoDao_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < jettonCell_.size(); i++) {
        output.writeMessage(1, jettonCell_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, curBanker_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(5, sendCard_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(6, callBankerInfo_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(7, roomInfo_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(8, isFifth_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(9, canBaoDao_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < jettonCell_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, jettonCell_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, curBanker_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, sendCard_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, callBankerInfo_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, roomInfo_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, isFifth_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, canBaoDao_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.GameStart_CZBG}
     *
     * <pre>
     * 确认庄家游戏开始
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.GameStart_CZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_GameStart_CZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_GameStart_CZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG.class, protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getJettonCellFieldBuilder();
          getSendCardFieldBuilder();
          getCallBankerInfoFieldBuilder();
          getRoomInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (jettonCellBuilder_ == null) {
          jettonCell_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          jettonCellBuilder_.clear();
        }
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (sendCardBuilder_ == null) {
          sendCard_ = protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.getDefaultInstance();
        } else {
          sendCardBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (callBankerInfoBuilder_ == null) {
          callBankerInfo_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
        } else {
          callBankerInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        isFifth_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        canBaoDao_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_GameStart_CZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG build() {
        protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG result = new protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (jettonCellBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            jettonCell_ = java.util.Collections.unmodifiableList(jettonCell_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.jettonCell_ = jettonCell_;
        } else {
          result.jettonCell_ = jettonCellBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curBanker_ = curBanker_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (sendCardBuilder_ == null) {
          result.sendCard_ = sendCard_;
        } else {
          result.sendCard_ = sendCardBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        if (callBankerInfoBuilder_ == null) {
          result.callBankerInfo_ = callBankerInfo_;
        } else {
          result.callBankerInfo_ = callBankerInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.isFifth_ = isFifth_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.canBaoDao_ = canBaoDao_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG.getDefaultInstance()) return this;
        if (jettonCellBuilder_ == null) {
          if (!other.jettonCell_.isEmpty()) {
            if (jettonCell_.isEmpty()) {
              jettonCell_ = other.jettonCell_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureJettonCellIsMutable();
              jettonCell_.addAll(other.jettonCell_);
            }
            onChanged();
          }
        } else {
          if (!other.jettonCell_.isEmpty()) {
            if (jettonCellBuilder_.isEmpty()) {
              jettonCellBuilder_.dispose();
              jettonCellBuilder_ = null;
              jettonCell_ = other.jettonCell_;
              bitField0_ = (bitField0_ & ~0x00000001);
              jettonCellBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getJettonCellFieldBuilder() : null;
            } else {
              jettonCellBuilder_.addAllMessages(other.jettonCell_);
            }
          }
        }
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasSendCard()) {
          mergeSendCard(other.getSendCard());
        }
        if (other.hasCallBankerInfo()) {
          mergeCallBankerInfo(other.getCallBankerInfo());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasIsFifth()) {
          setIsFifth(other.getIsFifth());
        }
        if (other.hasCanBaoDao()) {
          setCanBaoDao(other.getCanBaoDao());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.GameStart_CZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Int32ArrayResponse jetton_cell = 1;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> jettonCell_ =
        java.util.Collections.emptyList();
      private void ensureJettonCellIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          jettonCell_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(jettonCell_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> jettonCellBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getJettonCellList() {
        if (jettonCellBuilder_ == null) {
          return java.util.Collections.unmodifiableList(jettonCell_);
        } else {
          return jettonCellBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public int getJettonCellCount() {
        if (jettonCellBuilder_ == null) {
          return jettonCell_.size();
        } else {
          return jettonCellBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getJettonCell(int index) {
        if (jettonCellBuilder_ == null) {
          return jettonCell_.get(index);
        } else {
          return jettonCellBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public Builder setJettonCell(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (jettonCellBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJettonCellIsMutable();
          jettonCell_.set(index, value);
          onChanged();
        } else {
          jettonCellBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public Builder setJettonCell(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (jettonCellBuilder_ == null) {
          ensureJettonCellIsMutable();
          jettonCell_.set(index, builderForValue.build());
          onChanged();
        } else {
          jettonCellBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public Builder addJettonCell(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (jettonCellBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJettonCellIsMutable();
          jettonCell_.add(value);
          onChanged();
        } else {
          jettonCellBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public Builder addJettonCell(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (jettonCellBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJettonCellIsMutable();
          jettonCell_.add(index, value);
          onChanged();
        } else {
          jettonCellBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public Builder addJettonCell(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (jettonCellBuilder_ == null) {
          ensureJettonCellIsMutable();
          jettonCell_.add(builderForValue.build());
          onChanged();
        } else {
          jettonCellBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public Builder addJettonCell(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (jettonCellBuilder_ == null) {
          ensureJettonCellIsMutable();
          jettonCell_.add(index, builderForValue.build());
          onChanged();
        } else {
          jettonCellBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public Builder addAllJettonCell(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (jettonCellBuilder_ == null) {
          ensureJettonCellIsMutable();
          super.addAll(values, jettonCell_);
          onChanged();
        } else {
          jettonCellBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public Builder clearJettonCell() {
        if (jettonCellBuilder_ == null) {
          jettonCell_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          jettonCellBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public Builder removeJettonCell(int index) {
        if (jettonCellBuilder_ == null) {
          ensureJettonCellIsMutable();
          jettonCell_.remove(index);
          onChanged();
        } else {
          jettonCellBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getJettonCellBuilder(
          int index) {
        return getJettonCellFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getJettonCellOrBuilder(
          int index) {
        if (jettonCellBuilder_ == null) {
          return jettonCell_.get(index);  } else {
          return jettonCellBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getJettonCellOrBuilderList() {
        if (jettonCellBuilder_ != null) {
          return jettonCellBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(jettonCell_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addJettonCellBuilder() {
        return getJettonCellFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addJettonCellBuilder(
          int index) {
        return getJettonCellFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse jetton_cell = 1;</code>
       *
       * <pre>
       * 下注筹码
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getJettonCellBuilderList() {
        return getJettonCellFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getJettonCellFieldBuilder() {
        if (jettonCellBuilder_ == null) {
          jettonCellBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  jettonCell_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          jettonCell_ = null;
        }
        return jettonCellBuilder_;
      }

      // optional int32 cur_banker = 3;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       * 当前庄家 -1表示没有庄家
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       * 当前庄家 -1表示没有庄家
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       * 当前庄家 -1表示没有庄家
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000002;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       * 当前庄家 -1表示没有庄家
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 4;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000004;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional .czbg.SendCard_CZBG send_card = 5;
      private protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG sendCard_ = protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG, protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.SendCard_CZBGOrBuilder> sendCardBuilder_;
      /**
       * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
       *
       * <pre>
       * 卡牌信息
       * </pre>
       */
      public boolean hasSendCard() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
       *
       * <pre>
       * 卡牌信息
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG getSendCard() {
        if (sendCardBuilder_ == null) {
          return sendCard_;
        } else {
          return sendCardBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
       *
       * <pre>
       * 卡牌信息
       * </pre>
       */
      public Builder setSendCard(protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG value) {
        if (sendCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sendCard_ = value;
          onChanged();
        } else {
          sendCardBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
       *
       * <pre>
       * 卡牌信息
       * </pre>
       */
      public Builder setSendCard(
          protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.Builder builderForValue) {
        if (sendCardBuilder_ == null) {
          sendCard_ = builderForValue.build();
          onChanged();
        } else {
          sendCardBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
       *
       * <pre>
       * 卡牌信息
       * </pre>
       */
      public Builder mergeSendCard(protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG value) {
        if (sendCardBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              sendCard_ != protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.getDefaultInstance()) {
            sendCard_ =
              protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.newBuilder(sendCard_).mergeFrom(value).buildPartial();
          } else {
            sendCard_ = value;
          }
          onChanged();
        } else {
          sendCardBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
       *
       * <pre>
       * 卡牌信息
       * </pre>
       */
      public Builder clearSendCard() {
        if (sendCardBuilder_ == null) {
          sendCard_ = protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.getDefaultInstance();
          onChanged();
        } else {
          sendCardBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
       *
       * <pre>
       * 卡牌信息
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.Builder getSendCardBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getSendCardFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
       *
       * <pre>
       * 卡牌信息
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.SendCard_CZBGOrBuilder getSendCardOrBuilder() {
        if (sendCardBuilder_ != null) {
          return sendCardBuilder_.getMessageOrBuilder();
        } else {
          return sendCard_;
        }
      }
      /**
       * <code>optional .czbg.SendCard_CZBG send_card = 5;</code>
       *
       * <pre>
       * 卡牌信息
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG, protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.SendCard_CZBGOrBuilder> 
          getSendCardFieldBuilder() {
        if (sendCardBuilder_ == null) {
          sendCardBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG, protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.SendCard_CZBGOrBuilder>(
                  sendCard_,
                  getParentForChildren(),
                  isClean());
          sendCard_ = null;
        }
        return sendCardBuilder_;
      }

      // optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;
      private protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG callBankerInfo_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder> callBankerInfoBuilder_;
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
       *
       * <pre>
       * 用户叫庄信息
       * </pre>
       */
      public boolean hasCallBankerInfo() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
       *
       * <pre>
       * 用户叫庄信息
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG getCallBankerInfo() {
        if (callBankerInfoBuilder_ == null) {
          return callBankerInfo_;
        } else {
          return callBankerInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
       *
       * <pre>
       * 用户叫庄信息
       * </pre>
       */
      public Builder setCallBankerInfo(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG value) {
        if (callBankerInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          callBankerInfo_ = value;
          onChanged();
        } else {
          callBankerInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
       *
       * <pre>
       * 用户叫庄信息
       * </pre>
       */
      public Builder setCallBankerInfo(
          protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder builderForValue) {
        if (callBankerInfoBuilder_ == null) {
          callBankerInfo_ = builderForValue.build();
          onChanged();
        } else {
          callBankerInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
       *
       * <pre>
       * 用户叫庄信息
       * </pre>
       */
      public Builder mergeCallBankerInfo(protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG value) {
        if (callBankerInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              callBankerInfo_ != protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance()) {
            callBankerInfo_ =
              protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.newBuilder(callBankerInfo_).mergeFrom(value).buildPartial();
          } else {
            callBankerInfo_ = value;
          }
          onChanged();
        } else {
          callBankerInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
       *
       * <pre>
       * 用户叫庄信息
       * </pre>
       */
      public Builder clearCallBankerInfo() {
        if (callBankerInfoBuilder_ == null) {
          callBankerInfo_ = protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.getDefaultInstance();
          onChanged();
        } else {
          callBankerInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
       *
       * <pre>
       * 用户叫庄信息
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder getCallBankerInfoBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getCallBankerInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
       *
       * <pre>
       * 用户叫庄信息
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder getCallBankerInfoOrBuilder() {
        if (callBankerInfoBuilder_ != null) {
          return callBankerInfoBuilder_.getMessageOrBuilder();
        } else {
          return callBankerInfo_;
        }
      }
      /**
       * <code>optional .czbg.CallBankerInfo_CZBG call_banker_info = 6;</code>
       *
       * <pre>
       * 用户叫庄信息
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder> 
          getCallBankerInfoFieldBuilder() {
        if (callBankerInfoBuilder_ == null) {
          callBankerInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CallBankerInfo_CZBGOrBuilder>(
                  callBankerInfo_,
                  getParentForChildren(),
                  isClean());
          callBankerInfo_ = null;
        }
        return callBankerInfoBuilder_;
      }

      // optional .RoomInfo room_info = 7;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 7;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .RoomInfo room_info = 7;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 7;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 7;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 7;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 7;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 7;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 7;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional bool is_fifth = 8;
      private boolean isFifth_ ;
      /**
       * <code>optional bool is_fifth = 8;</code>
       *
       * <pre>
       * 看四张时是否第五张
       * </pre>
       */
      public boolean hasIsFifth() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool is_fifth = 8;</code>
       *
       * <pre>
       * 看四张时是否第五张
       * </pre>
       */
      public boolean getIsFifth() {
        return isFifth_;
      }
      /**
       * <code>optional bool is_fifth = 8;</code>
       *
       * <pre>
       * 看四张时是否第五张
       * </pre>
       */
      public Builder setIsFifth(boolean value) {
        bitField0_ |= 0x00000040;
        isFifth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_fifth = 8;</code>
       *
       * <pre>
       * 看四张时是否第五张
       * </pre>
       */
      public Builder clearIsFifth() {
        bitField0_ = (bitField0_ & ~0x00000040);
        isFifth_ = false;
        onChanged();
        return this;
      }

      // optional bool can_bao_dao = 9;
      private boolean canBaoDao_ ;
      /**
       * <code>optional bool can_bao_dao = 9;</code>
       *
       * <pre>
       * 能否报道
       * </pre>
       */
      public boolean hasCanBaoDao() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool can_bao_dao = 9;</code>
       *
       * <pre>
       * 能否报道
       * </pre>
       */
      public boolean getCanBaoDao() {
        return canBaoDao_;
      }
      /**
       * <code>optional bool can_bao_dao = 9;</code>
       *
       * <pre>
       * 能否报道
       * </pre>
       */
      public Builder setCanBaoDao(boolean value) {
        bitField0_ |= 0x00000080;
        canBaoDao_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool can_bao_dao = 9;</code>
       *
       * <pre>
       * 能否报道
       * </pre>
       */
      public Builder clearCanBaoDao() {
        bitField0_ = (bitField0_ & ~0x00000080);
        canBaoDao_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.GameStart_CZBG)
    }

    static {
      defaultInstance = new GameStart_CZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.GameStart_CZBG)
  }

  public interface SendCard_CZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Int32ArrayResponse send_card = 1;
    /**
     * <code>repeated .Int32ArrayResponse send_card = 1;</code>
     *
     * <pre>
     *牌数据包
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getSendCardList();
    /**
     * <code>repeated .Int32ArrayResponse send_card = 1;</code>
     *
     * <pre>
     *牌数据包
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getSendCard(int index);
    /**
     * <code>repeated .Int32ArrayResponse send_card = 1;</code>
     *
     * <pre>
     *牌数据包
     * </pre>
     */
    int getSendCardCount();
    /**
     * <code>repeated .Int32ArrayResponse send_card = 1;</code>
     *
     * <pre>
     *牌数据包
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getSendCardOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse send_card = 1;</code>
     *
     * <pre>
     *牌数据包
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getSendCardOrBuilder(
        int index);

    // optional int32 display_time = 2;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code czbg.SendCard_CZBG}
   *
   * <pre>
   * 发牌数据包
   * </pre>
   */
  public static final class SendCard_CZBG extends
      com.google.protobuf.GeneratedMessage
      implements SendCard_CZBGOrBuilder {
    // Use SendCard_CZBG.newBuilder() to construct.
    private SendCard_CZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SendCard_CZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SendCard_CZBG defaultInstance;
    public static SendCard_CZBG getDefaultInstance() {
      return defaultInstance;
    }

    public SendCard_CZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SendCard_CZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                sendCard_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000001;
              }
              sendCard_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          sendCard_ = java.util.Collections.unmodifiableList(sendCard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_SendCard_CZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_SendCard_CZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.class, protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<SendCard_CZBG> PARSER =
        new com.google.protobuf.AbstractParser<SendCard_CZBG>() {
      public SendCard_CZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SendCard_CZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SendCard_CZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .Int32ArrayResponse send_card = 1;
    public static final int SEND_CARD_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> sendCard_;
    /**
     * <code>repeated .Int32ArrayResponse send_card = 1;</code>
     *
     * <pre>
     *牌数据包
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getSendCardList() {
      return sendCard_;
    }
    /**
     * <code>repeated .Int32ArrayResponse send_card = 1;</code>
     *
     * <pre>
     *牌数据包
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getSendCardOrBuilderList() {
      return sendCard_;
    }
    /**
     * <code>repeated .Int32ArrayResponse send_card = 1;</code>
     *
     * <pre>
     *牌数据包
     * </pre>
     */
    public int getSendCardCount() {
      return sendCard_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse send_card = 1;</code>
     *
     * <pre>
     *牌数据包
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getSendCard(int index) {
      return sendCard_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse send_card = 1;</code>
     *
     * <pre>
     *牌数据包
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getSendCardOrBuilder(
        int index) {
      return sendCard_.get(index);
    }

    // optional int32 display_time = 2;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 2;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      sendCard_ = java.util.Collections.emptyList();
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < sendCard_.size(); i++) {
        output.writeMessage(1, sendCard_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sendCard_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sendCard_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.SendCard_CZBG}
     *
     * <pre>
     * 发牌数据包
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.SendCard_CZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_SendCard_CZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_SendCard_CZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.class, protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSendCardFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (sendCardBuilder_ == null) {
          sendCard_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sendCardBuilder_.clear();
        }
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_SendCard_CZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG build() {
        protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG result = new protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (sendCardBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            sendCard_ = java.util.Collections.unmodifiableList(sendCard_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sendCard_ = sendCard_;
        } else {
          result.sendCard_ = sendCardBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG.getDefaultInstance()) return this;
        if (sendCardBuilder_ == null) {
          if (!other.sendCard_.isEmpty()) {
            if (sendCard_.isEmpty()) {
              sendCard_ = other.sendCard_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSendCardIsMutable();
              sendCard_.addAll(other.sendCard_);
            }
            onChanged();
          }
        } else {
          if (!other.sendCard_.isEmpty()) {
            if (sendCardBuilder_.isEmpty()) {
              sendCardBuilder_.dispose();
              sendCardBuilder_ = null;
              sendCard_ = other.sendCard_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sendCardBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSendCardFieldBuilder() : null;
            } else {
              sendCardBuilder_.addAllMessages(other.sendCard_);
            }
          }
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.SendCard_CZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Int32ArrayResponse send_card = 1;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> sendCard_ =
        java.util.Collections.emptyList();
      private void ensureSendCardIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          sendCard_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(sendCard_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> sendCardBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getSendCardList() {
        if (sendCardBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sendCard_);
        } else {
          return sendCardBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public int getSendCardCount() {
        if (sendCardBuilder_ == null) {
          return sendCard_.size();
        } else {
          return sendCardBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getSendCard(int index) {
        if (sendCardBuilder_ == null) {
          return sendCard_.get(index);
        } else {
          return sendCardBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public Builder setSendCard(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (sendCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSendCardIsMutable();
          sendCard_.set(index, value);
          onChanged();
        } else {
          sendCardBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public Builder setSendCard(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (sendCardBuilder_ == null) {
          ensureSendCardIsMutable();
          sendCard_.set(index, builderForValue.build());
          onChanged();
        } else {
          sendCardBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public Builder addSendCard(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (sendCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSendCardIsMutable();
          sendCard_.add(value);
          onChanged();
        } else {
          sendCardBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public Builder addSendCard(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (sendCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSendCardIsMutable();
          sendCard_.add(index, value);
          onChanged();
        } else {
          sendCardBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public Builder addSendCard(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (sendCardBuilder_ == null) {
          ensureSendCardIsMutable();
          sendCard_.add(builderForValue.build());
          onChanged();
        } else {
          sendCardBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public Builder addSendCard(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (sendCardBuilder_ == null) {
          ensureSendCardIsMutable();
          sendCard_.add(index, builderForValue.build());
          onChanged();
        } else {
          sendCardBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public Builder addAllSendCard(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (sendCardBuilder_ == null) {
          ensureSendCardIsMutable();
          super.addAll(values, sendCard_);
          onChanged();
        } else {
          sendCardBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public Builder clearSendCard() {
        if (sendCardBuilder_ == null) {
          sendCard_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sendCardBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public Builder removeSendCard(int index) {
        if (sendCardBuilder_ == null) {
          ensureSendCardIsMutable();
          sendCard_.remove(index);
          onChanged();
        } else {
          sendCardBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getSendCardBuilder(
          int index) {
        return getSendCardFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getSendCardOrBuilder(
          int index) {
        if (sendCardBuilder_ == null) {
          return sendCard_.get(index);  } else {
          return sendCardBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getSendCardOrBuilderList() {
        if (sendCardBuilder_ != null) {
          return sendCardBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sendCard_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addSendCardBuilder() {
        return getSendCardFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addSendCardBuilder(
          int index) {
        return getSendCardFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse send_card = 1;</code>
       *
       * <pre>
       *牌数据包
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getSendCardBuilderList() {
        return getSendCardFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getSendCardFieldBuilder() {
        if (sendCardBuilder_ == null) {
          sendCardBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  sendCard_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          sendCard_ = null;
        }
        return sendCardBuilder_;
      }

      // optional int32 display_time = 2;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000002;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.SendCard_CZBG)
    }

    static {
      defaultInstance = new SendCard_CZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.SendCard_CZBG)
  }

  public interface OpenCard_CZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 seat_index = 1;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * 摊牌用户
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * 摊牌用户
     * </pre>
     */
    int getSeatIndex();

    // optional bool open = 2;
    /**
     * <code>optional bool open = 2;</code>
     *
     * <pre>
     * 是否摊牌
     * </pre>
     */
    boolean hasOpen();
    /**
     * <code>optional bool open = 2;</code>
     *
     * <pre>
     * 是否摊牌
     * </pre>
     */
    boolean getOpen();

    // repeated int32 cards = 3;
    /**
     * <code>repeated int32 cards = 3;</code>
     *
     * <pre>
     * 牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsList();
    /**
     * <code>repeated int32 cards = 3;</code>
     *
     * <pre>
     * 牌数据
     * </pre>
     */
    int getCardsCount();
    /**
     * <code>repeated int32 cards = 3;</code>
     *
     * <pre>
     * 牌数据
     * </pre>
     */
    int getCards(int index);

    // optional .czbg.CardType_CZBG card_type = 4;
    /**
     * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
     *
     * <pre>
     * 牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
     *
     * <pre>
     * 牌类型
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.CardType_CZBG getCardType();
    /**
     * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
     *
     * <pre>
     * 牌类型
     * </pre>
     */
    protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder getCardTypeOrBuilder();

    // optional int32 rate = 5;
    /**
     * <code>optional int32 rate = 5;</code>
     *
     * <pre>
     * 倍数
     * </pre>
     */
    boolean hasRate();
    /**
     * <code>optional int32 rate = 5;</code>
     *
     * <pre>
     * 倍数
     * </pre>
     */
    int getRate();

    // optional float point = 6;
    /**
     * <code>optional float point = 6;</code>
     */
    boolean hasPoint();
    /**
     * <code>optional float point = 6;</code>
     */
    float getPoint();

    // repeated int32 score = 7;
    /**
     * <code>repeated int32 score = 7;</code>
     *
     * <pre>
     * 每一道的分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getScoreList();
    /**
     * <code>repeated int32 score = 7;</code>
     *
     * <pre>
     * 每一道的分数
     * </pre>
     */
    int getScoreCount();
    /**
     * <code>repeated int32 score = 7;</code>
     *
     * <pre>
     * 每一道的分数
     * </pre>
     */
    int getScore(int index);

    // optional int32 call_banker = 8;
    /**
     * <code>optional int32 call_banker = 8;</code>
     *
     * <pre>
     * -1 不抢，0未操作，1-3倍数，4抢庄
     * </pre>
     */
    boolean hasCallBanker();
    /**
     * <code>optional int32 call_banker = 8;</code>
     *
     * <pre>
     * -1 不抢，0未操作，1-3倍数，4抢庄
     * </pre>
     */
    int getCallBanker();

    // optional int32 add_jetton = 9;
    /**
     * <code>optional int32 add_jetton = 9;</code>
     *
     * <pre>
     * 下注分数
     * </pre>
     */
    boolean hasAddJetton();
    /**
     * <code>optional int32 add_jetton = 9;</code>
     *
     * <pre>
     * 下注分数
     * </pre>
     */
    int getAddJetton();
  }
  /**
   * Protobuf type {@code czbg.OpenCard_CZBG}
   *
   * <pre>
   * 用户摊牌
   * </pre>
   */
  public static final class OpenCard_CZBG extends
      com.google.protobuf.GeneratedMessage
      implements OpenCard_CZBGOrBuilder {
    // Use OpenCard_CZBG.newBuilder() to construct.
    private OpenCard_CZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OpenCard_CZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OpenCard_CZBG defaultInstance;
    public static OpenCard_CZBG getDefaultInstance() {
      return defaultInstance;
    }

    public OpenCard_CZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OpenCard_CZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seatIndex_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              open_ = input.readBool();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cards_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = cardType_.toBuilder();
              }
              cardType_ = input.readMessage(protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cardType_);
                cardType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              rate_ = input.readInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000010;
              point_ = input.readFloat();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                score_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              score_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                score_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                score_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              callBanker_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              addJetton_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          score_ = java.util.Collections.unmodifiableList(score_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_OpenCard_CZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_OpenCard_CZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.class, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<OpenCard_CZBG> PARSER =
        new com.google.protobuf.AbstractParser<OpenCard_CZBG>() {
      public OpenCard_CZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OpenCard_CZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OpenCard_CZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 seat_index = 1;
    public static final int SEAT_INDEX_FIELD_NUMBER = 1;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * 摊牌用户
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * 摊牌用户
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional bool open = 2;
    public static final int OPEN_FIELD_NUMBER = 2;
    private boolean open_;
    /**
     * <code>optional bool open = 2;</code>
     *
     * <pre>
     * 是否摊牌
     * </pre>
     */
    public boolean hasOpen() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool open = 2;</code>
     *
     * <pre>
     * 是否摊牌
     * </pre>
     */
    public boolean getOpen() {
      return open_;
    }

    // repeated int32 cards = 3;
    public static final int CARDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cards_;
    /**
     * <code>repeated int32 cards = 3;</code>
     *
     * <pre>
     * 牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsList() {
      return cards_;
    }
    /**
     * <code>repeated int32 cards = 3;</code>
     *
     * <pre>
     * 牌数据
     * </pre>
     */
    public int getCardsCount() {
      return cards_.size();
    }
    /**
     * <code>repeated int32 cards = 3;</code>
     *
     * <pre>
     * 牌数据
     * </pre>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }

    // optional .czbg.CardType_CZBG card_type = 4;
    public static final int CARD_TYPE_FIELD_NUMBER = 4;
    private protobuf.clazz.czbg.CZBGRsp.CardType_CZBG cardType_;
    /**
     * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
     *
     * <pre>
     * 牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
     *
     * <pre>
     * 牌类型
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.CardType_CZBG getCardType() {
      return cardType_;
    }
    /**
     * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
     *
     * <pre>
     * 牌类型
     * </pre>
     */
    public protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder getCardTypeOrBuilder() {
      return cardType_;
    }

    // optional int32 rate = 5;
    public static final int RATE_FIELD_NUMBER = 5;
    private int rate_;
    /**
     * <code>optional int32 rate = 5;</code>
     *
     * <pre>
     * 倍数
     * </pre>
     */
    public boolean hasRate() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 rate = 5;</code>
     *
     * <pre>
     * 倍数
     * </pre>
     */
    public int getRate() {
      return rate_;
    }

    // optional float point = 6;
    public static final int POINT_FIELD_NUMBER = 6;
    private float point_;
    /**
     * <code>optional float point = 6;</code>
     */
    public boolean hasPoint() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float point = 6;</code>
     */
    public float getPoint() {
      return point_;
    }

    // repeated int32 score = 7;
    public static final int SCORE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> score_;
    /**
     * <code>repeated int32 score = 7;</code>
     *
     * <pre>
     * 每一道的分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getScoreList() {
      return score_;
    }
    /**
     * <code>repeated int32 score = 7;</code>
     *
     * <pre>
     * 每一道的分数
     * </pre>
     */
    public int getScoreCount() {
      return score_.size();
    }
    /**
     * <code>repeated int32 score = 7;</code>
     *
     * <pre>
     * 每一道的分数
     * </pre>
     */
    public int getScore(int index) {
      return score_.get(index);
    }

    // optional int32 call_banker = 8;
    public static final int CALL_BANKER_FIELD_NUMBER = 8;
    private int callBanker_;
    /**
     * <code>optional int32 call_banker = 8;</code>
     *
     * <pre>
     * -1 不抢，0未操作，1-3倍数，4抢庄
     * </pre>
     */
    public boolean hasCallBanker() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 call_banker = 8;</code>
     *
     * <pre>
     * -1 不抢，0未操作，1-3倍数，4抢庄
     * </pre>
     */
    public int getCallBanker() {
      return callBanker_;
    }

    // optional int32 add_jetton = 9;
    public static final int ADD_JETTON_FIELD_NUMBER = 9;
    private int addJetton_;
    /**
     * <code>optional int32 add_jetton = 9;</code>
     *
     * <pre>
     * 下注分数
     * </pre>
     */
    public boolean hasAddJetton() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 add_jetton = 9;</code>
     *
     * <pre>
     * 下注分数
     * </pre>
     */
    public int getAddJetton() {
      return addJetton_;
    }

    private void initFields() {
      seatIndex_ = 0;
      open_ = false;
      cards_ = java.util.Collections.emptyList();
      cardType_ = protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance();
      rate_ = 0;
      point_ = 0F;
      score_ = java.util.Collections.emptyList();
      callBanker_ = 0;
      addJetton_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, seatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, open_);
      }
      for (int i = 0; i < cards_.size(); i++) {
        output.writeInt32(3, cards_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, rate_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(6, point_);
      }
      for (int i = 0; i < score_.size(); i++) {
        output.writeInt32(7, score_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, callBanker_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(9, addJetton_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, seatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, open_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cards_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, rate_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, point_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < score_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(score_.get(i));
        }
        size += dataSize;
        size += 1 * getScoreList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, callBanker_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, addJetton_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.OpenCard_CZBG}
     *
     * <pre>
     * 用户摊牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_OpenCard_CZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_OpenCard_CZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.class, protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        open_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        if (cardTypeBuilder_ == null) {
          cardType_ = protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance();
        } else {
          cardTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        rate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        point_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        score_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        callBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        addJetton_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_OpenCard_CZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG build() {
        protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG result = new protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.open_ = open_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cards_ = cards_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        if (cardTypeBuilder_ == null) {
          result.cardType_ = cardType_;
        } else {
          result.cardType_ = cardTypeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.rate_ = rate_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.point_ = point_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          score_ = java.util.Collections.unmodifiableList(score_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.callBanker_ = callBanker_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.addJetton_ = addJetton_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG.getDefaultInstance()) return this;
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasOpen()) {
          setOpen(other.getOpen());
        }
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        if (other.hasCardType()) {
          mergeCardType(other.getCardType());
        }
        if (other.hasRate()) {
          setRate(other.getRate());
        }
        if (other.hasPoint()) {
          setPoint(other.getPoint());
        }
        if (!other.score_.isEmpty()) {
          if (score_.isEmpty()) {
            score_ = other.score_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureScoreIsMutable();
            score_.addAll(other.score_);
          }
          onChanged();
        }
        if (other.hasCallBanker()) {
          setCallBanker(other.getCallBanker());
        }
        if (other.hasAddJetton()) {
          setAddJetton(other.getAddJetton());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.OpenCard_CZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 seat_index = 1;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * 摊牌用户
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * 摊牌用户
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * 摊牌用户
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * 摊牌用户
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional bool open = 2;
      private boolean open_ ;
      /**
       * <code>optional bool open = 2;</code>
       *
       * <pre>
       * 是否摊牌
       * </pre>
       */
      public boolean hasOpen() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool open = 2;</code>
       *
       * <pre>
       * 是否摊牌
       * </pre>
       */
      public boolean getOpen() {
        return open_;
      }
      /**
       * <code>optional bool open = 2;</code>
       *
       * <pre>
       * 是否摊牌
       * </pre>
       */
      public Builder setOpen(boolean value) {
        bitField0_ |= 0x00000002;
        open_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool open = 2;</code>
       *
       * <pre>
       * 是否摊牌
       * </pre>
       */
      public Builder clearOpen() {
        bitField0_ = (bitField0_ & ~0x00000002);
        open_ = false;
        onChanged();
        return this;
      }

      // repeated int32 cards = 3;
      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 cards = 3;</code>
       *
       * <pre>
       * 牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }
      /**
       * <code>repeated int32 cards = 3;</code>
       *
       * <pre>
       * 牌数据
       * </pre>
       */
      public int getCardsCount() {
        return cards_.size();
      }
      /**
       * <code>repeated int32 cards = 3;</code>
       *
       * <pre>
       * 牌数据
       * </pre>
       */
      public int getCards(int index) {
        return cards_.get(index);
      }
      /**
       * <code>repeated int32 cards = 3;</code>
       *
       * <pre>
       * 牌数据
       * </pre>
       */
      public Builder setCards(
          int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards = 3;</code>
       *
       * <pre>
       * 牌数据
       * </pre>
       */
      public Builder addCards(int value) {
        ensureCardsIsMutable();
        cards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards = 3;</code>
       *
       * <pre>
       * 牌数据
       * </pre>
       */
      public Builder addAllCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsIsMutable();
        super.addAll(values, cards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards = 3;</code>
       *
       * <pre>
       * 牌数据
       * </pre>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional .czbg.CardType_CZBG card_type = 4;
      private protobuf.clazz.czbg.CZBGRsp.CardType_CZBG cardType_ = protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.CardType_CZBG, protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder> cardTypeBuilder_;
      /**
       * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
       *
       * <pre>
       * 牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
       *
       * <pre>
       * 牌类型
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CardType_CZBG getCardType() {
        if (cardTypeBuilder_ == null) {
          return cardType_;
        } else {
          return cardTypeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
       *
       * <pre>
       * 牌类型
       * </pre>
       */
      public Builder setCardType(protobuf.clazz.czbg.CZBGRsp.CardType_CZBG value) {
        if (cardTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cardType_ = value;
          onChanged();
        } else {
          cardTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
       *
       * <pre>
       * 牌类型
       * </pre>
       */
      public Builder setCardType(
          protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder builderForValue) {
        if (cardTypeBuilder_ == null) {
          cardType_ = builderForValue.build();
          onChanged();
        } else {
          cardTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
       *
       * <pre>
       * 牌类型
       * </pre>
       */
      public Builder mergeCardType(protobuf.clazz.czbg.CZBGRsp.CardType_CZBG value) {
        if (cardTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              cardType_ != protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance()) {
            cardType_ =
              protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.newBuilder(cardType_).mergeFrom(value).buildPartial();
          } else {
            cardType_ = value;
          }
          onChanged();
        } else {
          cardTypeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
       *
       * <pre>
       * 牌类型
       * </pre>
       */
      public Builder clearCardType() {
        if (cardTypeBuilder_ == null) {
          cardType_ = protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance();
          onChanged();
        } else {
          cardTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
       *
       * <pre>
       * 牌类型
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder getCardTypeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getCardTypeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
       *
       * <pre>
       * 牌类型
       * </pre>
       */
      public protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder getCardTypeOrBuilder() {
        if (cardTypeBuilder_ != null) {
          return cardTypeBuilder_.getMessageOrBuilder();
        } else {
          return cardType_;
        }
      }
      /**
       * <code>optional .czbg.CardType_CZBG card_type = 4;</code>
       *
       * <pre>
       * 牌类型
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.czbg.CZBGRsp.CardType_CZBG, protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder> 
          getCardTypeFieldBuilder() {
        if (cardTypeBuilder_ == null) {
          cardTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.czbg.CZBGRsp.CardType_CZBG, protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder, protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder>(
                  cardType_,
                  getParentForChildren(),
                  isClean());
          cardType_ = null;
        }
        return cardTypeBuilder_;
      }

      // optional int32 rate = 5;
      private int rate_ ;
      /**
       * <code>optional int32 rate = 5;</code>
       *
       * <pre>
       * 倍数
       * </pre>
       */
      public boolean hasRate() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 rate = 5;</code>
       *
       * <pre>
       * 倍数
       * </pre>
       */
      public int getRate() {
        return rate_;
      }
      /**
       * <code>optional int32 rate = 5;</code>
       *
       * <pre>
       * 倍数
       * </pre>
       */
      public Builder setRate(int value) {
        bitField0_ |= 0x00000010;
        rate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rate = 5;</code>
       *
       * <pre>
       * 倍数
       * </pre>
       */
      public Builder clearRate() {
        bitField0_ = (bitField0_ & ~0x00000010);
        rate_ = 0;
        onChanged();
        return this;
      }

      // optional float point = 6;
      private float point_ ;
      /**
       * <code>optional float point = 6;</code>
       */
      public boolean hasPoint() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float point = 6;</code>
       */
      public float getPoint() {
        return point_;
      }
      /**
       * <code>optional float point = 6;</code>
       */
      public Builder setPoint(float value) {
        bitField0_ |= 0x00000020;
        point_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float point = 6;</code>
       */
      public Builder clearPoint() {
        bitField0_ = (bitField0_ & ~0x00000020);
        point_ = 0F;
        onChanged();
        return this;
      }

      // repeated int32 score = 7;
      private java.util.List<java.lang.Integer> score_ = java.util.Collections.emptyList();
      private void ensureScoreIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          score_ = new java.util.ArrayList<java.lang.Integer>(score_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 score = 7;</code>
       *
       * <pre>
       * 每一道的分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getScoreList() {
        return java.util.Collections.unmodifiableList(score_);
      }
      /**
       * <code>repeated int32 score = 7;</code>
       *
       * <pre>
       * 每一道的分数
       * </pre>
       */
      public int getScoreCount() {
        return score_.size();
      }
      /**
       * <code>repeated int32 score = 7;</code>
       *
       * <pre>
       * 每一道的分数
       * </pre>
       */
      public int getScore(int index) {
        return score_.get(index);
      }
      /**
       * <code>repeated int32 score = 7;</code>
       *
       * <pre>
       * 每一道的分数
       * </pre>
       */
      public Builder setScore(
          int index, int value) {
        ensureScoreIsMutable();
        score_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score = 7;</code>
       *
       * <pre>
       * 每一道的分数
       * </pre>
       */
      public Builder addScore(int value) {
        ensureScoreIsMutable();
        score_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score = 7;</code>
       *
       * <pre>
       * 每一道的分数
       * </pre>
       */
      public Builder addAllScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureScoreIsMutable();
        super.addAll(values, score_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score = 7;</code>
       *
       * <pre>
       * 每一道的分数
       * </pre>
       */
      public Builder clearScore() {
        score_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional int32 call_banker = 8;
      private int callBanker_ ;
      /**
       * <code>optional int32 call_banker = 8;</code>
       *
       * <pre>
       * -1 不抢，0未操作，1-3倍数，4抢庄
       * </pre>
       */
      public boolean hasCallBanker() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 call_banker = 8;</code>
       *
       * <pre>
       * -1 不抢，0未操作，1-3倍数，4抢庄
       * </pre>
       */
      public int getCallBanker() {
        return callBanker_;
      }
      /**
       * <code>optional int32 call_banker = 8;</code>
       *
       * <pre>
       * -1 不抢，0未操作，1-3倍数，4抢庄
       * </pre>
       */
      public Builder setCallBanker(int value) {
        bitField0_ |= 0x00000080;
        callBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_banker = 8;</code>
       *
       * <pre>
       * -1 不抢，0未操作，1-3倍数，4抢庄
       * </pre>
       */
      public Builder clearCallBanker() {
        bitField0_ = (bitField0_ & ~0x00000080);
        callBanker_ = 0;
        onChanged();
        return this;
      }

      // optional int32 add_jetton = 9;
      private int addJetton_ ;
      /**
       * <code>optional int32 add_jetton = 9;</code>
       *
       * <pre>
       * 下注分数
       * </pre>
       */
      public boolean hasAddJetton() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 add_jetton = 9;</code>
       *
       * <pre>
       * 下注分数
       * </pre>
       */
      public int getAddJetton() {
        return addJetton_;
      }
      /**
       * <code>optional int32 add_jetton = 9;</code>
       *
       * <pre>
       * 下注分数
       * </pre>
       */
      public Builder setAddJetton(int value) {
        bitField0_ |= 0x00000100;
        addJetton_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 add_jetton = 9;</code>
       *
       * <pre>
       * 下注分数
       * </pre>
       */
      public Builder clearAddJetton() {
        bitField0_ = (bitField0_ & ~0x00000100);
        addJetton_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.OpenCard_CZBG)
    }

    static {
      defaultInstance = new OpenCard_CZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.OpenCard_CZBG)
  }

  public interface CardType_CZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_type = 1;
    /**
     * <code>repeated int32 card_type = 1;</code>
     *
     * <pre>
     * 牌类型[头道、中道、尾道]
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 1;</code>
     *
     * <pre>
     * 牌类型[头道、中道、尾道]
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 1;</code>
     *
     * <pre>
     * 牌类型[头道、中道、尾道]
     * </pre>
     */
    int getCardType(int index);

    // optional int32 time = 2;
    /**
     * <code>optional int32 time = 2;</code>
     *
     * <pre>
     * 倍数
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>optional int32 time = 2;</code>
     *
     * <pre>
     * 倍数
     * </pre>
     */
    int getTime();
  }
  /**
   * Protobuf type {@code czbg.CardType_CZBG}
   */
  public static final class CardType_CZBG extends
      com.google.protobuf.GeneratedMessage
      implements CardType_CZBGOrBuilder {
    // Use CardType_CZBG.newBuilder() to construct.
    private CardType_CZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CardType_CZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CardType_CZBG defaultInstance;
    public static CardType_CZBG getDefaultInstance() {
      return defaultInstance;
    }

    public CardType_CZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CardType_CZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              time_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_CardType_CZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_CardType_CZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.class, protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<CardType_CZBG> PARSER =
        new com.google.protobuf.AbstractParser<CardType_CZBG>() {
      public CardType_CZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CardType_CZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CardType_CZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 card_type = 1;
    public static final int CARD_TYPE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 1;</code>
     *
     * <pre>
     * 牌类型[头道、中道、尾道]
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 1;</code>
     *
     * <pre>
     * 牌类型[头道、中道、尾道]
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 1;</code>
     *
     * <pre>
     * 牌类型[头道、中道、尾道]
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 time = 2;
    public static final int TIME_FIELD_NUMBER = 2;
    private int time_;
    /**
     * <code>optional int32 time = 2;</code>
     *
     * <pre>
     * 倍数
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 time = 2;</code>
     *
     * <pre>
     * 倍数
     * </pre>
     */
    public int getTime() {
      return time_;
    }

    private void initFields() {
      cardType_ = java.util.Collections.emptyList();
      time_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(1, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, time_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, time_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.CardType_CZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.CardType_CZBG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.CardType_CZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_CardType_CZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_CardType_CZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.class, protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_CardType_CZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.CardType_CZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.CardType_CZBG build() {
        protobuf.clazz.czbg.CZBGRsp.CardType_CZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.CardType_CZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.CardType_CZBG result = new protobuf.clazz.czbg.CZBGRsp.CardType_CZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.time_ = time_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.CardType_CZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.CardType_CZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.CardType_CZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.CardType_CZBG.getDefaultInstance()) return this;
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.CardType_CZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.CardType_CZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_type = 1;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_type = 1;</code>
       *
       * <pre>
       * 牌类型[头道、中道、尾道]
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 1;</code>
       *
       * <pre>
       * 牌类型[头道、中道、尾道]
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 1;</code>
       *
       * <pre>
       * 牌类型[头道、中道、尾道]
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 1;</code>
       *
       * <pre>
       * 牌类型[头道、中道、尾道]
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 1;</code>
       *
       * <pre>
       * 牌类型[头道、中道、尾道]
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 1;</code>
       *
       * <pre>
       * 牌类型[头道、中道、尾道]
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 1;</code>
       *
       * <pre>
       * 牌类型[头道、中道、尾道]
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 time = 2;
      private int time_ ;
      /**
       * <code>optional int32 time = 2;</code>
       *
       * <pre>
       * 倍数
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 time = 2;</code>
       *
       * <pre>
       * 倍数
       * </pre>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>optional int32 time = 2;</code>
       *
       * <pre>
       * 倍数
       * </pre>
       */
      public Builder setTime(int value) {
        bitField0_ |= 0x00000002;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 time = 2;</code>
       *
       * <pre>
       * 倍数
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.CardType_CZBG)
    }

    static {
      defaultInstance = new CardType_CZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.CardType_CZBG)
  }

  public interface OpenCardRequest_CZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 cards_data = 1;
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 card_count = 2;
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    int getCardCount();

    // optional int32 call_banker = 3;
    /**
     * <code>optional int32 call_banker = 3;</code>
     *
     * <pre>
     * -1 不抢，0未操作，1-3倍数，4抢庄
     * </pre>
     */
    boolean hasCallBanker();
    /**
     * <code>optional int32 call_banker = 3;</code>
     *
     * <pre>
     * -1 不抢，0未操作，1-3倍数，4抢庄
     * </pre>
     */
    int getCallBanker();

    // optional int32 add_jetton = 4;
    /**
     * <code>optional int32 add_jetton = 4;</code>
     *
     * <pre>
     * 下注分数
     * </pre>
     */
    boolean hasAddJetton();
    /**
     * <code>optional int32 add_jetton = 4;</code>
     *
     * <pre>
     * 下注分数
     * </pre>
     */
    int getAddJetton();

    // optional int32 type = 5;
    /**
     * <code>optional int32 type = 5;</code>
     *
     * <pre>
     * 1010下注、1011下分
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 5;</code>
     *
     * <pre>
     * 1010下注、1011下分
     * </pre>
     */
    int getType();
  }
  /**
   * Protobuf type {@code czbg.OpenCardRequest_CZBG}
   */
  public static final class OpenCardRequest_CZBG extends
      com.google.protobuf.GeneratedMessage
      implements OpenCardRequest_CZBGOrBuilder {
    // Use OpenCardRequest_CZBG.newBuilder() to construct.
    private OpenCardRequest_CZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OpenCardRequest_CZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OpenCardRequest_CZBG defaultInstance;
    public static OpenCardRequest_CZBG getDefaultInstance() {
      return defaultInstance;
    }

    public OpenCardRequest_CZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OpenCardRequest_CZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              cardCount_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              callBanker_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              addJetton_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              type_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_OpenCardRequest_CZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_OpenCardRequest_CZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG.class, protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<OpenCardRequest_CZBG> PARSER =
        new com.google.protobuf.AbstractParser<OpenCardRequest_CZBG>() {
      public OpenCardRequest_CZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OpenCardRequest_CZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OpenCardRequest_CZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 cards_data = 1;
    public static final int CARDS_DATA_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    // optional int32 call_banker = 3;
    public static final int CALL_BANKER_FIELD_NUMBER = 3;
    private int callBanker_;
    /**
     * <code>optional int32 call_banker = 3;</code>
     *
     * <pre>
     * -1 不抢，0未操作，1-3倍数，4抢庄
     * </pre>
     */
    public boolean hasCallBanker() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 call_banker = 3;</code>
     *
     * <pre>
     * -1 不抢，0未操作，1-3倍数，4抢庄
     * </pre>
     */
    public int getCallBanker() {
      return callBanker_;
    }

    // optional int32 add_jetton = 4;
    public static final int ADD_JETTON_FIELD_NUMBER = 4;
    private int addJetton_;
    /**
     * <code>optional int32 add_jetton = 4;</code>
     *
     * <pre>
     * 下注分数
     * </pre>
     */
    public boolean hasAddJetton() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 add_jetton = 4;</code>
     *
     * <pre>
     * 下注分数
     * </pre>
     */
    public int getAddJetton() {
      return addJetton_;
    }

    // optional int32 type = 5;
    public static final int TYPE_FIELD_NUMBER = 5;
    private int type_;
    /**
     * <code>optional int32 type = 5;</code>
     *
     * <pre>
     * 1010下注、1011下分
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 type = 5;</code>
     *
     * <pre>
     * 1010下注、1011下分
     * </pre>
     */
    public int getType() {
      return type_;
    }

    private void initFields() {
      cardsData_ = java.util.Collections.emptyList();
      cardCount_ = 0;
      callBanker_ = 0;
      addJetton_ = 0;
      type_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(1, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, cardCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, callBanker_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, addJetton_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, type_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardCount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, callBanker_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, addJetton_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, type_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.OpenCardRequest_CZBG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_OpenCardRequest_CZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_OpenCardRequest_CZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG.class, protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        callBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        addJetton_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_OpenCardRequest_CZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG build() {
        protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG result = new protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardCount_ = cardCount_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.callBanker_ = callBanker_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.addJetton_ = addJetton_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.type_ = type_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG.getDefaultInstance()) return this;
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        if (other.hasCallBanker()) {
          setCallBanker(other.getCallBanker());
        }
        if (other.hasAddJetton()) {
          setAddJetton(other.getAddJetton());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.OpenCardRequest_CZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 cards_data = 1;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       * 扑克列表 [1-2: 头道 3-5: 中道 6-8: 尾道] 如果是小王则在第三位上加值 如小王变成黑桃A的值为0x131, 大王变成黑桃A的值为0x231, 非癞子转换的保留原值0x31
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 card_count = 2;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000002;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_banker = 3;
      private int callBanker_ ;
      /**
       * <code>optional int32 call_banker = 3;</code>
       *
       * <pre>
       * -1 不抢，0未操作，1-3倍数，4抢庄
       * </pre>
       */
      public boolean hasCallBanker() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 call_banker = 3;</code>
       *
       * <pre>
       * -1 不抢，0未操作，1-3倍数，4抢庄
       * </pre>
       */
      public int getCallBanker() {
        return callBanker_;
      }
      /**
       * <code>optional int32 call_banker = 3;</code>
       *
       * <pre>
       * -1 不抢，0未操作，1-3倍数，4抢庄
       * </pre>
       */
      public Builder setCallBanker(int value) {
        bitField0_ |= 0x00000004;
        callBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_banker = 3;</code>
       *
       * <pre>
       * -1 不抢，0未操作，1-3倍数，4抢庄
       * </pre>
       */
      public Builder clearCallBanker() {
        bitField0_ = (bitField0_ & ~0x00000004);
        callBanker_ = 0;
        onChanged();
        return this;
      }

      // optional int32 add_jetton = 4;
      private int addJetton_ ;
      /**
       * <code>optional int32 add_jetton = 4;</code>
       *
       * <pre>
       * 下注分数
       * </pre>
       */
      public boolean hasAddJetton() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 add_jetton = 4;</code>
       *
       * <pre>
       * 下注分数
       * </pre>
       */
      public int getAddJetton() {
        return addJetton_;
      }
      /**
       * <code>optional int32 add_jetton = 4;</code>
       *
       * <pre>
       * 下注分数
       * </pre>
       */
      public Builder setAddJetton(int value) {
        bitField0_ |= 0x00000008;
        addJetton_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 add_jetton = 4;</code>
       *
       * <pre>
       * 下注分数
       * </pre>
       */
      public Builder clearAddJetton() {
        bitField0_ = (bitField0_ & ~0x00000008);
        addJetton_ = 0;
        onChanged();
        return this;
      }

      // optional int32 type = 5;
      private int type_ ;
      /**
       * <code>optional int32 type = 5;</code>
       *
       * <pre>
       * 1010下注、1011下分
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 type = 5;</code>
       *
       * <pre>
       * 1010下注、1011下分
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 5;</code>
       *
       * <pre>
       * 1010下注、1011下分
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000010;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 5;</code>
       *
       * <pre>
       * 1010下注、1011下分
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        type_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.OpenCardRequest_CZBG)
    }

    static {
      defaultInstance = new OpenCardRequest_CZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.OpenCardRequest_CZBG)
  }

  public interface Prompt_CZBGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 point = 1;
    /**
     * <code>optional int32 point = 1;</code>
     *
     * <pre>
     * 点数
     * </pre>
     */
    boolean hasPoint();
    /**
     * <code>optional int32 point = 1;</code>
     *
     * <pre>
     * 点数
     * </pre>
     */
    int getPoint();

    // optional int32 seat_index = 2;
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     * 座位号
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     * 座位号
     * </pre>
     */
    int getSeatIndex();

    // repeated int32 card_datas = 3;
    /**
     * <code>repeated int32 card_datas = 3;</code>
     *
     * <pre>
     * 卡牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardDatasList();
    /**
     * <code>repeated int32 card_datas = 3;</code>
     *
     * <pre>
     * 卡牌数据
     * </pre>
     */
    int getCardDatasCount();
    /**
     * <code>repeated int32 card_datas = 3;</code>
     *
     * <pre>
     * 卡牌数据
     * </pre>
     */
    int getCardDatas(int index);
  }
  /**
   * Protobuf type {@code czbg.Prompt_CZBG}
   */
  public static final class Prompt_CZBG extends
      com.google.protobuf.GeneratedMessage
      implements Prompt_CZBGOrBuilder {
    // Use Prompt_CZBG.newBuilder() to construct.
    private Prompt_CZBG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Prompt_CZBG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Prompt_CZBG defaultInstance;
    public static Prompt_CZBG getDefaultInstance() {
      return defaultInstance;
    }

    public Prompt_CZBG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Prompt_CZBG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              point_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              seatIndex_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardDatas_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardDatas_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cardDatas_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardDatas_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardDatas_ = java.util.Collections.unmodifiableList(cardDatas_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_Prompt_CZBG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_Prompt_CZBG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG.class, protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG.Builder.class);
    }

    public static com.google.protobuf.Parser<Prompt_CZBG> PARSER =
        new com.google.protobuf.AbstractParser<Prompt_CZBG>() {
      public Prompt_CZBG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Prompt_CZBG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Prompt_CZBG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 point = 1;
    public static final int POINT_FIELD_NUMBER = 1;
    private int point_;
    /**
     * <code>optional int32 point = 1;</code>
     *
     * <pre>
     * 点数
     * </pre>
     */
    public boolean hasPoint() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 point = 1;</code>
     *
     * <pre>
     * 点数
     * </pre>
     */
    public int getPoint() {
      return point_;
    }

    // optional int32 seat_index = 2;
    public static final int SEAT_INDEX_FIELD_NUMBER = 2;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     * 座位号
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     * 座位号
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // repeated int32 card_datas = 3;
    public static final int CARD_DATAS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cardDatas_;
    /**
     * <code>repeated int32 card_datas = 3;</code>
     *
     * <pre>
     * 卡牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardDatasList() {
      return cardDatas_;
    }
    /**
     * <code>repeated int32 card_datas = 3;</code>
     *
     * <pre>
     * 卡牌数据
     * </pre>
     */
    public int getCardDatasCount() {
      return cardDatas_.size();
    }
    /**
     * <code>repeated int32 card_datas = 3;</code>
     *
     * <pre>
     * 卡牌数据
     * </pre>
     */
    public int getCardDatas(int index) {
      return cardDatas_.get(index);
    }

    private void initFields() {
      point_ = 0;
      seatIndex_ = 0;
      cardDatas_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, point_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, seatIndex_);
      }
      for (int i = 0; i < cardDatas_.size(); i++) {
        output.writeInt32(3, cardDatas_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, point_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, seatIndex_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardDatas_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardDatas_.get(i));
        }
        size += dataSize;
        size += 1 * getCardDatasList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.Prompt_CZBG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.czbg.CZBGRsp.Prompt_CZBGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_Prompt_CZBG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_Prompt_CZBG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG.class, protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG.Builder.class);
      }

      // Construct using protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        point_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cardDatas_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.czbg.CZBGRsp.internal_static_czbg_Prompt_CZBG_descriptor;
      }

      public protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG getDefaultInstanceForType() {
        return protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG.getDefaultInstance();
      }

      public protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG build() {
        protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG buildPartial() {
        protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG result = new protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.point_ = point_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.seatIndex_ = seatIndex_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cardDatas_ = java.util.Collections.unmodifiableList(cardDatas_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cardDatas_ = cardDatas_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG) {
          return mergeFrom((protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG other) {
        if (other == protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG.getDefaultInstance()) return this;
        if (other.hasPoint()) {
          setPoint(other.getPoint());
        }
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (!other.cardDatas_.isEmpty()) {
          if (cardDatas_.isEmpty()) {
            cardDatas_ = other.cardDatas_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardDatasIsMutable();
            cardDatas_.addAll(other.cardDatas_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.czbg.CZBGRsp.Prompt_CZBG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 point = 1;
      private int point_ ;
      /**
       * <code>optional int32 point = 1;</code>
       *
       * <pre>
       * 点数
       * </pre>
       */
      public boolean hasPoint() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 point = 1;</code>
       *
       * <pre>
       * 点数
       * </pre>
       */
      public int getPoint() {
        return point_;
      }
      /**
       * <code>optional int32 point = 1;</code>
       *
       * <pre>
       * 点数
       * </pre>
       */
      public Builder setPoint(int value) {
        bitField0_ |= 0x00000001;
        point_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 point = 1;</code>
       *
       * <pre>
       * 点数
       * </pre>
       */
      public Builder clearPoint() {
        bitField0_ = (bitField0_ & ~0x00000001);
        point_ = 0;
        onChanged();
        return this;
      }

      // optional int32 seat_index = 2;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       * 座位号
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       * 座位号
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       * 座位号
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000002;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       * 座位号
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_datas = 3;
      private java.util.List<java.lang.Integer> cardDatas_ = java.util.Collections.emptyList();
      private void ensureCardDatasIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardDatas_ = new java.util.ArrayList<java.lang.Integer>(cardDatas_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 card_datas = 3;</code>
       *
       * <pre>
       * 卡牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardDatasList() {
        return java.util.Collections.unmodifiableList(cardDatas_);
      }
      /**
       * <code>repeated int32 card_datas = 3;</code>
       *
       * <pre>
       * 卡牌数据
       * </pre>
       */
      public int getCardDatasCount() {
        return cardDatas_.size();
      }
      /**
       * <code>repeated int32 card_datas = 3;</code>
       *
       * <pre>
       * 卡牌数据
       * </pre>
       */
      public int getCardDatas(int index) {
        return cardDatas_.get(index);
      }
      /**
       * <code>repeated int32 card_datas = 3;</code>
       *
       * <pre>
       * 卡牌数据
       * </pre>
       */
      public Builder setCardDatas(
          int index, int value) {
        ensureCardDatasIsMutable();
        cardDatas_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_datas = 3;</code>
       *
       * <pre>
       * 卡牌数据
       * </pre>
       */
      public Builder addCardDatas(int value) {
        ensureCardDatasIsMutable();
        cardDatas_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_datas = 3;</code>
       *
       * <pre>
       * 卡牌数据
       * </pre>
       */
      public Builder addAllCardDatas(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardDatasIsMutable();
        super.addAll(values, cardDatas_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_datas = 3;</code>
       *
       * <pre>
       * 卡牌数据
       * </pre>
       */
      public Builder clearCardDatas() {
        cardDatas_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.Prompt_CZBG)
    }

    static {
      defaultInstance = new Prompt_CZBG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.Prompt_CZBG)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_RoomPlayerResponseCZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_RoomPlayerResponseCZBG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_PukeGameEndCZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_PukeGameEndCZBG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_TableResponse_CZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_TableResponse_CZBG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_CallBankerInfo_CZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_CallBankerInfo_CZBG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_AddJetton_CZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_AddJetton_CZBG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_GameStart_CZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_GameStart_CZBG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_SendCard_CZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_SendCard_CZBG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_OpenCard_CZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_OpenCard_CZBG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_CardType_CZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_CardType_CZBG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_OpenCardRequest_CZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_OpenCardRequest_CZBG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_Prompt_CZBG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_Prompt_CZBG_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024czbg/czbgProto.proto\022\004czbg\032\024basic/prot" +
      "ocol.proto\"\246\002\n\026RoomPlayerResponseCZBG\022\022\n" +
      "\naccount_id\030\001 \001(\003\022\021\n\tuser_name\030\002 \001(\t\022\024\n\014" +
      "head_img_url\030\003 \001(\t\022\022\n\nseat_index\030\004 \001(\005\022\n" +
      "\n\002ip\030\005 \001(\t\022\016\n\006online\030\006 \001(\005\022\013\n\003sex\030\007 \001(\005\022" +
      "\r\n\005score\030\010 \001(\002\022\r\n\005ready\030\t \001(\005\022\017\n\007ip_addr" +
      "\030\n \001(\t\022%\n\rlocationInfor\030\013 \001(\0132\016.Location" +
      "Infor\022\022\n\nis_trustee\030\014 \001(\010\022\r\n\005money\030\r \001(\003" +
      "\022\014\n\004gold\030\016 \001(\003\022\013\n\003you\030\017 \001(\005\"\205\002\n\017PukeGame" +
      "EndCZBG\022\034\n\troom_info\030\010 \001(\0132\t.RoomInfo\022\022\n",
      "\nwin_counts\030\t \003(\005\022\023\n\013lose_counts\030\n \003(\005\022\021" +
      "\n\tscore_max\030\013 \003(\005\022\r\n\005score\030\014 \003(\002\022\021\n\tend_" +
      "score\030\r \003(\002\022&\n\topen_card\030\016 \003(\0132\023.czbg.Op" +
      "enCard_CZBG\022\016\n\006reason\030\017 \001(\005\022\023\n\013first_sco" +
      "re\030\020 \003(\005\022\024\n\014second_score\030\021 \003(\005\022\023\n\013three_" +
      "score\030\022 \003(\005\"\275\005\n\022TableResponse_CZBG\022\022\n\nce" +
      "ll_score\030\001 \001(\005\022\025\n\rbanker_player\030\002 \001(\005\022\026\n" +
      "\016current_player\030\003 \001(\005\022\022\n\nscene_info\030\004 \001(" +
      "\005\022\022\n\nadd_jetter\030\005 \003(\005\022\017\n\007trustee\030\006 \003(\010\022\024" +
      "\n\014winner_order\030\007 \003(\005\022\022\n\ncard_count\030\010 \003(\005",
      "\022\'\n\ncards_data\030\t \003(\0132\023.Int32ArrayRespons" +
      "e\022\021\n\topen_card\030\n \003(\010\022\021\n\tend_score\030\014 \003(\005\022" +
      "\030\n\020call_banker_info\030\r \003(\005\022\025\n\rplayer_stat" +
      "us\030\016 \001(\010\022\021\n\tcard_type\030\017 \003(\005\022\021\n\tgame_time" +
      "\030\020 \003(\005\022\r\n\005point\030\030 \003(\002\022\024\n\014trustee_type\030\021 " +
      "\001(\005\022\034\n\troom_info\030\024 \001(\0132\t.RoomInfo\022-\n\007pla" +
      "yers\030\025 \003(\0132\034.czbg.RoomPlayerResponseCZBG" +
      "\022\024\n\014display_time\030\022 \001(\005\022&\n\tsend_card\030\023 \001(" +
      "\0132\023.czbg.CardType_CZBG\0228\n\025call_banker_in" +
      "fo_czbg\030\026 \001(\0132\031.czbg.CallBankerInfo_CZBG",
      "\022\r\n\005score\030\027 \003(\002\022-\n\017add_jetton_info\030\031 \001(\013" +
      "2\024.czbg.AddJetton_CZBG\022\016\n\006beishu\030\032 \003(\005\022\016" +
      "\n\006fenshu\030\033 \003(\005\022\023\n\013can_bao_dao\030\034 \001(\010\"n\n\023C" +
      "allBankerInfo_CZBG\022\030\n\020call_banker_info\030\001" +
      " \003(\005\022\024\n\014display_time\030\002 \001(\005\022\022\n\ncur_player" +
      "\030\003 \001(\005\022\023\n\013call_button\030\004 \003(\005\"\247\001\n\016AddJetto" +
      "n_CZBG\022\021\n\tmin_value\030\001 \001(\005\022\021\n\tmax_value\030\002" +
      " \001(\005\022\022\n\ncur_player\030\003 \001(\005\022\030\n\020add_jettion_" +
      "info\030\004 \003(\005\022-\n\ncallBanker\030\005 \001(\0132\031.czbg.Ca" +
      "llBankerInfo_CZBG\022\022\n\ncur_banker\030\006 \001(\005\"\206\002",
      "\n\016GameStart_CZBG\022(\n\013jetton_cell\030\001 \003(\0132\023." +
      "Int32ArrayResponse\022\022\n\ncur_banker\030\003 \001(\005\022\024" +
      "\n\014display_time\030\004 \001(\005\022&\n\tsend_card\030\005 \001(\0132" +
      "\023.czbg.SendCard_CZBG\0223\n\020call_banker_info" +
      "\030\006 \001(\0132\031.czbg.CallBankerInfo_CZBG\022\034\n\troo" +
      "m_info\030\007 \001(\0132\t.RoomInfo\022\020\n\010is_fifth\030\010 \001(" +
      "\010\022\023\n\013can_bao_dao\030\t \001(\010\"M\n\rSendCard_CZBG\022" +
      "&\n\tsend_card\030\001 \003(\0132\023.Int32ArrayResponse\022" +
      "\024\n\014display_time\030\002 \001(\005\"\275\001\n\rOpenCard_CZBG\022" +
      "\022\n\nseat_index\030\001 \001(\005\022\014\n\004open\030\002 \001(\010\022\r\n\005car",
      "ds\030\003 \003(\005\022&\n\tcard_type\030\004 \001(\0132\023.czbg.CardT" +
      "ype_CZBG\022\014\n\004rate\030\005 \001(\005\022\r\n\005point\030\006 \001(\002\022\r\n" +
      "\005score\030\007 \003(\005\022\023\n\013call_banker\030\010 \001(\005\022\022\n\nadd" +
      "_jetton\030\t \001(\005\"0\n\rCardType_CZBG\022\021\n\tcard_t" +
      "ype\030\001 \003(\005\022\014\n\004time\030\002 \001(\005\"u\n\024OpenCardReque" +
      "st_CZBG\022\022\n\ncards_data\030\001 \003(\005\022\022\n\ncard_coun" +
      "t\030\002 \001(\005\022\023\n\013call_banker\030\003 \001(\005\022\022\n\nadd_jett" +
      "on\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\"D\n\013Prompt_CZBG\022\r\n" +
      "\005point\030\001 \001(\005\022\022\n\nseat_index\030\002 \001(\005\022\022\n\ncard" +
      "_datas\030\003 \003(\005B\036\n\023protobuf.clazz.czbgB\007CZB",
      "GRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_czbg_RoomPlayerResponseCZBG_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_czbg_RoomPlayerResponseCZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_RoomPlayerResponseCZBG_descriptor,
              new java.lang.String[] { "AccountId", "UserName", "HeadImgUrl", "SeatIndex", "Ip", "Online", "Sex", "Score", "Ready", "IpAddr", "LocationInfor", "IsTrustee", "Money", "Gold", "You", });
          internal_static_czbg_PukeGameEndCZBG_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_czbg_PukeGameEndCZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_PukeGameEndCZBG_descriptor,
              new java.lang.String[] { "RoomInfo", "WinCounts", "LoseCounts", "ScoreMax", "Score", "EndScore", "OpenCard", "Reason", "FirstScore", "SecondScore", "ThreeScore", });
          internal_static_czbg_TableResponse_CZBG_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_czbg_TableResponse_CZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_TableResponse_CZBG_descriptor,
              new java.lang.String[] { "CellScore", "BankerPlayer", "CurrentPlayer", "SceneInfo", "AddJetter", "Trustee", "WinnerOrder", "CardCount", "CardsData", "OpenCard", "EndScore", "CallBankerInfo", "PlayerStatus", "CardType", "GameTime", "Point", "TrusteeType", "RoomInfo", "Players", "DisplayTime", "SendCard", "CallBankerInfoCzbg", "Score", "AddJettonInfo", "Beishu", "Fenshu", "CanBaoDao", });
          internal_static_czbg_CallBankerInfo_CZBG_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_czbg_CallBankerInfo_CZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_CallBankerInfo_CZBG_descriptor,
              new java.lang.String[] { "CallBankerInfo", "DisplayTime", "CurPlayer", "CallButton", });
          internal_static_czbg_AddJetton_CZBG_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_czbg_AddJetton_CZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_AddJetton_CZBG_descriptor,
              new java.lang.String[] { "MinValue", "MaxValue", "CurPlayer", "AddJettionInfo", "CallBanker", "CurBanker", });
          internal_static_czbg_GameStart_CZBG_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_czbg_GameStart_CZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_GameStart_CZBG_descriptor,
              new java.lang.String[] { "JettonCell", "CurBanker", "DisplayTime", "SendCard", "CallBankerInfo", "RoomInfo", "IsFifth", "CanBaoDao", });
          internal_static_czbg_SendCard_CZBG_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_czbg_SendCard_CZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_SendCard_CZBG_descriptor,
              new java.lang.String[] { "SendCard", "DisplayTime", });
          internal_static_czbg_OpenCard_CZBG_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_czbg_OpenCard_CZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_OpenCard_CZBG_descriptor,
              new java.lang.String[] { "SeatIndex", "Open", "Cards", "CardType", "Rate", "Point", "Score", "CallBanker", "AddJetton", });
          internal_static_czbg_CardType_CZBG_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_czbg_CardType_CZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_CardType_CZBG_descriptor,
              new java.lang.String[] { "CardType", "Time", });
          internal_static_czbg_OpenCardRequest_CZBG_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_czbg_OpenCardRequest_CZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_OpenCardRequest_CZBG_descriptor,
              new java.lang.String[] { "CardsData", "CardCount", "CallBanker", "AddJetton", "Type", });
          internal_static_czbg_Prompt_CZBG_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_czbg_Prompt_CZBG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_Prompt_CZBG_descriptor,
              new java.lang.String[] { "Point", "SeatIndex", "CardDatas", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
