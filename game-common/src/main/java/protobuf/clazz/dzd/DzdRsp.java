// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dzd/dzdProto.proto

package protobuf.clazz.dzd;

public final class DzdRsp {
  private DzdRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RoomInfoDZDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 room_id = 1;
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    boolean hasRoomId();
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    int getRoomId();

    // optional int32 game_type_index = 4;
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    boolean hasGameTypeIndex();
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    int getGameTypeIndex();

    // optional int32 game_rule_index = 2;
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    boolean hasGameRuleIndex();
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    int getGameRuleIndex();

    // repeated int32 game_rule_index_ex = 12;
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    java.util.List<java.lang.Integer> getGameRuleIndexExList();
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    int getGameRuleIndexExCount();
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    int getGameRuleIndexEx(int index);

    // optional string game_rule_des = 3;
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    boolean hasGameRuleDes();
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getGameRuleDes();
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getGameRuleDesBytes();

    // optional int32 game_round = 5;
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    int getGameRound();

    // optional int32 cur_round = 6;
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    int getCurRound();

    // optional int32 game_status = 7;
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    boolean hasGameStatus();
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    int getGameStatus();

    // optional int64 create_player_id = 8;
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    boolean hasCreatePlayerId();
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    long getCreatePlayerId();

    // optional int32 begin_left_card = 9;
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    boolean hasBeginLeftCard();
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    int getBeginLeftCard();

    // optional int32 _banker_player = 10;
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional string create_name = 11;
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    boolean hasCreateName();
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    java.lang.String getCreateName();
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    com.google.protobuf.ByteString
        getCreateNameBytes();
  }
  /**
   * Protobuf type {@code dzd.RoomInfoDZD}
   *
   * <pre>
   *房间信息
   * </pre>
   */
  public static final class RoomInfoDZD extends
      com.google.protobuf.GeneratedMessage
      implements RoomInfoDZDOrBuilder {
    // Use RoomInfoDZD.newBuilder() to construct.
    private RoomInfoDZD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomInfoDZD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomInfoDZD defaultInstance;
    public static RoomInfoDZD getDefaultInstance() {
      return defaultInstance;
    }

    public RoomInfoDZD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomInfoDZD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              roomId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000004;
              gameRuleIndex_ = input.readInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000008;
              gameRuleDes_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              gameTypeIndex_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              gameRound_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              curRound_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              gameStatus_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              createPlayerId_ = input.readInt64();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              beginLeftCard_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              BankerPlayer_ = input.readInt32();
              break;
            }
            case 90: {
              bitField0_ |= 0x00000400;
              createName_ = input.readBytes();
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              gameRuleIndexEx_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                gameRuleIndexEx_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = java.util.Collections.unmodifiableList(gameRuleIndexEx_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RoomInfoDZD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RoomInfoDZD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.class, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomInfoDZD> PARSER =
        new com.google.protobuf.AbstractParser<RoomInfoDZD>() {
      public RoomInfoDZD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomInfoDZD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomInfoDZD> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 room_id = 1;
    public static final int ROOM_ID_FIELD_NUMBER = 1;
    private int roomId_;
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    public int getRoomId() {
      return roomId_;
    }

    // optional int32 game_type_index = 4;
    public static final int GAME_TYPE_INDEX_FIELD_NUMBER = 4;
    private int gameTypeIndex_;
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public boolean hasGameTypeIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public int getGameTypeIndex() {
      return gameTypeIndex_;
    }

    // optional int32 game_rule_index = 2;
    public static final int GAME_RULE_INDEX_FIELD_NUMBER = 2;
    private int gameRuleIndex_;
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public boolean hasGameRuleIndex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public int getGameRuleIndex() {
      return gameRuleIndex_;
    }

    // repeated int32 game_rule_index_ex = 12;
    public static final int GAME_RULE_INDEX_EX_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> gameRuleIndexEx_;
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getGameRuleIndexExList() {
      return gameRuleIndexEx_;
    }
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public int getGameRuleIndexExCount() {
      return gameRuleIndexEx_.size();
    }
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public int getGameRuleIndexEx(int index) {
      return gameRuleIndexEx_.get(index);
    }

    // optional string game_rule_des = 3;
    public static final int GAME_RULE_DES_FIELD_NUMBER = 3;
    private java.lang.Object gameRuleDes_;
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public boolean hasGameRuleDes() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getGameRuleDes() {
      java.lang.Object ref = gameRuleDes_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          gameRuleDes_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getGameRuleDesBytes() {
      java.lang.Object ref = gameRuleDes_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        gameRuleDes_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 game_round = 5;
    public static final int GAME_ROUND_FIELD_NUMBER = 5;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // optional int32 cur_round = 6;
    public static final int CUR_ROUND_FIELD_NUMBER = 6;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_status = 7;
    public static final int GAME_STATUS_FIELD_NUMBER = 7;
    private int gameStatus_;
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    public boolean hasGameStatus() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    public int getGameStatus() {
      return gameStatus_;
    }

    // optional int64 create_player_id = 8;
    public static final int CREATE_PLAYER_ID_FIELD_NUMBER = 8;
    private long createPlayerId_;
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    public boolean hasCreatePlayerId() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    public long getCreatePlayerId() {
      return createPlayerId_;
    }

    // optional int32 begin_left_card = 9;
    public static final int BEGIN_LEFT_CARD_FIELD_NUMBER = 9;
    private int beginLeftCard_;
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    public boolean hasBeginLeftCard() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    public int getBeginLeftCard() {
      return beginLeftCard_;
    }

    // optional int32 _banker_player = 10;
    public static final int _BANKER_PLAYER_FIELD_NUMBER = 10;
    private int BankerPlayer_;
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return BankerPlayer_;
    }

    // optional string create_name = 11;
    public static final int CREATE_NAME_FIELD_NUMBER = 11;
    private java.lang.Object createName_;
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public boolean hasCreateName() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public java.lang.String getCreateName() {
      java.lang.Object ref = createName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          createName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCreateNameBytes() {
      java.lang.Object ref = createName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        createName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      roomId_ = 0;
      gameTypeIndex_ = 0;
      gameRuleIndex_ = 0;
      gameRuleIndexEx_ = java.util.Collections.emptyList();
      gameRuleDes_ = "";
      gameRound_ = 0;
      curRound_ = 0;
      gameStatus_ = 0;
      createPlayerId_ = 0L;
      beginLeftCard_ = 0;
      BankerPlayer_ = 0;
      createName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, roomId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(2, gameRuleIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(3, getGameRuleDesBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, gameTypeIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, gameRound_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, curRound_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, gameStatus_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt64(8, createPlayerId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, beginLeftCard_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, BankerPlayer_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(11, getCreateNameBytes());
      }
      for (int i = 0; i < gameRuleIndexEx_.size(); i++) {
        output.writeInt32(12, gameRuleIndexEx_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, roomId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, gameRuleIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getGameRuleDesBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, gameTypeIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, gameRound_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curRound_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, gameStatus_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, createPlayerId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, beginLeftCard_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, BankerPlayer_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, getCreateNameBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < gameRuleIndexEx_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(gameRuleIndexEx_.get(i));
        }
        size += dataSize;
        size += 1 * getGameRuleIndexExList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzd.RoomInfoDZD}
     *
     * <pre>
     *房间信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RoomInfoDZD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RoomInfoDZD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.class, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder.class);
      }

      // Construct using protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        roomId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        gameTypeIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRuleIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRuleIndexEx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        gameRuleDes_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        gameStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        createPlayerId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        beginLeftCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        BankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        createName_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RoomInfoDZD_descriptor;
      }

      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD getDefaultInstanceForType() {
        return protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
      }

      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD build() {
        protobuf.clazz.dzd.DzdRsp.RoomInfoDZD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD buildPartial() {
        protobuf.clazz.dzd.DzdRsp.RoomInfoDZD result = new protobuf.clazz.dzd.DzdRsp.RoomInfoDZD(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gameTypeIndex_ = gameTypeIndex_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRuleIndex_ = gameRuleIndex_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = java.util.Collections.unmodifiableList(gameRuleIndexEx_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.gameRuleIndexEx_ = gameRuleIndexEx_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.gameRuleDes_ = gameRuleDes_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gameRound_ = gameRound_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.gameStatus_ = gameStatus_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.createPlayerId_ = createPlayerId_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.beginLeftCard_ = beginLeftCard_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.BankerPlayer_ = BankerPlayer_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.createName_ = createName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dzd.DzdRsp.RoomInfoDZD) {
          return mergeFrom((protobuf.clazz.dzd.DzdRsp.RoomInfoDZD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD other) {
        if (other == protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasGameTypeIndex()) {
          setGameTypeIndex(other.getGameTypeIndex());
        }
        if (other.hasGameRuleIndex()) {
          setGameRuleIndex(other.getGameRuleIndex());
        }
        if (!other.gameRuleIndexEx_.isEmpty()) {
          if (gameRuleIndexEx_.isEmpty()) {
            gameRuleIndexEx_ = other.gameRuleIndexEx_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureGameRuleIndexExIsMutable();
            gameRuleIndexEx_.addAll(other.gameRuleIndexEx_);
          }
          onChanged();
        }
        if (other.hasGameRuleDes()) {
          bitField0_ |= 0x00000010;
          gameRuleDes_ = other.gameRuleDes_;
          onChanged();
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameStatus()) {
          setGameStatus(other.getGameStatus());
        }
        if (other.hasCreatePlayerId()) {
          setCreatePlayerId(other.getCreatePlayerId());
        }
        if (other.hasBeginLeftCard()) {
          setBeginLeftCard(other.getBeginLeftCard());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCreateName()) {
          bitField0_ |= 0x00000800;
          createName_ = other.createName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dzd.DzdRsp.RoomInfoDZD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dzd.DzdRsp.RoomInfoDZD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 room_id = 1;
      private int roomId_ ;
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public int getRoomId() {
        return roomId_;
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public Builder setRoomId(int value) {
        bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomId_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_type_index = 4;
      private int gameTypeIndex_ ;
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public boolean hasGameTypeIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public int getGameTypeIndex() {
        return gameTypeIndex_;
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder setGameTypeIndex(int value) {
        bitField0_ |= 0x00000002;
        gameTypeIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder clearGameTypeIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        gameTypeIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_rule_index = 2;
      private int gameRuleIndex_ ;
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public boolean hasGameRuleIndex() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public int getGameRuleIndex() {
        return gameRuleIndex_;
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder setGameRuleIndex(int value) {
        bitField0_ |= 0x00000004;
        gameRuleIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder clearGameRuleIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRuleIndex_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 game_rule_index_ex = 12;
      private java.util.List<java.lang.Integer> gameRuleIndexEx_ = java.util.Collections.emptyList();
      private void ensureGameRuleIndexExIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>(gameRuleIndexEx_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getGameRuleIndexExList() {
        return java.util.Collections.unmodifiableList(gameRuleIndexEx_);
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public int getGameRuleIndexExCount() {
        return gameRuleIndexEx_.size();
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public int getGameRuleIndexEx(int index) {
        return gameRuleIndexEx_.get(index);
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder setGameRuleIndexEx(
          int index, int value) {
        ensureGameRuleIndexExIsMutable();
        gameRuleIndexEx_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder addGameRuleIndexEx(int value) {
        ensureGameRuleIndexExIsMutable();
        gameRuleIndexEx_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder addAllGameRuleIndexEx(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGameRuleIndexExIsMutable();
        super.addAll(values, gameRuleIndexEx_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder clearGameRuleIndexEx() {
        gameRuleIndexEx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional string game_rule_des = 3;
      private java.lang.Object gameRuleDes_ = "";
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public boolean hasGameRuleDes() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getGameRuleDes() {
        java.lang.Object ref = gameRuleDes_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          gameRuleDes_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getGameRuleDesBytes() {
        java.lang.Object ref = gameRuleDes_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          gameRuleDes_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setGameRuleDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        gameRuleDes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearGameRuleDes() {
        bitField0_ = (bitField0_ & ~0x00000010);
        gameRuleDes_ = getDefaultInstance().getGameRuleDes();
        onChanged();
        return this;
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setGameRuleDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        gameRuleDes_ = value;
        onChanged();
        return this;
      }

      // optional int32 game_round = 5;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000020;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000020);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_round = 6;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000040;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000040);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_status = 7;
      private int gameStatus_ ;
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public boolean hasGameStatus() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public int getGameStatus() {
        return gameStatus_;
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public Builder setGameStatus(int value) {
        bitField0_ |= 0x00000080;
        gameStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public Builder clearGameStatus() {
        bitField0_ = (bitField0_ & ~0x00000080);
        gameStatus_ = 0;
        onChanged();
        return this;
      }

      // optional int64 create_player_id = 8;
      private long createPlayerId_ ;
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public boolean hasCreatePlayerId() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public long getCreatePlayerId() {
        return createPlayerId_;
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public Builder setCreatePlayerId(long value) {
        bitField0_ |= 0x00000100;
        createPlayerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public Builder clearCreatePlayerId() {
        bitField0_ = (bitField0_ & ~0x00000100);
        createPlayerId_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 begin_left_card = 9;
      private int beginLeftCard_ ;
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public boolean hasBeginLeftCard() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public int getBeginLeftCard() {
        return beginLeftCard_;
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public Builder setBeginLeftCard(int value) {
        bitField0_ |= 0x00000200;
        beginLeftCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public Builder clearBeginLeftCard() {
        bitField0_ = (bitField0_ & ~0x00000200);
        beginLeftCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 _banker_player = 10;
      private int BankerPlayer_ ;
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return BankerPlayer_;
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000400;
        BankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000400);
        BankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional string create_name = 11;
      private java.lang.Object createName_ = "";
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public boolean hasCreateName() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public java.lang.String getCreateName() {
        java.lang.Object ref = createName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          createName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCreateNameBytes() {
        java.lang.Object ref = createName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          createName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder setCreateName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        createName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder clearCreateName() {
        bitField0_ = (bitField0_ & ~0x00000800);
        createName_ = getDefaultInstance().getCreateName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder setCreateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        createName_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dzd.RoomInfoDZD)
    }

    static {
      defaultInstance = new RoomInfoDZD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzd.RoomInfoDZD)
  }

  public interface RoomPlayerResponseDZDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int64 account_id = 1;
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    boolean hasAccountId();
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    long getAccountId();

    // optional string user_name = 2;
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    boolean hasUserName();
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    java.lang.String getUserName();
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    com.google.protobuf.ByteString
        getUserNameBytes();

    // optional string head_img_url = 3;
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    boolean hasHeadImgUrl();
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    java.lang.String getHeadImgUrl();
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    com.google.protobuf.ByteString
        getHeadImgUrlBytes();

    // optional int32 seat_index = 4;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引 玩家的新位置
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引 玩家的新位置
     * </pre>
     */
    int getSeatIndex();

    // optional string ip = 5;
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    boolean hasIp();
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    java.lang.String getIp();
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpBytes();

    // optional int32 online = 6;
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    boolean hasOnline();
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    int getOnline();

    // optional int32 sex = 7;
    /**
     * <code>optional int32 sex = 7;</code>
     */
    boolean hasSex();
    /**
     * <code>optional int32 sex = 7;</code>
     */
    int getSex();

    // optional float score = 8;
    /**
     * <code>optional float score = 8;</code>
     */
    boolean hasScore();
    /**
     * <code>optional float score = 8;</code>
     */
    float getScore();

    // optional int32 ready = 9;
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    boolean hasReady();
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    int getReady();

    // optional string ip_addr = 10;
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    boolean hasIpAddr();
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    java.lang.String getIpAddr();
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpAddrBytes();

    // optional .LocationInfor locationInfor = 11;
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    boolean hasLocationInfor();
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    protobuf.clazz.Protocol.LocationInfor getLocationInfor();
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder();

    // optional bool is_trustee = 12;
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    boolean hasIsTrustee();
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    boolean getIsTrustee();

    // optional int64 money = 13;
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    boolean hasMoney();
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    long getMoney();

    // optional int64 gold = 14;
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    boolean hasGold();
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    long getGold();

    // optional int32 you = 15;
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     *游数
     * </pre>
     */
    boolean hasYou();
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     *游数
     * </pre>
     */
    int getYou();

    // optional int32 init_seat = 16;
    /**
     * <code>optional int32 init_seat = 16;</code>
     *
     * <pre>
     * 玩家的初始位置
     * </pre>
     */
    boolean hasInitSeat();
    /**
     * <code>optional int32 init_seat = 16;</code>
     *
     * <pre>
     * 玩家的初始位置
     * </pre>
     */
    int getInitSeat();
  }
  /**
   * Protobuf type {@code dzd.RoomPlayerResponseDZD}
   *
   * <pre>
   *房间的玩家
   * </pre>
   */
  public static final class RoomPlayerResponseDZD extends
      com.google.protobuf.GeneratedMessage
      implements RoomPlayerResponseDZDOrBuilder {
    // Use RoomPlayerResponseDZD.newBuilder() to construct.
    private RoomPlayerResponseDZD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomPlayerResponseDZD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomPlayerResponseDZD defaultInstance;
    public static RoomPlayerResponseDZD getDefaultInstance() {
      return defaultInstance;
    }

    public RoomPlayerResponseDZD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomPlayerResponseDZD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              accountId_ = input.readInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              userName_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              headImgUrl_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              seatIndex_ = input.readInt32();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              ip_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              online_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              sex_ = input.readInt32();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              score_ = input.readFloat();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              ready_ = input.readInt32();
              break;
            }
            case 82: {
              bitField0_ |= 0x00000200;
              ipAddr_ = input.readBytes();
              break;
            }
            case 90: {
              protobuf.clazz.Protocol.LocationInfor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = locationInfor_.toBuilder();
              }
              locationInfor_ = input.readMessage(protobuf.clazz.Protocol.LocationInfor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locationInfor_);
                locationInfor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              isTrustee_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              money_ = input.readInt64();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              gold_ = input.readInt64();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              you_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              initSeat_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RoomPlayerResponseDZD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RoomPlayerResponseDZD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.class, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomPlayerResponseDZD> PARSER =
        new com.google.protobuf.AbstractParser<RoomPlayerResponseDZD>() {
      public RoomPlayerResponseDZD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomPlayerResponseDZD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomPlayerResponseDZD> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 account_id = 1;
    public static final int ACCOUNT_ID_FIELD_NUMBER = 1;
    private long accountId_;
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    public boolean hasAccountId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    public long getAccountId() {
      return accountId_;
    }

    // optional string user_name = 2;
    public static final int USER_NAME_FIELD_NUMBER = 2;
    private java.lang.Object userName_;
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public boolean hasUserName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public java.lang.String getUserName() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          userName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUserNameBytes() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string head_img_url = 3;
    public static final int HEAD_IMG_URL_FIELD_NUMBER = 3;
    private java.lang.Object headImgUrl_;
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public boolean hasHeadImgUrl() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public java.lang.String getHeadImgUrl() {
      java.lang.Object ref = headImgUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          headImgUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHeadImgUrlBytes() {
      java.lang.Object ref = headImgUrl_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headImgUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 seat_index = 4;
    public static final int SEAT_INDEX_FIELD_NUMBER = 4;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引 玩家的新位置
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引 玩家的新位置
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional string ip = 5;
    public static final int IP_FIELD_NUMBER = 5;
    private java.lang.Object ip_;
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public boolean hasIp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public java.lang.String getIp() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ip_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpBytes() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ip_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 online = 6;
    public static final int ONLINE_FIELD_NUMBER = 6;
    private int online_;
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    public boolean hasOnline() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    public int getOnline() {
      return online_;
    }

    // optional int32 sex = 7;
    public static final int SEX_FIELD_NUMBER = 7;
    private int sex_;
    /**
     * <code>optional int32 sex = 7;</code>
     */
    public boolean hasSex() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 sex = 7;</code>
     */
    public int getSex() {
      return sex_;
    }

    // optional float score = 8;
    public static final int SCORE_FIELD_NUMBER = 8;
    private float score_;
    /**
     * <code>optional float score = 8;</code>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float score = 8;</code>
     */
    public float getScore() {
      return score_;
    }

    // optional int32 ready = 9;
    public static final int READY_FIELD_NUMBER = 9;
    private int ready_;
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    public boolean hasReady() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    public int getReady() {
      return ready_;
    }

    // optional string ip_addr = 10;
    public static final int IP_ADDR_FIELD_NUMBER = 10;
    private java.lang.Object ipAddr_;
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public boolean hasIpAddr() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public java.lang.String getIpAddr() {
      java.lang.Object ref = ipAddr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ipAddr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpAddrBytes() {
      java.lang.Object ref = ipAddr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ipAddr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .LocationInfor locationInfor = 11;
    public static final int LOCATIONINFOR_FIELD_NUMBER = 11;
    private protobuf.clazz.Protocol.LocationInfor locationInfor_;
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public boolean hasLocationInfor() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public protobuf.clazz.Protocol.LocationInfor getLocationInfor() {
      return locationInfor_;
    }
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder() {
      return locationInfor_;
    }

    // optional bool is_trustee = 12;
    public static final int IS_TRUSTEE_FIELD_NUMBER = 12;
    private boolean isTrustee_;
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    public boolean hasIsTrustee() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    public boolean getIsTrustee() {
      return isTrustee_;
    }

    // optional int64 money = 13;
    public static final int MONEY_FIELD_NUMBER = 13;
    private long money_;
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    public boolean hasMoney() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    public long getMoney() {
      return money_;
    }

    // optional int64 gold = 14;
    public static final int GOLD_FIELD_NUMBER = 14;
    private long gold_;
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    public boolean hasGold() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    public long getGold() {
      return gold_;
    }

    // optional int32 you = 15;
    public static final int YOU_FIELD_NUMBER = 15;
    private int you_;
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     *游数
     * </pre>
     */
    public boolean hasYou() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 you = 15;</code>
     *
     * <pre>
     *游数
     * </pre>
     */
    public int getYou() {
      return you_;
    }

    // optional int32 init_seat = 16;
    public static final int INIT_SEAT_FIELD_NUMBER = 16;
    private int initSeat_;
    /**
     * <code>optional int32 init_seat = 16;</code>
     *
     * <pre>
     * 玩家的初始位置
     * </pre>
     */
    public boolean hasInitSeat() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 init_seat = 16;</code>
     *
     * <pre>
     * 玩家的初始位置
     * </pre>
     */
    public int getInitSeat() {
      return initSeat_;
    }

    private void initFields() {
      accountId_ = 0L;
      userName_ = "";
      headImgUrl_ = "";
      seatIndex_ = 0;
      ip_ = "";
      online_ = 0;
      sex_ = 0;
      score_ = 0F;
      ready_ = 0;
      ipAddr_ = "";
      locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
      isTrustee_ = false;
      money_ = 0L;
      gold_ = 0L;
      you_ = 0;
      initSeat_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, accountId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getHeadImgUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, seatIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, online_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, sex_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, ready_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, getIpAddrBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, locationInfor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, isTrustee_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt64(13, money_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt64(14, gold_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, you_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, initSeat_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, accountId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getHeadImgUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, seatIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, online_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, sex_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, ready_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getIpAddrBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, locationInfor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, isTrustee_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, money_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, gold_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, you_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, initSeat_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzd.RoomPlayerResponseDZD}
     *
     * <pre>
     *房间的玩家
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RoomPlayerResponseDZD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RoomPlayerResponseDZD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.class, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder.class);
      }

      // Construct using protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationInforFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        accountId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        userName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        headImgUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        ip_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        online_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        sex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        score_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        ready_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        ipAddr_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        if (locationInforBuilder_ == null) {
          locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
        } else {
          locationInforBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        isTrustee_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        money_ = 0L;
        bitField0_ = (bitField0_ & ~0x00001000);
        gold_ = 0L;
        bitField0_ = (bitField0_ & ~0x00002000);
        you_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        initSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RoomPlayerResponseDZD_descriptor;
      }

      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD getDefaultInstanceForType() {
        return protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.getDefaultInstance();
      }

      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD build() {
        protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD buildPartial() {
        protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD result = new protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.accountId_ = accountId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.userName_ = userName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.headImgUrl_ = headImgUrl_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.ip_ = ip_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.online_ = online_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.sex_ = sex_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.ready_ = ready_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.ipAddr_ = ipAddr_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (locationInforBuilder_ == null) {
          result.locationInfor_ = locationInfor_;
        } else {
          result.locationInfor_ = locationInforBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.isTrustee_ = isTrustee_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.money_ = money_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.gold_ = gold_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.you_ = you_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.initSeat_ = initSeat_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD) {
          return mergeFrom((protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD other) {
        if (other == protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.getDefaultInstance()) return this;
        if (other.hasAccountId()) {
          setAccountId(other.getAccountId());
        }
        if (other.hasUserName()) {
          bitField0_ |= 0x00000002;
          userName_ = other.userName_;
          onChanged();
        }
        if (other.hasHeadImgUrl()) {
          bitField0_ |= 0x00000004;
          headImgUrl_ = other.headImgUrl_;
          onChanged();
        }
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasIp()) {
          bitField0_ |= 0x00000010;
          ip_ = other.ip_;
          onChanged();
        }
        if (other.hasOnline()) {
          setOnline(other.getOnline());
        }
        if (other.hasSex()) {
          setSex(other.getSex());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasReady()) {
          setReady(other.getReady());
        }
        if (other.hasIpAddr()) {
          bitField0_ |= 0x00000200;
          ipAddr_ = other.ipAddr_;
          onChanged();
        }
        if (other.hasLocationInfor()) {
          mergeLocationInfor(other.getLocationInfor());
        }
        if (other.hasIsTrustee()) {
          setIsTrustee(other.getIsTrustee());
        }
        if (other.hasMoney()) {
          setMoney(other.getMoney());
        }
        if (other.hasGold()) {
          setGold(other.getGold());
        }
        if (other.hasYou()) {
          setYou(other.getYou());
        }
        if (other.hasInitSeat()) {
          setInitSeat(other.getInitSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 account_id = 1;
      private long accountId_ ;
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public boolean hasAccountId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public long getAccountId() {
        return accountId_;
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public Builder setAccountId(long value) {
        bitField0_ |= 0x00000001;
        accountId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public Builder clearAccountId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        accountId_ = 0L;
        onChanged();
        return this;
      }

      // optional string user_name = 2;
      private java.lang.Object userName_ = "";
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public boolean hasUserName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public java.lang.String getUserName() {
        java.lang.Object ref = userName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          userName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public com.google.protobuf.ByteString
          getUserNameBytes() {
        java.lang.Object ref = userName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder setUserName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder clearUserName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        userName_ = getDefaultInstance().getUserName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder setUserNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }

      // optional string head_img_url = 3;
      private java.lang.Object headImgUrl_ = "";
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public boolean hasHeadImgUrl() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public java.lang.String getHeadImgUrl() {
        java.lang.Object ref = headImgUrl_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          headImgUrl_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHeadImgUrlBytes() {
        java.lang.Object ref = headImgUrl_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          headImgUrl_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImgUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        headImgUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder clearHeadImgUrl() {
        bitField0_ = (bitField0_ & ~0x00000004);
        headImgUrl_ = getDefaultInstance().getHeadImgUrl();
        onChanged();
        return this;
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImgUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        headImgUrl_ = value;
        onChanged();
        return this;
      }

      // optional int32 seat_index = 4;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引 玩家的新位置
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引 玩家的新位置
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引 玩家的新位置
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000008;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引 玩家的新位置
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional string ip = 5;
      private java.lang.Object ip_ = "";
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public boolean hasIp() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public java.lang.String getIp() {
        java.lang.Object ref = ip_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ip_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpBytes() {
        java.lang.Object ref = ip_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ip_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder setIp(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        ip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder clearIp() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ip_ = getDefaultInstance().getIp();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder setIpBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        ip_ = value;
        onChanged();
        return this;
      }

      // optional int32 online = 6;
      private int online_ ;
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public boolean hasOnline() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public int getOnline() {
        return online_;
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public Builder setOnline(int value) {
        bitField0_ |= 0x00000020;
        online_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public Builder clearOnline() {
        bitField0_ = (bitField0_ & ~0x00000020);
        online_ = 0;
        onChanged();
        return this;
      }

      // optional int32 sex = 7;
      private int sex_ ;
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public boolean hasSex() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public int getSex() {
        return sex_;
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public Builder setSex(int value) {
        bitField0_ |= 0x00000040;
        sex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public Builder clearSex() {
        bitField0_ = (bitField0_ & ~0x00000040);
        sex_ = 0;
        onChanged();
        return this;
      }

      // optional float score = 8;
      private float score_ ;
      /**
       * <code>optional float score = 8;</code>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public float getScore() {
        return score_;
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public Builder setScore(float value) {
        bitField0_ |= 0x00000080;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float score = 8;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000080);
        score_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 ready = 9;
      private int ready_ ;
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public boolean hasReady() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public int getReady() {
        return ready_;
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public Builder setReady(int value) {
        bitField0_ |= 0x00000100;
        ready_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public Builder clearReady() {
        bitField0_ = (bitField0_ & ~0x00000100);
        ready_ = 0;
        onChanged();
        return this;
      }

      // optional string ip_addr = 10;
      private java.lang.Object ipAddr_ = "";
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public boolean hasIpAddr() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public java.lang.String getIpAddr() {
        java.lang.Object ref = ipAddr_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ipAddr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpAddrBytes() {
        java.lang.Object ref = ipAddr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ipAddr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder setIpAddr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        ipAddr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder clearIpAddr() {
        bitField0_ = (bitField0_ & ~0x00000200);
        ipAddr_ = getDefaultInstance().getIpAddr();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder setIpAddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        ipAddr_ = value;
        onChanged();
        return this;
      }

      // optional .LocationInfor locationInfor = 11;
      private protobuf.clazz.Protocol.LocationInfor locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder> locationInforBuilder_;
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public boolean hasLocationInfor() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInfor getLocationInfor() {
        if (locationInforBuilder_ == null) {
          return locationInfor_;
        } else {
          return locationInforBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder setLocationInfor(protobuf.clazz.Protocol.LocationInfor value) {
        if (locationInforBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          locationInfor_ = value;
          onChanged();
        } else {
          locationInforBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder setLocationInfor(
          protobuf.clazz.Protocol.LocationInfor.Builder builderForValue) {
        if (locationInforBuilder_ == null) {
          locationInfor_ = builderForValue.build();
          onChanged();
        } else {
          locationInforBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder mergeLocationInfor(protobuf.clazz.Protocol.LocationInfor value) {
        if (locationInforBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              locationInfor_ != protobuf.clazz.Protocol.LocationInfor.getDefaultInstance()) {
            locationInfor_ =
              protobuf.clazz.Protocol.LocationInfor.newBuilder(locationInfor_).mergeFrom(value).buildPartial();
          } else {
            locationInfor_ = value;
          }
          onChanged();
        } else {
          locationInforBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder clearLocationInfor() {
        if (locationInforBuilder_ == null) {
          locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
          onChanged();
        } else {
          locationInforBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInfor.Builder getLocationInforBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getLocationInforFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder() {
        if (locationInforBuilder_ != null) {
          return locationInforBuilder_.getMessageOrBuilder();
        } else {
          return locationInfor_;
        }
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder> 
          getLocationInforFieldBuilder() {
        if (locationInforBuilder_ == null) {
          locationInforBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder>(
                  locationInfor_,
                  getParentForChildren(),
                  isClean());
          locationInfor_ = null;
        }
        return locationInforBuilder_;
      }

      // optional bool is_trustee = 12;
      private boolean isTrustee_ ;
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public boolean hasIsTrustee() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public boolean getIsTrustee() {
        return isTrustee_;
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public Builder setIsTrustee(boolean value) {
        bitField0_ |= 0x00000800;
        isTrustee_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public Builder clearIsTrustee() {
        bitField0_ = (bitField0_ & ~0x00000800);
        isTrustee_ = false;
        onChanged();
        return this;
      }

      // optional int64 money = 13;
      private long money_ ;
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public boolean hasMoney() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public long getMoney() {
        return money_;
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public Builder setMoney(long value) {
        bitField0_ |= 0x00001000;
        money_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public Builder clearMoney() {
        bitField0_ = (bitField0_ & ~0x00001000);
        money_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 gold = 14;
      private long gold_ ;
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public boolean hasGold() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public long getGold() {
        return gold_;
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public Builder setGold(long value) {
        bitField0_ |= 0x00002000;
        gold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public Builder clearGold() {
        bitField0_ = (bitField0_ & ~0x00002000);
        gold_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 you = 15;
      private int you_ ;
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       *游数
       * </pre>
       */
      public boolean hasYou() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       *游数
       * </pre>
       */
      public int getYou() {
        return you_;
      }
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       *游数
       * </pre>
       */
      public Builder setYou(int value) {
        bitField0_ |= 0x00004000;
        you_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 you = 15;</code>
       *
       * <pre>
       *游数
       * </pre>
       */
      public Builder clearYou() {
        bitField0_ = (bitField0_ & ~0x00004000);
        you_ = 0;
        onChanged();
        return this;
      }

      // optional int32 init_seat = 16;
      private int initSeat_ ;
      /**
       * <code>optional int32 init_seat = 16;</code>
       *
       * <pre>
       * 玩家的初始位置
       * </pre>
       */
      public boolean hasInitSeat() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 init_seat = 16;</code>
       *
       * <pre>
       * 玩家的初始位置
       * </pre>
       */
      public int getInitSeat() {
        return initSeat_;
      }
      /**
       * <code>optional int32 init_seat = 16;</code>
       *
       * <pre>
       * 玩家的初始位置
       * </pre>
       */
      public Builder setInitSeat(int value) {
        bitField0_ |= 0x00008000;
        initSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 init_seat = 16;</code>
       *
       * <pre>
       * 玩家的初始位置
       * </pre>
       */
      public Builder clearInitSeat() {
        bitField0_ = (bitField0_ & ~0x00008000);
        initSeat_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dzd.RoomPlayerResponseDZD)
    }

    static {
      defaultInstance = new RoomPlayerResponseDZD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzd.RoomPlayerResponseDZD)
  }

  public interface RefreshCardsDZDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_count = 1;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dzd.RefreshCardsDZD}
   *
   * <pre>
   *刷新用户扑克
   * </pre>
   */
  public static final class RefreshCardsDZD extends
      com.google.protobuf.GeneratedMessage
      implements RefreshCardsDZDOrBuilder {
    // Use RefreshCardsDZD.newBuilder() to construct.
    private RefreshCardsDZD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshCardsDZD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshCardsDZD defaultInstance;
    public static RefreshCardsDZD getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshCardsDZD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshCardsDZD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RefreshCardsDZD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RefreshCardsDZD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD.class, protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshCardsDZD> PARSER =
        new com.google.protobuf.AbstractParser<RefreshCardsDZD>() {
      public RefreshCardsDZD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshCardsDZD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshCardsDZD> getParserForType() {
      return PARSER;
    }

    // repeated int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    private void initFields() {
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(1, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzd.RefreshCardsDZD}
     *
     * <pre>
     *刷新用户扑克
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dzd.DzdRsp.RefreshCardsDZDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RefreshCardsDZD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RefreshCardsDZD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD.class, protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD.Builder.class);
      }

      // Construct using protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_RefreshCardsDZD_descriptor;
      }

      public protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD getDefaultInstanceForType() {
        return protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD.getDefaultInstance();
      }

      public protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD build() {
        protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD buildPartial() {
        protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD result = new protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD) {
          return mergeFrom((protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD other) {
        if (other == protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD.getDefaultInstance()) return this;
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dzd.DzdRsp.RefreshCardsDZD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_count = 1;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:dzd.RefreshCardsDZD)
    }

    static {
      defaultInstance = new RefreshCardsDZD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzd.RefreshCardsDZD)
  }

  public interface OutCardDataDZDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // repeated int32 change_cards_data = 3;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getChangeCardsDataList();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsData(int index);

    // optional int32 cards_count = 4;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 5;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 6;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 7;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_change_cards_data = 8;
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // optional int32 pr_cards_count = 9;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 10;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional bool is_first_out = 11;
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    boolean getIsFirstOut();

    // optional int32 display_time = 12;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 you = 13;
    /**
     * <code>optional int32 you = 13;</code>
     *
     * <pre>
     *默认为0 。大于1代表出牌完了。 xx游
     * </pre>
     */
    boolean hasYou();
    /**
     * <code>optional int32 you = 13;</code>
     *
     * <pre>
     *默认为0 。大于1代表出牌完了。 xx游
     * </pre>
     */
    int getYou();

    // optional bool isNewTurn = 14;
    /**
     * <code>optional bool isNewTurn = 14;</code>
     *
     * <pre>
     * 是不是新的一轮
     * </pre>
     */
    boolean hasIsNewTurn();
    /**
     * <code>optional bool isNewTurn = 14;</code>
     *
     * <pre>
     * 是不是新的一轮
     * </pre>
     */
    boolean getIsNewTurn();

    // repeated int32 score_card = 15;
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    java.util.List<java.lang.Integer> getScoreCardList();
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    int getScoreCardCount();
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    int getScoreCard(int index);

    // optional int32 score_turn = 16;
    /**
     * <code>optional int32 score_turn = 16;</code>
     *
     * <pre>
     *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
     * </pre>
     */
    boolean hasScoreTurn();
    /**
     * <code>optional int32 score_turn = 16;</code>
     *
     * <pre>
     *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
     * </pre>
     */
    int getScoreTurn();

    // repeated float player_scores = 17;
    /**
     * <code>repeated float player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    java.util.List<java.lang.Float> getPlayerScoresList();
    /**
     * <code>repeated float player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    int getPlayerScoresCount();
    /**
     * <code>repeated float player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    float getPlayerScores(int index);

    // repeated int32 round_scores = 18;
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundScoresList();
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    int getRoundScoresCount();
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    int getRoundScores(int index);

    // repeated int32 edge_score = 19;
    /**
     * <code>repeated int32 edge_score = 19;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEdgeScoreList();
    /**
     * <code>repeated int32 edge_score = 19;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    int getEdgeScoreCount();
    /**
     * <code>repeated int32 edge_score = 19;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    int getEdgeScore(int index);
  }
  /**
   * Protobuf type {@code dzd.OutCardDataDZD}
   *
   * <pre>
   *用户出牌
   * </pre>
   */
  public static final class OutCardDataDZD extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataDZDOrBuilder {
    // Use OutCardDataDZD.newBuilder() to construct.
    private OutCardDataDZD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataDZD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataDZD defaultInstance;
    public static OutCardDataDZD getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataDZD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataDZD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              changeCardsData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                changeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000100;
              you_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000200;
              isNewTurn_ = input.readBool();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                scoreCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              scoreCard_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                scoreCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                scoreCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              bitField0_ |= 0x00000400;
              scoreTurn_ = input.readInt32();
              break;
            }
            case 141: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                playerScores_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00010000;
              }
              playerScores_.add(input.readFloat());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                playerScores_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerScores_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                roundScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              roundScores_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                roundScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                roundScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                edgeScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              edgeScore_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                edgeScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                edgeScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          scoreCard_ = java.util.Collections.unmodifiableList(scoreCard_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          playerScores_ = java.util.Collections.unmodifiableList(playerScores_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          roundScores_ = java.util.Collections.unmodifiableList(roundScores_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          edgeScore_ = java.util.Collections.unmodifiableList(edgeScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_OutCardDataDZD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_OutCardDataDZD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dzd.DzdRsp.OutCardDataDZD.class, protobuf.clazz.dzd.DzdRsp.OutCardDataDZD.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataDZD> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataDZD>() {
      public OutCardDataDZD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataDZD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataDZD> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // repeated int32 change_cards_data = 3;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> changeCardsData_;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }

    // optional int32 cards_count = 4;
    public static final int CARDS_COUNT_FIELD_NUMBER = 4;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 5;
    public static final int CARD_TYPE_FIELD_NUMBER = 5;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 6;
    public static final int CUR_PLAYER_FIELD_NUMBER = 6;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 7;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_change_cards_data = 8;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 9;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 9;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 10;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 10;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional bool is_first_out = 11;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 11;
    private boolean isFirstOut_;
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public boolean getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 12;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 12;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 you = 13;
    public static final int YOU_FIELD_NUMBER = 13;
    private int you_;
    /**
     * <code>optional int32 you = 13;</code>
     *
     * <pre>
     *默认为0 。大于1代表出牌完了。 xx游
     * </pre>
     */
    public boolean hasYou() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 you = 13;</code>
     *
     * <pre>
     *默认为0 。大于1代表出牌完了。 xx游
     * </pre>
     */
    public int getYou() {
      return you_;
    }

    // optional bool isNewTurn = 14;
    public static final int ISNEWTURN_FIELD_NUMBER = 14;
    private boolean isNewTurn_;
    /**
     * <code>optional bool isNewTurn = 14;</code>
     *
     * <pre>
     * 是不是新的一轮
     * </pre>
     */
    public boolean hasIsNewTurn() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool isNewTurn = 14;</code>
     *
     * <pre>
     * 是不是新的一轮
     * </pre>
     */
    public boolean getIsNewTurn() {
      return isNewTurn_;
    }

    // repeated int32 score_card = 15;
    public static final int SCORE_CARD_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> scoreCard_;
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getScoreCardList() {
      return scoreCard_;
    }
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    public int getScoreCardCount() {
      return scoreCard_.size();
    }
    /**
     * <code>repeated int32 score_card = 15;</code>
     *
     * <pre>
     *本轮的分数牌 新一轮回清掉
     * </pre>
     */
    public int getScoreCard(int index) {
      return scoreCard_.get(index);
    }

    // optional int32 score_turn = 16;
    public static final int SCORE_TURN_FIELD_NUMBER = 16;
    private int scoreTurn_;
    /**
     * <code>optional int32 score_turn = 16;</code>
     *
     * <pre>
     *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
     * </pre>
     */
    public boolean hasScoreTurn() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 score_turn = 16;</code>
     *
     * <pre>
     *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
     * </pre>
     */
    public int getScoreTurn() {
      return scoreTurn_;
    }

    // repeated float player_scores = 17;
    public static final int PLAYER_SCORES_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Float> playerScores_;
    /**
     * <code>repeated float player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getPlayerScoresList() {
      return playerScores_;
    }
    /**
     * <code>repeated float player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    public int getPlayerScoresCount() {
      return playerScores_.size();
    }
    /**
     * <code>repeated float player_scores = 17;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    public float getPlayerScores(int index) {
      return playerScores_.get(index);
    }

    // repeated int32 round_scores = 18;
    public static final int ROUND_SCORES_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> roundScores_;
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundScoresList() {
      return roundScores_;
    }
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    public int getRoundScoresCount() {
      return roundScores_.size();
    }
    /**
     * <code>repeated int32 round_scores = 18;</code>
     *
     * <pre>
     *当局得分
     * </pre>
     */
    public int getRoundScores(int index) {
      return roundScores_.get(index);
    }

    // repeated int32 edge_score = 19;
    public static final int EDGE_SCORE_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> edgeScore_;
    /**
     * <code>repeated int32 edge_score = 19;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEdgeScoreList() {
      return edgeScore_;
    }
    /**
     * <code>repeated int32 edge_score = 19;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    public int getEdgeScoreCount() {
      return edgeScore_.size();
    }
    /**
     * <code>repeated int32 edge_score = 19;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    public int getEdgeScore(int index) {
      return edgeScore_.get(index);
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = false;
      displayTime_ = 0;
      you_ = 0;
      isNewTurn_ = false;
      scoreCard_ = java.util.Collections.emptyList();
      scoreTurn_ = 0;
      playerScores_ = java.util.Collections.emptyList();
      roundScores_ = java.util.Collections.emptyList();
      edgeScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeInt32(3, changeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(7, prCardsData_.get(i));
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(8, prChangeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(11, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(13, you_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(14, isNewTurn_);
      }
      for (int i = 0; i < scoreCard_.size(); i++) {
        output.writeInt32(15, scoreCard_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(16, scoreTurn_);
      }
      for (int i = 0; i < playerScores_.size(); i++) {
        output.writeFloat(17, playerScores_.get(i));
      }
      for (int i = 0; i < roundScores_.size(); i++) {
        output.writeInt32(18, roundScores_.get(i));
      }
      for (int i = 0; i < edgeScore_.size(); i++) {
        output.writeInt32(19, edgeScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < changeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(changeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, displayTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, you_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, isNewTurn_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < scoreCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(scoreCard_.get(i));
        }
        size += dataSize;
        size += 1 * getScoreCardList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, scoreTurn_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getPlayerScoresList().size();
        size += dataSize;
        size += 2 * getPlayerScoresList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(roundScores_.get(i));
        }
        size += dataSize;
        size += 2 * getRoundScoresList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < edgeScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(edgeScore_.get(i));
        }
        size += dataSize;
        size += 2 * getEdgeScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dzd.DzdRsp.OutCardDataDZD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzd.OutCardDataDZD}
     *
     * <pre>
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dzd.DzdRsp.OutCardDataDZDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_OutCardDataDZD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_OutCardDataDZD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dzd.DzdRsp.OutCardDataDZD.class, protobuf.clazz.dzd.DzdRsp.OutCardDataDZD.Builder.class);
      }

      // Construct using protobuf.clazz.dzd.DzdRsp.OutCardDataDZD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        isFirstOut_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        you_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        isNewTurn_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        scoreCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        scoreTurn_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        playerScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        roundScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        edgeScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_OutCardDataDZD_descriptor;
      }

      public protobuf.clazz.dzd.DzdRsp.OutCardDataDZD getDefaultInstanceForType() {
        return protobuf.clazz.dzd.DzdRsp.OutCardDataDZD.getDefaultInstance();
      }

      public protobuf.clazz.dzd.DzdRsp.OutCardDataDZD build() {
        protobuf.clazz.dzd.DzdRsp.OutCardDataDZD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dzd.DzdRsp.OutCardDataDZD buildPartial() {
        protobuf.clazz.dzd.DzdRsp.OutCardDataDZD result = new protobuf.clazz.dzd.DzdRsp.OutCardDataDZD(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.changeCardsData_ = changeCardsData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.you_ = you_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isNewTurn_ = isNewTurn_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          scoreCard_ = java.util.Collections.unmodifiableList(scoreCard_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.scoreCard_ = scoreCard_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.scoreTurn_ = scoreTurn_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          playerScores_ = java.util.Collections.unmodifiableList(playerScores_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.playerScores_ = playerScores_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          roundScores_ = java.util.Collections.unmodifiableList(roundScores_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.roundScores_ = roundScores_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          edgeScore_ = java.util.Collections.unmodifiableList(edgeScore_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.edgeScore_ = edgeScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dzd.DzdRsp.OutCardDataDZD) {
          return mergeFrom((protobuf.clazz.dzd.DzdRsp.OutCardDataDZD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dzd.DzdRsp.OutCardDataDZD other) {
        if (other == protobuf.clazz.dzd.DzdRsp.OutCardDataDZD.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (!other.changeCardsData_.isEmpty()) {
          if (changeCardsData_.isEmpty()) {
            changeCardsData_ = other.changeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChangeCardsDataIsMutable();
            changeCardsData_.addAll(other.changeCardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasYou()) {
          setYou(other.getYou());
        }
        if (other.hasIsNewTurn()) {
          setIsNewTurn(other.getIsNewTurn());
        }
        if (!other.scoreCard_.isEmpty()) {
          if (scoreCard_.isEmpty()) {
            scoreCard_ = other.scoreCard_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureScoreCardIsMutable();
            scoreCard_.addAll(other.scoreCard_);
          }
          onChanged();
        }
        if (other.hasScoreTurn()) {
          setScoreTurn(other.getScoreTurn());
        }
        if (!other.playerScores_.isEmpty()) {
          if (playerScores_.isEmpty()) {
            playerScores_ = other.playerScores_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensurePlayerScoresIsMutable();
            playerScores_.addAll(other.playerScores_);
          }
          onChanged();
        }
        if (!other.roundScores_.isEmpty()) {
          if (roundScores_.isEmpty()) {
            roundScores_ = other.roundScores_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureRoundScoresIsMutable();
            roundScores_.addAll(other.roundScores_);
          }
          onChanged();
        }
        if (!other.edgeScore_.isEmpty()) {
          if (edgeScore_.isEmpty()) {
            edgeScore_ = other.edgeScore_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureEdgeScoreIsMutable();
            edgeScore_.addAll(other.edgeScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dzd.DzdRsp.OutCardDataDZD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dzd.DzdRsp.OutCardDataDZD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 change_cards_data = 3;
      private java.util.List<java.lang.Integer> changeCardsData_ = java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = new java.util.ArrayList<java.lang.Integer>(changeCardsData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(changeCardsData_);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        return changeCardsData_.size();
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsData(int index) {
        return changeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChangeCardsDataIsMutable();
        super.addAll(values, changeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 4;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000008;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 5;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 6;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000020;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 7;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 8;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 9;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000100;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 10;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000200;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_first_out = 11;
      private boolean isFirstOut_ ;
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public boolean getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder setIsFirstOut(boolean value) {
        bitField0_ |= 0x00000400;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isFirstOut_ = false;
        onChanged();
        return this;
      }

      // optional int32 display_time = 12;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000800;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 you = 13;
      private int you_ ;
      /**
       * <code>optional int32 you = 13;</code>
       *
       * <pre>
       *默认为0 。大于1代表出牌完了。 xx游
       * </pre>
       */
      public boolean hasYou() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 you = 13;</code>
       *
       * <pre>
       *默认为0 。大于1代表出牌完了。 xx游
       * </pre>
       */
      public int getYou() {
        return you_;
      }
      /**
       * <code>optional int32 you = 13;</code>
       *
       * <pre>
       *默认为0 。大于1代表出牌完了。 xx游
       * </pre>
       */
      public Builder setYou(int value) {
        bitField0_ |= 0x00001000;
        you_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 you = 13;</code>
       *
       * <pre>
       *默认为0 。大于1代表出牌完了。 xx游
       * </pre>
       */
      public Builder clearYou() {
        bitField0_ = (bitField0_ & ~0x00001000);
        you_ = 0;
        onChanged();
        return this;
      }

      // optional bool isNewTurn = 14;
      private boolean isNewTurn_ ;
      /**
       * <code>optional bool isNewTurn = 14;</code>
       *
       * <pre>
       * 是不是新的一轮
       * </pre>
       */
      public boolean hasIsNewTurn() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bool isNewTurn = 14;</code>
       *
       * <pre>
       * 是不是新的一轮
       * </pre>
       */
      public boolean getIsNewTurn() {
        return isNewTurn_;
      }
      /**
       * <code>optional bool isNewTurn = 14;</code>
       *
       * <pre>
       * 是不是新的一轮
       * </pre>
       */
      public Builder setIsNewTurn(boolean value) {
        bitField0_ |= 0x00002000;
        isNewTurn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isNewTurn = 14;</code>
       *
       * <pre>
       * 是不是新的一轮
       * </pre>
       */
      public Builder clearIsNewTurn() {
        bitField0_ = (bitField0_ & ~0x00002000);
        isNewTurn_ = false;
        onChanged();
        return this;
      }

      // repeated int32 score_card = 15;
      private java.util.List<java.lang.Integer> scoreCard_ = java.util.Collections.emptyList();
      private void ensureScoreCardIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          scoreCard_ = new java.util.ArrayList<java.lang.Integer>(scoreCard_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getScoreCardList() {
        return java.util.Collections.unmodifiableList(scoreCard_);
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public int getScoreCardCount() {
        return scoreCard_.size();
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public int getScoreCard(int index) {
        return scoreCard_.get(index);
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public Builder setScoreCard(
          int index, int value) {
        ensureScoreCardIsMutable();
        scoreCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public Builder addScoreCard(int value) {
        ensureScoreCardIsMutable();
        scoreCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public Builder addAllScoreCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureScoreCardIsMutable();
        super.addAll(values, scoreCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 15;</code>
       *
       * <pre>
       *本轮的分数牌 新一轮回清掉
       * </pre>
       */
      public Builder clearScoreCard() {
        scoreCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // optional int32 score_turn = 16;
      private int scoreTurn_ ;
      /**
       * <code>optional int32 score_turn = 16;</code>
       *
       * <pre>
       *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
       * </pre>
       */
      public boolean hasScoreTurn() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 score_turn = 16;</code>
       *
       * <pre>
       *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
       * </pre>
       */
      public int getScoreTurn() {
        return scoreTurn_;
      }
      /**
       * <code>optional int32 score_turn = 16;</code>
       *
       * <pre>
       *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
       * </pre>
       */
      public Builder setScoreTurn(int value) {
        bitField0_ |= 0x00008000;
        scoreTurn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score_turn = 16;</code>
       *
       * <pre>
       *本轮得分，没人出牌，开启新一轮的时候 会下发这个数据
       * </pre>
       */
      public Builder clearScoreTurn() {
        bitField0_ = (bitField0_ & ~0x00008000);
        scoreTurn_ = 0;
        onChanged();
        return this;
      }

      // repeated float player_scores = 17;
      private java.util.List<java.lang.Float> playerScores_ = java.util.Collections.emptyList();
      private void ensurePlayerScoresIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          playerScores_ = new java.util.ArrayList<java.lang.Float>(playerScores_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated float player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getPlayerScoresList() {
        return java.util.Collections.unmodifiableList(playerScores_);
      }
      /**
       * <code>repeated float player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public int getPlayerScoresCount() {
        return playerScores_.size();
      }
      /**
       * <code>repeated float player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public float getPlayerScores(int index) {
        return playerScores_.get(index);
      }
      /**
       * <code>repeated float player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder setPlayerScores(
          int index, float value) {
        ensurePlayerScoresIsMutable();
        playerScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder addPlayerScores(float value) {
        ensurePlayerScoresIsMutable();
        playerScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder addAllPlayerScores(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensurePlayerScoresIsMutable();
        super.addAll(values, playerScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float player_scores = 17;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder clearPlayerScores() {
        playerScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      // repeated int32 round_scores = 18;
      private java.util.List<java.lang.Integer> roundScores_ = java.util.Collections.emptyList();
      private void ensureRoundScoresIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          roundScores_ = new java.util.ArrayList<java.lang.Integer>(roundScores_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundScoresList() {
        return java.util.Collections.unmodifiableList(roundScores_);
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public int getRoundScoresCount() {
        return roundScores_.size();
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public int getRoundScores(int index) {
        return roundScores_.get(index);
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public Builder setRoundScores(
          int index, int value) {
        ensureRoundScoresIsMutable();
        roundScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public Builder addRoundScores(int value) {
        ensureRoundScoresIsMutable();
        roundScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public Builder addAllRoundScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundScoresIsMutable();
        super.addAll(values, roundScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 18;</code>
       *
       * <pre>
       *当局得分
       * </pre>
       */
      public Builder clearRoundScores() {
        roundScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // repeated int32 edge_score = 19;
      private java.util.List<java.lang.Integer> edgeScore_ = java.util.Collections.emptyList();
      private void ensureEdgeScoreIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          edgeScore_ = new java.util.ArrayList<java.lang.Integer>(edgeScore_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 edge_score = 19;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEdgeScoreList() {
        return java.util.Collections.unmodifiableList(edgeScore_);
      }
      /**
       * <code>repeated int32 edge_score = 19;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public int getEdgeScoreCount() {
        return edgeScore_.size();
      }
      /**
       * <code>repeated int32 edge_score = 19;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public int getEdgeScore(int index) {
        return edgeScore_.get(index);
      }
      /**
       * <code>repeated int32 edge_score = 19;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public Builder setEdgeScore(
          int index, int value) {
        ensureEdgeScoreIsMutable();
        edgeScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 edge_score = 19;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public Builder addEdgeScore(int value) {
        ensureEdgeScoreIsMutable();
        edgeScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 edge_score = 19;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public Builder addAllEdgeScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEdgeScoreIsMutable();
        super.addAll(values, edgeScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 edge_score = 19;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public Builder clearEdgeScore() {
        edgeScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dzd.OutCardDataDZD)
    }

    static {
      defaultInstance = new OutCardDataDZD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzd.OutCardDataDZD)
  }

  public interface PukeGameEndDZDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .dzd.RoomInfoDZD room_info = 1;
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomInfoDZD getRoomInfo();
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder getRoomInfoOrBuilder();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated float end_score = 7;
    /**
     * <code>repeated float end_score = 7;</code>
     *
     * <pre>
     *结算分数(积分)
     * </pre>
     */
    java.util.List<java.lang.Float> getEndScoreList();
    /**
     * <code>repeated float end_score = 7;</code>
     *
     * <pre>
     *结算分数(积分)
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated float end_score = 7;</code>
     *
     * <pre>
     *结算分数(积分)
     * </pre>
     */
    float getEndScore(int index);

    // optional int32 player_num = 8;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 reason = 10;
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 you = 11;
    /**
     * <code>repeated int32 you = 11;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    java.util.List<java.lang.Integer> getYouList();
    /**
     * <code>repeated int32 you = 11;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    int getYouCount();
    /**
     * <code>repeated int32 you = 11;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    int getYou(int index);

    // repeated int32 burn_score = 12;
    /**
     * <code>repeated int32 burn_score = 12;</code>
     *
     * <pre>
     * 烧分
     * </pre>
     */
    java.util.List<java.lang.Integer> getBurnScoreList();
    /**
     * <code>repeated int32 burn_score = 12;</code>
     *
     * <pre>
     * 烧分
     * </pre>
     */
    int getBurnScoreCount();
    /**
     * <code>repeated int32 burn_score = 12;</code>
     *
     * <pre>
     * 烧分
     * </pre>
     */
    int getBurnScore(int index);

    // repeated int32 catch_score = 13;
    /**
     * <code>repeated int32 catch_score = 13;</code>
     *
     * <pre>
     * 抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getCatchScoreList();
    /**
     * <code>repeated int32 catch_score = 13;</code>
     *
     * <pre>
     * 抓分
     * </pre>
     */
    int getCatchScoreCount();
    /**
     * <code>repeated int32 catch_score = 13;</code>
     *
     * <pre>
     * 抓分
     * </pre>
     */
    int getCatchScore(int index);

    // repeated int32 extra_score = 14;
    /**
     * <code>repeated int32 extra_score = 14;</code>
     *
     * <pre>
     * 奖励
     * </pre>
     */
    java.util.List<java.lang.Integer> getExtraScoreList();
    /**
     * <code>repeated int32 extra_score = 14;</code>
     *
     * <pre>
     * 奖励
     * </pre>
     */
    int getExtraScoreCount();
    /**
     * <code>repeated int32 extra_score = 14;</code>
     *
     * <pre>
     * 奖励
     * </pre>
     */
    int getExtraScore(int index);

    // repeated int32 all_score = 15;
    /**
     * <code>repeated int32 all_score = 15;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllScoreList();
    /**
     * <code>repeated int32 all_score = 15;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    int getAllScoreCount();
    /**
     * <code>repeated int32 all_score = 15;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    int getAllScore(int index);

    // repeated int32 order_seat = 22;
    /**
     * <code>repeated int32 order_seat = 22;</code>
     *
     * <pre>
     * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
     * </pre>
     */
    java.util.List<java.lang.Integer> getOrderSeatList();
    /**
     * <code>repeated int32 order_seat = 22;</code>
     *
     * <pre>
     * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
     * </pre>
     */
    int getOrderSeatCount();
    /**
     * <code>repeated int32 order_seat = 22;</code>
     *
     * <pre>
     * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
     * </pre>
     */
    int getOrderSeat(int index);

    // repeated float all_end_score = 17;
    /**
     * <code>repeated float all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Float> getAllEndScoreList();
    /**
     * <code>repeated float all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated float all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    float getAllEndScore(int index);

    // repeated int32 end_score_max = 18;
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单局最高得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreMaxList();
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单局最高得分
     * </pre>
     */
    int getEndScoreMaxCount();
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单局最高得分
     * </pre>
     */
    int getEndScoreMax(int index);

    // repeated int32 win_num = 19;
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinNumList();
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNumCount();
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNum(int index);

    // repeated int32 lose_num = 20;
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getLoseNumList();
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNumCount();
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNum(int index);

    // repeated .dzd.RoomPlayerResponseDZD players = 21;
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> 
        getPlayersList();
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD getPlayers(int index);
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    java.util.List<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder getPlayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dzd.PukeGameEndDZD}
   *
   * <pre>
   *结算
   * </pre>
   */
  public static final class PukeGameEndDZD extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndDZDOrBuilder {
    // Use PukeGameEndDZD.newBuilder() to construct.
    private PukeGameEndDZD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndDZD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndDZD defaultInstance;
    public static PukeGameEndDZD getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndDZD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndDZD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 61: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                endScore_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000008;
              }
              endScore_.add(input.readFloat());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              bitField0_ |= 0x00000002;
              playerNum_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000004;
              reason_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                you_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              you_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                you_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                you_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                burnScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              burnScore_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                burnScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                burnScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                catchScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              catchScore_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                catchScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                catchScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                extraScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              extraScore_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                extraScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                extraScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                allScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              allScore_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                allScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                allScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 141: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00001000;
              }
              allEndScore_.add(input.readFloat());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              endScoreMax_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              winNum_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              loseNum_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                loseNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 170: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD>();
                mutable_bitField0_ |= 0x00010000;
              }
              players_.add(input.readMessage(protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.PARSER, extensionRegistry));
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                orderSeat_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              orderSeat_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                orderSeat_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                orderSeat_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          you_ = java.util.Collections.unmodifiableList(you_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          burnScore_ = java.util.Collections.unmodifiableList(burnScore_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          catchScore_ = java.util.Collections.unmodifiableList(catchScore_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          extraScore_ = java.util.Collections.unmodifiableList(extraScore_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          allScore_ = java.util.Collections.unmodifiableList(allScore_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          orderSeat_ = java.util.Collections.unmodifiableList(orderSeat_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_PukeGameEndDZD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_PukeGameEndDZD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD.class, protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndDZD> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndDZD>() {
      public PukeGameEndDZD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndDZD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndDZD> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .dzd.RoomInfoDZD room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.dzd.DzdRsp.RoomInfoDZD roomInfo_;
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated float end_score = 7;
    public static final int END_SCORE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Float> endScore_;
    /**
     * <code>repeated float end_score = 7;</code>
     *
     * <pre>
     *结算分数(积分)
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated float end_score = 7;</code>
     *
     * <pre>
     *结算分数(积分)
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated float end_score = 7;</code>
     *
     * <pre>
     *结算分数(积分)
     * </pre>
     */
    public float getEndScore(int index) {
      return endScore_.get(index);
    }

    // optional int32 player_num = 8;
    public static final int PLAYER_NUM_FIELD_NUMBER = 8;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 reason = 10;
    public static final int REASON_FIELD_NUMBER = 10;
    private int reason_;
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 you = 11;
    public static final int YOU_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> you_;
    /**
     * <code>repeated int32 you = 11;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getYouList() {
      return you_;
    }
    /**
     * <code>repeated int32 you = 11;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    public int getYouCount() {
      return you_.size();
    }
    /**
     * <code>repeated int32 you = 11;</code>
     *
     * <pre>
     *游
     * </pre>
     */
    public int getYou(int index) {
      return you_.get(index);
    }

    // repeated int32 burn_score = 12;
    public static final int BURN_SCORE_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> burnScore_;
    /**
     * <code>repeated int32 burn_score = 12;</code>
     *
     * <pre>
     * 烧分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBurnScoreList() {
      return burnScore_;
    }
    /**
     * <code>repeated int32 burn_score = 12;</code>
     *
     * <pre>
     * 烧分
     * </pre>
     */
    public int getBurnScoreCount() {
      return burnScore_.size();
    }
    /**
     * <code>repeated int32 burn_score = 12;</code>
     *
     * <pre>
     * 烧分
     * </pre>
     */
    public int getBurnScore(int index) {
      return burnScore_.get(index);
    }

    // repeated int32 catch_score = 13;
    public static final int CATCH_SCORE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> catchScore_;
    /**
     * <code>repeated int32 catch_score = 13;</code>
     *
     * <pre>
     * 抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCatchScoreList() {
      return catchScore_;
    }
    /**
     * <code>repeated int32 catch_score = 13;</code>
     *
     * <pre>
     * 抓分
     * </pre>
     */
    public int getCatchScoreCount() {
      return catchScore_.size();
    }
    /**
     * <code>repeated int32 catch_score = 13;</code>
     *
     * <pre>
     * 抓分
     * </pre>
     */
    public int getCatchScore(int index) {
      return catchScore_.get(index);
    }

    // repeated int32 extra_score = 14;
    public static final int EXTRA_SCORE_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> extraScore_;
    /**
     * <code>repeated int32 extra_score = 14;</code>
     *
     * <pre>
     * 奖励
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getExtraScoreList() {
      return extraScore_;
    }
    /**
     * <code>repeated int32 extra_score = 14;</code>
     *
     * <pre>
     * 奖励
     * </pre>
     */
    public int getExtraScoreCount() {
      return extraScore_.size();
    }
    /**
     * <code>repeated int32 extra_score = 14;</code>
     *
     * <pre>
     * 奖励
     * </pre>
     */
    public int getExtraScore(int index) {
      return extraScore_.get(index);
    }

    // repeated int32 all_score = 15;
    public static final int ALL_SCORE_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> allScore_;
    /**
     * <code>repeated int32 all_score = 15;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllScoreList() {
      return allScore_;
    }
    /**
     * <code>repeated int32 all_score = 15;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    public int getAllScoreCount() {
      return allScore_.size();
    }
    /**
     * <code>repeated int32 all_score = 15;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    public int getAllScore(int index) {
      return allScore_.get(index);
    }

    // repeated int32 order_seat = 22;
    public static final int ORDER_SEAT_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> orderSeat_;
    /**
     * <code>repeated int32 order_seat = 22;</code>
     *
     * <pre>
     * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOrderSeatList() {
      return orderSeat_;
    }
    /**
     * <code>repeated int32 order_seat = 22;</code>
     *
     * <pre>
     * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
     * </pre>
     */
    public int getOrderSeatCount() {
      return orderSeat_.size();
    }
    /**
     * <code>repeated int32 order_seat = 22;</code>
     *
     * <pre>
     * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
     * </pre>
     */
    public int getOrderSeat(int index) {
      return orderSeat_.get(index);
    }

    // repeated float all_end_score = 17;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Float> allEndScore_;
    /**
     * <code>repeated float all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated float all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated float all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public float getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 end_score_max = 18;
    public static final int END_SCORE_MAX_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> endScoreMax_;
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单局最高得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreMaxList() {
      return endScoreMax_;
    }
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单局最高得分
     * </pre>
     */
    public int getEndScoreMaxCount() {
      return endScoreMax_.size();
    }
    /**
     * <code>repeated int32 end_score_max = 18;</code>
     *
     * <pre>
     *单局最高得分
     * </pre>
     */
    public int getEndScoreMax(int index) {
      return endScoreMax_.get(index);
    }

    // repeated int32 win_num = 19;
    public static final int WIN_NUM_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> winNum_;
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinNumList() {
      return winNum_;
    }
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNumCount() {
      return winNum_.size();
    }
    /**
     * <code>repeated int32 win_num = 19;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNum(int index) {
      return winNum_.get(index);
    }

    // repeated int32 lose_num = 20;
    public static final int LOSE_NUM_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> loseNum_;
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLoseNumList() {
      return loseNum_;
    }
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNumCount() {
      return loseNum_.size();
    }
    /**
     * <code>repeated int32 lose_num = 20;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNum(int index) {
      return loseNum_.get(index);
    }

    // repeated .dzd.RoomPlayerResponseDZD players = 21;
    public static final int PLAYERS_FIELD_NUMBER = 21;
    private java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> players_;
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    public java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    public java.util.List<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      reason_ = 0;
      you_ = java.util.Collections.emptyList();
      burnScore_ = java.util.Collections.emptyList();
      catchScore_ = java.util.Collections.emptyList();
      extraScore_ = java.util.Collections.emptyList();
      allScore_ = java.util.Collections.emptyList();
      orderSeat_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      endScoreMax_ = java.util.Collections.emptyList();
      winNum_ = java.util.Collections.emptyList();
      loseNum_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeFloat(7, endScore_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(8, playerNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(10, reason_);
      }
      for (int i = 0; i < you_.size(); i++) {
        output.writeInt32(11, you_.get(i));
      }
      for (int i = 0; i < burnScore_.size(); i++) {
        output.writeInt32(12, burnScore_.get(i));
      }
      for (int i = 0; i < catchScore_.size(); i++) {
        output.writeInt32(13, catchScore_.get(i));
      }
      for (int i = 0; i < extraScore_.size(); i++) {
        output.writeInt32(14, extraScore_.get(i));
      }
      for (int i = 0; i < allScore_.size(); i++) {
        output.writeInt32(15, allScore_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeFloat(17, allEndScore_.get(i));
      }
      for (int i = 0; i < endScoreMax_.size(); i++) {
        output.writeInt32(18, endScoreMax_.get(i));
      }
      for (int i = 0; i < winNum_.size(); i++) {
        output.writeInt32(19, winNum_.get(i));
      }
      for (int i = 0; i < loseNum_.size(); i++) {
        output.writeInt32(20, loseNum_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(21, players_.get(i));
      }
      for (int i = 0; i < orderSeat_.size(); i++) {
        output.writeInt32(22, orderSeat_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        dataSize = 4 * getEndScoreList().size();
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, playerNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < you_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(you_.get(i));
        }
        size += dataSize;
        size += 1 * getYouList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < burnScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(burnScore_.get(i));
        }
        size += dataSize;
        size += 1 * getBurnScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < catchScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(catchScore_.get(i));
        }
        size += dataSize;
        size += 1 * getCatchScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < extraScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(extraScore_.get(i));
        }
        size += dataSize;
        size += 1 * getExtraScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllScoreList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getAllEndScoreList().size();
        size += dataSize;
        size += 2 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScoreMax_.get(i));
        }
        size += dataSize;
        size += 2 * getEndScoreMaxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winNum_.get(i));
        }
        size += dataSize;
        size += 2 * getWinNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < loseNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(loseNum_.get(i));
        }
        size += dataSize;
        size += 2 * getLoseNumList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < orderSeat_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(orderSeat_.get(i));
        }
        size += dataSize;
        size += 2 * getOrderSeatList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzd.PukeGameEndDZD}
     *
     * <pre>
     *结算
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dzd.DzdRsp.PukeGameEndDZDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_PukeGameEndDZD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_PukeGameEndDZD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD.class, protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD.Builder.class);
      }

      // Construct using protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          cardsDataBuilder_.clear();
        }
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        you_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        burnScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        catchScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        extraScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        allScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        orderSeat_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
        } else {
          playersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_PukeGameEndDZD_descriptor;
      }

      public protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD getDefaultInstanceForType() {
        return protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD.getDefaultInstance();
      }

      public protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD build() {
        protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD buildPartial() {
        protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD result = new protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.endScore_ = endScore_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          you_ = java.util.Collections.unmodifiableList(you_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.you_ = you_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          burnScore_ = java.util.Collections.unmodifiableList(burnScore_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.burnScore_ = burnScore_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          catchScore_ = java.util.Collections.unmodifiableList(catchScore_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.catchScore_ = catchScore_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          extraScore_ = java.util.Collections.unmodifiableList(extraScore_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.extraScore_ = extraScore_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          allScore_ = java.util.Collections.unmodifiableList(allScore_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.allScore_ = allScore_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          orderSeat_ = java.util.Collections.unmodifiableList(orderSeat_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.orderSeat_ = orderSeat_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.endScoreMax_ = endScoreMax_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.winNum_ = winNum_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.loseNum_ = loseNum_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD) {
          return mergeFrom((protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD other) {
        if (other == protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.you_.isEmpty()) {
          if (you_.isEmpty()) {
            you_ = other.you_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureYouIsMutable();
            you_.addAll(other.you_);
          }
          onChanged();
        }
        if (!other.burnScore_.isEmpty()) {
          if (burnScore_.isEmpty()) {
            burnScore_ = other.burnScore_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureBurnScoreIsMutable();
            burnScore_.addAll(other.burnScore_);
          }
          onChanged();
        }
        if (!other.catchScore_.isEmpty()) {
          if (catchScore_.isEmpty()) {
            catchScore_ = other.catchScore_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCatchScoreIsMutable();
            catchScore_.addAll(other.catchScore_);
          }
          onChanged();
        }
        if (!other.extraScore_.isEmpty()) {
          if (extraScore_.isEmpty()) {
            extraScore_ = other.extraScore_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureExtraScoreIsMutable();
            extraScore_.addAll(other.extraScore_);
          }
          onChanged();
        }
        if (!other.allScore_.isEmpty()) {
          if (allScore_.isEmpty()) {
            allScore_ = other.allScore_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureAllScoreIsMutable();
            allScore_.addAll(other.allScore_);
          }
          onChanged();
        }
        if (!other.orderSeat_.isEmpty()) {
          if (orderSeat_.isEmpty()) {
            orderSeat_ = other.orderSeat_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureOrderSeatIsMutable();
            orderSeat_.addAll(other.orderSeat_);
          }
          onChanged();
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.endScoreMax_.isEmpty()) {
          if (endScoreMax_.isEmpty()) {
            endScoreMax_ = other.endScoreMax_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureEndScoreMaxIsMutable();
            endScoreMax_.addAll(other.endScoreMax_);
          }
          onChanged();
        }
        if (!other.winNum_.isEmpty()) {
          if (winNum_.isEmpty()) {
            winNum_ = other.winNum_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureWinNumIsMutable();
            winNum_.addAll(other.winNum_);
          }
          onChanged();
        }
        if (!other.loseNum_.isEmpty()) {
          if (loseNum_.isEmpty()) {
            loseNum_ = other.loseNum_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureLoseNumIsMutable();
            loseNum_.addAll(other.loseNum_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00010000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dzd.DzdRsp.PukeGameEndDZD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .dzd.RoomInfoDZD room_info = 1;
      private protobuf.clazz.dzd.DzdRsp.RoomInfoDZD roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomInfoDZD, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomInfoDZD, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.dzd.DzdRsp.RoomInfoDZD, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated float end_score = 7;
      private java.util.List<java.lang.Float> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          endScore_ = new java.util.ArrayList<java.lang.Float>(endScore_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated float end_score = 7;</code>
       *
       * <pre>
       *结算分数(积分)
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated float end_score = 7;</code>
       *
       * <pre>
       *结算分数(积分)
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated float end_score = 7;</code>
       *
       * <pre>
       *结算分数(积分)
       * </pre>
       */
      public float getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated float end_score = 7;</code>
       *
       * <pre>
       *结算分数(积分)
       * </pre>
       */
      public Builder setEndScore(
          int index, float value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float end_score = 7;</code>
       *
       * <pre>
       *结算分数(积分)
       * </pre>
       */
      public Builder addEndScore(float value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float end_score = 7;</code>
       *
       * <pre>
       *结算分数(积分)
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float end_score = 7;</code>
       *
       * <pre>
       *结算分数(积分)
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional int32 player_num = 8;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000010;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000010);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 10;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000020;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000020);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 you = 11;
      private java.util.List<java.lang.Integer> you_ = java.util.Collections.emptyList();
      private void ensureYouIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          you_ = new java.util.ArrayList<java.lang.Integer>(you_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 you = 11;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getYouList() {
        return java.util.Collections.unmodifiableList(you_);
      }
      /**
       * <code>repeated int32 you = 11;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public int getYouCount() {
        return you_.size();
      }
      /**
       * <code>repeated int32 you = 11;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public int getYou(int index) {
        return you_.get(index);
      }
      /**
       * <code>repeated int32 you = 11;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public Builder setYou(
          int index, int value) {
        ensureYouIsMutable();
        you_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 you = 11;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public Builder addYou(int value) {
        ensureYouIsMutable();
        you_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 you = 11;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public Builder addAllYou(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureYouIsMutable();
        super.addAll(values, you_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 you = 11;</code>
       *
       * <pre>
       *游
       * </pre>
       */
      public Builder clearYou() {
        you_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 burn_score = 12;
      private java.util.List<java.lang.Integer> burnScore_ = java.util.Collections.emptyList();
      private void ensureBurnScoreIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          burnScore_ = new java.util.ArrayList<java.lang.Integer>(burnScore_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 burn_score = 12;</code>
       *
       * <pre>
       * 烧分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBurnScoreList() {
        return java.util.Collections.unmodifiableList(burnScore_);
      }
      /**
       * <code>repeated int32 burn_score = 12;</code>
       *
       * <pre>
       * 烧分
       * </pre>
       */
      public int getBurnScoreCount() {
        return burnScore_.size();
      }
      /**
       * <code>repeated int32 burn_score = 12;</code>
       *
       * <pre>
       * 烧分
       * </pre>
       */
      public int getBurnScore(int index) {
        return burnScore_.get(index);
      }
      /**
       * <code>repeated int32 burn_score = 12;</code>
       *
       * <pre>
       * 烧分
       * </pre>
       */
      public Builder setBurnScore(
          int index, int value) {
        ensureBurnScoreIsMutable();
        burnScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 burn_score = 12;</code>
       *
       * <pre>
       * 烧分
       * </pre>
       */
      public Builder addBurnScore(int value) {
        ensureBurnScoreIsMutable();
        burnScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 burn_score = 12;</code>
       *
       * <pre>
       * 烧分
       * </pre>
       */
      public Builder addAllBurnScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBurnScoreIsMutable();
        super.addAll(values, burnScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 burn_score = 12;</code>
       *
       * <pre>
       * 烧分
       * </pre>
       */
      public Builder clearBurnScore() {
        burnScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 catch_score = 13;
      private java.util.List<java.lang.Integer> catchScore_ = java.util.Collections.emptyList();
      private void ensureCatchScoreIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          catchScore_ = new java.util.ArrayList<java.lang.Integer>(catchScore_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 catch_score = 13;</code>
       *
       * <pre>
       * 抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCatchScoreList() {
        return java.util.Collections.unmodifiableList(catchScore_);
      }
      /**
       * <code>repeated int32 catch_score = 13;</code>
       *
       * <pre>
       * 抓分
       * </pre>
       */
      public int getCatchScoreCount() {
        return catchScore_.size();
      }
      /**
       * <code>repeated int32 catch_score = 13;</code>
       *
       * <pre>
       * 抓分
       * </pre>
       */
      public int getCatchScore(int index) {
        return catchScore_.get(index);
      }
      /**
       * <code>repeated int32 catch_score = 13;</code>
       *
       * <pre>
       * 抓分
       * </pre>
       */
      public Builder setCatchScore(
          int index, int value) {
        ensureCatchScoreIsMutable();
        catchScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 catch_score = 13;</code>
       *
       * <pre>
       * 抓分
       * </pre>
       */
      public Builder addCatchScore(int value) {
        ensureCatchScoreIsMutable();
        catchScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 catch_score = 13;</code>
       *
       * <pre>
       * 抓分
       * </pre>
       */
      public Builder addAllCatchScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCatchScoreIsMutable();
        super.addAll(values, catchScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 catch_score = 13;</code>
       *
       * <pre>
       * 抓分
       * </pre>
       */
      public Builder clearCatchScore() {
        catchScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated int32 extra_score = 14;
      private java.util.List<java.lang.Integer> extraScore_ = java.util.Collections.emptyList();
      private void ensureExtraScoreIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          extraScore_ = new java.util.ArrayList<java.lang.Integer>(extraScore_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 extra_score = 14;</code>
       *
       * <pre>
       * 奖励
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getExtraScoreList() {
        return java.util.Collections.unmodifiableList(extraScore_);
      }
      /**
       * <code>repeated int32 extra_score = 14;</code>
       *
       * <pre>
       * 奖励
       * </pre>
       */
      public int getExtraScoreCount() {
        return extraScore_.size();
      }
      /**
       * <code>repeated int32 extra_score = 14;</code>
       *
       * <pre>
       * 奖励
       * </pre>
       */
      public int getExtraScore(int index) {
        return extraScore_.get(index);
      }
      /**
       * <code>repeated int32 extra_score = 14;</code>
       *
       * <pre>
       * 奖励
       * </pre>
       */
      public Builder setExtraScore(
          int index, int value) {
        ensureExtraScoreIsMutable();
        extraScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 extra_score = 14;</code>
       *
       * <pre>
       * 奖励
       * </pre>
       */
      public Builder addExtraScore(int value) {
        ensureExtraScoreIsMutable();
        extraScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 extra_score = 14;</code>
       *
       * <pre>
       * 奖励
       * </pre>
       */
      public Builder addAllExtraScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureExtraScoreIsMutable();
        super.addAll(values, extraScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 extra_score = 14;</code>
       *
       * <pre>
       * 奖励
       * </pre>
       */
      public Builder clearExtraScore() {
        extraScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 all_score = 15;
      private java.util.List<java.lang.Integer> allScore_ = java.util.Collections.emptyList();
      private void ensureAllScoreIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          allScore_ = new java.util.ArrayList<java.lang.Integer>(allScore_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 all_score = 15;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllScoreList() {
        return java.util.Collections.unmodifiableList(allScore_);
      }
      /**
       * <code>repeated int32 all_score = 15;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public int getAllScoreCount() {
        return allScore_.size();
      }
      /**
       * <code>repeated int32 all_score = 15;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public int getAllScore(int index) {
        return allScore_.get(index);
      }
      /**
       * <code>repeated int32 all_score = 15;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public Builder setAllScore(
          int index, int value) {
        ensureAllScoreIsMutable();
        allScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_score = 15;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public Builder addAllScore(int value) {
        ensureAllScoreIsMutable();
        allScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_score = 15;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public Builder addAllAllScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllScoreIsMutable();
        super.addAll(values, allScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_score = 15;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public Builder clearAllScore() {
        allScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 order_seat = 22;
      private java.util.List<java.lang.Integer> orderSeat_ = java.util.Collections.emptyList();
      private void ensureOrderSeatIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          orderSeat_ = new java.util.ArrayList<java.lang.Integer>(orderSeat_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 order_seat = 22;</code>
       *
       * <pre>
       * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOrderSeatList() {
        return java.util.Collections.unmodifiableList(orderSeat_);
      }
      /**
       * <code>repeated int32 order_seat = 22;</code>
       *
       * <pre>
       * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
       * </pre>
       */
      public int getOrderSeatCount() {
        return orderSeat_.size();
      }
      /**
       * <code>repeated int32 order_seat = 22;</code>
       *
       * <pre>
       * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
       * </pre>
       */
      public int getOrderSeat(int index) {
        return orderSeat_.get(index);
      }
      /**
       * <code>repeated int32 order_seat = 22;</code>
       *
       * <pre>
       * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
       * </pre>
       */
      public Builder setOrderSeat(
          int index, int value) {
        ensureOrderSeatIsMutable();
        orderSeat_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 order_seat = 22;</code>
       *
       * <pre>
       * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
       * </pre>
       */
      public Builder addOrderSeat(int value) {
        ensureOrderSeatIsMutable();
        orderSeat_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 order_seat = 22;</code>
       *
       * <pre>
       * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
       * </pre>
       */
      public Builder addAllOrderSeat(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOrderSeatIsMutable();
        super.addAll(values, orderSeat_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 order_seat = 22;</code>
       *
       * <pre>
       * 输赢顺序 [前两位表示赢了的座位号 后两位表示输了的座位号]
       * </pre>
       */
      public Builder clearOrderSeat() {
        orderSeat_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated float all_end_score = 17;
      private java.util.List<java.lang.Float> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Float>(allEndScore_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated float all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated float all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated float all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public float getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated float all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllEndScore(
          int index, float value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllEndScore(float value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 end_score_max = 18;
      private java.util.List<java.lang.Integer> endScoreMax_ = java.util.Collections.emptyList();
      private void ensureEndScoreMaxIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          endScoreMax_ = new java.util.ArrayList<java.lang.Integer>(endScoreMax_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreMaxList() {
        return java.util.Collections.unmodifiableList(endScoreMax_);
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public int getEndScoreMaxCount() {
        return endScoreMax_.size();
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public int getEndScoreMax(int index) {
        return endScoreMax_.get(index);
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public Builder setEndScoreMax(
          int index, int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public Builder addEndScoreMax(int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public Builder addAllEndScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreMaxIsMutable();
        super.addAll(values, endScoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 18;</code>
       *
       * <pre>
       *单局最高得分
       * </pre>
       */
      public Builder clearEndScoreMax() {
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 win_num = 19;
      private java.util.List<java.lang.Integer> winNum_ = java.util.Collections.emptyList();
      private void ensureWinNumIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          winNum_ = new java.util.ArrayList<java.lang.Integer>(winNum_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinNumList() {
        return java.util.Collections.unmodifiableList(winNum_);
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNumCount() {
        return winNum_.size();
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNum(int index) {
        return winNum_.get(index);
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder setWinNum(
          int index, int value) {
        ensureWinNumIsMutable();
        winNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addWinNum(int value) {
        ensureWinNumIsMutable();
        winNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addAllWinNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinNumIsMutable();
        super.addAll(values, winNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 19;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder clearWinNum() {
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated int32 lose_num = 20;
      private java.util.List<java.lang.Integer> loseNum_ = java.util.Collections.emptyList();
      private void ensureLoseNumIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          loseNum_ = new java.util.ArrayList<java.lang.Integer>(loseNum_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLoseNumList() {
        return java.util.Collections.unmodifiableList(loseNum_);
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNumCount() {
        return loseNum_.size();
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNum(int index) {
        return loseNum_.get(index);
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder setLoseNum(
          int index, int value) {
        ensureLoseNumIsMutable();
        loseNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addLoseNum(int value) {
        ensureLoseNumIsMutable();
        loseNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addAllLoseNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLoseNumIsMutable();
        super.addAll(values, loseNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 20;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder clearLoseNum() {
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated .dzd.RoomPlayerResponseDZD players = 21;
      private java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD>(players_);
          bitField0_ |= 0x00010000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> playersBuilder_;

      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder addPlayers(protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public java.util.List<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.getDefaultInstance());
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.getDefaultInstance());
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00010000) == 0x00010000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:dzd.PukeGameEndDZD)
    }

    static {
      defaultInstance = new PukeGameEndDZD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzd.PukeGameEndDZD)
  }

  public interface TableResponse_DZDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated .Int32ArrayResponse change_cards_data = 6;
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getChangeCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChangeCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 7;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_pass = 8;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // repeated int32 card_type = 9;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 10;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_change_cards_data = 11;
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // repeated int32 pr_cards_data = 12;
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 13;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 14;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 magic_card = 15;
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    boolean hasMagicCard();
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    int getMagicCard();

    // optional int32 is_first_out = 16;
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 17;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 18;
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 19;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .dzd.RoomInfoDZD room_info = 20;
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomInfoDZD getRoomInfo();
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder getRoomInfoOrBuilder();

    // repeated .dzd.RoomPlayerResponseDZD players = 21;
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> 
        getPlayersList();
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD getPlayers(int index);
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    java.util.List<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 player_you = 22;
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    java.util.List<java.lang.Integer> getPlayerYouList();
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    int getPlayerYouCount();
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    int getPlayerYou(int index);

    // repeated int32 score_card = 24;
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getScoreCardList();
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    int getScoreCardCount();
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    int getScoreCard(int index);

    // repeated int32 burn_scores = 25;
    /**
     * <code>repeated int32 burn_scores = 25;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    java.util.List<java.lang.Integer> getBurnScoresList();
    /**
     * <code>repeated int32 burn_scores = 25;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    int getBurnScoresCount();
    /**
     * <code>repeated int32 burn_scores = 25;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    int getBurnScores(int index);

    // optional int64 out_card_time = 26;
    /**
     * <code>optional int64 out_card_time = 26;</code>
     *
     * <pre>
     * 如果轮到自己出牌，会下发自己的出牌时间戳
     * </pre>
     */
    boolean hasOutCardTime();
    /**
     * <code>optional int64 out_card_time = 26;</code>
     *
     * <pre>
     * 如果轮到自己出牌，会下发自己的出牌时间戳
     * </pre>
     */
    long getOutCardTime();

    // repeated int32 round_scores = 27;
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundScoresList();
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    int getRoundScoresCount();
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    int getRoundScores(int index);

    // repeated int32 edge_score = 28;
    /**
     * <code>repeated int32 edge_score = 28;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEdgeScoreList();
    /**
     * <code>repeated int32 edge_score = 28;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    int getEdgeScoreCount();
    /**
     * <code>repeated int32 edge_score = 28;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    int getEdgeScore(int index);

    // repeated float player_score = 29;
    /**
     * <code>repeated float player_score = 29;</code>
     *
     * <pre>
     * 每个玩家的分数
     * </pre>
     */
    java.util.List<java.lang.Float> getPlayerScoreList();
    /**
     * <code>repeated float player_score = 29;</code>
     *
     * <pre>
     * 每个玩家的分数
     * </pre>
     */
    int getPlayerScoreCount();
    /**
     * <code>repeated float player_score = 29;</code>
     *
     * <pre>
     * 每个玩家的分数
     * </pre>
     */
    float getPlayerScore(int index);
  }
  /**
   * Protobuf type {@code dzd.TableResponse_DZD}
   */
  public static final class TableResponse_DZD extends
      com.google.protobuf.GeneratedMessage
      implements TableResponse_DZDOrBuilder {
    // Use TableResponse_DZD.newBuilder() to construct.
    private TableResponse_DZD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponse_DZD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponse_DZD defaultInstance;
    public static TableResponse_DZD getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponse_DZD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponse_DZD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                changeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000020;
              }
              changeCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000040;
              magicCard_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000080;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000100;
              displayTime_ = input.readInt32();
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00040000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 162: {
              protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 170: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD>();
                mutable_bitField0_ |= 0x00100000;
              }
              players_.add(input.readMessage(protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.PARSER, extensionRegistry));
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                playerYou_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              playerYou_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                playerYou_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerYou_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                scoreCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              scoreCard_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                scoreCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                scoreCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 200: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                burnScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              burnScores_.add(input.readInt32());
              break;
            }
            case 202: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                burnScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                burnScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 208: {
              bitField0_ |= 0x00000400;
              outCardTime_ = input.readInt64();
              break;
            }
            case 216: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                roundScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              roundScores_.add(input.readInt32());
              break;
            }
            case 218: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                roundScores_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                roundScores_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 224: {
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
                edgeScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              edgeScore_.add(input.readInt32());
              break;
            }
            case 226: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000) && input.getBytesUntilLimit() > 0) {
                edgeScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                edgeScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 237: {
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
                playerScore_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x08000000;
              }
              playerScore_.add(input.readFloat());
              break;
            }
            case 234: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000) && input.getBytesUntilLimit() > 0) {
                playerScore_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x08000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerScore_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          playerYou_ = java.util.Collections.unmodifiableList(playerYou_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          scoreCard_ = java.util.Collections.unmodifiableList(scoreCard_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          burnScores_ = java.util.Collections.unmodifiableList(burnScores_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          roundScores_ = java.util.Collections.unmodifiableList(roundScores_);
        }
        if (((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
          edgeScore_ = java.util.Collections.unmodifiableList(edgeScore_);
        }
        if (((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
          playerScore_ = java.util.Collections.unmodifiableList(playerScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_TableResponse_DZD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_TableResponse_DZD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dzd.DzdRsp.TableResponse_DZD.class, protobuf.clazz.dzd.DzdRsp.TableResponse_DZD.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponse_DZD> PARSER =
        new com.google.protobuf.AbstractParser<TableResponse_DZD>() {
      public TableResponse_DZD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponse_DZD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponse_DZD> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated .Int32ArrayResponse change_cards_data = 6;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> changeCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChangeCardsDataOrBuilderList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
        int index) {
      return changeCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 7;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_pass = 8;
    public static final int PLAYER_PASS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // repeated int32 card_type = 9;
    public static final int CARD_TYPE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 10;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 10;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_change_cards_data = 11;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // repeated int32 pr_cards_data = 12;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 13;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 13;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 14;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 14;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 magic_card = 15;
    public static final int MAGIC_CARD_FIELD_NUMBER = 15;
    private int magicCard_;
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    public boolean hasMagicCard() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    public int getMagicCard() {
      return magicCard_;
    }

    // optional int32 is_first_out = 16;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 16;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 17;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 17;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 18;
    public static final int CARD_COUNT_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 19;
    public static final int CARDS_DATA_FIELD_NUMBER = 19;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .dzd.RoomInfoDZD room_info = 20;
    public static final int ROOM_INFO_FIELD_NUMBER = 20;
    private protobuf.clazz.dzd.DzdRsp.RoomInfoDZD roomInfo_;
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .dzd.RoomPlayerResponseDZD players = 21;
    public static final int PLAYERS_FIELD_NUMBER = 21;
    private java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> players_;
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    public java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    public java.util.List<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 player_you = 22;
    public static final int PLAYER_YOU_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> playerYou_;
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    public java.util.List<java.lang.Integer>
        getPlayerYouList() {
      return playerYou_;
    }
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    public int getPlayerYouCount() {
      return playerYou_.size();
    }
    /**
     * <code>repeated int32 player_you = 22;</code>
     */
    public int getPlayerYou(int index) {
      return playerYou_.get(index);
    }

    // repeated int32 score_card = 24;
    public static final int SCORE_CARD_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> scoreCard_;
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getScoreCardList() {
      return scoreCard_;
    }
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    public int getScoreCardCount() {
      return scoreCard_.size();
    }
    /**
     * <code>repeated int32 score_card = 24;</code>
     *
     * <pre>
     *本轮的分数牌
     * </pre>
     */
    public int getScoreCard(int index) {
      return scoreCard_.get(index);
    }

    // repeated int32 burn_scores = 25;
    public static final int BURN_SCORES_FIELD_NUMBER = 25;
    private java.util.List<java.lang.Integer> burnScores_;
    /**
     * <code>repeated int32 burn_scores = 25;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBurnScoresList() {
      return burnScores_;
    }
    /**
     * <code>repeated int32 burn_scores = 25;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    public int getBurnScoresCount() {
      return burnScores_.size();
    }
    /**
     * <code>repeated int32 burn_scores = 25;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    public int getBurnScores(int index) {
      return burnScores_.get(index);
    }

    // optional int64 out_card_time = 26;
    public static final int OUT_CARD_TIME_FIELD_NUMBER = 26;
    private long outCardTime_;
    /**
     * <code>optional int64 out_card_time = 26;</code>
     *
     * <pre>
     * 如果轮到自己出牌，会下发自己的出牌时间戳
     * </pre>
     */
    public boolean hasOutCardTime() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int64 out_card_time = 26;</code>
     *
     * <pre>
     * 如果轮到自己出牌，会下发自己的出牌时间戳
     * </pre>
     */
    public long getOutCardTime() {
      return outCardTime_;
    }

    // repeated int32 round_scores = 27;
    public static final int ROUND_SCORES_FIELD_NUMBER = 27;
    private java.util.List<java.lang.Integer> roundScores_;
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundScoresList() {
      return roundScores_;
    }
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    public int getRoundScoresCount() {
      return roundScores_.size();
    }
    /**
     * <code>repeated int32 round_scores = 27;</code>
     *
     * <pre>
     *每个玩家的分数 持续更新
     * </pre>
     */
    public int getRoundScores(int index) {
      return roundScores_.get(index);
    }

    // repeated int32 edge_score = 28;
    public static final int EDGE_SCORE_FIELD_NUMBER = 28;
    private java.util.List<java.lang.Integer> edgeScore_;
    /**
     * <code>repeated int32 edge_score = 28;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEdgeScoreList() {
      return edgeScore_;
    }
    /**
     * <code>repeated int32 edge_score = 28;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    public int getEdgeScoreCount() {
      return edgeScore_.size();
    }
    /**
     * <code>repeated int32 edge_score = 28;</code>
     *
     * <pre>
     * 我方得分 乙方得分
     * </pre>
     */
    public int getEdgeScore(int index) {
      return edgeScore_.get(index);
    }

    // repeated float player_score = 29;
    public static final int PLAYER_SCORE_FIELD_NUMBER = 29;
    private java.util.List<java.lang.Float> playerScore_;
    /**
     * <code>repeated float player_score = 29;</code>
     *
     * <pre>
     * 每个玩家的分数
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getPlayerScoreList() {
      return playerScore_;
    }
    /**
     * <code>repeated float player_score = 29;</code>
     *
     * <pre>
     * 每个玩家的分数
     * </pre>
     */
    public int getPlayerScoreCount() {
      return playerScore_.size();
    }
    /**
     * <code>repeated float player_score = 29;</code>
     *
     * <pre>
     * 每个玩家的分数
     * </pre>
     */
    public float getPlayerScore(int index) {
      return playerScore_.get(index);
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerPass_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      magicCard_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      playerYou_ = java.util.Collections.emptyList();
      scoreCard_ = java.util.Collections.emptyList();
      burnScores_ = java.util.Collections.emptyList();
      outCardTime_ = 0L;
      roundScores_ = java.util.Collections.emptyList();
      edgeScore_ = java.util.Collections.emptyList();
      playerScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeMessage(6, changeCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(7, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(8, playerPass_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(9, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(10, prOutCardPlayer_);
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(11, prChangeCardsData_.get(i));
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(12, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(15, magicCard_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(16, isFirstOut_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(17, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(18, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(19, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(20, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(21, players_.get(i));
      }
      for (int i = 0; i < playerYou_.size(); i++) {
        output.writeInt32(22, playerYou_.get(i));
      }
      for (int i = 0; i < scoreCard_.size(); i++) {
        output.writeInt32(24, scoreCard_.get(i));
      }
      for (int i = 0; i < burnScores_.size(); i++) {
        output.writeInt32(25, burnScores_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt64(26, outCardTime_);
      }
      for (int i = 0; i < roundScores_.size(); i++) {
        output.writeInt32(27, roundScores_.get(i));
      }
      for (int i = 0; i < edgeScore_.size(); i++) {
        output.writeInt32(28, edgeScore_.get(i));
      }
      for (int i = 0; i < playerScore_.size(); i++) {
        output.writeFloat(29, playerScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, changeCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerPassList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, magicCard_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, isFirstOut_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerYou_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerYou_.get(i));
        }
        size += dataSize;
        size += 2 * getPlayerYouList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < scoreCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(scoreCard_.get(i));
        }
        size += dataSize;
        size += 2 * getScoreCardList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < burnScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(burnScores_.get(i));
        }
        size += dataSize;
        size += 2 * getBurnScoresList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(26, outCardTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundScores_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(roundScores_.get(i));
        }
        size += dataSize;
        size += 2 * getRoundScoresList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < edgeScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(edgeScore_.get(i));
        }
        size += dataSize;
        size += 2 * getEdgeScoreList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getPlayerScoreList().size();
        size += dataSize;
        size += 2 * getPlayerScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dzd.DzdRsp.TableResponse_DZD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzd.TableResponse_DZD}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dzd.DzdRsp.TableResponse_DZDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_TableResponse_DZD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_TableResponse_DZD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dzd.DzdRsp.TableResponse_DZD.class, protobuf.clazz.dzd.DzdRsp.TableResponse_DZD.Builder.class);
      }

      // Construct using protobuf.clazz.dzd.DzdRsp.TableResponse_DZD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getChangeCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        if (changeCardsDataBuilder_ == null) {
          changeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          changeCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        magicCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
        } else {
          playersBuilder_.clear();
        }
        playerYou_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        scoreCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        burnScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        outCardTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x01000000);
        roundScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        edgeScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        playerScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_TableResponse_DZD_descriptor;
      }

      public protobuf.clazz.dzd.DzdRsp.TableResponse_DZD getDefaultInstanceForType() {
        return protobuf.clazz.dzd.DzdRsp.TableResponse_DZD.getDefaultInstance();
      }

      public protobuf.clazz.dzd.DzdRsp.TableResponse_DZD build() {
        protobuf.clazz.dzd.DzdRsp.TableResponse_DZD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dzd.DzdRsp.TableResponse_DZD buildPartial() {
        protobuf.clazz.dzd.DzdRsp.TableResponse_DZD result = new protobuf.clazz.dzd.DzdRsp.TableResponse_DZD(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (changeCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.changeCardsData_ = changeCardsData_;
        } else {
          result.changeCardsData_ = changeCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.playerPass_ = playerPass_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.magicCard_ = magicCard_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000200;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00100000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          playerYou_ = java.util.Collections.unmodifiableList(playerYou_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.playerYou_ = playerYou_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          scoreCard_ = java.util.Collections.unmodifiableList(scoreCard_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.scoreCard_ = scoreCard_;
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          burnScores_ = java.util.Collections.unmodifiableList(burnScores_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.burnScores_ = burnScores_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.outCardTime_ = outCardTime_;
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          roundScores_ = java.util.Collections.unmodifiableList(roundScores_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.roundScores_ = roundScores_;
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          edgeScore_ = java.util.Collections.unmodifiableList(edgeScore_);
          bitField0_ = (bitField0_ & ~0x04000000);
        }
        result.edgeScore_ = edgeScore_;
        if (((bitField0_ & 0x08000000) == 0x08000000)) {
          playerScore_ = java.util.Collections.unmodifiableList(playerScore_);
          bitField0_ = (bitField0_ & ~0x08000000);
        }
        result.playerScore_ = playerScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dzd.DzdRsp.TableResponse_DZD) {
          return mergeFrom((protobuf.clazz.dzd.DzdRsp.TableResponse_DZD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dzd.DzdRsp.TableResponse_DZD other) {
        if (other == protobuf.clazz.dzd.DzdRsp.TableResponse_DZD.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (changeCardsDataBuilder_ == null) {
          if (!other.changeCardsData_.isEmpty()) {
            if (changeCardsData_.isEmpty()) {
              changeCardsData_ = other.changeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureChangeCardsDataIsMutable();
              changeCardsData_.addAll(other.changeCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.changeCardsData_.isEmpty()) {
            if (changeCardsDataBuilder_.isEmpty()) {
              changeCardsDataBuilder_.dispose();
              changeCardsDataBuilder_ = null;
              changeCardsData_ = other.changeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
              changeCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChangeCardsDataFieldBuilder() : null;
            } else {
              changeCardsDataBuilder_.addAllMessages(other.changeCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasMagicCard()) {
          setMagicCard(other.getMagicCard());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00040000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00100000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00100000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.playerYou_.isEmpty()) {
          if (playerYou_.isEmpty()) {
            playerYou_ = other.playerYou_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensurePlayerYouIsMutable();
            playerYou_.addAll(other.playerYou_);
          }
          onChanged();
        }
        if (!other.scoreCard_.isEmpty()) {
          if (scoreCard_.isEmpty()) {
            scoreCard_ = other.scoreCard_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureScoreCardIsMutable();
            scoreCard_.addAll(other.scoreCard_);
          }
          onChanged();
        }
        if (!other.burnScores_.isEmpty()) {
          if (burnScores_.isEmpty()) {
            burnScores_ = other.burnScores_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureBurnScoresIsMutable();
            burnScores_.addAll(other.burnScores_);
          }
          onChanged();
        }
        if (other.hasOutCardTime()) {
          setOutCardTime(other.getOutCardTime());
        }
        if (!other.roundScores_.isEmpty()) {
          if (roundScores_.isEmpty()) {
            roundScores_ = other.roundScores_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureRoundScoresIsMutable();
            roundScores_.addAll(other.roundScores_);
          }
          onChanged();
        }
        if (!other.edgeScore_.isEmpty()) {
          if (edgeScore_.isEmpty()) {
            edgeScore_ = other.edgeScore_;
            bitField0_ = (bitField0_ & ~0x04000000);
          } else {
            ensureEdgeScoreIsMutable();
            edgeScore_.addAll(other.edgeScore_);
          }
          onChanged();
        }
        if (!other.playerScore_.isEmpty()) {
          if (playerScore_.isEmpty()) {
            playerScore_ = other.playerScore_;
            bitField0_ = (bitField0_ & ~0x08000000);
          } else {
            ensurePlayerScoreIsMutable();
            playerScore_.addAll(other.playerScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dzd.DzdRsp.TableResponse_DZD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dzd.DzdRsp.TableResponse_DZD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated .Int32ArrayResponse change_cards_data = 6;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> changeCardsData_ =
        java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          changeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(changeCardsData_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> changeCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChangeCardsDataList() {
        if (changeCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(changeCardsData_);
        } else {
          return changeCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.size();
        } else {
          return changeCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index) {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.get(index);
        } else {
          return changeCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.set(index, value);
          onChanged();
        } else {
          changeCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(value);
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(index, value);
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          super.addAll(values, changeCardsData_);
          onChanged();
        } else {
          changeCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        if (changeCardsDataBuilder_ == null) {
          changeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          changeCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder removeChangeCardsData(int index) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.remove(index);
          onChanged();
        } else {
          changeCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getChangeCardsDataBuilder(
          int index) {
        return getChangeCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
          int index) {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.get(index);  } else {
          return changeCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getChangeCardsDataOrBuilderList() {
        if (changeCardsDataBuilder_ != null) {
          return changeCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(changeCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChangeCardsDataBuilder() {
        return getChangeCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChangeCardsDataBuilder(
          int index) {
        return getChangeCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getChangeCardsDataBuilderList() {
        return getChangeCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getChangeCardsDataFieldBuilder() {
        if (changeCardsDataBuilder_ == null) {
          changeCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  changeCardsData_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          changeCardsData_ = null;
        }
        return changeCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 7;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 8;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 9;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 10;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000200;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 11;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 12;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 13;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00001000;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00001000);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 14;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00002000;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00002000);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 magic_card = 15;
      private int magicCard_ ;
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public boolean hasMagicCard() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public int getMagicCard() {
        return magicCard_;
      }
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public Builder setMagicCard(int value) {
        bitField0_ |= 0x00004000;
        magicCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public Builder clearMagicCard() {
        bitField0_ = (bitField0_ & ~0x00004000);
        magicCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 16;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00008000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00008000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 17;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00010000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00010000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 18;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 19;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00040000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00040000) == 0x00040000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .dzd.RoomInfoDZD room_info = 20;
      private protobuf.clazz.dzd.DzdRsp.RoomInfoDZD roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomInfoDZD, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              roomInfo_ != protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomInfoDZD, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.dzd.DzdRsp.RoomInfoDZD, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .dzd.RoomPlayerResponseDZD players = 21;
      private java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD>(players_);
          bitField0_ |= 0x00100000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> playersBuilder_;

      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder addPlayers(protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public java.util.List<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.getDefaultInstance());
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.getDefaultInstance());
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 21;</code>
       */
      public java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00100000) == 0x00100000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 player_you = 22;
      private java.util.List<java.lang.Integer> playerYou_ = java.util.Collections.emptyList();
      private void ensurePlayerYouIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          playerYou_ = new java.util.ArrayList<java.lang.Integer>(playerYou_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public java.util.List<java.lang.Integer>
          getPlayerYouList() {
        return java.util.Collections.unmodifiableList(playerYou_);
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public int getPlayerYouCount() {
        return playerYou_.size();
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public int getPlayerYou(int index) {
        return playerYou_.get(index);
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public Builder setPlayerYou(
          int index, int value) {
        ensurePlayerYouIsMutable();
        playerYou_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public Builder addPlayerYou(int value) {
        ensurePlayerYouIsMutable();
        playerYou_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public Builder addAllPlayerYou(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerYouIsMutable();
        super.addAll(values, playerYou_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_you = 22;</code>
       */
      public Builder clearPlayerYou() {
        playerYou_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 score_card = 24;
      private java.util.List<java.lang.Integer> scoreCard_ = java.util.Collections.emptyList();
      private void ensureScoreCardIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          scoreCard_ = new java.util.ArrayList<java.lang.Integer>(scoreCard_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getScoreCardList() {
        return java.util.Collections.unmodifiableList(scoreCard_);
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public int getScoreCardCount() {
        return scoreCard_.size();
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public int getScoreCard(int index) {
        return scoreCard_.get(index);
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public Builder setScoreCard(
          int index, int value) {
        ensureScoreCardIsMutable();
        scoreCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public Builder addScoreCard(int value) {
        ensureScoreCardIsMutable();
        scoreCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public Builder addAllScoreCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureScoreCardIsMutable();
        super.addAll(values, scoreCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_card = 24;</code>
       *
       * <pre>
       *本轮的分数牌
       * </pre>
       */
      public Builder clearScoreCard() {
        scoreCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // repeated int32 burn_scores = 25;
      private java.util.List<java.lang.Integer> burnScores_ = java.util.Collections.emptyList();
      private void ensureBurnScoresIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          burnScores_ = new java.util.ArrayList<java.lang.Integer>(burnScores_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated int32 burn_scores = 25;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBurnScoresList() {
        return java.util.Collections.unmodifiableList(burnScores_);
      }
      /**
       * <code>repeated int32 burn_scores = 25;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public int getBurnScoresCount() {
        return burnScores_.size();
      }
      /**
       * <code>repeated int32 burn_scores = 25;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public int getBurnScores(int index) {
        return burnScores_.get(index);
      }
      /**
       * <code>repeated int32 burn_scores = 25;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public Builder setBurnScores(
          int index, int value) {
        ensureBurnScoresIsMutable();
        burnScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 burn_scores = 25;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public Builder addBurnScores(int value) {
        ensureBurnScoresIsMutable();
        burnScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 burn_scores = 25;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public Builder addAllBurnScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBurnScoresIsMutable();
        super.addAll(values, burnScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 burn_scores = 25;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public Builder clearBurnScores() {
        burnScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      // optional int64 out_card_time = 26;
      private long outCardTime_ ;
      /**
       * <code>optional int64 out_card_time = 26;</code>
       *
       * <pre>
       * 如果轮到自己出牌，会下发自己的出牌时间戳
       * </pre>
       */
      public boolean hasOutCardTime() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int64 out_card_time = 26;</code>
       *
       * <pre>
       * 如果轮到自己出牌，会下发自己的出牌时间戳
       * </pre>
       */
      public long getOutCardTime() {
        return outCardTime_;
      }
      /**
       * <code>optional int64 out_card_time = 26;</code>
       *
       * <pre>
       * 如果轮到自己出牌，会下发自己的出牌时间戳
       * </pre>
       */
      public Builder setOutCardTime(long value) {
        bitField0_ |= 0x01000000;
        outCardTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 out_card_time = 26;</code>
       *
       * <pre>
       * 如果轮到自己出牌，会下发自己的出牌时间戳
       * </pre>
       */
      public Builder clearOutCardTime() {
        bitField0_ = (bitField0_ & ~0x01000000);
        outCardTime_ = 0L;
        onChanged();
        return this;
      }

      // repeated int32 round_scores = 27;
      private java.util.List<java.lang.Integer> roundScores_ = java.util.Collections.emptyList();
      private void ensureRoundScoresIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          roundScores_ = new java.util.ArrayList<java.lang.Integer>(roundScores_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundScoresList() {
        return java.util.Collections.unmodifiableList(roundScores_);
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public int getRoundScoresCount() {
        return roundScores_.size();
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public int getRoundScores(int index) {
        return roundScores_.get(index);
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder setRoundScores(
          int index, int value) {
        ensureRoundScoresIsMutable();
        roundScores_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder addRoundScores(int value) {
        ensureRoundScoresIsMutable();
        roundScores_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder addAllRoundScores(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundScoresIsMutable();
        super.addAll(values, roundScores_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_scores = 27;</code>
       *
       * <pre>
       *每个玩家的分数 持续更新
       * </pre>
       */
      public Builder clearRoundScores() {
        roundScores_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      // repeated int32 edge_score = 28;
      private java.util.List<java.lang.Integer> edgeScore_ = java.util.Collections.emptyList();
      private void ensureEdgeScoreIsMutable() {
        if (!((bitField0_ & 0x04000000) == 0x04000000)) {
          edgeScore_ = new java.util.ArrayList<java.lang.Integer>(edgeScore_);
          bitField0_ |= 0x04000000;
         }
      }
      /**
       * <code>repeated int32 edge_score = 28;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEdgeScoreList() {
        return java.util.Collections.unmodifiableList(edgeScore_);
      }
      /**
       * <code>repeated int32 edge_score = 28;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public int getEdgeScoreCount() {
        return edgeScore_.size();
      }
      /**
       * <code>repeated int32 edge_score = 28;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public int getEdgeScore(int index) {
        return edgeScore_.get(index);
      }
      /**
       * <code>repeated int32 edge_score = 28;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public Builder setEdgeScore(
          int index, int value) {
        ensureEdgeScoreIsMutable();
        edgeScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 edge_score = 28;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public Builder addEdgeScore(int value) {
        ensureEdgeScoreIsMutable();
        edgeScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 edge_score = 28;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public Builder addAllEdgeScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEdgeScoreIsMutable();
        super.addAll(values, edgeScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 edge_score = 28;</code>
       *
       * <pre>
       * 我方得分 乙方得分
       * </pre>
       */
      public Builder clearEdgeScore() {
        edgeScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        onChanged();
        return this;
      }

      // repeated float player_score = 29;
      private java.util.List<java.lang.Float> playerScore_ = java.util.Collections.emptyList();
      private void ensurePlayerScoreIsMutable() {
        if (!((bitField0_ & 0x08000000) == 0x08000000)) {
          playerScore_ = new java.util.ArrayList<java.lang.Float>(playerScore_);
          bitField0_ |= 0x08000000;
         }
      }
      /**
       * <code>repeated float player_score = 29;</code>
       *
       * <pre>
       * 每个玩家的分数
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getPlayerScoreList() {
        return java.util.Collections.unmodifiableList(playerScore_);
      }
      /**
       * <code>repeated float player_score = 29;</code>
       *
       * <pre>
       * 每个玩家的分数
       * </pre>
       */
      public int getPlayerScoreCount() {
        return playerScore_.size();
      }
      /**
       * <code>repeated float player_score = 29;</code>
       *
       * <pre>
       * 每个玩家的分数
       * </pre>
       */
      public float getPlayerScore(int index) {
        return playerScore_.get(index);
      }
      /**
       * <code>repeated float player_score = 29;</code>
       *
       * <pre>
       * 每个玩家的分数
       * </pre>
       */
      public Builder setPlayerScore(
          int index, float value) {
        ensurePlayerScoreIsMutable();
        playerScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float player_score = 29;</code>
       *
       * <pre>
       * 每个玩家的分数
       * </pre>
       */
      public Builder addPlayerScore(float value) {
        ensurePlayerScoreIsMutable();
        playerScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float player_score = 29;</code>
       *
       * <pre>
       * 每个玩家的分数
       * </pre>
       */
      public Builder addAllPlayerScore(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensurePlayerScoreIsMutable();
        super.addAll(values, playerScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float player_score = 29;</code>
       *
       * <pre>
       * 每个玩家的分数
       * </pre>
       */
      public Builder clearPlayerScore() {
        playerScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dzd.TableResponse_DZD)
    }

    static {
      defaultInstance = new TableResponse_DZD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzd.TableResponse_DZD)
  }

  public interface GameStart_DZDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .dzd.RoomInfoDZD room_info = 5;
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomInfoDZD getRoomInfo();
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder getRoomInfoOrBuilder();

    // repeated .dzd.RoomPlayerResponseDZD players = 7;
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
     */
    java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> 
        getPlayersList();
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD getPlayers(int index);
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
     */
    java.util.List<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
     */
    protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 cur_banker = 1;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     * 庄家用户，也是出首牌的用户
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     * 庄家用户，也是出首牌的用户
     * </pre>
     */
    int getCurBanker();

    // repeated int32 card_count = 2;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 3;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     * 扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     * 扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     * 扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     * 扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     * 扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 show_card = 4;
    /**
     * <code>optional int32 show_card = 4;</code>
     *
     * <pre>
     * 系统展示卡牌
     * </pre>
     */
    boolean hasShowCard();
    /**
     * <code>optional int32 show_card = 4;</code>
     *
     * <pre>
     * 系统展示卡牌
     * </pre>
     */
    int getShowCard();

    // optional int32 display_time = 6;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 init_seat = 8;
    /**
     * <code>repeated int32 init_seat = 8;</code>
     *
     * <pre>
     * 玩家的初始化位置
     * </pre>
     */
    java.util.List<java.lang.Integer> getInitSeatList();
    /**
     * <code>repeated int32 init_seat = 8;</code>
     *
     * <pre>
     * 玩家的初始化位置
     * </pre>
     */
    int getInitSeatCount();
    /**
     * <code>repeated int32 init_seat = 8;</code>
     *
     * <pre>
     * 玩家的初始化位置
     * </pre>
     */
    int getInitSeat(int index);
  }
  /**
   * Protobuf type {@code dzd.GameStart_DZD}
   */
  public static final class GameStart_DZD extends
      com.google.protobuf.GeneratedMessage
      implements GameStart_DZDOrBuilder {
    // Use GameStart_DZD.newBuilder() to construct.
    private GameStart_DZD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStart_DZD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStart_DZD defaultInstance;
    public static GameStart_DZD getDefaultInstance() {
      return defaultInstance;
    }

    public GameStart_DZD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStart_DZD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              curBanker_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              showCard_ = input.readInt32();
              break;
            }
            case 42: {
              protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              displayTime_ = input.readInt32();
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                players_ = new java.util.ArrayList<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(input.readMessage(protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.PARSER, extensionRegistry));
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                initSeat_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              initSeat_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                initSeat_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                initSeat_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          initSeat_ = java.util.Collections.unmodifiableList(initSeat_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_GameStart_DZD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_GameStart_DZD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dzd.DzdRsp.GameStart_DZD.class, protobuf.clazz.dzd.DzdRsp.GameStart_DZD.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStart_DZD> PARSER =
        new com.google.protobuf.AbstractParser<GameStart_DZD>() {
      public GameStart_DZD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStart_DZD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStart_DZD> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .dzd.RoomInfoDZD room_info = 5;
    public static final int ROOM_INFO_FIELD_NUMBER = 5;
    private protobuf.clazz.dzd.DzdRsp.RoomInfoDZD roomInfo_;
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .dzd.RoomPlayerResponseDZD players = 7;
    public static final int PLAYERS_FIELD_NUMBER = 7;
    private java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> players_;
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
     */
    public java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
     */
    public java.util.List<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
     */
    public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 cur_banker = 1;
    public static final int CUR_BANKER_FIELD_NUMBER = 1;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     * 庄家用户，也是出首牌的用户
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     * 庄家用户，也是出首牌的用户
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // repeated int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     * 扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     * 扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     * 扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     * 扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     * 扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 show_card = 4;
    public static final int SHOW_CARD_FIELD_NUMBER = 4;
    private int showCard_;
    /**
     * <code>optional int32 show_card = 4;</code>
     *
     * <pre>
     * 系统展示卡牌
     * </pre>
     */
    public boolean hasShowCard() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 show_card = 4;</code>
     *
     * <pre>
     * 系统展示卡牌
     * </pre>
     */
    public int getShowCard() {
      return showCard_;
    }

    // optional int32 display_time = 6;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 6;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 init_seat = 8;
    public static final int INIT_SEAT_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> initSeat_;
    /**
     * <code>repeated int32 init_seat = 8;</code>
     *
     * <pre>
     * 玩家的初始化位置
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getInitSeatList() {
      return initSeat_;
    }
    /**
     * <code>repeated int32 init_seat = 8;</code>
     *
     * <pre>
     * 玩家的初始化位置
     * </pre>
     */
    public int getInitSeatCount() {
      return initSeat_.size();
    }
    /**
     * <code>repeated int32 init_seat = 8;</code>
     *
     * <pre>
     * 玩家的初始化位置
     * </pre>
     */
    public int getInitSeat(int index) {
      return initSeat_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      curBanker_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      showCard_ = 0;
      displayTime_ = 0;
      initSeat_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(1, curBanker_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(2, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, showCard_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(5, roomInfo_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, displayTime_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(7, players_.get(i));
      }
      for (int i = 0; i < initSeat_.size(); i++) {
        output.writeInt32(8, initSeat_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curBanker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, showCard_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, roomInfo_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, displayTime_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < initSeat_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(initSeat_.get(i));
        }
        size += dataSize;
        size += 1 * getInitSeatList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dzd.DzdRsp.GameStart_DZD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameStart_DZD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameStart_DZD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameStart_DZD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameStart_DZD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameStart_DZD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameStart_DZD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameStart_DZD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameStart_DZD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameStart_DZD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dzd.DzdRsp.GameStart_DZD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzd.GameStart_DZD}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dzd.DzdRsp.GameStart_DZDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_GameStart_DZD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_GameStart_DZD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dzd.DzdRsp.GameStart_DZD.class, protobuf.clazz.dzd.DzdRsp.GameStart_DZD.Builder.class);
      }

      // Construct using protobuf.clazz.dzd.DzdRsp.GameStart_DZD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        showCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        initSeat_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_GameStart_DZD_descriptor;
      }

      public protobuf.clazz.dzd.DzdRsp.GameStart_DZD getDefaultInstanceForType() {
        return protobuf.clazz.dzd.DzdRsp.GameStart_DZD.getDefaultInstance();
      }

      public protobuf.clazz.dzd.DzdRsp.GameStart_DZD build() {
        protobuf.clazz.dzd.DzdRsp.GameStart_DZD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dzd.DzdRsp.GameStart_DZD buildPartial() {
        protobuf.clazz.dzd.DzdRsp.GameStart_DZD result = new protobuf.clazz.dzd.DzdRsp.GameStart_DZD(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curBanker_ = curBanker_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.showCard_ = showCard_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          initSeat_ = java.util.Collections.unmodifiableList(initSeat_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.initSeat_ = initSeat_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dzd.DzdRsp.GameStart_DZD) {
          return mergeFrom((protobuf.clazz.dzd.DzdRsp.GameStart_DZD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dzd.DzdRsp.GameStart_DZD other) {
        if (other == protobuf.clazz.dzd.DzdRsp.GameStart_DZD.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasShowCard()) {
          setShowCard(other.getShowCard());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.initSeat_.isEmpty()) {
          if (initSeat_.isEmpty()) {
            initSeat_ = other.initSeat_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureInitSeatIsMutable();
            initSeat_.addAll(other.initSeat_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dzd.DzdRsp.GameStart_DZD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dzd.DzdRsp.GameStart_DZD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .dzd.RoomInfoDZD room_info = 5;
      private protobuf.clazz.dzd.DzdRsp.RoomInfoDZD roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomInfoDZD, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.dzd.DzdRsp.RoomInfoDZD value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .dzd.RoomInfoDZD room_info = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomInfoDZD, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.dzd.DzdRsp.RoomInfoDZD, protobuf.clazz.dzd.DzdRsp.RoomInfoDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomInfoDZDOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .dzd.RoomPlayerResponseDZD players = 7;
      private java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = new java.util.ArrayList<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> playersBuilder_;

      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public Builder addPlayers(protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public java.util.List<? extends protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.getDefaultInstance());
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.getDefaultInstance());
      }
      /**
       * <code>repeated .dzd.RoomPlayerResponseDZD players = 7;</code>
       */
      public java.util.List<protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZD.Builder, protobuf.clazz.dzd.DzdRsp.RoomPlayerResponseDZDOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 cur_banker = 1;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       * 庄家用户，也是出首牌的用户
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       * 庄家用户，也是出首牌的用户
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       * 庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000004;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       * 庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000004);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 2;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       * 扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 show_card = 4;
      private int showCard_ ;
      /**
       * <code>optional int32 show_card = 4;</code>
       *
       * <pre>
       * 系统展示卡牌
       * </pre>
       */
      public boolean hasShowCard() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 show_card = 4;</code>
       *
       * <pre>
       * 系统展示卡牌
       * </pre>
       */
      public int getShowCard() {
        return showCard_;
      }
      /**
       * <code>optional int32 show_card = 4;</code>
       *
       * <pre>
       * 系统展示卡牌
       * </pre>
       */
      public Builder setShowCard(int value) {
        bitField0_ |= 0x00000020;
        showCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 show_card = 4;</code>
       *
       * <pre>
       * 系统展示卡牌
       * </pre>
       */
      public Builder clearShowCard() {
        bitField0_ = (bitField0_ & ~0x00000020);
        showCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 6;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000040;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 init_seat = 8;
      private java.util.List<java.lang.Integer> initSeat_ = java.util.Collections.emptyList();
      private void ensureInitSeatIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          initSeat_ = new java.util.ArrayList<java.lang.Integer>(initSeat_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 init_seat = 8;</code>
       *
       * <pre>
       * 玩家的初始化位置
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getInitSeatList() {
        return java.util.Collections.unmodifiableList(initSeat_);
      }
      /**
       * <code>repeated int32 init_seat = 8;</code>
       *
       * <pre>
       * 玩家的初始化位置
       * </pre>
       */
      public int getInitSeatCount() {
        return initSeat_.size();
      }
      /**
       * <code>repeated int32 init_seat = 8;</code>
       *
       * <pre>
       * 玩家的初始化位置
       * </pre>
       */
      public int getInitSeat(int index) {
        return initSeat_.get(index);
      }
      /**
       * <code>repeated int32 init_seat = 8;</code>
       *
       * <pre>
       * 玩家的初始化位置
       * </pre>
       */
      public Builder setInitSeat(
          int index, int value) {
        ensureInitSeatIsMutable();
        initSeat_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 init_seat = 8;</code>
       *
       * <pre>
       * 玩家的初始化位置
       * </pre>
       */
      public Builder addInitSeat(int value) {
        ensureInitSeatIsMutable();
        initSeat_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 init_seat = 8;</code>
       *
       * <pre>
       * 玩家的初始化位置
       * </pre>
       */
      public Builder addAllInitSeat(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInitSeatIsMutable();
        super.addAll(values, initSeat_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 init_seat = 8;</code>
       *
       * <pre>
       * 玩家的初始化位置
       * </pre>
       */
      public Builder clearInitSeat() {
        initSeat_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dzd.GameStart_DZD)
    }

    static {
      defaultInstance = new GameStart_DZD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzd.GameStart_DZD)
  }

  public interface GameScore_DZDOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_banker = 1;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 1;</code>
     */
    int getCurBanker();

    // optional int32 no_out_socre_count = 2;
    /**
     * <code>optional int32 no_out_socre_count = 2;</code>
     *
     * <pre>
     * 未出分数数量
     * </pre>
     */
    boolean hasNoOutSocreCount();
    /**
     * <code>optional int32 no_out_socre_count = 2;</code>
     *
     * <pre>
     * 未出分数数量
     * </pre>
     */
    int getNoOutSocreCount();

    // repeated int32 no_out_socres = 3;
    /**
     * <code>repeated int32 no_out_socres = 3;</code>
     */
    java.util.List<java.lang.Integer> getNoOutSocresList();
    /**
     * <code>repeated int32 no_out_socres = 3;</code>
     */
    int getNoOutSocresCount();
    /**
     * <code>repeated int32 no_out_socres = 3;</code>
     */
    int getNoOutSocres(int index);

    // optional int32 out_socre_count = 4;
    /**
     * <code>optional int32 out_socre_count = 4;</code>
     *
     * <pre>
     * 已出分数数量
     * </pre>
     */
    boolean hasOutSocreCount();
    /**
     * <code>optional int32 out_socre_count = 4;</code>
     *
     * <pre>
     * 已出分数数量
     * </pre>
     */
    int getOutSocreCount();

    // repeated int32 out_socres = 5;
    /**
     * <code>repeated int32 out_socres = 5;</code>
     */
    java.util.List<java.lang.Integer> getOutSocresList();
    /**
     * <code>repeated int32 out_socres = 5;</code>
     */
    int getOutSocresCount();
    /**
     * <code>repeated int32 out_socres = 5;</code>
     */
    int getOutSocres(int index);
  }
  /**
   * Protobuf type {@code dzd.GameScore_DZD}
   *
   * <pre>
   * 本局游戏分数信息
   * </pre>
   */
  public static final class GameScore_DZD extends
      com.google.protobuf.GeneratedMessage
      implements GameScore_DZDOrBuilder {
    // Use GameScore_DZD.newBuilder() to construct.
    private GameScore_DZD(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameScore_DZD(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameScore_DZD defaultInstance;
    public static GameScore_DZD getDefaultInstance() {
      return defaultInstance;
    }

    public GameScore_DZD getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameScore_DZD(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curBanker_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              noOutSocreCount_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                noOutSocres_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              noOutSocres_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                noOutSocres_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                noOutSocres_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              outSocreCount_ = input.readInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outSocres_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              outSocres_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                outSocres_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                outSocres_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          noOutSocres_ = java.util.Collections.unmodifiableList(noOutSocres_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outSocres_ = java.util.Collections.unmodifiableList(outSocres_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_GameScore_DZD_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_GameScore_DZD_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dzd.DzdRsp.GameScore_DZD.class, protobuf.clazz.dzd.DzdRsp.GameScore_DZD.Builder.class);
    }

    public static com.google.protobuf.Parser<GameScore_DZD> PARSER =
        new com.google.protobuf.AbstractParser<GameScore_DZD>() {
      public GameScore_DZD parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameScore_DZD(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameScore_DZD> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_banker = 1;
    public static final int CUR_BANKER_FIELD_NUMBER = 1;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_banker = 1;</code>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // optional int32 no_out_socre_count = 2;
    public static final int NO_OUT_SOCRE_COUNT_FIELD_NUMBER = 2;
    private int noOutSocreCount_;
    /**
     * <code>optional int32 no_out_socre_count = 2;</code>
     *
     * <pre>
     * 未出分数数量
     * </pre>
     */
    public boolean hasNoOutSocreCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 no_out_socre_count = 2;</code>
     *
     * <pre>
     * 未出分数数量
     * </pre>
     */
    public int getNoOutSocreCount() {
      return noOutSocreCount_;
    }

    // repeated int32 no_out_socres = 3;
    public static final int NO_OUT_SOCRES_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> noOutSocres_;
    /**
     * <code>repeated int32 no_out_socres = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getNoOutSocresList() {
      return noOutSocres_;
    }
    /**
     * <code>repeated int32 no_out_socres = 3;</code>
     */
    public int getNoOutSocresCount() {
      return noOutSocres_.size();
    }
    /**
     * <code>repeated int32 no_out_socres = 3;</code>
     */
    public int getNoOutSocres(int index) {
      return noOutSocres_.get(index);
    }

    // optional int32 out_socre_count = 4;
    public static final int OUT_SOCRE_COUNT_FIELD_NUMBER = 4;
    private int outSocreCount_;
    /**
     * <code>optional int32 out_socre_count = 4;</code>
     *
     * <pre>
     * 已出分数数量
     * </pre>
     */
    public boolean hasOutSocreCount() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 out_socre_count = 4;</code>
     *
     * <pre>
     * 已出分数数量
     * </pre>
     */
    public int getOutSocreCount() {
      return outSocreCount_;
    }

    // repeated int32 out_socres = 5;
    public static final int OUT_SOCRES_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> outSocres_;
    /**
     * <code>repeated int32 out_socres = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getOutSocresList() {
      return outSocres_;
    }
    /**
     * <code>repeated int32 out_socres = 5;</code>
     */
    public int getOutSocresCount() {
      return outSocres_.size();
    }
    /**
     * <code>repeated int32 out_socres = 5;</code>
     */
    public int getOutSocres(int index) {
      return outSocres_.get(index);
    }

    private void initFields() {
      curBanker_ = 0;
      noOutSocreCount_ = 0;
      noOutSocres_ = java.util.Collections.emptyList();
      outSocreCount_ = 0;
      outSocres_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curBanker_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, noOutSocreCount_);
      }
      for (int i = 0; i < noOutSocres_.size(); i++) {
        output.writeInt32(3, noOutSocres_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, outSocreCount_);
      }
      for (int i = 0; i < outSocres_.size(); i++) {
        output.writeInt32(5, outSocres_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curBanker_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, noOutSocreCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < noOutSocres_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(noOutSocres_.get(i));
        }
        size += dataSize;
        size += 1 * getNoOutSocresList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, outSocreCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outSocres_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outSocres_.get(i));
        }
        size += dataSize;
        size += 1 * getOutSocresList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dzd.DzdRsp.GameScore_DZD parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameScore_DZD parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameScore_DZD parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameScore_DZD parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameScore_DZD parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameScore_DZD parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameScore_DZD parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameScore_DZD parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameScore_DZD parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dzd.DzdRsp.GameScore_DZD parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dzd.DzdRsp.GameScore_DZD prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzd.GameScore_DZD}
     *
     * <pre>
     * 本局游戏分数信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dzd.DzdRsp.GameScore_DZDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_GameScore_DZD_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_GameScore_DZD_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dzd.DzdRsp.GameScore_DZD.class, protobuf.clazz.dzd.DzdRsp.GameScore_DZD.Builder.class);
      }

      // Construct using protobuf.clazz.dzd.DzdRsp.GameScore_DZD.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        noOutSocreCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        noOutSocres_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        outSocreCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        outSocres_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dzd.DzdRsp.internal_static_dzd_GameScore_DZD_descriptor;
      }

      public protobuf.clazz.dzd.DzdRsp.GameScore_DZD getDefaultInstanceForType() {
        return protobuf.clazz.dzd.DzdRsp.GameScore_DZD.getDefaultInstance();
      }

      public protobuf.clazz.dzd.DzdRsp.GameScore_DZD build() {
        protobuf.clazz.dzd.DzdRsp.GameScore_DZD result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dzd.DzdRsp.GameScore_DZD buildPartial() {
        protobuf.clazz.dzd.DzdRsp.GameScore_DZD result = new protobuf.clazz.dzd.DzdRsp.GameScore_DZD(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curBanker_ = curBanker_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.noOutSocreCount_ = noOutSocreCount_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          noOutSocres_ = java.util.Collections.unmodifiableList(noOutSocres_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.noOutSocres_ = noOutSocres_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.outSocreCount_ = outSocreCount_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          outSocres_ = java.util.Collections.unmodifiableList(outSocres_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.outSocres_ = outSocres_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dzd.DzdRsp.GameScore_DZD) {
          return mergeFrom((protobuf.clazz.dzd.DzdRsp.GameScore_DZD)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dzd.DzdRsp.GameScore_DZD other) {
        if (other == protobuf.clazz.dzd.DzdRsp.GameScore_DZD.getDefaultInstance()) return this;
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (other.hasNoOutSocreCount()) {
          setNoOutSocreCount(other.getNoOutSocreCount());
        }
        if (!other.noOutSocres_.isEmpty()) {
          if (noOutSocres_.isEmpty()) {
            noOutSocres_ = other.noOutSocres_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureNoOutSocresIsMutable();
            noOutSocres_.addAll(other.noOutSocres_);
          }
          onChanged();
        }
        if (other.hasOutSocreCount()) {
          setOutSocreCount(other.getOutSocreCount());
        }
        if (!other.outSocres_.isEmpty()) {
          if (outSocres_.isEmpty()) {
            outSocres_ = other.outSocres_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureOutSocresIsMutable();
            outSocres_.addAll(other.outSocres_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dzd.DzdRsp.GameScore_DZD parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dzd.DzdRsp.GameScore_DZD) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_banker = 1;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 1;</code>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000001;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // optional int32 no_out_socre_count = 2;
      private int noOutSocreCount_ ;
      /**
       * <code>optional int32 no_out_socre_count = 2;</code>
       *
       * <pre>
       * 未出分数数量
       * </pre>
       */
      public boolean hasNoOutSocreCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 no_out_socre_count = 2;</code>
       *
       * <pre>
       * 未出分数数量
       * </pre>
       */
      public int getNoOutSocreCount() {
        return noOutSocreCount_;
      }
      /**
       * <code>optional int32 no_out_socre_count = 2;</code>
       *
       * <pre>
       * 未出分数数量
       * </pre>
       */
      public Builder setNoOutSocreCount(int value) {
        bitField0_ |= 0x00000002;
        noOutSocreCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 no_out_socre_count = 2;</code>
       *
       * <pre>
       * 未出分数数量
       * </pre>
       */
      public Builder clearNoOutSocreCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        noOutSocreCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 no_out_socres = 3;
      private java.util.List<java.lang.Integer> noOutSocres_ = java.util.Collections.emptyList();
      private void ensureNoOutSocresIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          noOutSocres_ = new java.util.ArrayList<java.lang.Integer>(noOutSocres_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 no_out_socres = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getNoOutSocresList() {
        return java.util.Collections.unmodifiableList(noOutSocres_);
      }
      /**
       * <code>repeated int32 no_out_socres = 3;</code>
       */
      public int getNoOutSocresCount() {
        return noOutSocres_.size();
      }
      /**
       * <code>repeated int32 no_out_socres = 3;</code>
       */
      public int getNoOutSocres(int index) {
        return noOutSocres_.get(index);
      }
      /**
       * <code>repeated int32 no_out_socres = 3;</code>
       */
      public Builder setNoOutSocres(
          int index, int value) {
        ensureNoOutSocresIsMutable();
        noOutSocres_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 no_out_socres = 3;</code>
       */
      public Builder addNoOutSocres(int value) {
        ensureNoOutSocresIsMutable();
        noOutSocres_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 no_out_socres = 3;</code>
       */
      public Builder addAllNoOutSocres(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureNoOutSocresIsMutable();
        super.addAll(values, noOutSocres_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 no_out_socres = 3;</code>
       */
      public Builder clearNoOutSocres() {
        noOutSocres_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 out_socre_count = 4;
      private int outSocreCount_ ;
      /**
       * <code>optional int32 out_socre_count = 4;</code>
       *
       * <pre>
       * 已出分数数量
       * </pre>
       */
      public boolean hasOutSocreCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 out_socre_count = 4;</code>
       *
       * <pre>
       * 已出分数数量
       * </pre>
       */
      public int getOutSocreCount() {
        return outSocreCount_;
      }
      /**
       * <code>optional int32 out_socre_count = 4;</code>
       *
       * <pre>
       * 已出分数数量
       * </pre>
       */
      public Builder setOutSocreCount(int value) {
        bitField0_ |= 0x00000008;
        outSocreCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_socre_count = 4;</code>
       *
       * <pre>
       * 已出分数数量
       * </pre>
       */
      public Builder clearOutSocreCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        outSocreCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 out_socres = 5;
      private java.util.List<java.lang.Integer> outSocres_ = java.util.Collections.emptyList();
      private void ensureOutSocresIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outSocres_ = new java.util.ArrayList<java.lang.Integer>(outSocres_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 out_socres = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getOutSocresList() {
        return java.util.Collections.unmodifiableList(outSocres_);
      }
      /**
       * <code>repeated int32 out_socres = 5;</code>
       */
      public int getOutSocresCount() {
        return outSocres_.size();
      }
      /**
       * <code>repeated int32 out_socres = 5;</code>
       */
      public int getOutSocres(int index) {
        return outSocres_.get(index);
      }
      /**
       * <code>repeated int32 out_socres = 5;</code>
       */
      public Builder setOutSocres(
          int index, int value) {
        ensureOutSocresIsMutable();
        outSocres_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_socres = 5;</code>
       */
      public Builder addOutSocres(int value) {
        ensureOutSocresIsMutable();
        outSocres_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_socres = 5;</code>
       */
      public Builder addAllOutSocres(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutSocresIsMutable();
        super.addAll(values, outSocres_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_socres = 5;</code>
       */
      public Builder clearOutSocres() {
        outSocres_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dzd.GameScore_DZD)
    }

    static {
      defaultInstance = new GameScore_DZD(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzd.GameScore_DZD)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dzd_RoomInfoDZD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzd_RoomInfoDZD_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dzd_RoomPlayerResponseDZD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzd_RoomPlayerResponseDZD_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dzd_RefreshCardsDZD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzd_RefreshCardsDZD_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dzd_OutCardDataDZD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzd_OutCardDataDZD_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dzd_PukeGameEndDZD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzd_PukeGameEndDZD_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dzd_TableResponse_DZD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzd_TableResponse_DZD_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dzd_GameStart_DZD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzd_GameStart_DZD_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dzd_GameScore_DZD_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzd_GameScore_DZD_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022dzd/dzdProto.proto\022\003dzd\032\024basic/protoco" +
      "l.proto\"\237\002\n\013RoomInfoDZD\022\017\n\007room_id\030\001 \001(\005" +
      "\022\027\n\017game_type_index\030\004 \001(\005\022\027\n\017game_rule_i" +
      "ndex\030\002 \001(\005\022\032\n\022game_rule_index_ex\030\014 \003(\005\022\025" +
      "\n\rgame_rule_des\030\003 \001(\t\022\022\n\ngame_round\030\005 \001(" +
      "\005\022\021\n\tcur_round\030\006 \001(\005\022\023\n\013game_status\030\007 \001(" +
      "\005\022\030\n\020create_player_id\030\010 \001(\003\022\027\n\017begin_lef" +
      "t_card\030\t \001(\005\022\026\n\016_banker_player\030\n \001(\005\022\023\n\013" +
      "create_name\030\013 \001(\t\"\270\002\n\025RoomPlayerResponse" +
      "DZD\022\022\n\naccount_id\030\001 \001(\003\022\021\n\tuser_name\030\002 \001",
      "(\t\022\024\n\014head_img_url\030\003 \001(\t\022\022\n\nseat_index\030\004" +
      " \001(\005\022\n\n\002ip\030\005 \001(\t\022\016\n\006online\030\006 \001(\005\022\013\n\003sex\030" +
      "\007 \001(\005\022\r\n\005score\030\010 \001(\002\022\r\n\005ready\030\t \001(\005\022\017\n\007i" +
      "p_addr\030\n \001(\t\022%\n\rlocationInfor\030\013 \001(\0132\016.Lo" +
      "cationInfor\022\022\n\nis_trustee\030\014 \001(\010\022\r\n\005money" +
      "\030\r \001(\003\022\014\n\004gold\030\016 \001(\003\022\013\n\003you\030\017 \001(\005\022\021\n\tini" +
      "t_seat\030\020 \001(\005\"N\n\017RefreshCardsDZD\022\022\n\ncard_" +
      "count\030\001 \003(\005\022\'\n\ncards_data\030\002 \003(\0132\023.Int32A" +
      "rrayResponse\"\260\003\n\016OutCardDataDZD\022\027\n\017out_c" +
      "ard_player\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\031\n\021",
      "change_cards_data\030\003 \003(\005\022\023\n\013cards_count\030\004" +
      " \001(\005\022\021\n\tcard_type\030\005 \001(\005\022\022\n\ncur_player\030\006 " +
      "\001(\005\022\025\n\rpr_cards_data\030\007 \003(\005\022\034\n\024pr_change_" +
      "cards_data\030\010 \003(\005\022\026\n\016pr_cards_count\030\t \001(\005" +
      "\022\030\n\020pr_out_card_type\030\n \001(\005\022\024\n\014is_first_o" +
      "ut\030\013 \001(\010\022\024\n\014display_time\030\014 \001(\005\022\013\n\003you\030\r " +
      "\001(\005\022\021\n\tisNewTurn\030\016 \001(\010\022\022\n\nscore_card\030\017 \003" +
      "(\005\022\022\n\nscore_turn\030\020 \001(\005\022\025\n\rplayer_scores\030" +
      "\021 \003(\002\022\024\n\014round_scores\030\022 \003(\005\022\022\n\nedge_scor" +
      "e\030\023 \003(\005\"\231\003\n\016PukeGameEndDZD\022#\n\troom_info\030",
      "\001 \001(\0132\020.dzd.RoomInfoDZD\022\022\n\ncard_count\030\004 " +
      "\003(\005\022\'\n\ncards_data\030\005 \003(\0132\023.Int32ArrayResp" +
      "onse\022\021\n\tend_score\030\007 \003(\002\022\022\n\nplayer_num\030\010 " +
      "\001(\005\022\016\n\006reason\030\n \001(\005\022\013\n\003you\030\013 \003(\005\022\022\n\nburn" +
      "_score\030\014 \003(\005\022\023\n\013catch_score\030\r \003(\005\022\023\n\013ext" +
      "ra_score\030\016 \003(\005\022\021\n\tall_score\030\017 \003(\005\022\022\n\nord" +
      "er_seat\030\026 \003(\005\022\025\n\rall_end_score\030\021 \003(\002\022\025\n\r" +
      "end_score_max\030\022 \003(\005\022\017\n\007win_num\030\023 \003(\005\022\020\n\010" +
      "lose_num\030\024 \003(\005\022+\n\007players\030\025 \003(\0132\032.dzd.Ro" +
      "omPlayerResponseDZD\"\354\005\n\021TableResponse_DZ",
      "D\022\025\n\rbanker_player\030\001 \001(\005\022\026\n\016current_play" +
      "er\030\002 \001(\005\022\023\n\013prev_player\030\003 \001(\005\022\017\n\007trustee" +
      "\030\004 \003(\010\022+\n\016out_cards_data\030\005 \003(\0132\023.Int32Ar" +
      "rayResponse\022.\n\021change_cards_data\030\006 \003(\0132\023" +
      ".Int32ArrayResponse\022\027\n\017out_cards_count\030\007" +
      " \003(\005\022\023\n\013player_pass\030\010 \003(\005\022\021\n\tcard_type\030\t" +
      " \003(\005\022\032\n\022pr_out_card_player\030\n \001(\005\022\034\n\024pr_c" +
      "hange_cards_data\030\013 \003(\005\022\025\n\rpr_cards_data\030" +
      "\014 \003(\005\022\026\n\016pr_cards_count\030\r \001(\005\022\030\n\020pr_out_" +
      "card_type\030\016 \001(\005\022\022\n\nmagic_card\030\017 \001(\005\022\024\n\014i",
      "s_first_out\030\020 \001(\005\022\024\n\014display_time\030\021 \001(\005\022" +
      "\022\n\ncard_count\030\022 \003(\005\022\'\n\ncards_data\030\023 \003(\0132" +
      "\023.Int32ArrayResponse\022#\n\troom_info\030\024 \001(\0132" +
      "\020.dzd.RoomInfoDZD\022+\n\007players\030\025 \003(\0132\032.dzd" +
      ".RoomPlayerResponseDZD\022\022\n\nplayer_you\030\026 \003" +
      "(\005\022\022\n\nscore_card\030\030 \003(\005\022\023\n\013burn_scores\030\031 " +
      "\003(\005\022\025\n\rout_card_time\030\032 \001(\003\022\024\n\014round_scor" +
      "es\030\033 \003(\005\022\022\n\nedge_score\030\034 \003(\005\022\024\n\014player_s" +
      "core\030\035 \003(\002\"\356\001\n\rGameStart_DZD\022#\n\troom_inf" +
      "o\030\005 \001(\0132\020.dzd.RoomInfoDZD\022+\n\007players\030\007 \003",
      "(\0132\032.dzd.RoomPlayerResponseDZD\022\022\n\ncur_ba" +
      "nker\030\001 \001(\005\022\022\n\ncard_count\030\002 \003(\005\022\'\n\ncards_" +
      "data\030\003 \003(\0132\023.Int32ArrayResponse\022\021\n\tshow_" +
      "card\030\004 \001(\005\022\024\n\014display_time\030\006 \001(\005\022\021\n\tinit" +
      "_seat\030\010 \003(\005\"\203\001\n\rGameScore_DZD\022\022\n\ncur_ban" +
      "ker\030\001 \001(\005\022\032\n\022no_out_socre_count\030\002 \001(\005\022\025\n" +
      "\rno_out_socres\030\003 \003(\005\022\027\n\017out_socre_count\030" +
      "\004 \001(\005\022\022\n\nout_socres\030\005 \003(\005B\034\n\022protobuf.cl" +
      "azz.dzdB\006DzdRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_dzd_RoomInfoDZD_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_dzd_RoomInfoDZD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dzd_RoomInfoDZD_descriptor,
              new java.lang.String[] { "RoomId", "GameTypeIndex", "GameRuleIndex", "GameRuleIndexEx", "GameRuleDes", "GameRound", "CurRound", "GameStatus", "CreatePlayerId", "BeginLeftCard", "BankerPlayer", "CreateName", });
          internal_static_dzd_RoomPlayerResponseDZD_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_dzd_RoomPlayerResponseDZD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dzd_RoomPlayerResponseDZD_descriptor,
              new java.lang.String[] { "AccountId", "UserName", "HeadImgUrl", "SeatIndex", "Ip", "Online", "Sex", "Score", "Ready", "IpAddr", "LocationInfor", "IsTrustee", "Money", "Gold", "You", "InitSeat", });
          internal_static_dzd_RefreshCardsDZD_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_dzd_RefreshCardsDZD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dzd_RefreshCardsDZD_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", });
          internal_static_dzd_OutCardDataDZD_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_dzd_OutCardDataDZD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dzd_OutCardDataDZD_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "ChangeCardsData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrChangeCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "You", "IsNewTurn", "ScoreCard", "ScoreTurn", "PlayerScores", "RoundScores", "EdgeScore", });
          internal_static_dzd_PukeGameEndDZD_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_dzd_PukeGameEndDZD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dzd_PukeGameEndDZD_descriptor,
              new java.lang.String[] { "RoomInfo", "CardCount", "CardsData", "EndScore", "PlayerNum", "Reason", "You", "BurnScore", "CatchScore", "ExtraScore", "AllScore", "OrderSeat", "AllEndScore", "EndScoreMax", "WinNum", "LoseNum", "Players", });
          internal_static_dzd_TableResponse_DZD_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_dzd_TableResponse_DZD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dzd_TableResponse_DZD_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "ChangeCardsData", "OutCardsCount", "PlayerPass", "CardType", "PrOutCardPlayer", "PrChangeCardsData", "PrCardsData", "PrCardsCount", "PrOutCardType", "MagicCard", "IsFirstOut", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "PlayerYou", "ScoreCard", "BurnScores", "OutCardTime", "RoundScores", "EdgeScore", "PlayerScore", });
          internal_static_dzd_GameStart_DZD_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_dzd_GameStart_DZD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dzd_GameStart_DZD_descriptor,
              new java.lang.String[] { "RoomInfo", "Players", "CurBanker", "CardCount", "CardsData", "ShowCard", "DisplayTime", "InitSeat", });
          internal_static_dzd_GameScore_DZD_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_dzd_GameScore_DZD_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dzd_GameScore_DZD_descriptor,
              new java.lang.String[] { "CurBanker", "NoOutSocreCount", "NoOutSocres", "OutSocreCount", "OutSocres", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
