// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oxdata/oxdataProto.proto

package protobuf.clazz.oxdata;

public final class oxdataRsp {
  private oxdataRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RecordListOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_round = 1;
    /**
     * <code>optional int32 cur_round = 1;</code>
     *
     * <pre>
     *局数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 1;</code>
     *
     * <pre>
     *局数
     * </pre>
     */
    int getCurRound();

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 jetton_player = 3;
    /**
     * <code>repeated int32 jetton_player = 3;</code>
     *
     * <pre>
     *用户下注
     * </pre>
     */
    java.util.List<java.lang.Integer> getJettonPlayerList();
    /**
     * <code>repeated int32 jetton_player = 3;</code>
     *
     * <pre>
     *用户下注
     * </pre>
     */
    int getJettonPlayerCount();
    /**
     * <code>repeated int32 jetton_player = 3;</code>
     *
     * <pre>
     *用户下注
     * </pre>
     */
    int getJettonPlayer(int index);

    // repeated int32 end_score = 4;
    /**
     * <code>repeated int32 end_score = 4;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 4;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 4;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    int getEndScore(int index);

    // repeated int32 area_status = 5;
    /**
     * <code>repeated int32 area_status = 5;</code>
     *
     * <pre>
     *区域输赢
     * </pre>
     */
    java.util.List<java.lang.Integer> getAreaStatusList();
    /**
     * <code>repeated int32 area_status = 5;</code>
     *
     * <pre>
     *区域输赢
     * </pre>
     */
    int getAreaStatusCount();
    /**
     * <code>repeated int32 area_status = 5;</code>
     *
     * <pre>
     *区域输赢
     * </pre>
     */
    int getAreaStatus(int index);

    // optional int32 banker_seat = 6;
    /**
     * <code>optional int32 banker_seat = 6;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    boolean hasBankerSeat();
    /**
     * <code>optional int32 banker_seat = 6;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    int getBankerSeat();

    // repeated int32 call_banker = 7;
    /**
     * <code>repeated int32 call_banker = 7;</code>
     *
     * <pre>
     *抢庄数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCallBankerList();
    /**
     * <code>repeated int32 call_banker = 7;</code>
     *
     * <pre>
     *抢庄数据
     * </pre>
     */
    int getCallBankerCount();
    /**
     * <code>repeated int32 call_banker = 7;</code>
     *
     * <pre>
     *抢庄数据
     * </pre>
     */
    int getCallBanker(int index);

    // repeated int32 card_type = 8;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    int getCardType(int index);

    // repeated int32 card_times = 9;
    /**
     * <code>repeated int32 card_times = 9;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTimesList();
    /**
     * <code>repeated int32 card_times = 9;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getCardTimesCount();
    /**
     * <code>repeated int32 card_times = 9;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    int getCardTimes(int index);

    // repeated int32 buy_jetton_value = 10;
    /**
     * <code>repeated int32 buy_jetton_value = 10;</code>
     *
     * <pre>
     *买码数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getBuyJettonValueList();
    /**
     * <code>repeated int32 buy_jetton_value = 10;</code>
     *
     * <pre>
     *买码数据
     * </pre>
     */
    int getBuyJettonValueCount();
    /**
     * <code>repeated int32 buy_jetton_value = 10;</code>
     *
     * <pre>
     *买码数据
     * </pre>
     */
    int getBuyJettonValue(int index);

    // repeated int32 buy_jetton_area = 11;
    /**
     * <code>repeated int32 buy_jetton_area = 11;</code>
     *
     * <pre>
     *买码区域
     * </pre>
     */
    java.util.List<java.lang.Integer> getBuyJettonAreaList();
    /**
     * <code>repeated int32 buy_jetton_area = 11;</code>
     *
     * <pre>
     *买码区域
     * </pre>
     */
    int getBuyJettonAreaCount();
    /**
     * <code>repeated int32 buy_jetton_area = 11;</code>
     *
     * <pre>
     *买码区域
     * </pre>
     */
    int getBuyJettonArea(int index);

    // repeated bool player_status = 12;
    /**
     * <code>repeated bool player_status = 12;</code>
     *
     * <pre>
     *用户状态
     * </pre>
     */
    java.util.List<java.lang.Boolean> getPlayerStatusList();
    /**
     * <code>repeated bool player_status = 12;</code>
     *
     * <pre>
     *用户状态
     * </pre>
     */
    int getPlayerStatusCount();
    /**
     * <code>repeated bool player_status = 12;</code>
     *
     * <pre>
     *用户状态
     * </pre>
     */
    boolean getPlayerStatus(int index);

    // repeated .RoomPlayerResponse players = 13;
    /**
     * <code>repeated .RoomPlayerResponse players = 13;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 13;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 13;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 13;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 13;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code oxdata.RecordList}
   *
   * <pre>
   *战绩
   * </pre>
   */
  public static final class RecordList extends
      com.google.protobuf.GeneratedMessage
      implements RecordListOrBuilder {
    // Use RecordList.newBuilder() to construct.
    private RecordList(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RecordList(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RecordList defaultInstance;
    public static RecordList getDefaultInstance() {
      return defaultInstance;
    }

    public RecordList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RecordList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curRound_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                jettonPlayer_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              jettonPlayer_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                jettonPlayer_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                jettonPlayer_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                areaStatus_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              areaStatus_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                areaStatus_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                areaStatus_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000002;
              bankerSeat_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                callBanker_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              callBanker_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                callBanker_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                callBanker_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardTimes_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                cardTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardTimes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                buyJettonValue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              buyJettonValue_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                buyJettonValue_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                buyJettonValue_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                buyJettonArea_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              buyJettonArea_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                buyJettonArea_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                buyJettonArea_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                playerStatus_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000800;
              }
              playerStatus_.add(input.readBool());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                playerStatus_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerStatus_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 106: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00001000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          jettonPlayer_ = java.util.Collections.unmodifiableList(jettonPlayer_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          areaStatus_ = java.util.Collections.unmodifiableList(areaStatus_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          callBanker_ = java.util.Collections.unmodifiableList(callBanker_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardTimes_ = java.util.Collections.unmodifiableList(cardTimes_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          buyJettonValue_ = java.util.Collections.unmodifiableList(buyJettonValue_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          buyJettonArea_ = java.util.Collections.unmodifiableList(buyJettonArea_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          playerStatus_ = java.util.Collections.unmodifiableList(playerStatus_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.oxdata.oxdataRsp.internal_static_oxdata_RecordList_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.oxdata.oxdataRsp.internal_static_oxdata_RecordList_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.oxdata.oxdataRsp.RecordList.class, protobuf.clazz.oxdata.oxdataRsp.RecordList.Builder.class);
    }

    public static com.google.protobuf.Parser<RecordList> PARSER =
        new com.google.protobuf.AbstractParser<RecordList>() {
      public RecordList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RecordList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RecordList> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_round = 1;
    public static final int CUR_ROUND_FIELD_NUMBER = 1;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 1;</code>
     *
     * <pre>
     *局数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_round = 1;</code>
     *
     * <pre>
     *局数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 jetton_player = 3;
    public static final int JETTON_PLAYER_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> jettonPlayer_;
    /**
     * <code>repeated int32 jetton_player = 3;</code>
     *
     * <pre>
     *用户下注
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJettonPlayerList() {
      return jettonPlayer_;
    }
    /**
     * <code>repeated int32 jetton_player = 3;</code>
     *
     * <pre>
     *用户下注
     * </pre>
     */
    public int getJettonPlayerCount() {
      return jettonPlayer_.size();
    }
    /**
     * <code>repeated int32 jetton_player = 3;</code>
     *
     * <pre>
     *用户下注
     * </pre>
     */
    public int getJettonPlayer(int index) {
      return jettonPlayer_.get(index);
    }

    // repeated int32 end_score = 4;
    public static final int END_SCORE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 4;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 4;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 4;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // repeated int32 area_status = 5;
    public static final int AREA_STATUS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> areaStatus_;
    /**
     * <code>repeated int32 area_status = 5;</code>
     *
     * <pre>
     *区域输赢
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAreaStatusList() {
      return areaStatus_;
    }
    /**
     * <code>repeated int32 area_status = 5;</code>
     *
     * <pre>
     *区域输赢
     * </pre>
     */
    public int getAreaStatusCount() {
      return areaStatus_.size();
    }
    /**
     * <code>repeated int32 area_status = 5;</code>
     *
     * <pre>
     *区域输赢
     * </pre>
     */
    public int getAreaStatus(int index) {
      return areaStatus_.get(index);
    }

    // optional int32 banker_seat = 6;
    public static final int BANKER_SEAT_FIELD_NUMBER = 6;
    private int bankerSeat_;
    /**
     * <code>optional int32 banker_seat = 6;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public boolean hasBankerSeat() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 banker_seat = 6;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public int getBankerSeat() {
      return bankerSeat_;
    }

    // repeated int32 call_banker = 7;
    public static final int CALL_BANKER_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> callBanker_;
    /**
     * <code>repeated int32 call_banker = 7;</code>
     *
     * <pre>
     *抢庄数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCallBankerList() {
      return callBanker_;
    }
    /**
     * <code>repeated int32 call_banker = 7;</code>
     *
     * <pre>
     *抢庄数据
     * </pre>
     */
    public int getCallBankerCount() {
      return callBanker_.size();
    }
    /**
     * <code>repeated int32 call_banker = 7;</code>
     *
     * <pre>
     *抢庄数据
     * </pre>
     */
    public int getCallBanker(int index) {
      return callBanker_.get(index);
    }

    // repeated int32 card_type = 8;
    public static final int CARD_TYPE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *牌型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // repeated int32 card_times = 9;
    public static final int CARD_TIMES_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> cardTimes_;
    /**
     * <code>repeated int32 card_times = 9;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTimesList() {
      return cardTimes_;
    }
    /**
     * <code>repeated int32 card_times = 9;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getCardTimesCount() {
      return cardTimes_.size();
    }
    /**
     * <code>repeated int32 card_times = 9;</code>
     *
     * <pre>
     *倍数
     * </pre>
     */
    public int getCardTimes(int index) {
      return cardTimes_.get(index);
    }

    // repeated int32 buy_jetton_value = 10;
    public static final int BUY_JETTON_VALUE_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> buyJettonValue_;
    /**
     * <code>repeated int32 buy_jetton_value = 10;</code>
     *
     * <pre>
     *买码数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBuyJettonValueList() {
      return buyJettonValue_;
    }
    /**
     * <code>repeated int32 buy_jetton_value = 10;</code>
     *
     * <pre>
     *买码数据
     * </pre>
     */
    public int getBuyJettonValueCount() {
      return buyJettonValue_.size();
    }
    /**
     * <code>repeated int32 buy_jetton_value = 10;</code>
     *
     * <pre>
     *买码数据
     * </pre>
     */
    public int getBuyJettonValue(int index) {
      return buyJettonValue_.get(index);
    }

    // repeated int32 buy_jetton_area = 11;
    public static final int BUY_JETTON_AREA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> buyJettonArea_;
    /**
     * <code>repeated int32 buy_jetton_area = 11;</code>
     *
     * <pre>
     *买码区域
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBuyJettonAreaList() {
      return buyJettonArea_;
    }
    /**
     * <code>repeated int32 buy_jetton_area = 11;</code>
     *
     * <pre>
     *买码区域
     * </pre>
     */
    public int getBuyJettonAreaCount() {
      return buyJettonArea_.size();
    }
    /**
     * <code>repeated int32 buy_jetton_area = 11;</code>
     *
     * <pre>
     *买码区域
     * </pre>
     */
    public int getBuyJettonArea(int index) {
      return buyJettonArea_.get(index);
    }

    // repeated bool player_status = 12;
    public static final int PLAYER_STATUS_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Boolean> playerStatus_;
    /**
     * <code>repeated bool player_status = 12;</code>
     *
     * <pre>
     *用户状态
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getPlayerStatusList() {
      return playerStatus_;
    }
    /**
     * <code>repeated bool player_status = 12;</code>
     *
     * <pre>
     *用户状态
     * </pre>
     */
    public int getPlayerStatusCount() {
      return playerStatus_.size();
    }
    /**
     * <code>repeated bool player_status = 12;</code>
     *
     * <pre>
     *用户状态
     * </pre>
     */
    public boolean getPlayerStatus(int index) {
      return playerStatus_.get(index);
    }

    // repeated .RoomPlayerResponse players = 13;
    public static final int PLAYERS_FIELD_NUMBER = 13;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 13;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 13;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 13;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 13;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 13;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    private void initFields() {
      curRound_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      jettonPlayer_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      areaStatus_ = java.util.Collections.emptyList();
      bankerSeat_ = 0;
      callBanker_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      cardTimes_ = java.util.Collections.emptyList();
      buyJettonValue_ = java.util.Collections.emptyList();
      buyJettonArea_ = java.util.Collections.emptyList();
      playerStatus_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curRound_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      for (int i = 0; i < jettonPlayer_.size(); i++) {
        output.writeInt32(3, jettonPlayer_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(4, endScore_.get(i));
      }
      for (int i = 0; i < areaStatus_.size(); i++) {
        output.writeInt32(5, areaStatus_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(6, bankerSeat_);
      }
      for (int i = 0; i < callBanker_.size(); i++) {
        output.writeInt32(7, callBanker_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(8, cardType_.get(i));
      }
      for (int i = 0; i < cardTimes_.size(); i++) {
        output.writeInt32(9, cardTimes_.get(i));
      }
      for (int i = 0; i < buyJettonValue_.size(); i++) {
        output.writeInt32(10, buyJettonValue_.get(i));
      }
      for (int i = 0; i < buyJettonArea_.size(); i++) {
        output.writeInt32(11, buyJettonArea_.get(i));
      }
      for (int i = 0; i < playerStatus_.size(); i++) {
        output.writeBool(12, playerStatus_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(13, players_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curRound_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jettonPlayer_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jettonPlayer_.get(i));
        }
        size += dataSize;
        size += 1 * getJettonPlayerList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < areaStatus_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(areaStatus_.get(i));
        }
        size += dataSize;
        size += 1 * getAreaStatusList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, bankerSeat_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < callBanker_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callBanker_.get(i));
        }
        size += dataSize;
        size += 1 * getCallBankerList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardTimes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardTimes_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTimesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < buyJettonValue_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(buyJettonValue_.get(i));
        }
        size += dataSize;
        size += 1 * getBuyJettonValueList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < buyJettonArea_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(buyJettonArea_.get(i));
        }
        size += dataSize;
        size += 1 * getBuyJettonAreaList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getPlayerStatusList().size();
        size += dataSize;
        size += 1 * getPlayerStatusList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, players_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.oxdata.oxdataRsp.RecordList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.oxdata.oxdataRsp.RecordList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.oxdata.oxdataRsp.RecordList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.oxdata.oxdataRsp.RecordList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.oxdata.oxdataRsp.RecordList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.oxdata.oxdataRsp.RecordList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.oxdata.oxdataRsp.RecordList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.oxdata.oxdataRsp.RecordList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.oxdata.oxdataRsp.RecordList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.oxdata.oxdataRsp.RecordList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.oxdata.oxdataRsp.RecordList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code oxdata.RecordList}
     *
     * <pre>
     *战绩
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.oxdata.oxdataRsp.RecordListOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.oxdata.oxdataRsp.internal_static_oxdata_RecordList_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.oxdata.oxdataRsp.internal_static_oxdata_RecordList_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.oxdata.oxdataRsp.RecordList.class, protobuf.clazz.oxdata.oxdataRsp.RecordList.Builder.class);
      }

      // Construct using protobuf.clazz.oxdata.oxdataRsp.RecordList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        jettonPlayer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        areaStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        bankerSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        callBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        buyJettonValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        buyJettonArea_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        playerStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
        } else {
          playersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.oxdata.oxdataRsp.internal_static_oxdata_RecordList_descriptor;
      }

      public protobuf.clazz.oxdata.oxdataRsp.RecordList getDefaultInstanceForType() {
        return protobuf.clazz.oxdata.oxdataRsp.RecordList.getDefaultInstance();
      }

      public protobuf.clazz.oxdata.oxdataRsp.RecordList build() {
        protobuf.clazz.oxdata.oxdataRsp.RecordList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.oxdata.oxdataRsp.RecordList buildPartial() {
        protobuf.clazz.oxdata.oxdataRsp.RecordList result = new protobuf.clazz.oxdata.oxdataRsp.RecordList(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curRound_ = curRound_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          jettonPlayer_ = java.util.Collections.unmodifiableList(jettonPlayer_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.jettonPlayer_ = jettonPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.endScore_ = endScore_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          areaStatus_ = java.util.Collections.unmodifiableList(areaStatus_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.areaStatus_ = areaStatus_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bankerSeat_ = bankerSeat_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          callBanker_ = java.util.Collections.unmodifiableList(callBanker_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.callBanker_ = callBanker_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardType_ = cardType_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          cardTimes_ = java.util.Collections.unmodifiableList(cardTimes_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.cardTimes_ = cardTimes_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          buyJettonValue_ = java.util.Collections.unmodifiableList(buyJettonValue_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.buyJettonValue_ = buyJettonValue_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          buyJettonArea_ = java.util.Collections.unmodifiableList(buyJettonArea_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.buyJettonArea_ = buyJettonArea_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          playerStatus_ = java.util.Collections.unmodifiableList(playerStatus_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.playerStatus_ = playerStatus_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.oxdata.oxdataRsp.RecordList) {
          return mergeFrom((protobuf.clazz.oxdata.oxdataRsp.RecordList)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.oxdata.oxdataRsp.RecordList other) {
        if (other == protobuf.clazz.oxdata.oxdataRsp.RecordList.getDefaultInstance()) return this;
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.jettonPlayer_.isEmpty()) {
          if (jettonPlayer_.isEmpty()) {
            jettonPlayer_ = other.jettonPlayer_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureJettonPlayerIsMutable();
            jettonPlayer_.addAll(other.jettonPlayer_);
          }
          onChanged();
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (!other.areaStatus_.isEmpty()) {
          if (areaStatus_.isEmpty()) {
            areaStatus_ = other.areaStatus_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureAreaStatusIsMutable();
            areaStatus_.addAll(other.areaStatus_);
          }
          onChanged();
        }
        if (other.hasBankerSeat()) {
          setBankerSeat(other.getBankerSeat());
        }
        if (!other.callBanker_.isEmpty()) {
          if (callBanker_.isEmpty()) {
            callBanker_ = other.callBanker_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureCallBankerIsMutable();
            callBanker_.addAll(other.callBanker_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (!other.cardTimes_.isEmpty()) {
          if (cardTimes_.isEmpty()) {
            cardTimes_ = other.cardTimes_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCardTimesIsMutable();
            cardTimes_.addAll(other.cardTimes_);
          }
          onChanged();
        }
        if (!other.buyJettonValue_.isEmpty()) {
          if (buyJettonValue_.isEmpty()) {
            buyJettonValue_ = other.buyJettonValue_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureBuyJettonValueIsMutable();
            buyJettonValue_.addAll(other.buyJettonValue_);
          }
          onChanged();
        }
        if (!other.buyJettonArea_.isEmpty()) {
          if (buyJettonArea_.isEmpty()) {
            buyJettonArea_ = other.buyJettonArea_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureBuyJettonAreaIsMutable();
            buyJettonArea_.addAll(other.buyJettonArea_);
          }
          onChanged();
        }
        if (!other.playerStatus_.isEmpty()) {
          if (playerStatus_.isEmpty()) {
            playerStatus_ = other.playerStatus_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensurePlayerStatusIsMutable();
            playerStatus_.addAll(other.playerStatus_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00001000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.oxdata.oxdataRsp.RecordList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.oxdata.oxdataRsp.RecordList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_round = 1;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 1;</code>
       *
       * <pre>
       *局数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_round = 1;</code>
       *
       * <pre>
       *局数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 1;</code>
       *
       * <pre>
       *局数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000001;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 1;</code>
       *
       * <pre>
       *局数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 jetton_player = 3;
      private java.util.List<java.lang.Integer> jettonPlayer_ = java.util.Collections.emptyList();
      private void ensureJettonPlayerIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          jettonPlayer_ = new java.util.ArrayList<java.lang.Integer>(jettonPlayer_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 jetton_player = 3;</code>
       *
       * <pre>
       *用户下注
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJettonPlayerList() {
        return java.util.Collections.unmodifiableList(jettonPlayer_);
      }
      /**
       * <code>repeated int32 jetton_player = 3;</code>
       *
       * <pre>
       *用户下注
       * </pre>
       */
      public int getJettonPlayerCount() {
        return jettonPlayer_.size();
      }
      /**
       * <code>repeated int32 jetton_player = 3;</code>
       *
       * <pre>
       *用户下注
       * </pre>
       */
      public int getJettonPlayer(int index) {
        return jettonPlayer_.get(index);
      }
      /**
       * <code>repeated int32 jetton_player = 3;</code>
       *
       * <pre>
       *用户下注
       * </pre>
       */
      public Builder setJettonPlayer(
          int index, int value) {
        ensureJettonPlayerIsMutable();
        jettonPlayer_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jetton_player = 3;</code>
       *
       * <pre>
       *用户下注
       * </pre>
       */
      public Builder addJettonPlayer(int value) {
        ensureJettonPlayerIsMutable();
        jettonPlayer_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jetton_player = 3;</code>
       *
       * <pre>
       *用户下注
       * </pre>
       */
      public Builder addAllJettonPlayer(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJettonPlayerIsMutable();
        super.addAll(values, jettonPlayer_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jetton_player = 3;</code>
       *
       * <pre>
       *用户下注
       * </pre>
       */
      public Builder clearJettonPlayer() {
        jettonPlayer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated int32 end_score = 4;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 end_score = 4;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 4;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 4;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 4;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 4;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 4;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 4;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated int32 area_status = 5;
      private java.util.List<java.lang.Integer> areaStatus_ = java.util.Collections.emptyList();
      private void ensureAreaStatusIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          areaStatus_ = new java.util.ArrayList<java.lang.Integer>(areaStatus_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 area_status = 5;</code>
       *
       * <pre>
       *区域输赢
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAreaStatusList() {
        return java.util.Collections.unmodifiableList(areaStatus_);
      }
      /**
       * <code>repeated int32 area_status = 5;</code>
       *
       * <pre>
       *区域输赢
       * </pre>
       */
      public int getAreaStatusCount() {
        return areaStatus_.size();
      }
      /**
       * <code>repeated int32 area_status = 5;</code>
       *
       * <pre>
       *区域输赢
       * </pre>
       */
      public int getAreaStatus(int index) {
        return areaStatus_.get(index);
      }
      /**
       * <code>repeated int32 area_status = 5;</code>
       *
       * <pre>
       *区域输赢
       * </pre>
       */
      public Builder setAreaStatus(
          int index, int value) {
        ensureAreaStatusIsMutable();
        areaStatus_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 area_status = 5;</code>
       *
       * <pre>
       *区域输赢
       * </pre>
       */
      public Builder addAreaStatus(int value) {
        ensureAreaStatusIsMutable();
        areaStatus_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 area_status = 5;</code>
       *
       * <pre>
       *区域输赢
       * </pre>
       */
      public Builder addAllAreaStatus(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAreaStatusIsMutable();
        super.addAll(values, areaStatus_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 area_status = 5;</code>
       *
       * <pre>
       *区域输赢
       * </pre>
       */
      public Builder clearAreaStatus() {
        areaStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // optional int32 banker_seat = 6;
      private int bankerSeat_ ;
      /**
       * <code>optional int32 banker_seat = 6;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public boolean hasBankerSeat() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 banker_seat = 6;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public int getBankerSeat() {
        return bankerSeat_;
      }
      /**
       * <code>optional int32 banker_seat = 6;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder setBankerSeat(int value) {
        bitField0_ |= 0x00000020;
        bankerSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_seat = 6;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder clearBankerSeat() {
        bitField0_ = (bitField0_ & ~0x00000020);
        bankerSeat_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 call_banker = 7;
      private java.util.List<java.lang.Integer> callBanker_ = java.util.Collections.emptyList();
      private void ensureCallBankerIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          callBanker_ = new java.util.ArrayList<java.lang.Integer>(callBanker_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 call_banker = 7;</code>
       *
       * <pre>
       *抢庄数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCallBankerList() {
        return java.util.Collections.unmodifiableList(callBanker_);
      }
      /**
       * <code>repeated int32 call_banker = 7;</code>
       *
       * <pre>
       *抢庄数据
       * </pre>
       */
      public int getCallBankerCount() {
        return callBanker_.size();
      }
      /**
       * <code>repeated int32 call_banker = 7;</code>
       *
       * <pre>
       *抢庄数据
       * </pre>
       */
      public int getCallBanker(int index) {
        return callBanker_.get(index);
      }
      /**
       * <code>repeated int32 call_banker = 7;</code>
       *
       * <pre>
       *抢庄数据
       * </pre>
       */
      public Builder setCallBanker(
          int index, int value) {
        ensureCallBankerIsMutable();
        callBanker_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker = 7;</code>
       *
       * <pre>
       *抢庄数据
       * </pre>
       */
      public Builder addCallBanker(int value) {
        ensureCallBankerIsMutable();
        callBanker_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker = 7;</code>
       *
       * <pre>
       *抢庄数据
       * </pre>
       */
      public Builder addAllCallBanker(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallBankerIsMutable();
        super.addAll(values, callBanker_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker = 7;</code>
       *
       * <pre>
       *抢庄数据
       * </pre>
       */
      public Builder clearCallBanker() {
        callBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 8;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *牌型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 card_times = 9;
      private java.util.List<java.lang.Integer> cardTimes_ = java.util.Collections.emptyList();
      private void ensureCardTimesIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardTimes_ = new java.util.ArrayList<java.lang.Integer>(cardTimes_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 card_times = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTimesList() {
        return java.util.Collections.unmodifiableList(cardTimes_);
      }
      /**
       * <code>repeated int32 card_times = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getCardTimesCount() {
        return cardTimes_.size();
      }
      /**
       * <code>repeated int32 card_times = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public int getCardTimes(int index) {
        return cardTimes_.get(index);
      }
      /**
       * <code>repeated int32 card_times = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder setCardTimes(
          int index, int value) {
        ensureCardTimesIsMutable();
        cardTimes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_times = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder addCardTimes(int value) {
        ensureCardTimesIsMutable();
        cardTimes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_times = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder addAllCardTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTimesIsMutable();
        super.addAll(values, cardTimes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_times = 9;</code>
       *
       * <pre>
       *倍数
       * </pre>
       */
      public Builder clearCardTimes() {
        cardTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated int32 buy_jetton_value = 10;
      private java.util.List<java.lang.Integer> buyJettonValue_ = java.util.Collections.emptyList();
      private void ensureBuyJettonValueIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          buyJettonValue_ = new java.util.ArrayList<java.lang.Integer>(buyJettonValue_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 buy_jetton_value = 10;</code>
       *
       * <pre>
       *买码数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBuyJettonValueList() {
        return java.util.Collections.unmodifiableList(buyJettonValue_);
      }
      /**
       * <code>repeated int32 buy_jetton_value = 10;</code>
       *
       * <pre>
       *买码数据
       * </pre>
       */
      public int getBuyJettonValueCount() {
        return buyJettonValue_.size();
      }
      /**
       * <code>repeated int32 buy_jetton_value = 10;</code>
       *
       * <pre>
       *买码数据
       * </pre>
       */
      public int getBuyJettonValue(int index) {
        return buyJettonValue_.get(index);
      }
      /**
       * <code>repeated int32 buy_jetton_value = 10;</code>
       *
       * <pre>
       *买码数据
       * </pre>
       */
      public Builder setBuyJettonValue(
          int index, int value) {
        ensureBuyJettonValueIsMutable();
        buyJettonValue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 buy_jetton_value = 10;</code>
       *
       * <pre>
       *买码数据
       * </pre>
       */
      public Builder addBuyJettonValue(int value) {
        ensureBuyJettonValueIsMutable();
        buyJettonValue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 buy_jetton_value = 10;</code>
       *
       * <pre>
       *买码数据
       * </pre>
       */
      public Builder addAllBuyJettonValue(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBuyJettonValueIsMutable();
        super.addAll(values, buyJettonValue_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 buy_jetton_value = 10;</code>
       *
       * <pre>
       *买码数据
       * </pre>
       */
      public Builder clearBuyJettonValue() {
        buyJettonValue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 buy_jetton_area = 11;
      private java.util.List<java.lang.Integer> buyJettonArea_ = java.util.Collections.emptyList();
      private void ensureBuyJettonAreaIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          buyJettonArea_ = new java.util.ArrayList<java.lang.Integer>(buyJettonArea_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 buy_jetton_area = 11;</code>
       *
       * <pre>
       *买码区域
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBuyJettonAreaList() {
        return java.util.Collections.unmodifiableList(buyJettonArea_);
      }
      /**
       * <code>repeated int32 buy_jetton_area = 11;</code>
       *
       * <pre>
       *买码区域
       * </pre>
       */
      public int getBuyJettonAreaCount() {
        return buyJettonArea_.size();
      }
      /**
       * <code>repeated int32 buy_jetton_area = 11;</code>
       *
       * <pre>
       *买码区域
       * </pre>
       */
      public int getBuyJettonArea(int index) {
        return buyJettonArea_.get(index);
      }
      /**
       * <code>repeated int32 buy_jetton_area = 11;</code>
       *
       * <pre>
       *买码区域
       * </pre>
       */
      public Builder setBuyJettonArea(
          int index, int value) {
        ensureBuyJettonAreaIsMutable();
        buyJettonArea_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 buy_jetton_area = 11;</code>
       *
       * <pre>
       *买码区域
       * </pre>
       */
      public Builder addBuyJettonArea(int value) {
        ensureBuyJettonAreaIsMutable();
        buyJettonArea_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 buy_jetton_area = 11;</code>
       *
       * <pre>
       *买码区域
       * </pre>
       */
      public Builder addAllBuyJettonArea(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBuyJettonAreaIsMutable();
        super.addAll(values, buyJettonArea_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 buy_jetton_area = 11;</code>
       *
       * <pre>
       *买码区域
       * </pre>
       */
      public Builder clearBuyJettonArea() {
        buyJettonArea_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated bool player_status = 12;
      private java.util.List<java.lang.Boolean> playerStatus_ = java.util.Collections.emptyList();
      private void ensurePlayerStatusIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          playerStatus_ = new java.util.ArrayList<java.lang.Boolean>(playerStatus_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated bool player_status = 12;</code>
       *
       * <pre>
       *用户状态
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getPlayerStatusList() {
        return java.util.Collections.unmodifiableList(playerStatus_);
      }
      /**
       * <code>repeated bool player_status = 12;</code>
       *
       * <pre>
       *用户状态
       * </pre>
       */
      public int getPlayerStatusCount() {
        return playerStatus_.size();
      }
      /**
       * <code>repeated bool player_status = 12;</code>
       *
       * <pre>
       *用户状态
       * </pre>
       */
      public boolean getPlayerStatus(int index) {
        return playerStatus_.get(index);
      }
      /**
       * <code>repeated bool player_status = 12;</code>
       *
       * <pre>
       *用户状态
       * </pre>
       */
      public Builder setPlayerStatus(
          int index, boolean value) {
        ensurePlayerStatusIsMutable();
        playerStatus_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool player_status = 12;</code>
       *
       * <pre>
       *用户状态
       * </pre>
       */
      public Builder addPlayerStatus(boolean value) {
        ensurePlayerStatusIsMutable();
        playerStatus_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool player_status = 12;</code>
       *
       * <pre>
       *用户状态
       * </pre>
       */
      public Builder addAllPlayerStatus(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensurePlayerStatusIsMutable();
        super.addAll(values, playerStatus_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool player_status = 12;</code>
       *
       * <pre>
       *用户状态
       * </pre>
       */
      public Builder clearPlayerStatus() {
        playerStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 13;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00001000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 13;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00001000) == 0x00001000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:oxdata.RecordList)
    }

    static {
      defaultInstance = new RecordList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:oxdata.RecordList)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_oxdata_RecordList_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_oxdata_RecordList_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030oxdata/oxdataProto.proto\022\006oxdata\032\024basi" +
      "c/protocol.proto\"\310\002\n\nRecordList\022\021\n\tcur_r" +
      "ound\030\001 \001(\005\022\'\n\ncards_data\030\002 \003(\0132\023.Int32Ar" +
      "rayResponse\022\025\n\rjetton_player\030\003 \003(\005\022\021\n\ten" +
      "d_score\030\004 \003(\005\022\023\n\013area_status\030\005 \003(\005\022\023\n\013ba" +
      "nker_seat\030\006 \001(\005\022\023\n\013call_banker\030\007 \003(\005\022\021\n\t" +
      "card_type\030\010 \003(\005\022\022\n\ncard_times\030\t \003(\005\022\030\n\020b" +
      "uy_jetton_value\030\n \003(\005\022\027\n\017buy_jetton_area" +
      "\030\013 \003(\005\022\025\n\rplayer_status\030\014 \003(\010\022$\n\007players" +
      "\030\r \003(\0132\023.RoomPlayerResponseB\"\n\025protobuf.",
      "clazz.oxdataB\toxdataRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_oxdata_RecordList_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_oxdata_RecordList_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_oxdata_RecordList_descriptor,
              new java.lang.String[] { "CurRound", "CardsData", "JettonPlayer", "EndScore", "AreaStatus", "BankerSeat", "CallBanker", "CardType", "CardTimes", "BuyJettonValue", "BuyJettonArea", "PlayerStatus", "Players", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
