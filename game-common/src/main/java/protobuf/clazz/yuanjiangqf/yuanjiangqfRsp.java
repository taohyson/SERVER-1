// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yyqf/yjqf.proto

package protobuf.clazz.yuanjiangqf;

public final class yuanjiangqfRsp {
  private yuanjiangqfRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GameStart_yjqfOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 2;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code yjqf.GameStart_yjqf}
   *
   * <pre>
   *游戏开始 1001
   * </pre>
   */
  public static final class GameStart_yjqf extends
      com.google.protobuf.GeneratedMessage
      implements GameStart_yjqfOrBuilder {
    // Use GameStart_yjqf.newBuilder() to construct.
    private GameStart_yjqf(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStart_yjqf(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStart_yjqf defaultInstance;
    public static GameStart_yjqf getDefaultInstance() {
      return defaultInstance;
    }

    public GameStart_yjqf getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStart_yjqf(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_GameStart_yjqf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_GameStart_yjqf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStart_yjqf> PARSER =
        new com.google.protobuf.AbstractParser<GameStart_yjqf>() {
      public GameStart_yjqf parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStart_yjqf(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStart_yjqf> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 2;
    public static final int PLAYERS_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(2, players_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, players_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.GameStart_yjqf}
     *
     * <pre>
     *游戏开始 1001
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqfOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_GameStart_yjqf_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_GameStart_yjqf_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_GameStart_yjqf_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.GameStart_yjqf) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 2;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.GameStart_yjqf)
    }

    static {
      defaultInstance = new GameStart_yjqf(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.GameStart_yjqf)
  }

  public interface SendCard_yjqfOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_count = 1;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 base_cards_count = 3;
    /**
     * <code>optional int32 base_cards_count = 3;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    boolean hasBaseCardsCount();
    /**
     * <code>optional int32 base_cards_count = 3;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    int getBaseCardsCount();

    // repeated int32 base_cards_data = 4;
    /**
     * <code>repeated int32 base_cards_data = 4;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getBaseCardsDataList();
    /**
     * <code>repeated int32 base_cards_data = 4;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    int getBaseCardsDataCount();
    /**
     * <code>repeated int32 base_cards_data = 4;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    int getBaseCardsData(int index);

    // optional int32 display_time = 5;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code yjqf.SendCard_yjqf}
   *
   * <pre>
   *发牌 1003
   * </pre>
   */
  public static final class SendCard_yjqf extends
      com.google.protobuf.GeneratedMessage
      implements SendCard_yjqfOrBuilder {
    // Use SendCard_yjqf.newBuilder() to construct.
    private SendCard_yjqf(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SendCard_yjqf(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SendCard_yjqf defaultInstance;
    public static SendCard_yjqf getDefaultInstance() {
      return defaultInstance;
    }

    public SendCard_yjqf getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SendCard_yjqf(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              baseCardsCount_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                baseCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              baseCardsData_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                baseCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                baseCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          baseCardsData_ = java.util.Collections.unmodifiableList(baseCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_SendCard_yjqf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_SendCard_yjqf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf.Builder.class);
    }

    public static com.google.protobuf.Parser<SendCard_yjqf> PARSER =
        new com.google.protobuf.AbstractParser<SendCard_yjqf>() {
      public SendCard_yjqf parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SendCard_yjqf(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SendCard_yjqf> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 base_cards_count = 3;
    public static final int BASE_CARDS_COUNT_FIELD_NUMBER = 3;
    private int baseCardsCount_;
    /**
     * <code>optional int32 base_cards_count = 3;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    public boolean hasBaseCardsCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 base_cards_count = 3;</code>
     *
     * <pre>
     * 底牌数量
     * </pre>
     */
    public int getBaseCardsCount() {
      return baseCardsCount_;
    }

    // repeated int32 base_cards_data = 4;
    public static final int BASE_CARDS_DATA_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> baseCardsData_;
    /**
     * <code>repeated int32 base_cards_data = 4;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBaseCardsDataList() {
      return baseCardsData_;
    }
    /**
     * <code>repeated int32 base_cards_data = 4;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public int getBaseCardsDataCount() {
      return baseCardsData_.size();
    }
    /**
     * <code>repeated int32 base_cards_data = 4;</code>
     *
     * <pre>
     * 底牌列表
     * </pre>
     */
    public int getBaseCardsData(int index) {
      return baseCardsData_.get(index);
    }

    // optional int32 display_time = 5;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 5;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      baseCardsCount_ = 0;
      baseCardsData_ = java.util.Collections.emptyList();
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(1, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, baseCardsCount_);
      }
      for (int i = 0; i < baseCardsData_.size(); i++) {
        output.writeInt32(4, baseCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(5, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, baseCardsCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < baseCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(baseCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getBaseCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.SendCard_yjqf}
     *
     * <pre>
     *发牌 1003
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqfOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_SendCard_yjqf_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_SendCard_yjqf_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        baseCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        baseCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_SendCard_yjqf_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.baseCardsCount_ = baseCardsCount_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          baseCardsData_ = java.util.Collections.unmodifiableList(baseCardsData_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.baseCardsData_ = baseCardsData_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf.getDefaultInstance()) return this;
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasBaseCardsCount()) {
          setBaseCardsCount(other.getBaseCardsCount());
        }
        if (!other.baseCardsData_.isEmpty()) {
          if (baseCardsData_.isEmpty()) {
            baseCardsData_ = other.baseCardsData_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureBaseCardsDataIsMutable();
            baseCardsData_.addAll(other.baseCardsData_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.SendCard_yjqf) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_count = 1;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 base_cards_count = 3;
      private int baseCardsCount_ ;
      /**
       * <code>optional int32 base_cards_count = 3;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public boolean hasBaseCardsCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 base_cards_count = 3;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public int getBaseCardsCount() {
        return baseCardsCount_;
      }
      /**
       * <code>optional int32 base_cards_count = 3;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public Builder setBaseCardsCount(int value) {
        bitField0_ |= 0x00000004;
        baseCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 base_cards_count = 3;</code>
       *
       * <pre>
       * 底牌数量
       * </pre>
       */
      public Builder clearBaseCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        baseCardsCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 base_cards_data = 4;
      private java.util.List<java.lang.Integer> baseCardsData_ = java.util.Collections.emptyList();
      private void ensureBaseCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          baseCardsData_ = new java.util.ArrayList<java.lang.Integer>(baseCardsData_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 base_cards_data = 4;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBaseCardsDataList() {
        return java.util.Collections.unmodifiableList(baseCardsData_);
      }
      /**
       * <code>repeated int32 base_cards_data = 4;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public int getBaseCardsDataCount() {
        return baseCardsData_.size();
      }
      /**
       * <code>repeated int32 base_cards_data = 4;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public int getBaseCardsData(int index) {
        return baseCardsData_.get(index);
      }
      /**
       * <code>repeated int32 base_cards_data = 4;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder setBaseCardsData(
          int index, int value) {
        ensureBaseCardsDataIsMutable();
        baseCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 4;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder addBaseCardsData(int value) {
        ensureBaseCardsDataIsMutable();
        baseCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 4;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder addAllBaseCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBaseCardsDataIsMutable();
        super.addAll(values, baseCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 base_cards_data = 4;</code>
       *
       * <pre>
       * 底牌列表
       * </pre>
       */
      public Builder clearBaseCardsData() {
        baseCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional int32 display_time = 5;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000010;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.SendCard_yjqf)
    }

    static {
      defaultInstance = new SendCard_yjqf(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.SendCard_yjqf)
  }

  public interface OutCardDataWsk_yjqfOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_count = 3;
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 4;
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 5;
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 6;
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 7;
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 8;
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional bool is_first_out = 9;
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean getIsFirstOut();

    // optional int32 display_time = 10;
    /**
     * <code>optional int32 display_time = 10;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 10;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 user_can_out_data = 11;
    /**
     * <code>repeated int32 user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 12;
    /**
     * <code>optional int32 user_can_out_count = 12;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 12;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCount();

    // repeated int32 hand_card_count = 14;
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 15;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);

    // repeated int32 win_order = 16;
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // optional int32 is_current_first_out = 17;
    /**
     * <code>optional int32 is_current_first_out = 17;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    boolean hasIsCurrentFirstOut();
    /**
     * <code>optional int32 is_current_first_out = 17;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    int getIsCurrentFirstOut();
  }
  /**
   * Protobuf type {@code yjqf.OutCardDataWsk_yjqf}
   *
   * <pre>
   *用户出牌 1004
   * </pre>
   */
  public static final class OutCardDataWsk_yjqf extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataWsk_yjqfOrBuilder {
    // Use OutCardDataWsk_yjqf.newBuilder() to construct.
    private OutCardDataWsk_yjqf(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataWsk_yjqf(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataWsk_yjqf defaultInstance;
    public static OutCardDataWsk_yjqf getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataWsk_yjqf getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataWsk_yjqf(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              bitField0_ |= 0x00000100;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 122: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00002000;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              bitField0_ |= 0x00000200;
              isCurrentFirstOut_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_OutCardDataWsk_yjqf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_OutCardDataWsk_yjqf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataWsk_yjqf> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataWsk_yjqf>() {
      public OutCardDataWsk_yjqf parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataWsk_yjqf(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataWsk_yjqf> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_count = 3;
    public static final int CARDS_COUNT_FIELD_NUMBER = 3;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 4;
    public static final int CARD_TYPE_FIELD_NUMBER = 4;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 5;
    public static final int CUR_PLAYER_FIELD_NUMBER = 5;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 6;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 7;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 7;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 8;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 8;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional bool is_first_out = 9;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 9;
    private boolean isFirstOut_;
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 10;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 10;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 10;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 10;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 user_can_out_data = 11;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 12;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 12;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 12;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 user_can_out_count = 12;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // repeated int32 hand_card_count = 14;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 15;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 15;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    // repeated int32 win_order = 16;
    public static final int WIN_ORDER_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // optional int32 is_current_first_out = 17;
    public static final int IS_CURRENT_FIRST_OUT_FIELD_NUMBER = 17;
    private int isCurrentFirstOut_;
    /**
     * <code>optional int32 is_current_first_out = 17;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    public boolean hasIsCurrentFirstOut() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 is_current_first_out = 17;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    public int getIsCurrentFirstOut() {
      return isCurrentFirstOut_;
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = false;
      displayTime_ = 0;
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
      isCurrentFirstOut_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(6, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(9, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(10, displayTime_);
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(11, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(12, userCanOutCount_);
      }
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(14, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(15, handCardsData_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(16, winOrder_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(17, isCurrentFirstOut_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, userCanOutCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, handCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 2 * getWinOrderList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, isCurrentFirstOut_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.OutCardDataWsk_yjqf}
     *
     * <pre>
     *用户出牌 1004
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqfOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_OutCardDataWsk_yjqf_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_OutCardDataWsk_yjqf_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        isFirstOut_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          handCardsDataBuilder_.clear();
        }
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        isCurrentFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_OutCardDataWsk_yjqf_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000100;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.winOrder_ = winOrder_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isCurrentFirstOut_ = isCurrentFirstOut_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00002000);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (other.hasIsCurrentFirstOut()) {
          setIsCurrentFirstOut(other.getIsCurrentFirstOut());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.OutCardDataWsk_yjqf) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 3;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000004;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 4;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000008;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 5;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000010;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 6;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 7;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000040;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 8;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000080;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_first_out = 9;
      private boolean isFirstOut_ ;
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder setIsFirstOut(boolean value) {
        bitField0_ |= 0x00000100;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isFirstOut_ = false;
        onChanged();
        return this;
      }

      // optional int32 display_time = 10;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 10;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 display_time = 10;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 10;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000200;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 10;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000200);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_can_out_data = 11;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 12;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00000800;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00000800);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 hand_card_count = 14;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 15;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00002000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00002000) == 0x00002000),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // repeated int32 win_order = 16;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // optional int32 is_current_first_out = 17;
      private int isCurrentFirstOut_ ;
      /**
       * <code>optional int32 is_current_first_out = 17;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public boolean hasIsCurrentFirstOut() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 is_current_first_out = 17;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public int getIsCurrentFirstOut() {
        return isCurrentFirstOut_;
      }
      /**
       * <code>optional int32 is_current_first_out = 17;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public Builder setIsCurrentFirstOut(int value) {
        bitField0_ |= 0x00008000;
        isCurrentFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_current_first_out = 17;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public Builder clearIsCurrentFirstOut() {
        bitField0_ = (bitField0_ & ~0x00008000);
        isCurrentFirstOut_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.OutCardDataWsk_yjqf)
    }

    static {
      defaultInstance = new OutCardDataWsk_yjqf(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.OutCardDataWsk_yjqf)
  }

  public interface RefreshScore_yjqfOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bool is_reconnect = 1;
    /**
     * <code>optional bool is_reconnect = 1;</code>
     *
     * <pre>
     *是不是断线重连
     * </pre>
     */
    boolean hasIsReconnect();
    /**
     * <code>optional bool is_reconnect = 1;</code>
     *
     * <pre>
     *是不是断线重连
     * </pre>
     */
    boolean getIsReconnect();

    // repeated int32 ji_score = 2;
    /**
     * <code>repeated int32 ji_score = 2;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getJiScoreList();
    /**
     * <code>repeated int32 ji_score = 2;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getJiScoreCount();
    /**
     * <code>repeated int32 ji_score = 2;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getJiScore(int index);

    // repeated int32 xi_score = 3;
    /**
     * <code>repeated int32 xi_score = 3;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    java.util.List<java.lang.Integer> getXiScoreList();
    /**
     * <code>repeated int32 xi_score = 3;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    int getXiScoreCount();
    /**
     * <code>repeated int32 xi_score = 3;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    int getXiScore(int index);

    // repeated int32 all_ji_score = 4;
    /**
     * <code>repeated int32 all_ji_score = 4;</code>
     *
     * <pre>
     *总积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllJiScoreList();
    /**
     * <code>repeated int32 all_ji_score = 4;</code>
     *
     * <pre>
     *总积分
     * </pre>
     */
    int getAllJiScoreCount();
    /**
     * <code>repeated int32 all_ji_score = 4;</code>
     *
     * <pre>
     *总积分
     * </pre>
     */
    int getAllJiScore(int index);

    // repeated int32 all_xi_score = 5;
    /**
     * <code>repeated int32 all_xi_score = 5;</code>
     *
     * <pre>
     *总喜分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllXiScoreList();
    /**
     * <code>repeated int32 all_xi_score = 5;</code>
     *
     * <pre>
     *总喜分
     * </pre>
     */
    int getAllXiScoreCount();
    /**
     * <code>repeated int32 all_xi_score = 5;</code>
     *
     * <pre>
     *总喜分
     * </pre>
     */
    int getAllXiScore(int index);
  }
  /**
   * Protobuf type {@code yjqf.RefreshScore_yjqf}
   *
   * <pre>
   *刷新用户抓分 1006
   * </pre>
   */
  public static final class RefreshScore_yjqf extends
      com.google.protobuf.GeneratedMessage
      implements RefreshScore_yjqfOrBuilder {
    // Use RefreshScore_yjqf.newBuilder() to construct.
    private RefreshScore_yjqf(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshScore_yjqf(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshScore_yjqf defaultInstance;
    public static RefreshScore_yjqf getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshScore_yjqf getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshScore_yjqf(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isReconnect_ = input.readBool();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                jiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              jiScore_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                jiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                jiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                xiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              xiScore_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                xiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                xiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                allJiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              allJiScore_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                allJiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                allJiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                allXiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              allXiScore_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                allXiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                allXiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          jiScore_ = java.util.Collections.unmodifiableList(jiScore_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          xiScore_ = java.util.Collections.unmodifiableList(xiScore_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          allJiScore_ = java.util.Collections.unmodifiableList(allJiScore_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          allXiScore_ = java.util.Collections.unmodifiableList(allXiScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_RefreshScore_yjqf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_RefreshScore_yjqf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshScore_yjqf> PARSER =
        new com.google.protobuf.AbstractParser<RefreshScore_yjqf>() {
      public RefreshScore_yjqf parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshScore_yjqf(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshScore_yjqf> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool is_reconnect = 1;
    public static final int IS_RECONNECT_FIELD_NUMBER = 1;
    private boolean isReconnect_;
    /**
     * <code>optional bool is_reconnect = 1;</code>
     *
     * <pre>
     *是不是断线重连
     * </pre>
     */
    public boolean hasIsReconnect() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool is_reconnect = 1;</code>
     *
     * <pre>
     *是不是断线重连
     * </pre>
     */
    public boolean getIsReconnect() {
      return isReconnect_;
    }

    // repeated int32 ji_score = 2;
    public static final int JI_SCORE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> jiScore_;
    /**
     * <code>repeated int32 ji_score = 2;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJiScoreList() {
      return jiScore_;
    }
    /**
     * <code>repeated int32 ji_score = 2;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getJiScoreCount() {
      return jiScore_.size();
    }
    /**
     * <code>repeated int32 ji_score = 2;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getJiScore(int index) {
      return jiScore_.get(index);
    }

    // repeated int32 xi_score = 3;
    public static final int XI_SCORE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> xiScore_;
    /**
     * <code>repeated int32 xi_score = 3;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getXiScoreList() {
      return xiScore_;
    }
    /**
     * <code>repeated int32 xi_score = 3;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    public int getXiScoreCount() {
      return xiScore_.size();
    }
    /**
     * <code>repeated int32 xi_score = 3;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    public int getXiScore(int index) {
      return xiScore_.get(index);
    }

    // repeated int32 all_ji_score = 4;
    public static final int ALL_JI_SCORE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> allJiScore_;
    /**
     * <code>repeated int32 all_ji_score = 4;</code>
     *
     * <pre>
     *总积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllJiScoreList() {
      return allJiScore_;
    }
    /**
     * <code>repeated int32 all_ji_score = 4;</code>
     *
     * <pre>
     *总积分
     * </pre>
     */
    public int getAllJiScoreCount() {
      return allJiScore_.size();
    }
    /**
     * <code>repeated int32 all_ji_score = 4;</code>
     *
     * <pre>
     *总积分
     * </pre>
     */
    public int getAllJiScore(int index) {
      return allJiScore_.get(index);
    }

    // repeated int32 all_xi_score = 5;
    public static final int ALL_XI_SCORE_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> allXiScore_;
    /**
     * <code>repeated int32 all_xi_score = 5;</code>
     *
     * <pre>
     *总喜分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllXiScoreList() {
      return allXiScore_;
    }
    /**
     * <code>repeated int32 all_xi_score = 5;</code>
     *
     * <pre>
     *总喜分
     * </pre>
     */
    public int getAllXiScoreCount() {
      return allXiScore_.size();
    }
    /**
     * <code>repeated int32 all_xi_score = 5;</code>
     *
     * <pre>
     *总喜分
     * </pre>
     */
    public int getAllXiScore(int index) {
      return allXiScore_.get(index);
    }

    private void initFields() {
      isReconnect_ = false;
      jiScore_ = java.util.Collections.emptyList();
      xiScore_ = java.util.Collections.emptyList();
      allJiScore_ = java.util.Collections.emptyList();
      allXiScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, isReconnect_);
      }
      for (int i = 0; i < jiScore_.size(); i++) {
        output.writeInt32(2, jiScore_.get(i));
      }
      for (int i = 0; i < xiScore_.size(); i++) {
        output.writeInt32(3, xiScore_.get(i));
      }
      for (int i = 0; i < allJiScore_.size(); i++) {
        output.writeInt32(4, allJiScore_.get(i));
      }
      for (int i = 0; i < allXiScore_.size(); i++) {
        output.writeInt32(5, allXiScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isReconnect_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getJiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(xiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getXiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allJiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allJiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllJiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allXiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allXiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllXiScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.RefreshScore_yjqf}
     *
     * <pre>
     *刷新用户抓分 1006
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqfOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_RefreshScore_yjqf_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_RefreshScore_yjqf_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        isReconnect_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        jiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        xiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        allJiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        allXiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_RefreshScore_yjqf_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isReconnect_ = isReconnect_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          jiScore_ = java.util.Collections.unmodifiableList(jiScore_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.jiScore_ = jiScore_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          xiScore_ = java.util.Collections.unmodifiableList(xiScore_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.xiScore_ = xiScore_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          allJiScore_ = java.util.Collections.unmodifiableList(allJiScore_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.allJiScore_ = allJiScore_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          allXiScore_ = java.util.Collections.unmodifiableList(allXiScore_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.allXiScore_ = allXiScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf.getDefaultInstance()) return this;
        if (other.hasIsReconnect()) {
          setIsReconnect(other.getIsReconnect());
        }
        if (!other.jiScore_.isEmpty()) {
          if (jiScore_.isEmpty()) {
            jiScore_ = other.jiScore_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureJiScoreIsMutable();
            jiScore_.addAll(other.jiScore_);
          }
          onChanged();
        }
        if (!other.xiScore_.isEmpty()) {
          if (xiScore_.isEmpty()) {
            xiScore_ = other.xiScore_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureXiScoreIsMutable();
            xiScore_.addAll(other.xiScore_);
          }
          onChanged();
        }
        if (!other.allJiScore_.isEmpty()) {
          if (allJiScore_.isEmpty()) {
            allJiScore_ = other.allJiScore_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureAllJiScoreIsMutable();
            allJiScore_.addAll(other.allJiScore_);
          }
          onChanged();
        }
        if (!other.allXiScore_.isEmpty()) {
          if (allXiScore_.isEmpty()) {
            allXiScore_ = other.allXiScore_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureAllXiScoreIsMutable();
            allXiScore_.addAll(other.allXiScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshScore_yjqf) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool is_reconnect = 1;
      private boolean isReconnect_ ;
      /**
       * <code>optional bool is_reconnect = 1;</code>
       *
       * <pre>
       *是不是断线重连
       * </pre>
       */
      public boolean hasIsReconnect() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool is_reconnect = 1;</code>
       *
       * <pre>
       *是不是断线重连
       * </pre>
       */
      public boolean getIsReconnect() {
        return isReconnect_;
      }
      /**
       * <code>optional bool is_reconnect = 1;</code>
       *
       * <pre>
       *是不是断线重连
       * </pre>
       */
      public Builder setIsReconnect(boolean value) {
        bitField0_ |= 0x00000001;
        isReconnect_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_reconnect = 1;</code>
       *
       * <pre>
       *是不是断线重连
       * </pre>
       */
      public Builder clearIsReconnect() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isReconnect_ = false;
        onChanged();
        return this;
      }

      // repeated int32 ji_score = 2;
      private java.util.List<java.lang.Integer> jiScore_ = java.util.Collections.emptyList();
      private void ensureJiScoreIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          jiScore_ = new java.util.ArrayList<java.lang.Integer>(jiScore_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 ji_score = 2;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJiScoreList() {
        return java.util.Collections.unmodifiableList(jiScore_);
      }
      /**
       * <code>repeated int32 ji_score = 2;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getJiScoreCount() {
        return jiScore_.size();
      }
      /**
       * <code>repeated int32 ji_score = 2;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getJiScore(int index) {
        return jiScore_.get(index);
      }
      /**
       * <code>repeated int32 ji_score = 2;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder setJiScore(
          int index, int value) {
        ensureJiScoreIsMutable();
        jiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 2;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder addJiScore(int value) {
        ensureJiScoreIsMutable();
        jiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 2;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder addAllJiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJiScoreIsMutable();
        super.addAll(values, jiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 2;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder clearJiScore() {
        jiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 xi_score = 3;
      private java.util.List<java.lang.Integer> xiScore_ = java.util.Collections.emptyList();
      private void ensureXiScoreIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          xiScore_ = new java.util.ArrayList<java.lang.Integer>(xiScore_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 xi_score = 3;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXiScoreList() {
        return java.util.Collections.unmodifiableList(xiScore_);
      }
      /**
       * <code>repeated int32 xi_score = 3;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public int getXiScoreCount() {
        return xiScore_.size();
      }
      /**
       * <code>repeated int32 xi_score = 3;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public int getXiScore(int index) {
        return xiScore_.get(index);
      }
      /**
       * <code>repeated int32 xi_score = 3;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public Builder setXiScore(
          int index, int value) {
        ensureXiScoreIsMutable();
        xiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xi_score = 3;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public Builder addXiScore(int value) {
        ensureXiScoreIsMutable();
        xiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xi_score = 3;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public Builder addAllXiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureXiScoreIsMutable();
        super.addAll(values, xiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xi_score = 3;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public Builder clearXiScore() {
        xiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated int32 all_ji_score = 4;
      private java.util.List<java.lang.Integer> allJiScore_ = java.util.Collections.emptyList();
      private void ensureAllJiScoreIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          allJiScore_ = new java.util.ArrayList<java.lang.Integer>(allJiScore_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 all_ji_score = 4;</code>
       *
       * <pre>
       *总积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllJiScoreList() {
        return java.util.Collections.unmodifiableList(allJiScore_);
      }
      /**
       * <code>repeated int32 all_ji_score = 4;</code>
       *
       * <pre>
       *总积分
       * </pre>
       */
      public int getAllJiScoreCount() {
        return allJiScore_.size();
      }
      /**
       * <code>repeated int32 all_ji_score = 4;</code>
       *
       * <pre>
       *总积分
       * </pre>
       */
      public int getAllJiScore(int index) {
        return allJiScore_.get(index);
      }
      /**
       * <code>repeated int32 all_ji_score = 4;</code>
       *
       * <pre>
       *总积分
       * </pre>
       */
      public Builder setAllJiScore(
          int index, int value) {
        ensureAllJiScoreIsMutable();
        allJiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_ji_score = 4;</code>
       *
       * <pre>
       *总积分
       * </pre>
       */
      public Builder addAllJiScore(int value) {
        ensureAllJiScoreIsMutable();
        allJiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_ji_score = 4;</code>
       *
       * <pre>
       *总积分
       * </pre>
       */
      public Builder addAllAllJiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllJiScoreIsMutable();
        super.addAll(values, allJiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_ji_score = 4;</code>
       *
       * <pre>
       *总积分
       * </pre>
       */
      public Builder clearAllJiScore() {
        allJiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated int32 all_xi_score = 5;
      private java.util.List<java.lang.Integer> allXiScore_ = java.util.Collections.emptyList();
      private void ensureAllXiScoreIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          allXiScore_ = new java.util.ArrayList<java.lang.Integer>(allXiScore_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 all_xi_score = 5;</code>
       *
       * <pre>
       *总喜分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllXiScoreList() {
        return java.util.Collections.unmodifiableList(allXiScore_);
      }
      /**
       * <code>repeated int32 all_xi_score = 5;</code>
       *
       * <pre>
       *总喜分
       * </pre>
       */
      public int getAllXiScoreCount() {
        return allXiScore_.size();
      }
      /**
       * <code>repeated int32 all_xi_score = 5;</code>
       *
       * <pre>
       *总喜分
       * </pre>
       */
      public int getAllXiScore(int index) {
        return allXiScore_.get(index);
      }
      /**
       * <code>repeated int32 all_xi_score = 5;</code>
       *
       * <pre>
       *总喜分
       * </pre>
       */
      public Builder setAllXiScore(
          int index, int value) {
        ensureAllXiScoreIsMutable();
        allXiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_xi_score = 5;</code>
       *
       * <pre>
       *总喜分
       * </pre>
       */
      public Builder addAllXiScore(int value) {
        ensureAllXiScoreIsMutable();
        allXiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_xi_score = 5;</code>
       *
       * <pre>
       *总喜分
       * </pre>
       */
      public Builder addAllAllXiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllXiScoreIsMutable();
        super.addAll(values, allXiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_xi_score = 5;</code>
       *
       * <pre>
       *总喜分
       * </pre>
       */
      public Builder clearAllXiScore() {
        allXiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.RefreshScore_yjqf)
    }

    static {
      defaultInstance = new RefreshScore_yjqf(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.RefreshScore_yjqf)
  }

  public interface PukeGameEndWsk_yjqfOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated int32 card_count = 2;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 3;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 reason = 4;
    /**
     * <code>optional int32 reason = 4;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 4;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 win_order = 5;
    /**
     * <code>repeated int32 win_order = 5;</code>
     *
     * <pre>
     *本局名次
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 5;</code>
     *
     * <pre>
     *本局名次
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 5;</code>
     *
     * <pre>
     *本局名次
     * </pre>
     */
    int getWinOrder(int index);

    // repeated int32 win_score = 6;
    /**
     * <code>repeated int32 win_score = 6;</code>
     *
     * <pre>
     *本局名次分
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinScoreList();
    /**
     * <code>repeated int32 win_score = 6;</code>
     *
     * <pre>
     *本局名次分
     * </pre>
     */
    int getWinScoreCount();
    /**
     * <code>repeated int32 win_score = 6;</code>
     *
     * <pre>
     *本局名次分
     * </pre>
     */
    int getWinScore(int index);

    // repeated int32 ji_score = 7;
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *本局积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getJiScoreList();
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *本局积分
     * </pre>
     */
    int getJiScoreCount();
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *本局积分
     * </pre>
     */
    int getJiScore(int index);

    // repeated int32 xi_score = 8;
    /**
     * <code>repeated int32 xi_score = 8;</code>
     *
     * <pre>
     *本局 喜分
     * </pre>
     */
    java.util.List<java.lang.Integer> getXiScoreList();
    /**
     * <code>repeated int32 xi_score = 8;</code>
     *
     * <pre>
     *本局 喜分
     * </pre>
     */
    int getXiScoreCount();
    /**
     * <code>repeated int32 xi_score = 8;</code>
     *
     * <pre>
     *本局 喜分
     * </pre>
     */
    int getXiScore(int index);

    // repeated int32 all_ji_score = 9;
    /**
     * <code>repeated int32 all_ji_score = 9;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllJiScoreList();
    /**
     * <code>repeated int32 all_ji_score = 9;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllJiScoreCount();
    /**
     * <code>repeated int32 all_ji_score = 9;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllJiScore(int index);

    // repeated int32 all_jiang_score = 10;
    /**
     * <code>repeated int32 all_jiang_score = 10;</code>
     *
     * <pre>
     *计奖分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllJiangScoreList();
    /**
     * <code>repeated int32 all_jiang_score = 10;</code>
     *
     * <pre>
     *计奖分
     * </pre>
     */
    int getAllJiangScoreCount();
    /**
     * <code>repeated int32 all_jiang_score = 10;</code>
     *
     * <pre>
     *计奖分
     * </pre>
     */
    int getAllJiangScore(int index);

    // repeated int32 all_xi_score = 11;
    /**
     * <code>repeated int32 all_xi_score = 11;</code>
     *
     * <pre>
     *计喜分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllXiScoreList();
    /**
     * <code>repeated int32 all_xi_score = 11;</code>
     *
     * <pre>
     *计喜分
     * </pre>
     */
    int getAllXiScoreCount();
    /**
     * <code>repeated int32 all_xi_score = 11;</code>
     *
     * <pre>
     *计喜分
     * </pre>
     */
    int getAllXiScore(int index);

    // repeated int32 all_end_score = 12;
    /**
     * <code>repeated int32 all_end_score = 12;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 12;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 12;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated int32 rounding_ji_score = 13;
    /**
     * <code>repeated int32 rounding_ji_score = 13;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundingJiScoreList();
    /**
     * <code>repeated int32 rounding_ji_score = 13;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    int getRoundingJiScoreCount();
    /**
     * <code>repeated int32 rounding_ji_score = 13;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    int getRoundingJiScore(int index);

    // repeated int32 xitong_score = 14;
    /**
     * <code>repeated int32 xitong_score = 14;</code>
     *
     * <pre>
     *系统结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getXitongScoreList();
    /**
     * <code>repeated int32 xitong_score = 14;</code>
     *
     * <pre>
     *系统结算
     * </pre>
     */
    int getXitongScoreCount();
    /**
     * <code>repeated int32 xitong_score = 14;</code>
     *
     * <pre>
     *系统结算
     * </pre>
     */
    int getXitongScore(int index);

    // repeated .RoomPlayerResponse players = 15;
    /**
     * <code>repeated .RoomPlayerResponse players = 15;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 15;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 15;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 15;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 15;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code yjqf.PukeGameEndWsk_yjqf}
   *
   * <pre>
   *结算  1005
   * </pre>
   */
  public static final class PukeGameEndWsk_yjqf extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndWsk_yjqfOrBuilder {
    // Use PukeGameEndWsk_yjqf.newBuilder() to construct.
    private PukeGameEndWsk_yjqf(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndWsk_yjqf(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndWsk_yjqf defaultInstance;
    public static PukeGameEndWsk_yjqf getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndWsk_yjqf getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndWsk_yjqf(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              reason_ = input.readInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                winScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              winScore_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                winScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                winScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                jiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              jiScore_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                jiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                jiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                xiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              xiScore_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                xiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                xiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                allJiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              allJiScore_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                allJiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                allJiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                allJiangScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              allJiangScore_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                allJiangScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                allJiangScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                allXiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              allXiScore_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                allXiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                allXiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                roundingJiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              roundingJiScore_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                roundingJiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                roundingJiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                xitongScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              xitongScore_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                xitongScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                xitongScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 122: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00004000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          winScore_ = java.util.Collections.unmodifiableList(winScore_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          jiScore_ = java.util.Collections.unmodifiableList(jiScore_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          xiScore_ = java.util.Collections.unmodifiableList(xiScore_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          allJiScore_ = java.util.Collections.unmodifiableList(allJiScore_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          allJiangScore_ = java.util.Collections.unmodifiableList(allJiangScore_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          allXiScore_ = java.util.Collections.unmodifiableList(allXiScore_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          roundingJiScore_ = java.util.Collections.unmodifiableList(roundingJiScore_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          xitongScore_ = java.util.Collections.unmodifiableList(xitongScore_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_PukeGameEndWsk_yjqf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_PukeGameEndWsk_yjqf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndWsk_yjqf> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndWsk_yjqf>() {
      public PukeGameEndWsk_yjqf parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndWsk_yjqf(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndWsk_yjqf> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 reason = 4;
    public static final int REASON_FIELD_NUMBER = 4;
    private int reason_;
    /**
     * <code>optional int32 reason = 4;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 reason = 4;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 win_order = 5;
    public static final int WIN_ORDER_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 5;</code>
     *
     * <pre>
     *本局名次
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 5;</code>
     *
     * <pre>
     *本局名次
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 5;</code>
     *
     * <pre>
     *本局名次
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // repeated int32 win_score = 6;
    public static final int WIN_SCORE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> winScore_;
    /**
     * <code>repeated int32 win_score = 6;</code>
     *
     * <pre>
     *本局名次分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinScoreList() {
      return winScore_;
    }
    /**
     * <code>repeated int32 win_score = 6;</code>
     *
     * <pre>
     *本局名次分
     * </pre>
     */
    public int getWinScoreCount() {
      return winScore_.size();
    }
    /**
     * <code>repeated int32 win_score = 6;</code>
     *
     * <pre>
     *本局名次分
     * </pre>
     */
    public int getWinScore(int index) {
      return winScore_.get(index);
    }

    // repeated int32 ji_score = 7;
    public static final int JI_SCORE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> jiScore_;
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *本局积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJiScoreList() {
      return jiScore_;
    }
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *本局积分
     * </pre>
     */
    public int getJiScoreCount() {
      return jiScore_.size();
    }
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *本局积分
     * </pre>
     */
    public int getJiScore(int index) {
      return jiScore_.get(index);
    }

    // repeated int32 xi_score = 8;
    public static final int XI_SCORE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> xiScore_;
    /**
     * <code>repeated int32 xi_score = 8;</code>
     *
     * <pre>
     *本局 喜分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getXiScoreList() {
      return xiScore_;
    }
    /**
     * <code>repeated int32 xi_score = 8;</code>
     *
     * <pre>
     *本局 喜分
     * </pre>
     */
    public int getXiScoreCount() {
      return xiScore_.size();
    }
    /**
     * <code>repeated int32 xi_score = 8;</code>
     *
     * <pre>
     *本局 喜分
     * </pre>
     */
    public int getXiScore(int index) {
      return xiScore_.get(index);
    }

    // repeated int32 all_ji_score = 9;
    public static final int ALL_JI_SCORE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> allJiScore_;
    /**
     * <code>repeated int32 all_ji_score = 9;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllJiScoreList() {
      return allJiScore_;
    }
    /**
     * <code>repeated int32 all_ji_score = 9;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllJiScoreCount() {
      return allJiScore_.size();
    }
    /**
     * <code>repeated int32 all_ji_score = 9;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllJiScore(int index) {
      return allJiScore_.get(index);
    }

    // repeated int32 all_jiang_score = 10;
    public static final int ALL_JIANG_SCORE_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> allJiangScore_;
    /**
     * <code>repeated int32 all_jiang_score = 10;</code>
     *
     * <pre>
     *计奖分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllJiangScoreList() {
      return allJiangScore_;
    }
    /**
     * <code>repeated int32 all_jiang_score = 10;</code>
     *
     * <pre>
     *计奖分
     * </pre>
     */
    public int getAllJiangScoreCount() {
      return allJiangScore_.size();
    }
    /**
     * <code>repeated int32 all_jiang_score = 10;</code>
     *
     * <pre>
     *计奖分
     * </pre>
     */
    public int getAllJiangScore(int index) {
      return allJiangScore_.get(index);
    }

    // repeated int32 all_xi_score = 11;
    public static final int ALL_XI_SCORE_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> allXiScore_;
    /**
     * <code>repeated int32 all_xi_score = 11;</code>
     *
     * <pre>
     *计喜分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllXiScoreList() {
      return allXiScore_;
    }
    /**
     * <code>repeated int32 all_xi_score = 11;</code>
     *
     * <pre>
     *计喜分
     * </pre>
     */
    public int getAllXiScoreCount() {
      return allXiScore_.size();
    }
    /**
     * <code>repeated int32 all_xi_score = 11;</code>
     *
     * <pre>
     *计喜分
     * </pre>
     */
    public int getAllXiScore(int index) {
      return allXiScore_.get(index);
    }

    // repeated int32 all_end_score = 12;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 12;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 12;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 12;</code>
     *
     * <pre>
     *结算总积分(总积分)
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 rounding_ji_score = 13;
    public static final int ROUNDING_JI_SCORE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> roundingJiScore_;
    /**
     * <code>repeated int32 rounding_ji_score = 13;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundingJiScoreList() {
      return roundingJiScore_;
    }
    /**
     * <code>repeated int32 rounding_ji_score = 13;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    public int getRoundingJiScoreCount() {
      return roundingJiScore_.size();
    }
    /**
     * <code>repeated int32 rounding_ji_score = 13;</code>
     *
     * <pre>
     * 四舍五入后得分
     * </pre>
     */
    public int getRoundingJiScore(int index) {
      return roundingJiScore_.get(index);
    }

    // repeated int32 xitong_score = 14;
    public static final int XITONG_SCORE_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> xitongScore_;
    /**
     * <code>repeated int32 xitong_score = 14;</code>
     *
     * <pre>
     *系统结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getXitongScoreList() {
      return xitongScore_;
    }
    /**
     * <code>repeated int32 xitong_score = 14;</code>
     *
     * <pre>
     *系统结算
     * </pre>
     */
    public int getXitongScoreCount() {
      return xitongScore_.size();
    }
    /**
     * <code>repeated int32 xitong_score = 14;</code>
     *
     * <pre>
     *系统结算
     * </pre>
     */
    public int getXitongScore(int index) {
      return xitongScore_.get(index);
    }

    // repeated .RoomPlayerResponse players = 15;
    public static final int PLAYERS_FIELD_NUMBER = 15;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 15;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 15;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 15;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 15;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 15;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      reason_ = 0;
      winOrder_ = java.util.Collections.emptyList();
      winScore_ = java.util.Collections.emptyList();
      jiScore_ = java.util.Collections.emptyList();
      xiScore_ = java.util.Collections.emptyList();
      allJiScore_ = java.util.Collections.emptyList();
      allJiangScore_ = java.util.Collections.emptyList();
      allXiScore_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      roundingJiScore_ = java.util.Collections.emptyList();
      xitongScore_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(2, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, reason_);
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(5, winOrder_.get(i));
      }
      for (int i = 0; i < winScore_.size(); i++) {
        output.writeInt32(6, winScore_.get(i));
      }
      for (int i = 0; i < jiScore_.size(); i++) {
        output.writeInt32(7, jiScore_.get(i));
      }
      for (int i = 0; i < xiScore_.size(); i++) {
        output.writeInt32(8, xiScore_.get(i));
      }
      for (int i = 0; i < allJiScore_.size(); i++) {
        output.writeInt32(9, allJiScore_.get(i));
      }
      for (int i = 0; i < allJiangScore_.size(); i++) {
        output.writeInt32(10, allJiangScore_.get(i));
      }
      for (int i = 0; i < allXiScore_.size(); i++) {
        output.writeInt32(11, allXiScore_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(12, allEndScore_.get(i));
      }
      for (int i = 0; i < roundingJiScore_.size(); i++) {
        output.writeInt32(13, roundingJiScore_.get(i));
      }
      for (int i = 0; i < xitongScore_.size(); i++) {
        output.writeInt32(14, xitongScore_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(15, players_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 1 * getWinOrderList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winScore_.get(i));
        }
        size += dataSize;
        size += 1 * getWinScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getJiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(xiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getXiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allJiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allJiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllJiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allJiangScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allJiangScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllJiangScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allXiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allXiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllXiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundingJiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(roundingJiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getRoundingJiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xitongScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(xitongScore_.get(i));
        }
        size += dataSize;
        size += 1 * getXitongScoreList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, players_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.PukeGameEndWsk_yjqf}
     *
     * <pre>
     *结算  1005
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqfOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_PukeGameEndWsk_yjqf_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_PukeGameEndWsk_yjqf_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          cardsDataBuilder_.clear();
        }
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        winScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        jiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        xiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        allJiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        allJiangScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        allXiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        roundingJiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        xitongScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
        } else {
          playersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_PukeGameEndWsk_yjqf_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.winOrder_ = winOrder_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          winScore_ = java.util.Collections.unmodifiableList(winScore_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.winScore_ = winScore_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          jiScore_ = java.util.Collections.unmodifiableList(jiScore_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.jiScore_ = jiScore_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          xiScore_ = java.util.Collections.unmodifiableList(xiScore_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.xiScore_ = xiScore_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          allJiScore_ = java.util.Collections.unmodifiableList(allJiScore_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.allJiScore_ = allJiScore_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          allJiangScore_ = java.util.Collections.unmodifiableList(allJiangScore_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.allJiangScore_ = allJiangScore_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          allXiScore_ = java.util.Collections.unmodifiableList(allXiScore_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.allXiScore_ = allXiScore_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          roundingJiScore_ = java.util.Collections.unmodifiableList(roundingJiScore_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.roundingJiScore_ = roundingJiScore_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          xitongScore_ = java.util.Collections.unmodifiableList(xitongScore_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.xitongScore_ = xitongScore_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00004000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (!other.winScore_.isEmpty()) {
          if (winScore_.isEmpty()) {
            winScore_ = other.winScore_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureWinScoreIsMutable();
            winScore_.addAll(other.winScore_);
          }
          onChanged();
        }
        if (!other.jiScore_.isEmpty()) {
          if (jiScore_.isEmpty()) {
            jiScore_ = other.jiScore_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureJiScoreIsMutable();
            jiScore_.addAll(other.jiScore_);
          }
          onChanged();
        }
        if (!other.xiScore_.isEmpty()) {
          if (xiScore_.isEmpty()) {
            xiScore_ = other.xiScore_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureXiScoreIsMutable();
            xiScore_.addAll(other.xiScore_);
          }
          onChanged();
        }
        if (!other.allJiScore_.isEmpty()) {
          if (allJiScore_.isEmpty()) {
            allJiScore_ = other.allJiScore_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureAllJiScoreIsMutable();
            allJiScore_.addAll(other.allJiScore_);
          }
          onChanged();
        }
        if (!other.allJiangScore_.isEmpty()) {
          if (allJiangScore_.isEmpty()) {
            allJiangScore_ = other.allJiangScore_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureAllJiangScoreIsMutable();
            allJiangScore_.addAll(other.allJiangScore_);
          }
          onChanged();
        }
        if (!other.allXiScore_.isEmpty()) {
          if (allXiScore_.isEmpty()) {
            allXiScore_ = other.allXiScore_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureAllXiScoreIsMutable();
            allXiScore_.addAll(other.allXiScore_);
          }
          onChanged();
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.roundingJiScore_.isEmpty()) {
          if (roundingJiScore_.isEmpty()) {
            roundingJiScore_ = other.roundingJiScore_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureRoundingJiScoreIsMutable();
            roundingJiScore_.addAll(other.roundingJiScore_);
          }
          onChanged();
        }
        if (!other.xitongScore_.isEmpty()) {
          if (xitongScore_.isEmpty()) {
            xitongScore_ = other.xitongScore_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureXitongScoreIsMutable();
            xitongScore_.addAll(other.xitongScore_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00004000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00004000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.PukeGameEndWsk_yjqf) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated int32 card_count = 2;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 reason = 4;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 4;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 reason = 4;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 4;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000008;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 4;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000008);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 win_order = 5;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 win_order = 5;</code>
       *
       * <pre>
       *本局名次
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 5;</code>
       *
       * <pre>
       *本局名次
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 5;</code>
       *
       * <pre>
       *本局名次
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 5;</code>
       *
       * <pre>
       *本局名次
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 5;</code>
       *
       * <pre>
       *本局名次
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 5;</code>
       *
       * <pre>
       *本局名次
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 5;</code>
       *
       * <pre>
       *本局名次
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated int32 win_score = 6;
      private java.util.List<java.lang.Integer> winScore_ = java.util.Collections.emptyList();
      private void ensureWinScoreIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          winScore_ = new java.util.ArrayList<java.lang.Integer>(winScore_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 win_score = 6;</code>
       *
       * <pre>
       *本局名次分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinScoreList() {
        return java.util.Collections.unmodifiableList(winScore_);
      }
      /**
       * <code>repeated int32 win_score = 6;</code>
       *
       * <pre>
       *本局名次分
       * </pre>
       */
      public int getWinScoreCount() {
        return winScore_.size();
      }
      /**
       * <code>repeated int32 win_score = 6;</code>
       *
       * <pre>
       *本局名次分
       * </pre>
       */
      public int getWinScore(int index) {
        return winScore_.get(index);
      }
      /**
       * <code>repeated int32 win_score = 6;</code>
       *
       * <pre>
       *本局名次分
       * </pre>
       */
      public Builder setWinScore(
          int index, int value) {
        ensureWinScoreIsMutable();
        winScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_score = 6;</code>
       *
       * <pre>
       *本局名次分
       * </pre>
       */
      public Builder addWinScore(int value) {
        ensureWinScoreIsMutable();
        winScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_score = 6;</code>
       *
       * <pre>
       *本局名次分
       * </pre>
       */
      public Builder addAllWinScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinScoreIsMutable();
        super.addAll(values, winScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_score = 6;</code>
       *
       * <pre>
       *本局名次分
       * </pre>
       */
      public Builder clearWinScore() {
        winScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 ji_score = 7;
      private java.util.List<java.lang.Integer> jiScore_ = java.util.Collections.emptyList();
      private void ensureJiScoreIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          jiScore_ = new java.util.ArrayList<java.lang.Integer>(jiScore_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *本局积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJiScoreList() {
        return java.util.Collections.unmodifiableList(jiScore_);
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *本局积分
       * </pre>
       */
      public int getJiScoreCount() {
        return jiScore_.size();
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *本局积分
       * </pre>
       */
      public int getJiScore(int index) {
        return jiScore_.get(index);
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *本局积分
       * </pre>
       */
      public Builder setJiScore(
          int index, int value) {
        ensureJiScoreIsMutable();
        jiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *本局积分
       * </pre>
       */
      public Builder addJiScore(int value) {
        ensureJiScoreIsMutable();
        jiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *本局积分
       * </pre>
       */
      public Builder addAllJiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJiScoreIsMutable();
        super.addAll(values, jiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *本局积分
       * </pre>
       */
      public Builder clearJiScore() {
        jiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 xi_score = 8;
      private java.util.List<java.lang.Integer> xiScore_ = java.util.Collections.emptyList();
      private void ensureXiScoreIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          xiScore_ = new java.util.ArrayList<java.lang.Integer>(xiScore_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 xi_score = 8;</code>
       *
       * <pre>
       *本局 喜分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXiScoreList() {
        return java.util.Collections.unmodifiableList(xiScore_);
      }
      /**
       * <code>repeated int32 xi_score = 8;</code>
       *
       * <pre>
       *本局 喜分
       * </pre>
       */
      public int getXiScoreCount() {
        return xiScore_.size();
      }
      /**
       * <code>repeated int32 xi_score = 8;</code>
       *
       * <pre>
       *本局 喜分
       * </pre>
       */
      public int getXiScore(int index) {
        return xiScore_.get(index);
      }
      /**
       * <code>repeated int32 xi_score = 8;</code>
       *
       * <pre>
       *本局 喜分
       * </pre>
       */
      public Builder setXiScore(
          int index, int value) {
        ensureXiScoreIsMutable();
        xiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xi_score = 8;</code>
       *
       * <pre>
       *本局 喜分
       * </pre>
       */
      public Builder addXiScore(int value) {
        ensureXiScoreIsMutable();
        xiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xi_score = 8;</code>
       *
       * <pre>
       *本局 喜分
       * </pre>
       */
      public Builder addAllXiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureXiScoreIsMutable();
        super.addAll(values, xiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xi_score = 8;</code>
       *
       * <pre>
       *本局 喜分
       * </pre>
       */
      public Builder clearXiScore() {
        xiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 all_ji_score = 9;
      private java.util.List<java.lang.Integer> allJiScore_ = java.util.Collections.emptyList();
      private void ensureAllJiScoreIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          allJiScore_ = new java.util.ArrayList<java.lang.Integer>(allJiScore_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 all_ji_score = 9;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllJiScoreList() {
        return java.util.Collections.unmodifiableList(allJiScore_);
      }
      /**
       * <code>repeated int32 all_ji_score = 9;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllJiScoreCount() {
        return allJiScore_.size();
      }
      /**
       * <code>repeated int32 all_ji_score = 9;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllJiScore(int index) {
        return allJiScore_.get(index);
      }
      /**
       * <code>repeated int32 all_ji_score = 9;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllJiScore(
          int index, int value) {
        ensureAllJiScoreIsMutable();
        allJiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_ji_score = 9;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllJiScore(int value) {
        ensureAllJiScoreIsMutable();
        allJiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_ji_score = 9;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllJiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllJiScoreIsMutable();
        super.addAll(values, allJiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_ji_score = 9;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllJiScore() {
        allJiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated int32 all_jiang_score = 10;
      private java.util.List<java.lang.Integer> allJiangScore_ = java.util.Collections.emptyList();
      private void ensureAllJiangScoreIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          allJiangScore_ = new java.util.ArrayList<java.lang.Integer>(allJiangScore_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 all_jiang_score = 10;</code>
       *
       * <pre>
       *计奖分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllJiangScoreList() {
        return java.util.Collections.unmodifiableList(allJiangScore_);
      }
      /**
       * <code>repeated int32 all_jiang_score = 10;</code>
       *
       * <pre>
       *计奖分
       * </pre>
       */
      public int getAllJiangScoreCount() {
        return allJiangScore_.size();
      }
      /**
       * <code>repeated int32 all_jiang_score = 10;</code>
       *
       * <pre>
       *计奖分
       * </pre>
       */
      public int getAllJiangScore(int index) {
        return allJiangScore_.get(index);
      }
      /**
       * <code>repeated int32 all_jiang_score = 10;</code>
       *
       * <pre>
       *计奖分
       * </pre>
       */
      public Builder setAllJiangScore(
          int index, int value) {
        ensureAllJiangScoreIsMutable();
        allJiangScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_jiang_score = 10;</code>
       *
       * <pre>
       *计奖分
       * </pre>
       */
      public Builder addAllJiangScore(int value) {
        ensureAllJiangScoreIsMutable();
        allJiangScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_jiang_score = 10;</code>
       *
       * <pre>
       *计奖分
       * </pre>
       */
      public Builder addAllAllJiangScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllJiangScoreIsMutable();
        super.addAll(values, allJiangScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_jiang_score = 10;</code>
       *
       * <pre>
       *计奖分
       * </pre>
       */
      public Builder clearAllJiangScore() {
        allJiangScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 all_xi_score = 11;
      private java.util.List<java.lang.Integer> allXiScore_ = java.util.Collections.emptyList();
      private void ensureAllXiScoreIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          allXiScore_ = new java.util.ArrayList<java.lang.Integer>(allXiScore_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 all_xi_score = 11;</code>
       *
       * <pre>
       *计喜分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllXiScoreList() {
        return java.util.Collections.unmodifiableList(allXiScore_);
      }
      /**
       * <code>repeated int32 all_xi_score = 11;</code>
       *
       * <pre>
       *计喜分
       * </pre>
       */
      public int getAllXiScoreCount() {
        return allXiScore_.size();
      }
      /**
       * <code>repeated int32 all_xi_score = 11;</code>
       *
       * <pre>
       *计喜分
       * </pre>
       */
      public int getAllXiScore(int index) {
        return allXiScore_.get(index);
      }
      /**
       * <code>repeated int32 all_xi_score = 11;</code>
       *
       * <pre>
       *计喜分
       * </pre>
       */
      public Builder setAllXiScore(
          int index, int value) {
        ensureAllXiScoreIsMutable();
        allXiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_xi_score = 11;</code>
       *
       * <pre>
       *计喜分
       * </pre>
       */
      public Builder addAllXiScore(int value) {
        ensureAllXiScoreIsMutable();
        allXiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_xi_score = 11;</code>
       *
       * <pre>
       *计喜分
       * </pre>
       */
      public Builder addAllAllXiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllXiScoreIsMutable();
        super.addAll(values, allXiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_xi_score = 11;</code>
       *
       * <pre>
       *计喜分
       * </pre>
       */
      public Builder clearAllXiScore() {
        allXiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 all_end_score = 12;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 12;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 12;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 12;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 12;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 12;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 12;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 12;</code>
       *
       * <pre>
       *结算总积分(总积分)
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated int32 rounding_ji_score = 13;
      private java.util.List<java.lang.Integer> roundingJiScore_ = java.util.Collections.emptyList();
      private void ensureRoundingJiScoreIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          roundingJiScore_ = new java.util.ArrayList<java.lang.Integer>(roundingJiScore_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 rounding_ji_score = 13;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundingJiScoreList() {
        return java.util.Collections.unmodifiableList(roundingJiScore_);
      }
      /**
       * <code>repeated int32 rounding_ji_score = 13;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public int getRoundingJiScoreCount() {
        return roundingJiScore_.size();
      }
      /**
       * <code>repeated int32 rounding_ji_score = 13;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public int getRoundingJiScore(int index) {
        return roundingJiScore_.get(index);
      }
      /**
       * <code>repeated int32 rounding_ji_score = 13;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public Builder setRoundingJiScore(
          int index, int value) {
        ensureRoundingJiScoreIsMutable();
        roundingJiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rounding_ji_score = 13;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public Builder addRoundingJiScore(int value) {
        ensureRoundingJiScoreIsMutable();
        roundingJiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rounding_ji_score = 13;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public Builder addAllRoundingJiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundingJiScoreIsMutable();
        super.addAll(values, roundingJiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rounding_ji_score = 13;</code>
       *
       * <pre>
       * 四舍五入后得分
       * </pre>
       */
      public Builder clearRoundingJiScore() {
        roundingJiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 xitong_score = 14;
      private java.util.List<java.lang.Integer> xitongScore_ = java.util.Collections.emptyList();
      private void ensureXitongScoreIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          xitongScore_ = new java.util.ArrayList<java.lang.Integer>(xitongScore_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 xitong_score = 14;</code>
       *
       * <pre>
       *系统结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXitongScoreList() {
        return java.util.Collections.unmodifiableList(xitongScore_);
      }
      /**
       * <code>repeated int32 xitong_score = 14;</code>
       *
       * <pre>
       *系统结算
       * </pre>
       */
      public int getXitongScoreCount() {
        return xitongScore_.size();
      }
      /**
       * <code>repeated int32 xitong_score = 14;</code>
       *
       * <pre>
       *系统结算
       * </pre>
       */
      public int getXitongScore(int index) {
        return xitongScore_.get(index);
      }
      /**
       * <code>repeated int32 xitong_score = 14;</code>
       *
       * <pre>
       *系统结算
       * </pre>
       */
      public Builder setXitongScore(
          int index, int value) {
        ensureXitongScoreIsMutable();
        xitongScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xitong_score = 14;</code>
       *
       * <pre>
       *系统结算
       * </pre>
       */
      public Builder addXitongScore(int value) {
        ensureXitongScoreIsMutable();
        xitongScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xitong_score = 14;</code>
       *
       * <pre>
       *系统结算
       * </pre>
       */
      public Builder addAllXitongScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureXitongScoreIsMutable();
        super.addAll(values, xitongScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xitong_score = 14;</code>
       *
       * <pre>
       *系统结算
       * </pre>
       */
      public Builder clearXitongScore() {
        xitongScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 15;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00004000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 15;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00004000) == 0x00004000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.PukeGameEndWsk_yjqf)
    }

    static {
      defaultInstance = new PukeGameEndWsk_yjqf(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.PukeGameEndWsk_yjqf)
  }

  public interface TableResponse_yjqfOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 6;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_pass = 7;
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // repeated int32 card_type = 8;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 9;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_cards_data = 10;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 11;
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 12;
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 13;
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 14;
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 15;
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 16;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .RoomInfo room_info = 17;
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 18;
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 user_can_out_data = 19;
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 20;
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCount();

    // repeated int32 user_get_score = 21;
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetScoreList();
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScoreCount();
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScore(int index);

    // repeated int32 win_order = 22;
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);
  }
  /**
   * Protobuf type {@code yjqf.TableResponse_yjqf}
   *
   * <pre>
   *断线重连 1002
   * </pre>
   */
  public static final class TableResponse_yjqf extends
      com.google.protobuf.GeneratedMessage
      implements TableResponse_yjqfOrBuilder {
    // Use TableResponse_yjqf.newBuilder() to construct.
    private TableResponse_yjqf(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponse_yjqf(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponse_yjqf defaultInstance;
    public static TableResponse_yjqf getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponse_yjqf getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponse_yjqf(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00008000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 138: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 146: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00020000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              bitField0_ |= 0x00000200;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              userGetScore_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_TableResponse_yjqf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_TableResponse_yjqf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponse_yjqf> PARSER =
        new com.google.protobuf.AbstractParser<TableResponse_yjqf>() {
      public TableResponse_yjqf parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponse_yjqf(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponse_yjqf> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 6;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_pass = 7;
    public static final int PLAYER_PASS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // repeated int32 card_type = 8;
    public static final int CARD_TYPE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 9;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 9;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_cards_data = 10;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 11;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 11;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 12;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 12;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 13;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 13;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 14;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 14;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 15;
    public static final int CARD_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 16;
    public static final int CARDS_DATA_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .RoomInfo room_info = 17;
    public static final int ROOM_INFO_FIELD_NUMBER = 17;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 18;
    public static final int PLAYERS_FIELD_NUMBER = 18;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 user_can_out_data = 19;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 20;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 20;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // repeated int32 user_get_score = 21;
    public static final int USER_GET_SCORE_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> userGetScore_;
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetScoreList() {
      return userGetScore_;
    }
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScoreCount() {
      return userGetScore_.size();
    }
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScore(int index) {
      return userGetScore_.get(index);
    }

    // repeated int32 win_order = 22;
    public static final int WIN_ORDER_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerPass_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      userGetScore_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(6, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(7, playerPass_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(8, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(9, prOutCardPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(10, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(11, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(12, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(13, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(14, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(15, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(16, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(17, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(18, players_.get(i));
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(19, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(20, userCanOutCount_);
      }
      for (int i = 0; i < userGetScore_.size(); i++) {
        output.writeInt32(21, userGetScore_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(22, winOrder_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerPassList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 2 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, userCanOutCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userGetScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetScore_.get(i));
        }
        size += dataSize;
        size += 2 * getUserGetScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 2 * getWinOrderList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.TableResponse_yjqf}
     *
     * <pre>
     *断线重连 1002
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqfOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_TableResponse_yjqf_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_TableResponse_yjqf_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          playersBuilder_.clear();
        }
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_TableResponse_yjqf_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.playerPass_ = playerPass_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.userGetScore_ = userGetScore_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.winOrder_ = winOrder_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (!other.userGetScore_.isEmpty()) {
          if (userGetScore_.isEmpty()) {
            userGetScore_ = other.userGetScore_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureUserGetScoreIsMutable();
            userGetScore_.addAll(other.userGetScore_);
          }
          onChanged();
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.TableResponse_yjqf) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 6;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 7;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 8;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 9;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000100;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 10;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 11;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000400;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 12;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000800;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000800);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 13;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00001000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00001000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 14;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00002000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00002000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 15;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 16;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .RoomInfo room_info = 17;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 18;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 user_can_out_data = 19;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 20;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00080000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00080000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_get_score = 21;
      private java.util.List<java.lang.Integer> userGetScore_ = java.util.Collections.emptyList();
      private void ensureUserGetScoreIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          userGetScore_ = new java.util.ArrayList<java.lang.Integer>(userGetScore_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetScoreList() {
        return java.util.Collections.unmodifiableList(userGetScore_);
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScoreCount() {
        return userGetScore_.size();
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScore(int index) {
        return userGetScore_.get(index);
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder setUserGetScore(
          int index, int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addUserGetScore(int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addAllUserGetScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetScoreIsMutable();
        super.addAll(values, userGetScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder clearUserGetScore() {
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated int32 win_order = 22;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.TableResponse_yjqf)
    }

    static {
      defaultInstance = new TableResponse_yjqf(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.TableResponse_yjqf)
  }

  public interface QiePaiStartOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 qiepai_chair = 1;
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    boolean hasQiepaiChair();
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    int getQiepaiChair();

    // optional int32 display_time = 2;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional bool is_animation = 3;
    /**
     * <code>optional bool is_animation = 3;</code>
     *
     * <pre>
     *要不要放动画
     * </pre>
     */
    boolean hasIsAnimation();
    /**
     * <code>optional bool is_animation = 3;</code>
     *
     * <pre>
     *要不要放动画
     * </pre>
     */
    boolean getIsAnimation();
  }
  /**
   * Protobuf type {@code yjqf.QiePaiStart}
   *
   * <pre>
   *切牌开始 1007
   * </pre>
   */
  public static final class QiePaiStart extends
      com.google.protobuf.GeneratedMessage
      implements QiePaiStartOrBuilder {
    // Use QiePaiStart.newBuilder() to construct.
    private QiePaiStart(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private QiePaiStart(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final QiePaiStart defaultInstance;
    public static QiePaiStart getDefaultInstance() {
      return defaultInstance;
    }

    public QiePaiStart getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private QiePaiStart(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              qiepaiChair_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              isAnimation_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_QiePaiStart_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_QiePaiStart_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart.Builder.class);
    }

    public static com.google.protobuf.Parser<QiePaiStart> PARSER =
        new com.google.protobuf.AbstractParser<QiePaiStart>() {
      public QiePaiStart parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new QiePaiStart(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<QiePaiStart> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 qiepai_chair = 1;
    public static final int QIEPAI_CHAIR_FIELD_NUMBER = 1;
    private int qiepaiChair_;
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public boolean hasQiepaiChair() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public int getQiepaiChair() {
      return qiepaiChair_;
    }

    // optional int32 display_time = 2;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 2;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional bool is_animation = 3;
    public static final int IS_ANIMATION_FIELD_NUMBER = 3;
    private boolean isAnimation_;
    /**
     * <code>optional bool is_animation = 3;</code>
     *
     * <pre>
     *要不要放动画
     * </pre>
     */
    public boolean hasIsAnimation() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool is_animation = 3;</code>
     *
     * <pre>
     *要不要放动画
     * </pre>
     */
    public boolean getIsAnimation() {
      return isAnimation_;
    }

    private void initFields() {
      qiepaiChair_ = 0;
      displayTime_ = 0;
      isAnimation_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, qiepaiChair_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, isAnimation_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, qiepaiChair_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isAnimation_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.QiePaiStart}
     *
     * <pre>
     *切牌开始 1007
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStartOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_QiePaiStart_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_QiePaiStart_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        qiepaiChair_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        isAnimation_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_QiePaiStart_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.qiepaiChair_ = qiepaiChair_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isAnimation_ = isAnimation_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart.getDefaultInstance()) return this;
        if (other.hasQiepaiChair()) {
          setQiepaiChair(other.getQiepaiChair());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasIsAnimation()) {
          setIsAnimation(other.getIsAnimation());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiStart) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 qiepai_chair = 1;
      private int qiepaiChair_ ;
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public boolean hasQiepaiChair() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public int getQiepaiChair() {
        return qiepaiChair_;
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder setQiepaiChair(int value) {
        bitField0_ |= 0x00000001;
        qiepaiChair_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder clearQiepaiChair() {
        bitField0_ = (bitField0_ & ~0x00000001);
        qiepaiChair_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 2;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000002;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_animation = 3;
      private boolean isAnimation_ ;
      /**
       * <code>optional bool is_animation = 3;</code>
       *
       * <pre>
       *要不要放动画
       * </pre>
       */
      public boolean hasIsAnimation() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool is_animation = 3;</code>
       *
       * <pre>
       *要不要放动画
       * </pre>
       */
      public boolean getIsAnimation() {
        return isAnimation_;
      }
      /**
       * <code>optional bool is_animation = 3;</code>
       *
       * <pre>
       *要不要放动画
       * </pre>
       */
      public Builder setIsAnimation(boolean value) {
        bitField0_ |= 0x00000004;
        isAnimation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_animation = 3;</code>
       *
       * <pre>
       *要不要放动画
       * </pre>
       */
      public Builder clearIsAnimation() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isAnimation_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.QiePaiStart)
    }

    static {
      defaultInstance = new QiePaiStart(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.QiePaiStart)
  }

  public interface QiePaiResultOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 qiepai_chair = 1;
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    boolean hasQiepaiChair();
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    int getQiepaiChair();

    // optional int32 card_index = 2;
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *牌的索引
     * </pre>
     */
    boolean hasCardIndex();
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *牌的索引
     * </pre>
     */
    int getCardIndex();
  }
  /**
   * Protobuf type {@code yjqf.QiePaiResult}
   *
   * <pre>
   *切牌开始 1008
   * </pre>
   */
  public static final class QiePaiResult extends
      com.google.protobuf.GeneratedMessage
      implements QiePaiResultOrBuilder {
    // Use QiePaiResult.newBuilder() to construct.
    private QiePaiResult(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private QiePaiResult(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final QiePaiResult defaultInstance;
    public static QiePaiResult getDefaultInstance() {
      return defaultInstance;
    }

    public QiePaiResult getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private QiePaiResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              qiepaiChair_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cardIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_QiePaiResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_QiePaiResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult.Builder.class);
    }

    public static com.google.protobuf.Parser<QiePaiResult> PARSER =
        new com.google.protobuf.AbstractParser<QiePaiResult>() {
      public QiePaiResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new QiePaiResult(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<QiePaiResult> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 qiepai_chair = 1;
    public static final int QIEPAI_CHAIR_FIELD_NUMBER = 1;
    private int qiepaiChair_;
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public boolean hasQiepaiChair() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 qiepai_chair = 1;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public int getQiepaiChair() {
      return qiepaiChair_;
    }

    // optional int32 card_index = 2;
    public static final int CARD_INDEX_FIELD_NUMBER = 2;
    private int cardIndex_;
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *牌的索引
     * </pre>
     */
    public boolean hasCardIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card_index = 2;</code>
     *
     * <pre>
     *牌的索引
     * </pre>
     */
    public int getCardIndex() {
      return cardIndex_;
    }

    private void initFields() {
      qiepaiChair_ = 0;
      cardIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, qiepaiChair_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, cardIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, qiepaiChair_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.QiePaiResult}
     *
     * <pre>
     *切牌开始 1008
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_QiePaiResult_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_QiePaiResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        qiepaiChair_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_QiePaiResult_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.qiepaiChair_ = qiepaiChair_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardIndex_ = cardIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult.getDefaultInstance()) return this;
        if (other.hasQiepaiChair()) {
          setQiepaiChair(other.getQiepaiChair());
        }
        if (other.hasCardIndex()) {
          setCardIndex(other.getCardIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.QiePaiResult) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 qiepai_chair = 1;
      private int qiepaiChair_ ;
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public boolean hasQiepaiChair() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public int getQiepaiChair() {
        return qiepaiChair_;
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder setQiepaiChair(int value) {
        bitField0_ |= 0x00000001;
        qiepaiChair_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 qiepai_chair = 1;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder clearQiepaiChair() {
        bitField0_ = (bitField0_ & ~0x00000001);
        qiepaiChair_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_index = 2;
      private int cardIndex_ ;
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *牌的索引
       * </pre>
       */
      public boolean hasCardIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *牌的索引
       * </pre>
       */
      public int getCardIndex() {
        return cardIndex_;
      }
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *牌的索引
       * </pre>
       */
      public Builder setCardIndex(int value) {
        bitField0_ |= 0x00000002;
        cardIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_index = 2;</code>
       *
       * <pre>
       *牌的索引
       * </pre>
       */
      public Builder clearCardIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.QiePaiResult)
    }

    static {
      defaultInstance = new QiePaiResult(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.QiePaiResult)
  }

  public interface RefreshCardData_yjqfOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_count = 1;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code yjqf.RefreshCardData_yjqf}
   *
   * <pre>
   *刷新手牌  1009
   * </pre>
   */
  public static final class RefreshCardData_yjqf extends
      com.google.protobuf.GeneratedMessage
      implements RefreshCardData_yjqfOrBuilder {
    // Use RefreshCardData_yjqf.newBuilder() to construct.
    private RefreshCardData_yjqf(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshCardData_yjqf(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshCardData_yjqf defaultInstance;
    public static RefreshCardData_yjqf getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshCardData_yjqf getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshCardData_yjqf(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_RefreshCardData_yjqf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_RefreshCardData_yjqf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshCardData_yjqf> PARSER =
        new com.google.protobuf.AbstractParser<RefreshCardData_yjqf>() {
      public RefreshCardData_yjqf parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshCardData_yjqf(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshCardData_yjqf> getParserForType() {
      return PARSER;
    }

    // repeated int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    private void initFields() {
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(1, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.RefreshCardData_yjqf}
     *
     * <pre>
     *刷新手牌  1009
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqfOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_RefreshCardData_yjqf_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_RefreshCardData_yjqf_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_RefreshCardData_yjqf_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf.getDefaultInstance()) return this;
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.RefreshCardData_yjqf) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_count = 1;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.RefreshCardData_yjqf)
    }

    static {
      defaultInstance = new RefreshCardData_yjqf(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.RefreshCardData_yjqf)
  }

  public interface Effect_type_yjqfOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 seat_index = 1;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    int getSeatIndex();

    // optional int32 type = 2;
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1：翻牌,2:从玩家飞到记分器，3：从记分器飞到玩家
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1：翻牌,2:从玩家飞到记分器，3：从记分器飞到玩家
     * </pre>
     */
    int getType();

    // repeated int32 data = 3;
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    java.util.List<java.lang.Integer> getDataList();
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    int getDataCount();
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    int getData(int index);

    // optional int32 is_animation = 4;
    /**
     * <code>optional int32 is_animation = 4;</code>
     *
     * <pre>
     *0：直接数据显示 1：需要动画
     * </pre>
     */
    boolean hasIsAnimation();
    /**
     * <code>optional int32 is_animation = 4;</code>
     *
     * <pre>
     *0：直接数据显示 1：需要动画
     * </pre>
     */
    int getIsAnimation();

    // optional int32 table_score = 5;
    /**
     * <code>optional int32 table_score = 5;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    boolean hasTableScore();
    /**
     * <code>optional int32 table_score = 5;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    int getTableScore();

    // repeated int32 fen_card = 6;
    /**
     * <code>repeated int32 fen_card = 6;</code>
     *
     * <pre>
     *分牌个数 0:5、 1:10 、2：k
     * </pre>
     */
    java.util.List<java.lang.Integer> getFenCardList();
    /**
     * <code>repeated int32 fen_card = 6;</code>
     *
     * <pre>
     *分牌个数 0:5、 1:10 、2：k
     * </pre>
     */
    int getFenCardCount();
    /**
     * <code>repeated int32 fen_card = 6;</code>
     *
     * <pre>
     *分牌个数 0:5、 1:10 、2：k
     * </pre>
     */
    int getFenCard(int index);

    // repeated int32 ji_score = 7;
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getJiScoreList();
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getJiScoreCount();
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getJiScore(int index);
  }
  /**
   * Protobuf type {@code yjqf.Effect_type_yjqf}
   *
   * <pre>
   *动画特效  1010
   * </pre>
   */
  public static final class Effect_type_yjqf extends
      com.google.protobuf.GeneratedMessage
      implements Effect_type_yjqfOrBuilder {
    // Use Effect_type_yjqf.newBuilder() to construct.
    private Effect_type_yjqf(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Effect_type_yjqf(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Effect_type_yjqf defaultInstance;
    public static Effect_type_yjqf getDefaultInstance() {
      return defaultInstance;
    }

    public Effect_type_yjqf getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Effect_type_yjqf(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seatIndex_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              type_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                data_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              data_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                data_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                data_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              isAnimation_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              tableScore_ = input.readInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                fenCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              fenCard_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                fenCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                fenCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                jiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              jiScore_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                jiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                jiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          fenCard_ = java.util.Collections.unmodifiableList(fenCard_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          jiScore_ = java.util.Collections.unmodifiableList(jiScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Effect_type_yjqf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Effect_type_yjqf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf.Builder.class);
    }

    public static com.google.protobuf.Parser<Effect_type_yjqf> PARSER =
        new com.google.protobuf.AbstractParser<Effect_type_yjqf>() {
      public Effect_type_yjqf parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Effect_type_yjqf(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Effect_type_yjqf> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 seat_index = 1;
    public static final int SEAT_INDEX_FIELD_NUMBER = 1;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *座位号
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional int32 type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1：翻牌,2:从玩家飞到记分器，3：从记分器飞到玩家
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1：翻牌,2:从玩家飞到记分器，3：从记分器飞到玩家
     * </pre>
     */
    public int getType() {
      return type_;
    }

    // repeated int32 data = 3;
    public static final int DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> data_;
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDataList() {
      return data_;
    }
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    public int getData(int index) {
      return data_.get(index);
    }

    // optional int32 is_animation = 4;
    public static final int IS_ANIMATION_FIELD_NUMBER = 4;
    private int isAnimation_;
    /**
     * <code>optional int32 is_animation = 4;</code>
     *
     * <pre>
     *0：直接数据显示 1：需要动画
     * </pre>
     */
    public boolean hasIsAnimation() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 is_animation = 4;</code>
     *
     * <pre>
     *0：直接数据显示 1：需要动画
     * </pre>
     */
    public int getIsAnimation() {
      return isAnimation_;
    }

    // optional int32 table_score = 5;
    public static final int TABLE_SCORE_FIELD_NUMBER = 5;
    private int tableScore_;
    /**
     * <code>optional int32 table_score = 5;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    public boolean hasTableScore() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 table_score = 5;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    public int getTableScore() {
      return tableScore_;
    }

    // repeated int32 fen_card = 6;
    public static final int FEN_CARD_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> fenCard_;
    /**
     * <code>repeated int32 fen_card = 6;</code>
     *
     * <pre>
     *分牌个数 0:5、 1:10 、2：k
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getFenCardList() {
      return fenCard_;
    }
    /**
     * <code>repeated int32 fen_card = 6;</code>
     *
     * <pre>
     *分牌个数 0:5、 1:10 、2：k
     * </pre>
     */
    public int getFenCardCount() {
      return fenCard_.size();
    }
    /**
     * <code>repeated int32 fen_card = 6;</code>
     *
     * <pre>
     *分牌个数 0:5、 1:10 、2：k
     * </pre>
     */
    public int getFenCard(int index) {
      return fenCard_.get(index);
    }

    // repeated int32 ji_score = 7;
    public static final int JI_SCORE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> jiScore_;
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJiScoreList() {
      return jiScore_;
    }
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getJiScoreCount() {
      return jiScore_.size();
    }
    /**
     * <code>repeated int32 ji_score = 7;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getJiScore(int index) {
      return jiScore_.get(index);
    }

    private void initFields() {
      seatIndex_ = 0;
      type_ = 0;
      data_ = java.util.Collections.emptyList();
      isAnimation_ = 0;
      tableScore_ = 0;
      fenCard_ = java.util.Collections.emptyList();
      jiScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, seatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, type_);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeInt32(3, data_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, isAnimation_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, tableScore_);
      }
      for (int i = 0; i < fenCard_.size(); i++) {
        output.writeInt32(6, fenCard_.get(i));
      }
      for (int i = 0; i < jiScore_.size(); i++) {
        output.writeInt32(7, jiScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, seatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, type_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < data_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(data_.get(i));
        }
        size += dataSize;
        size += 1 * getDataList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, isAnimation_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, tableScore_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < fenCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(fenCard_.get(i));
        }
        size += dataSize;
        size += 1 * getFenCardList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getJiScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.Effect_type_yjqf}
     *
     * <pre>
     *动画特效  1010
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqfOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Effect_type_yjqf_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Effect_type_yjqf_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        isAnimation_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        tableScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        fenCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        jiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Effect_type_yjqf_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isAnimation_ = isAnimation_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tableScore_ = tableScore_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          fenCard_ = java.util.Collections.unmodifiableList(fenCard_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.fenCard_ = fenCard_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          jiScore_ = java.util.Collections.unmodifiableList(jiScore_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.jiScore_ = jiScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf.getDefaultInstance()) return this;
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          onChanged();
        }
        if (other.hasIsAnimation()) {
          setIsAnimation(other.getIsAnimation());
        }
        if (other.hasTableScore()) {
          setTableScore(other.getTableScore());
        }
        if (!other.fenCard_.isEmpty()) {
          if (fenCard_.isEmpty()) {
            fenCard_ = other.fenCard_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureFenCardIsMutable();
            fenCard_.addAll(other.fenCard_);
          }
          onChanged();
        }
        if (!other.jiScore_.isEmpty()) {
          if (jiScore_.isEmpty()) {
            jiScore_ = other.jiScore_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureJiScoreIsMutable();
            jiScore_.addAll(other.jiScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Effect_type_yjqf) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 seat_index = 1;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *座位号
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 type = 2;
      private int type_ ;
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1：翻牌,2:从玩家飞到记分器，3：从记分器飞到玩家
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1：翻牌,2:从玩家飞到记分器，3：从记分器飞到玩家
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1：翻牌,2:从玩家飞到记分器，3：从记分器飞到玩家
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1：翻牌,2:从玩家飞到记分器，3：从记分器飞到玩家
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 data = 3;
      private java.util.List<java.lang.Integer> data_ = java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = new java.util.ArrayList<java.lang.Integer>(data_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDataList() {
        return java.util.Collections.unmodifiableList(data_);
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public int getDataCount() {
        return data_.size();
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public int getData(int index) {
        return data_.get(index);
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setData(
          int index, int value) {
        ensureDataIsMutable();
        data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder addData(int value) {
        ensureDataIsMutable();
        data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDataIsMutable();
        super.addAll(values, data_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearData() {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 is_animation = 4;
      private int isAnimation_ ;
      /**
       * <code>optional int32 is_animation = 4;</code>
       *
       * <pre>
       *0：直接数据显示 1：需要动画
       * </pre>
       */
      public boolean hasIsAnimation() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 is_animation = 4;</code>
       *
       * <pre>
       *0：直接数据显示 1：需要动画
       * </pre>
       */
      public int getIsAnimation() {
        return isAnimation_;
      }
      /**
       * <code>optional int32 is_animation = 4;</code>
       *
       * <pre>
       *0：直接数据显示 1：需要动画
       * </pre>
       */
      public Builder setIsAnimation(int value) {
        bitField0_ |= 0x00000008;
        isAnimation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_animation = 4;</code>
       *
       * <pre>
       *0：直接数据显示 1：需要动画
       * </pre>
       */
      public Builder clearIsAnimation() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isAnimation_ = 0;
        onChanged();
        return this;
      }

      // optional int32 table_score = 5;
      private int tableScore_ ;
      /**
       * <code>optional int32 table_score = 5;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public boolean hasTableScore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 table_score = 5;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public int getTableScore() {
        return tableScore_;
      }
      /**
       * <code>optional int32 table_score = 5;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public Builder setTableScore(int value) {
        bitField0_ |= 0x00000010;
        tableScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 table_score = 5;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public Builder clearTableScore() {
        bitField0_ = (bitField0_ & ~0x00000010);
        tableScore_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 fen_card = 6;
      private java.util.List<java.lang.Integer> fenCard_ = java.util.Collections.emptyList();
      private void ensureFenCardIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          fenCard_ = new java.util.ArrayList<java.lang.Integer>(fenCard_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 fen_card = 6;</code>
       *
       * <pre>
       *分牌个数 0:5、 1:10 、2：k
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getFenCardList() {
        return java.util.Collections.unmodifiableList(fenCard_);
      }
      /**
       * <code>repeated int32 fen_card = 6;</code>
       *
       * <pre>
       *分牌个数 0:5、 1:10 、2：k
       * </pre>
       */
      public int getFenCardCount() {
        return fenCard_.size();
      }
      /**
       * <code>repeated int32 fen_card = 6;</code>
       *
       * <pre>
       *分牌个数 0:5、 1:10 、2：k
       * </pre>
       */
      public int getFenCard(int index) {
        return fenCard_.get(index);
      }
      /**
       * <code>repeated int32 fen_card = 6;</code>
       *
       * <pre>
       *分牌个数 0:5、 1:10 、2：k
       * </pre>
       */
      public Builder setFenCard(
          int index, int value) {
        ensureFenCardIsMutable();
        fenCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fen_card = 6;</code>
       *
       * <pre>
       *分牌个数 0:5、 1:10 、2：k
       * </pre>
       */
      public Builder addFenCard(int value) {
        ensureFenCardIsMutable();
        fenCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fen_card = 6;</code>
       *
       * <pre>
       *分牌个数 0:5、 1:10 、2：k
       * </pre>
       */
      public Builder addAllFenCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFenCardIsMutable();
        super.addAll(values, fenCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fen_card = 6;</code>
       *
       * <pre>
       *分牌个数 0:5、 1:10 、2：k
       * </pre>
       */
      public Builder clearFenCard() {
        fenCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 ji_score = 7;
      private java.util.List<java.lang.Integer> jiScore_ = java.util.Collections.emptyList();
      private void ensureJiScoreIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          jiScore_ = new java.util.ArrayList<java.lang.Integer>(jiScore_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJiScoreList() {
        return java.util.Collections.unmodifiableList(jiScore_);
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getJiScoreCount() {
        return jiScore_.size();
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getJiScore(int index) {
        return jiScore_.get(index);
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder setJiScore(
          int index, int value) {
        ensureJiScoreIsMutable();
        jiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder addJiScore(int value) {
        ensureJiScoreIsMutable();
        jiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder addAllJiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJiScoreIsMutable();
        super.addAll(values, jiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 7;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder clearJiScore() {
        jiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.Effect_type_yjqf)
    }

    static {
      defaultInstance = new Effect_type_yjqf(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.Effect_type_yjqf)
  }

  public interface Send_dipai_yjqfOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 card_count = 1;
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *1：底牌数量
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *1：底牌数量
     * </pre>
     */
    int getCardCount();

    // repeated int32 card_data = 2;
    /**
     * <code>repeated int32 card_data = 2;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardDataList();
    /**
     * <code>repeated int32 card_data = 2;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    int getCardDataCount();
    /**
     * <code>repeated int32 card_data = 2;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    int getCardData(int index);

    // repeated int32 card_score = 3;
    /**
     * <code>repeated int32 card_score = 3;</code>
     *
     * <pre>
     *底牌分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardScoreList();
    /**
     * <code>repeated int32 card_score = 3;</code>
     *
     * <pre>
     *底牌分数
     * </pre>
     */
    int getCardScoreCount();
    /**
     * <code>repeated int32 card_score = 3;</code>
     *
     * <pre>
     *底牌分数
     * </pre>
     */
    int getCardScore(int index);

    // optional int32 seat_index = 4;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *获得分数的椅子号
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *获得分数的椅子号
     * </pre>
     */
    int getSeatIndex();

    // repeated int32 ji_score = 5;
    /**
     * <code>repeated int32 ji_score = 5;</code>
     *
     * <pre>
     *玩家积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getJiScoreList();
    /**
     * <code>repeated int32 ji_score = 5;</code>
     *
     * <pre>
     *玩家积分
     * </pre>
     */
    int getJiScoreCount();
    /**
     * <code>repeated int32 ji_score = 5;</code>
     *
     * <pre>
     *玩家积分
     * </pre>
     */
    int getJiScore(int index);
  }
  /**
   * Protobuf type {@code yjqf.Send_dipai_yjqf}
   *
   * <pre>
   *显示底牌  1011
   * </pre>
   */
  public static final class Send_dipai_yjqf extends
      com.google.protobuf.GeneratedMessage
      implements Send_dipai_yjqfOrBuilder {
    // Use Send_dipai_yjqf.newBuilder() to construct.
    private Send_dipai_yjqf(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Send_dipai_yjqf(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Send_dipai_yjqf defaultInstance;
    public static Send_dipai_yjqf getDefaultInstance() {
      return defaultInstance;
    }

    public Send_dipai_yjqf getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Send_dipai_yjqf(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cardCount_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardScore_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cardScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              seatIndex_ = input.readInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                jiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              jiScore_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                jiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                jiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardScore_ = java.util.Collections.unmodifiableList(cardScore_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          jiScore_ = java.util.Collections.unmodifiableList(jiScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Send_dipai_yjqf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Send_dipai_yjqf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf.Builder.class);
    }

    public static com.google.protobuf.Parser<Send_dipai_yjqf> PARSER =
        new com.google.protobuf.AbstractParser<Send_dipai_yjqf>() {
      public Send_dipai_yjqf parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Send_dipai_yjqf(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Send_dipai_yjqf> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *1：底牌数量
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *1：底牌数量
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    // repeated int32 card_data = 2;
    public static final int CARD_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardData_;
    /**
     * <code>repeated int32 card_data = 2;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardDataList() {
      return cardData_;
    }
    /**
     * <code>repeated int32 card_data = 2;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    public int getCardDataCount() {
      return cardData_.size();
    }
    /**
     * <code>repeated int32 card_data = 2;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    public int getCardData(int index) {
      return cardData_.get(index);
    }

    // repeated int32 card_score = 3;
    public static final int CARD_SCORE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cardScore_;
    /**
     * <code>repeated int32 card_score = 3;</code>
     *
     * <pre>
     *底牌分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardScoreList() {
      return cardScore_;
    }
    /**
     * <code>repeated int32 card_score = 3;</code>
     *
     * <pre>
     *底牌分数
     * </pre>
     */
    public int getCardScoreCount() {
      return cardScore_.size();
    }
    /**
     * <code>repeated int32 card_score = 3;</code>
     *
     * <pre>
     *底牌分数
     * </pre>
     */
    public int getCardScore(int index) {
      return cardScore_.get(index);
    }

    // optional int32 seat_index = 4;
    public static final int SEAT_INDEX_FIELD_NUMBER = 4;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *获得分数的椅子号
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *获得分数的椅子号
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // repeated int32 ji_score = 5;
    public static final int JI_SCORE_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> jiScore_;
    /**
     * <code>repeated int32 ji_score = 5;</code>
     *
     * <pre>
     *玩家积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJiScoreList() {
      return jiScore_;
    }
    /**
     * <code>repeated int32 ji_score = 5;</code>
     *
     * <pre>
     *玩家积分
     * </pre>
     */
    public int getJiScoreCount() {
      return jiScore_.size();
    }
    /**
     * <code>repeated int32 ji_score = 5;</code>
     *
     * <pre>
     *玩家积分
     * </pre>
     */
    public int getJiScore(int index) {
      return jiScore_.get(index);
    }

    private void initFields() {
      cardCount_ = 0;
      cardData_ = java.util.Collections.emptyList();
      cardScore_ = java.util.Collections.emptyList();
      seatIndex_ = 0;
      jiScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cardCount_);
      }
      for (int i = 0; i < cardData_.size(); i++) {
        output.writeInt32(2, cardData_.get(i));
      }
      for (int i = 0; i < cardScore_.size(); i++) {
        output.writeInt32(3, cardScore_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, seatIndex_);
      }
      for (int i = 0; i < jiScore_.size(); i++) {
        output.writeInt32(5, jiScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardScore_.get(i));
        }
        size += dataSize;
        size += 1 * getCardScoreList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, seatIndex_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getJiScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.Send_dipai_yjqf}
     *
     * <pre>
     *显示底牌  1011
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqfOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Send_dipai_yjqf_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Send_dipai_yjqf_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        jiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Send_dipai_yjqf_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardCount_ = cardCount_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardData_ = cardData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cardScore_ = java.util.Collections.unmodifiableList(cardScore_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cardScore_ = cardScore_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.seatIndex_ = seatIndex_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          jiScore_ = java.util.Collections.unmodifiableList(jiScore_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.jiScore_ = jiScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf.getDefaultInstance()) return this;
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        if (!other.cardData_.isEmpty()) {
          if (cardData_.isEmpty()) {
            cardData_ = other.cardData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardDataIsMutable();
            cardData_.addAll(other.cardData_);
          }
          onChanged();
        }
        if (!other.cardScore_.isEmpty()) {
          if (cardScore_.isEmpty()) {
            cardScore_ = other.cardScore_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardScoreIsMutable();
            cardScore_.addAll(other.cardScore_);
          }
          onChanged();
        }
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (!other.jiScore_.isEmpty()) {
          if (jiScore_.isEmpty()) {
            jiScore_ = other.jiScore_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureJiScoreIsMutable();
            jiScore_.addAll(other.jiScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Send_dipai_yjqf) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 card_count = 1;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *1：底牌数量
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *1：底牌数量
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *1：底牌数量
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000001;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *1：底牌数量
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_data = 2;
      private java.util.List<java.lang.Integer> cardData_ = java.util.Collections.emptyList();
      private void ensureCardDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardData_ = new java.util.ArrayList<java.lang.Integer>(cardData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 card_data = 2;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardDataList() {
        return java.util.Collections.unmodifiableList(cardData_);
      }
      /**
       * <code>repeated int32 card_data = 2;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public int getCardDataCount() {
        return cardData_.size();
      }
      /**
       * <code>repeated int32 card_data = 2;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public int getCardData(int index) {
        return cardData_.get(index);
      }
      /**
       * <code>repeated int32 card_data = 2;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder setCardData(
          int index, int value) {
        ensureCardDataIsMutable();
        cardData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 2;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder addCardData(int value) {
        ensureCardDataIsMutable();
        cardData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 2;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder addAllCardData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardDataIsMutable();
        super.addAll(values, cardData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 2;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder clearCardData() {
        cardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 card_score = 3;
      private java.util.List<java.lang.Integer> cardScore_ = java.util.Collections.emptyList();
      private void ensureCardScoreIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardScore_ = new java.util.ArrayList<java.lang.Integer>(cardScore_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 card_score = 3;</code>
       *
       * <pre>
       *底牌分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardScoreList() {
        return java.util.Collections.unmodifiableList(cardScore_);
      }
      /**
       * <code>repeated int32 card_score = 3;</code>
       *
       * <pre>
       *底牌分数
       * </pre>
       */
      public int getCardScoreCount() {
        return cardScore_.size();
      }
      /**
       * <code>repeated int32 card_score = 3;</code>
       *
       * <pre>
       *底牌分数
       * </pre>
       */
      public int getCardScore(int index) {
        return cardScore_.get(index);
      }
      /**
       * <code>repeated int32 card_score = 3;</code>
       *
       * <pre>
       *底牌分数
       * </pre>
       */
      public Builder setCardScore(
          int index, int value) {
        ensureCardScoreIsMutable();
        cardScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_score = 3;</code>
       *
       * <pre>
       *底牌分数
       * </pre>
       */
      public Builder addCardScore(int value) {
        ensureCardScoreIsMutable();
        cardScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_score = 3;</code>
       *
       * <pre>
       *底牌分数
       * </pre>
       */
      public Builder addAllCardScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardScoreIsMutable();
        super.addAll(values, cardScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_score = 3;</code>
       *
       * <pre>
       *底牌分数
       * </pre>
       */
      public Builder clearCardScore() {
        cardScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 seat_index = 4;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *获得分数的椅子号
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *获得分数的椅子号
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *获得分数的椅子号
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000008;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *获得分数的椅子号
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 ji_score = 5;
      private java.util.List<java.lang.Integer> jiScore_ = java.util.Collections.emptyList();
      private void ensureJiScoreIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          jiScore_ = new java.util.ArrayList<java.lang.Integer>(jiScore_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 ji_score = 5;</code>
       *
       * <pre>
       *玩家积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJiScoreList() {
        return java.util.Collections.unmodifiableList(jiScore_);
      }
      /**
       * <code>repeated int32 ji_score = 5;</code>
       *
       * <pre>
       *玩家积分
       * </pre>
       */
      public int getJiScoreCount() {
        return jiScore_.size();
      }
      /**
       * <code>repeated int32 ji_score = 5;</code>
       *
       * <pre>
       *玩家积分
       * </pre>
       */
      public int getJiScore(int index) {
        return jiScore_.get(index);
      }
      /**
       * <code>repeated int32 ji_score = 5;</code>
       *
       * <pre>
       *玩家积分
       * </pre>
       */
      public Builder setJiScore(
          int index, int value) {
        ensureJiScoreIsMutable();
        jiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 5;</code>
       *
       * <pre>
       *玩家积分
       * </pre>
       */
      public Builder addJiScore(int value) {
        ensureJiScoreIsMutable();
        jiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 5;</code>
       *
       * <pre>
       *玩家积分
       * </pre>
       */
      public Builder addAllJiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJiScoreIsMutable();
        super.addAll(values, jiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ji_score = 5;</code>
       *
       * <pre>
       *玩家积分
       * </pre>
       */
      public Builder clearJiScore() {
        jiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.Send_dipai_yjqf)
    }

    static {
      defaultInstance = new Send_dipai_yjqf(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.Send_dipai_yjqf)
  }

  public interface Request_qiepai_yjqfOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 card_index = 1;
    /**
     * <code>optional int32 card_index = 1;</code>
     *
     * <pre>
     *1：牌索引
     * </pre>
     */
    boolean hasCardIndex();
    /**
     * <code>optional int32 card_index = 1;</code>
     *
     * <pre>
     *1：牌索引
     * </pre>
     */
    int getCardIndex();
  }
  /**
   * Protobuf type {@code yjqf.Request_qiepai_yjqf}
   *
   * <pre>
   *切牌请求
   * </pre>
   */
  public static final class Request_qiepai_yjqf extends
      com.google.protobuf.GeneratedMessage
      implements Request_qiepai_yjqfOrBuilder {
    // Use Request_qiepai_yjqf.newBuilder() to construct.
    private Request_qiepai_yjqf(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Request_qiepai_yjqf(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Request_qiepai_yjqf defaultInstance;
    public static Request_qiepai_yjqf getDefaultInstance() {
      return defaultInstance;
    }

    public Request_qiepai_yjqf getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Request_qiepai_yjqf(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cardIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Request_qiepai_yjqf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Request_qiepai_yjqf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf.Builder.class);
    }

    public static com.google.protobuf.Parser<Request_qiepai_yjqf> PARSER =
        new com.google.protobuf.AbstractParser<Request_qiepai_yjqf>() {
      public Request_qiepai_yjqf parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Request_qiepai_yjqf(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Request_qiepai_yjqf> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 card_index = 1;
    public static final int CARD_INDEX_FIELD_NUMBER = 1;
    private int cardIndex_;
    /**
     * <code>optional int32 card_index = 1;</code>
     *
     * <pre>
     *1：牌索引
     * </pre>
     */
    public boolean hasCardIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_index = 1;</code>
     *
     * <pre>
     *1：牌索引
     * </pre>
     */
    public int getCardIndex() {
      return cardIndex_;
    }

    private void initFields() {
      cardIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cardIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cardIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code yjqf.Request_qiepai_yjqf}
     *
     * <pre>
     *切牌请求
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqfOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Request_qiepai_yjqf_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Request_qiepai_yjqf_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf.class, protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf.Builder.class);
      }

      // Construct using protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.internal_static_yjqf_Request_qiepai_yjqf_descriptor;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf getDefaultInstanceForType() {
        return protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf.getDefaultInstance();
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf build() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf buildPartial() {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf result = new protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardIndex_ = cardIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf) {
          return mergeFrom((protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf other) {
        if (other == protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf.getDefaultInstance()) return this;
        if (other.hasCardIndex()) {
          setCardIndex(other.getCardIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.yuanjiangqf.yuanjiangqfRsp.Request_qiepai_yjqf) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 card_index = 1;
      private int cardIndex_ ;
      /**
       * <code>optional int32 card_index = 1;</code>
       *
       * <pre>
       *1：牌索引
       * </pre>
       */
      public boolean hasCardIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 card_index = 1;</code>
       *
       * <pre>
       *1：牌索引
       * </pre>
       */
      public int getCardIndex() {
        return cardIndex_;
      }
      /**
       * <code>optional int32 card_index = 1;</code>
       *
       * <pre>
       *1：牌索引
       * </pre>
       */
      public Builder setCardIndex(int value) {
        bitField0_ |= 0x00000001;
        cardIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_index = 1;</code>
       *
       * <pre>
       *1：牌索引
       * </pre>
       */
      public Builder clearCardIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cardIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:yjqf.Request_qiepai_yjqf)
    }

    static {
      defaultInstance = new Request_qiepai_yjqf(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:yjqf.Request_qiepai_yjqf)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_GameStart_yjqf_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_GameStart_yjqf_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_SendCard_yjqf_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_SendCard_yjqf_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_OutCardDataWsk_yjqf_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_OutCardDataWsk_yjqf_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_RefreshScore_yjqf_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_RefreshScore_yjqf_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_PukeGameEndWsk_yjqf_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_PukeGameEndWsk_yjqf_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_TableResponse_yjqf_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_TableResponse_yjqf_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_QiePaiStart_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_QiePaiStart_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_QiePaiResult_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_QiePaiResult_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_RefreshCardData_yjqf_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_RefreshCardData_yjqf_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_Effect_type_yjqf_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_Effect_type_yjqf_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_Send_dipai_yjqf_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_Send_dipai_yjqf_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_yjqf_Request_qiepai_yjqf_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_yjqf_Request_qiepai_yjqf_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017yyqf/yjqf.proto\022\004yjqf\032\024basic/protocol." +
      "proto\"T\n\016GameStart_yjqf\022\034\n\troom_info\030\001 \001" +
      "(\0132\t.RoomInfo\022$\n\007players\030\002 \003(\0132\023.RoomPla" +
      "yerResponse\"\225\001\n\rSendCard_yjqf\022\022\n\ncard_co" +
      "unt\030\001 \003(\005\022\'\n\ncards_data\030\002 \003(\0132\023.Int32Arr" +
      "ayResponse\022\030\n\020base_cards_count\030\003 \001(\005\022\027\n\017" +
      "base_cards_data\030\004 \003(\005\022\024\n\014display_time\030\005 " +
      "\001(\005\"\242\003\n\023OutCardDataWsk_yjqf\022\027\n\017out_card_" +
      "player\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\023\n\013card" +
      "s_count\030\003 \001(\005\022\021\n\tcard_type\030\004 \001(\005\022\022\n\ncur_",
      "player\030\005 \001(\005\022\025\n\rpr_cards_data\030\006 \003(\005\022\026\n\016p" +
      "r_cards_count\030\007 \001(\005\022\030\n\020pr_out_card_type\030" +
      "\010 \001(\005\022\024\n\014is_first_out\030\t \001(\010\022\024\n\014display_t" +
      "ime\030\n \001(\005\022\031\n\021user_can_out_data\030\013 \003(\005\022\032\n\022" +
      "user_can_out_count\030\014 \001(\005\022\027\n\017hand_card_co" +
      "unt\030\016 \003(\005\022,\n\017hand_cards_data\030\017 \003(\0132\023.Int" +
      "32ArrayResponse\022\021\n\twin_order\030\020 \003(\005\022\034\n\024is" +
      "_current_first_out\030\021 \001(\005\"y\n\021RefreshScore" +
      "_yjqf\022\024\n\014is_reconnect\030\001 \001(\010\022\020\n\010ji_score\030" +
      "\002 \003(\005\022\020\n\010xi_score\030\003 \003(\005\022\024\n\014all_ji_score\030",
      "\004 \003(\005\022\024\n\014all_xi_score\030\005 \003(\005\"\375\002\n\023PukeGame" +
      "EndWsk_yjqf\022\034\n\troom_info\030\001 \001(\0132\t.RoomInf" +
      "o\022\022\n\ncard_count\030\002 \003(\005\022\'\n\ncards_data\030\003 \003(" +
      "\0132\023.Int32ArrayResponse\022\016\n\006reason\030\004 \001(\005\022\021" +
      "\n\twin_order\030\005 \003(\005\022\021\n\twin_score\030\006 \003(\005\022\020\n\010" +
      "ji_score\030\007 \003(\005\022\020\n\010xi_score\030\010 \003(\005\022\024\n\014all_" +
      "ji_score\030\t \003(\005\022\027\n\017all_jiang_score\030\n \003(\005\022" +
      "\024\n\014all_xi_score\030\013 \003(\005\022\025\n\rall_end_score\030\014" +
      " \003(\005\022\031\n\021rounding_ji_score\030\r \003(\005\022\024\n\014xiton" +
      "g_score\030\016 \003(\005\022$\n\007players\030\017 \003(\0132\023.RoomPla",
      "yerResponse\"\313\004\n\022TableResponse_yjqf\022\025\n\rba" +
      "nker_player\030\001 \001(\005\022\026\n\016current_player\030\002 \001(" +
      "\005\022\023\n\013prev_player\030\003 \001(\005\022\017\n\007trustee\030\004 \003(\010\022" +
      "+\n\016out_cards_data\030\005 \003(\0132\023.Int32ArrayResp" +
      "onse\022\027\n\017out_cards_count\030\006 \003(\005\022\023\n\013player_" +
      "pass\030\007 \003(\005\022\021\n\tcard_type\030\010 \003(\005\022\032\n\022pr_out_" +
      "card_player\030\t \001(\005\022\025\n\rpr_cards_data\030\n \003(\005" +
      "\022\026\n\016pr_cards_count\030\013 \001(\005\022\030\n\020pr_out_card_" +
      "type\030\014 \001(\005\022\024\n\014is_first_out\030\r \001(\005\022\024\n\014disp" +
      "lay_time\030\016 \001(\005\022\022\n\ncard_count\030\017 \003(\005\022\'\n\nca",
      "rds_data\030\020 \003(\0132\023.Int32ArrayResponse\022\034\n\tr" +
      "oom_info\030\021 \001(\0132\t.RoomInfo\022$\n\007players\030\022 \003" +
      "(\0132\023.RoomPlayerResponse\022\031\n\021user_can_out_" +
      "data\030\023 \003(\005\022\032\n\022user_can_out_count\030\024 \001(\005\022\026" +
      "\n\016user_get_score\030\025 \003(\005\022\021\n\twin_order\030\026 \003(" +
      "\005\"O\n\013QiePaiStart\022\024\n\014qiepai_chair\030\001 \001(\005\022\024" +
      "\n\014display_time\030\002 \001(\005\022\024\n\014is_animation\030\003 \001" +
      "(\010\"8\n\014QiePaiResult\022\024\n\014qiepai_chair\030\001 \001(\005" +
      "\022\022\n\ncard_index\030\002 \001(\005\"S\n\024RefreshCardData_" +
      "yjqf\022\022\n\ncard_count\030\001 \003(\005\022\'\n\ncards_data\030\002",
      " \003(\0132\023.Int32ArrayResponse\"\221\001\n\020Effect_typ" +
      "e_yjqf\022\022\n\nseat_index\030\001 \001(\005\022\014\n\004type\030\002 \001(\005" +
      "\022\014\n\004data\030\003 \003(\005\022\024\n\014is_animation\030\004 \001(\005\022\023\n\013" +
      "table_score\030\005 \001(\005\022\020\n\010fen_card\030\006 \003(\005\022\020\n\010j" +
      "i_score\030\007 \003(\005\"r\n\017Send_dipai_yjqf\022\022\n\ncard" +
      "_count\030\001 \001(\005\022\021\n\tcard_data\030\002 \003(\005\022\022\n\ncard_" +
      "score\030\003 \003(\005\022\022\n\nseat_index\030\004 \001(\005\022\020\n\010ji_sc" +
      "ore\030\005 \003(\005\")\n\023Request_qiepai_yjqf\022\022\n\ncard" +
      "_index\030\001 \001(\005B,\n\032protobuf.clazz.yuanjiang" +
      "qfB\016yuanjiangqfRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_yjqf_GameStart_yjqf_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_yjqf_GameStart_yjqf_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_GameStart_yjqf_descriptor,
              new java.lang.String[] { "RoomInfo", "Players", });
          internal_static_yjqf_SendCard_yjqf_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_yjqf_SendCard_yjqf_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_SendCard_yjqf_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", "BaseCardsCount", "BaseCardsData", "DisplayTime", });
          internal_static_yjqf_OutCardDataWsk_yjqf_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_yjqf_OutCardDataWsk_yjqf_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_OutCardDataWsk_yjqf_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "UserCanOutData", "UserCanOutCount", "HandCardCount", "HandCardsData", "WinOrder", "IsCurrentFirstOut", });
          internal_static_yjqf_RefreshScore_yjqf_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_yjqf_RefreshScore_yjqf_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_RefreshScore_yjqf_descriptor,
              new java.lang.String[] { "IsReconnect", "JiScore", "XiScore", "AllJiScore", "AllXiScore", });
          internal_static_yjqf_PukeGameEndWsk_yjqf_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_yjqf_PukeGameEndWsk_yjqf_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_PukeGameEndWsk_yjqf_descriptor,
              new java.lang.String[] { "RoomInfo", "CardCount", "CardsData", "Reason", "WinOrder", "WinScore", "JiScore", "XiScore", "AllJiScore", "AllJiangScore", "AllXiScore", "AllEndScore", "RoundingJiScore", "XitongScore", "Players", });
          internal_static_yjqf_TableResponse_yjqf_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_yjqf_TableResponse_yjqf_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_TableResponse_yjqf_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "OutCardsCount", "PlayerPass", "CardType", "PrOutCardPlayer", "PrCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "UserCanOutData", "UserCanOutCount", "UserGetScore", "WinOrder", });
          internal_static_yjqf_QiePaiStart_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_yjqf_QiePaiStart_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_QiePaiStart_descriptor,
              new java.lang.String[] { "QiepaiChair", "DisplayTime", "IsAnimation", });
          internal_static_yjqf_QiePaiResult_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_yjqf_QiePaiResult_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_QiePaiResult_descriptor,
              new java.lang.String[] { "QiepaiChair", "CardIndex", });
          internal_static_yjqf_RefreshCardData_yjqf_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_yjqf_RefreshCardData_yjqf_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_RefreshCardData_yjqf_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", });
          internal_static_yjqf_Effect_type_yjqf_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_yjqf_Effect_type_yjqf_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_Effect_type_yjqf_descriptor,
              new java.lang.String[] { "SeatIndex", "Type", "Data", "IsAnimation", "TableScore", "FenCard", "JiScore", });
          internal_static_yjqf_Send_dipai_yjqf_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_yjqf_Send_dipai_yjqf_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_Send_dipai_yjqf_descriptor,
              new java.lang.String[] { "CardCount", "CardData", "CardScore", "SeatIndex", "JiScore", });
          internal_static_yjqf_Request_qiepai_yjqf_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_yjqf_Request_qiepai_yjqf_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_yjqf_Request_qiepai_yjqf_descriptor,
              new java.lang.String[] { "CardIndex", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
