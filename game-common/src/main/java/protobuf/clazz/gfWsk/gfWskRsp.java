// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wsk/gfwskProto.proto

package protobuf.clazz.gfWsk;

public final class gfWskRsp {
  private gfWskRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RefreshScore_Wsk_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 user_get_score = 1;
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetScoreList();
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getUserGetScoreCount();
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getUserGetScore(int index);

    // optional int32 table_score = 2;
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    boolean hasTableScore();
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    int getTableScore();

    // repeated int32 xian_qian_score = 3;
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    java.util.List<java.lang.Integer> getXianQianScoreList();
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    int getXianQianScoreCount();
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    int getXianQianScore(int index);
  }
  /**
   * Protobuf type {@code gfWsk.RefreshScore_Wsk_GF}
   *
   * <pre>
   *刷新用户抓分
   * </pre>
   */
  public static final class RefreshScore_Wsk_GF extends
      com.google.protobuf.GeneratedMessage
      implements RefreshScore_Wsk_GFOrBuilder {
    // Use RefreshScore_Wsk_GF.newBuilder() to construct.
    private RefreshScore_Wsk_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshScore_Wsk_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshScore_Wsk_GF defaultInstance;
    public static RefreshScore_Wsk_GF getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshScore_Wsk_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshScore_Wsk_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              userGetScore_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              tableScore_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                xianQianScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              xianQianScore_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                xianQianScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                xianQianScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          xianQianScore_ = java.util.Collections.unmodifiableList(xianQianScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_RefreshScore_Wsk_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_RefreshScore_Wsk_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshScore_Wsk_GF> PARSER =
        new com.google.protobuf.AbstractParser<RefreshScore_Wsk_GF>() {
      public RefreshScore_Wsk_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshScore_Wsk_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshScore_Wsk_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 user_get_score = 1;
    public static final int USER_GET_SCORE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> userGetScore_;
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetScoreList() {
      return userGetScore_;
    }
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getUserGetScoreCount() {
      return userGetScore_.size();
    }
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getUserGetScore(int index) {
      return userGetScore_.get(index);
    }

    // optional int32 table_score = 2;
    public static final int TABLE_SCORE_FIELD_NUMBER = 2;
    private int tableScore_;
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    public boolean hasTableScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    public int getTableScore() {
      return tableScore_;
    }

    // repeated int32 xian_qian_score = 3;
    public static final int XIAN_QIAN_SCORE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> xianQianScore_;
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getXianQianScoreList() {
      return xianQianScore_;
    }
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    public int getXianQianScoreCount() {
      return xianQianScore_.size();
    }
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    public int getXianQianScore(int index) {
      return xianQianScore_.get(index);
    }

    private void initFields() {
      userGetScore_ = java.util.Collections.emptyList();
      tableScore_ = 0;
      xianQianScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < userGetScore_.size(); i++) {
        output.writeInt32(1, userGetScore_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, tableScore_);
      }
      for (int i = 0; i < xianQianScore_.size(); i++) {
        output.writeInt32(3, xianQianScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < userGetScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetScore_.get(i));
        }
        size += dataSize;
        size += 1 * getUserGetScoreList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, tableScore_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xianQianScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(xianQianScore_.get(i));
        }
        size += dataSize;
        size += 1 * getXianQianScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.RefreshScore_Wsk_GF}
     *
     * <pre>
     *刷新用户抓分
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_RefreshScore_Wsk_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_RefreshScore_Wsk_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        tableScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        xianQianScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_RefreshScore_Wsk_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF result = new protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.userGetScore_ = userGetScore_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tableScore_ = tableScore_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          xianQianScore_ = java.util.Collections.unmodifiableList(xianQianScore_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.xianQianScore_ = xianQianScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF.getDefaultInstance()) return this;
        if (!other.userGetScore_.isEmpty()) {
          if (userGetScore_.isEmpty()) {
            userGetScore_ = other.userGetScore_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureUserGetScoreIsMutable();
            userGetScore_.addAll(other.userGetScore_);
          }
          onChanged();
        }
        if (other.hasTableScore()) {
          setTableScore(other.getTableScore());
        }
        if (!other.xianQianScore_.isEmpty()) {
          if (xianQianScore_.isEmpty()) {
            xianQianScore_ = other.xianQianScore_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureXianQianScoreIsMutable();
            xianQianScore_.addAll(other.xianQianScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.RefreshScore_Wsk_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 user_get_score = 1;
      private java.util.List<java.lang.Integer> userGetScore_ = java.util.Collections.emptyList();
      private void ensureUserGetScoreIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          userGetScore_ = new java.util.ArrayList<java.lang.Integer>(userGetScore_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetScoreList() {
        return java.util.Collections.unmodifiableList(userGetScore_);
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getUserGetScoreCount() {
        return userGetScore_.size();
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getUserGetScore(int index) {
        return userGetScore_.get(index);
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder setUserGetScore(
          int index, int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder addUserGetScore(int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder addAllUserGetScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetScoreIsMutable();
        super.addAll(values, userGetScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder clearUserGetScore() {
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 table_score = 2;
      private int tableScore_ ;
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public boolean hasTableScore() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public int getTableScore() {
        return tableScore_;
      }
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public Builder setTableScore(int value) {
        bitField0_ |= 0x00000002;
        tableScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public Builder clearTableScore() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tableScore_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 xian_qian_score = 3;
      private java.util.List<java.lang.Integer> xianQianScore_ = java.util.Collections.emptyList();
      private void ensureXianQianScoreIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          xianQianScore_ = new java.util.ArrayList<java.lang.Integer>(xianQianScore_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXianQianScoreList() {
        return java.util.Collections.unmodifiableList(xianQianScore_);
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public int getXianQianScoreCount() {
        return xianQianScore_.size();
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public int getXianQianScore(int index) {
        return xianQianScore_.get(index);
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder setXianQianScore(
          int index, int value) {
        ensureXianQianScoreIsMutable();
        xianQianScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder addXianQianScore(int value) {
        ensureXianQianScoreIsMutable();
        xianQianScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder addAllXianQianScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureXianQianScoreIsMutable();
        super.addAll(values, xianQianScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder clearXianQianScore() {
        xianQianScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.RefreshScore_Wsk_GF)
    }

    static {
      defaultInstance = new RefreshScore_Wsk_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.RefreshScore_Wsk_GF)
  }

  public interface LiangPai_Result_Wsk_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_player = 1;
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    boolean hasOpreatePlayer();
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    int getOpreatePlayer();

    // optional int32 card_data = 2;
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    boolean hasCardData();
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    int getCardData();

    // repeated int32 seat_index = 3;
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    java.util.List<java.lang.Integer> getSeatIndexList();
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    int getSeatIndexCount();
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    int getSeatIndex(int index);
  }
  /**
   * Protobuf type {@code gfWsk.LiangPai_Result_Wsk_GF}
   *
   * <pre>
   *刷新用户抓分
   * </pre>
   */
  public static final class LiangPai_Result_Wsk_GF extends
      com.google.protobuf.GeneratedMessage
      implements LiangPai_Result_Wsk_GFOrBuilder {
    // Use LiangPai_Result_Wsk_GF.newBuilder() to construct.
    private LiangPai_Result_Wsk_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LiangPai_Result_Wsk_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LiangPai_Result_Wsk_GF defaultInstance;
    public static LiangPai_Result_Wsk_GF getDefaultInstance() {
      return defaultInstance;
    }

    public LiangPai_Result_Wsk_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LiangPai_Result_Wsk_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreatePlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cardData_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                seatIndex_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              seatIndex_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                seatIndex_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                seatIndex_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          seatIndex_ = java.util.Collections.unmodifiableList(seatIndex_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_LiangPai_Result_Wsk_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_LiangPai_Result_Wsk_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<LiangPai_Result_Wsk_GF> PARSER =
        new com.google.protobuf.AbstractParser<LiangPai_Result_Wsk_GF>() {
      public LiangPai_Result_Wsk_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LiangPai_Result_Wsk_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LiangPai_Result_Wsk_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_player = 1;
    public static final int OPREATE_PLAYER_FIELD_NUMBER = 1;
    private int opreatePlayer_;
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public boolean hasOpreatePlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public int getOpreatePlayer() {
      return opreatePlayer_;
    }

    // optional int32 card_data = 2;
    public static final int CARD_DATA_FIELD_NUMBER = 2;
    private int cardData_;
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    public boolean hasCardData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    public int getCardData() {
      return cardData_;
    }

    // repeated int32 seat_index = 3;
    public static final int SEAT_INDEX_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> seatIndex_;
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getSeatIndexList() {
      return seatIndex_;
    }
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    public int getSeatIndexCount() {
      return seatIndex_.size();
    }
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    public int getSeatIndex(int index) {
      return seatIndex_.get(index);
    }

    private void initFields() {
      opreatePlayer_ = 0;
      cardData_ = 0;
      seatIndex_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreatePlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, cardData_);
      }
      for (int i = 0; i < seatIndex_.size(); i++) {
        output.writeInt32(3, seatIndex_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreatePlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardData_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < seatIndex_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(seatIndex_.get(i));
        }
        size += dataSize;
        size += 1 * getSeatIndexList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.LiangPai_Result_Wsk_GF}
     *
     * <pre>
     *刷新用户抓分
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_LiangPai_Result_Wsk_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_LiangPai_Result_Wsk_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreatePlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        seatIndex_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_LiangPai_Result_Wsk_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF result = new protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreatePlayer_ = opreatePlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardData_ = cardData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          seatIndex_ = java.util.Collections.unmodifiableList(seatIndex_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.seatIndex_ = seatIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF.getDefaultInstance()) return this;
        if (other.hasOpreatePlayer()) {
          setOpreatePlayer(other.getOpreatePlayer());
        }
        if (other.hasCardData()) {
          setCardData(other.getCardData());
        }
        if (!other.seatIndex_.isEmpty()) {
          if (seatIndex_.isEmpty()) {
            seatIndex_ = other.seatIndex_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureSeatIndexIsMutable();
            seatIndex_.addAll(other.seatIndex_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.LiangPai_Result_Wsk_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_player = 1;
      private int opreatePlayer_ ;
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public boolean hasOpreatePlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public int getOpreatePlayer() {
        return opreatePlayer_;
      }
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder setOpreatePlayer(int value) {
        bitField0_ |= 0x00000001;
        opreatePlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder clearOpreatePlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreatePlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_data = 2;
      private int cardData_ ;
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public boolean hasCardData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public int getCardData() {
        return cardData_;
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public Builder setCardData(int value) {
        bitField0_ |= 0x00000002;
        cardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public Builder clearCardData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardData_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 seat_index = 3;
      private java.util.List<java.lang.Integer> seatIndex_ = java.util.Collections.emptyList();
      private void ensureSeatIndexIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          seatIndex_ = new java.util.ArrayList<java.lang.Integer>(seatIndex_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getSeatIndexList() {
        return java.util.Collections.unmodifiableList(seatIndex_);
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public int getSeatIndexCount() {
        return seatIndex_.size();
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public int getSeatIndex(int index) {
        return seatIndex_.get(index);
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public Builder setSeatIndex(
          int index, int value) {
        ensureSeatIndexIsMutable();
        seatIndex_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public Builder addSeatIndex(int value) {
        ensureSeatIndexIsMutable();
        seatIndex_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public Builder addAllSeatIndex(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSeatIndexIsMutable();
        super.addAll(values, seatIndex_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public Builder clearSeatIndex() {
        seatIndex_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.LiangPai_Result_Wsk_GF)
    }

    static {
      defaultInstance = new LiangPai_Result_Wsk_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.LiangPai_Result_Wsk_GF)
  }

  public interface OutCardDataWsk_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_count = 3;
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 4;
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 5;
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 6;
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 7;
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 8;
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional bool is_first_out = 9;
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean getIsFirstOut();

    // optional int32 display_time = 10;
    /**
     * <code>optional int32 display_time = 10;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 10;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated .Int32ArrayResponse user_can_out_data = 11;
    /**
     * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getUserCanOutDataList();
    /**
     * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getUserCanOutData(int index);
    /**
     * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCanOutDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCanOutDataOrBuilder(
        int index);

    // repeated int32 user_can_out_count = 12;
    /**
     * <code>repeated int32 user_can_out_count = 12;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutCountList();
    /**
     * <code>repeated int32 user_can_out_count = 12;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCountCount();
    /**
     * <code>repeated int32 user_can_out_count = 12;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCount(int index);

    // repeated int32 user_get_score = 13;
    /**
     * <code>repeated int32 user_get_score = 13;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetScoreList();
    /**
     * <code>repeated int32 user_get_score = 13;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScoreCount();
    /**
     * <code>repeated int32 user_get_score = 13;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScore(int index);

    // repeated int32 hand_card_count = 14;
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 15;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);

    // repeated int32 win_order = 16;
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // optional int32 is_current_first_out = 17;
    /**
     * <code>optional int32 is_current_first_out = 17;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    boolean hasIsCurrentFirstOut();
    /**
     * <code>optional int32 is_current_first_out = 17;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    int getIsCurrentFirstOut();

    // optional int32 is_have_not_card = 18;
    /**
     * <code>optional int32 is_have_not_card = 18;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    boolean hasIsHaveNotCard();
    /**
     * <code>optional int32 is_have_not_card = 18;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    int getIsHaveNotCard();

    // optional int32 is_bao_jing = 19;
    /**
     * <code>optional int32 is_bao_jing = 19;</code>
     */
    boolean hasIsBaoJing();
    /**
     * <code>optional int32 is_bao_jing = 19;</code>
     */
    int getIsBaoJing();

    // repeated int32 friend_seat = 20;
    /**
     * <code>repeated int32 friend_seat = 20;</code>
     *
     * <pre>
     *叫庄结果
     * </pre>
     */
    java.util.List<java.lang.Integer> getFriendSeatList();
    /**
     * <code>repeated int32 friend_seat = 20;</code>
     *
     * <pre>
     *叫庄结果
     * </pre>
     */
    int getFriendSeatCount();
    /**
     * <code>repeated int32 friend_seat = 20;</code>
     *
     * <pre>
     *叫庄结果
     * </pre>
     */
    int getFriendSeat(int index);

    // optional int32 liang_pai = 21;
    /**
     * <code>optional int32 liang_pai = 21;</code>
     *
     * <pre>
     *亮牌
     * </pre>
     */
    boolean hasLiangPai();
    /**
     * <code>optional int32 liang_pai = 21;</code>
     *
     * <pre>
     *亮牌
     * </pre>
     */
    int getLiangPai();
  }
  /**
   * Protobuf type {@code gfWsk.OutCardDataWsk_GF}
   *
   * <pre>
   *用户出牌
   * </pre>
   */
  public static final class OutCardDataWsk_GF extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataWsk_GFOrBuilder {
    // Use OutCardDataWsk_GF.newBuilder() to construct.
    private OutCardDataWsk_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataWsk_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataWsk_GF defaultInstance;
    public static OutCardDataWsk_GF getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataWsk_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataWsk_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                userCanOutData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000400;
              }
              userCanOutData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                userCanOutCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              userCanOutCount_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                userCanOutCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              userGetScore_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 122: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00004000;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              bitField0_ |= 0x00000100;
              isCurrentFirstOut_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00000200;
              isHaveNotCard_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00000400;
              isBaoJing_ = input.readInt32();
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                friendSeat_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              friendSeat_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                friendSeat_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                friendSeat_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              bitField0_ |= 0x00000800;
              liangPai_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          userCanOutCount_ = java.util.Collections.unmodifiableList(userCanOutCount_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          friendSeat_ = java.util.Collections.unmodifiableList(friendSeat_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_OutCardDataWsk_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_OutCardDataWsk_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataWsk_GF> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataWsk_GF>() {
      public OutCardDataWsk_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataWsk_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataWsk_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_count = 3;
    public static final int CARDS_COUNT_FIELD_NUMBER = 3;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 4;
    public static final int CARD_TYPE_FIELD_NUMBER = 4;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 5;
    public static final int CUR_PLAYER_FIELD_NUMBER = 5;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 6;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 7;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 7;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 8;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 8;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional bool is_first_out = 9;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 9;
    private boolean isFirstOut_;
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 10;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 10;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 10;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 10;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated .Int32ArrayResponse user_can_out_data = 11;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 11;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCanOutData_;
    /**
     * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCanOutDataOrBuilderList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCanOutDataOrBuilder(
        int index) {
      return userCanOutData_.get(index);
    }

    // repeated int32 user_can_out_count = 12;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> userCanOutCount_;
    /**
     * <code>repeated int32 user_can_out_count = 12;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutCountList() {
      return userCanOutCount_;
    }
    /**
     * <code>repeated int32 user_can_out_count = 12;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCountCount() {
      return userCanOutCount_.size();
    }
    /**
     * <code>repeated int32 user_can_out_count = 12;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCount(int index) {
      return userCanOutCount_.get(index);
    }

    // repeated int32 user_get_score = 13;
    public static final int USER_GET_SCORE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> userGetScore_;
    /**
     * <code>repeated int32 user_get_score = 13;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetScoreList() {
      return userGetScore_;
    }
    /**
     * <code>repeated int32 user_get_score = 13;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScoreCount() {
      return userGetScore_.size();
    }
    /**
     * <code>repeated int32 user_get_score = 13;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScore(int index) {
      return userGetScore_.get(index);
    }

    // repeated int32 hand_card_count = 14;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 14;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 15;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 15;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    // repeated int32 win_order = 16;
    public static final int WIN_ORDER_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 16;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // optional int32 is_current_first_out = 17;
    public static final int IS_CURRENT_FIRST_OUT_FIELD_NUMBER = 17;
    private int isCurrentFirstOut_;
    /**
     * <code>optional int32 is_current_first_out = 17;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    public boolean hasIsCurrentFirstOut() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 is_current_first_out = 17;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    public int getIsCurrentFirstOut() {
      return isCurrentFirstOut_;
    }

    // optional int32 is_have_not_card = 18;
    public static final int IS_HAVE_NOT_CARD_FIELD_NUMBER = 18;
    private int isHaveNotCard_;
    /**
     * <code>optional int32 is_have_not_card = 18;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    public boolean hasIsHaveNotCard() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 is_have_not_card = 18;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    public int getIsHaveNotCard() {
      return isHaveNotCard_;
    }

    // optional int32 is_bao_jing = 19;
    public static final int IS_BAO_JING_FIELD_NUMBER = 19;
    private int isBaoJing_;
    /**
     * <code>optional int32 is_bao_jing = 19;</code>
     */
    public boolean hasIsBaoJing() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 is_bao_jing = 19;</code>
     */
    public int getIsBaoJing() {
      return isBaoJing_;
    }

    // repeated int32 friend_seat = 20;
    public static final int FRIEND_SEAT_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> friendSeat_;
    /**
     * <code>repeated int32 friend_seat = 20;</code>
     *
     * <pre>
     *叫庄结果
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getFriendSeatList() {
      return friendSeat_;
    }
    /**
     * <code>repeated int32 friend_seat = 20;</code>
     *
     * <pre>
     *叫庄结果
     * </pre>
     */
    public int getFriendSeatCount() {
      return friendSeat_.size();
    }
    /**
     * <code>repeated int32 friend_seat = 20;</code>
     *
     * <pre>
     *叫庄结果
     * </pre>
     */
    public int getFriendSeat(int index) {
      return friendSeat_.get(index);
    }

    // optional int32 liang_pai = 21;
    public static final int LIANG_PAI_FIELD_NUMBER = 21;
    private int liangPai_;
    /**
     * <code>optional int32 liang_pai = 21;</code>
     *
     * <pre>
     *亮牌
     * </pre>
     */
    public boolean hasLiangPai() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 liang_pai = 21;</code>
     *
     * <pre>
     *亮牌
     * </pre>
     */
    public int getLiangPai() {
      return liangPai_;
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = false;
      displayTime_ = 0;
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = java.util.Collections.emptyList();
      userGetScore_ = java.util.Collections.emptyList();
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
      isCurrentFirstOut_ = 0;
      isHaveNotCard_ = 0;
      isBaoJing_ = 0;
      friendSeat_ = java.util.Collections.emptyList();
      liangPai_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(6, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(9, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(10, displayTime_);
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeMessage(11, userCanOutData_.get(i));
      }
      for (int i = 0; i < userCanOutCount_.size(); i++) {
        output.writeInt32(12, userCanOutCount_.get(i));
      }
      for (int i = 0; i < userGetScore_.size(); i++) {
        output.writeInt32(13, userGetScore_.get(i));
      }
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(14, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(15, handCardsData_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(16, winOrder_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(17, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(18, isHaveNotCard_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(19, isBaoJing_);
      }
      for (int i = 0; i < friendSeat_.size(); i++) {
        output.writeInt32(20, friendSeat_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(21, liangPai_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, displayTime_);
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, userCanOutData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutCount_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCanOutCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userGetScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetScore_.get(i));
        }
        size += dataSize;
        size += 1 * getUserGetScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, handCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 2 * getWinOrderList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, isHaveNotCard_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, isBaoJing_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < friendSeat_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(friendSeat_.get(i));
        }
        size += dataSize;
        size += 2 * getFriendSeatList().size();
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, liangPai_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.OutCardDataWsk_GF}
     *
     * <pre>
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_OutCardDataWsk_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_OutCardDataWsk_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserCanOutDataFieldBuilder();
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        isFirstOut_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        if (userCanOutDataBuilder_ == null) {
          userCanOutData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          userCanOutDataBuilder_.clear();
        }
        userCanOutCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
        } else {
          handCardsDataBuilder_.clear();
        }
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        isCurrentFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        isHaveNotCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        isBaoJing_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        friendSeat_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        liangPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_OutCardDataWsk_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF result = new protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (userCanOutDataBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.userCanOutData_ = userCanOutData_;
        } else {
          result.userCanOutData_ = userCanOutDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          userCanOutCount_ = java.util.Collections.unmodifiableList(userCanOutCount_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.userGetScore_ = userGetScore_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00004000);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.winOrder_ = winOrder_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.isCurrentFirstOut_ = isCurrentFirstOut_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isHaveNotCard_ = isHaveNotCard_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isBaoJing_ = isBaoJing_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          friendSeat_ = java.util.Collections.unmodifiableList(friendSeat_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.friendSeat_ = friendSeat_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.liangPai_ = liangPai_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (userCanOutDataBuilder_ == null) {
          if (!other.userCanOutData_.isEmpty()) {
            if (userCanOutData_.isEmpty()) {
              userCanOutData_ = other.userCanOutData_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureUserCanOutDataIsMutable();
              userCanOutData_.addAll(other.userCanOutData_);
            }
            onChanged();
          }
        } else {
          if (!other.userCanOutData_.isEmpty()) {
            if (userCanOutDataBuilder_.isEmpty()) {
              userCanOutDataBuilder_.dispose();
              userCanOutDataBuilder_ = null;
              userCanOutData_ = other.userCanOutData_;
              bitField0_ = (bitField0_ & ~0x00000400);
              userCanOutDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUserCanOutDataFieldBuilder() : null;
            } else {
              userCanOutDataBuilder_.addAllMessages(other.userCanOutData_);
            }
          }
        }
        if (!other.userCanOutCount_.isEmpty()) {
          if (userCanOutCount_.isEmpty()) {
            userCanOutCount_ = other.userCanOutCount_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureUserCanOutCountIsMutable();
            userCanOutCount_.addAll(other.userCanOutCount_);
          }
          onChanged();
        }
        if (!other.userGetScore_.isEmpty()) {
          if (userGetScore_.isEmpty()) {
            userGetScore_ = other.userGetScore_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureUserGetScoreIsMutable();
            userGetScore_.addAll(other.userGetScore_);
          }
          onChanged();
        }
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00004000);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00004000);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (other.hasIsCurrentFirstOut()) {
          setIsCurrentFirstOut(other.getIsCurrentFirstOut());
        }
        if (other.hasIsHaveNotCard()) {
          setIsHaveNotCard(other.getIsHaveNotCard());
        }
        if (other.hasIsBaoJing()) {
          setIsBaoJing(other.getIsBaoJing());
        }
        if (!other.friendSeat_.isEmpty()) {
          if (friendSeat_.isEmpty()) {
            friendSeat_ = other.friendSeat_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureFriendSeatIsMutable();
            friendSeat_.addAll(other.friendSeat_);
          }
          onChanged();
        }
        if (other.hasLiangPai()) {
          setLiangPai(other.getLiangPai());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.OutCardDataWsk_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 3;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000004;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 4;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000008;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 5;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000010;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 6;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 7;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000040;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 8;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000080;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_first_out = 9;
      private boolean isFirstOut_ ;
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder setIsFirstOut(boolean value) {
        bitField0_ |= 0x00000100;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isFirstOut_ = false;
        onChanged();
        return this;
      }

      // optional int32 display_time = 10;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 10;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 display_time = 10;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 10;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000200;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 10;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000200);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse user_can_out_data = 11;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCanOutData_ =
        java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          userCanOutData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(userCanOutData_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> userCanOutDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCanOutDataList() {
        if (userCanOutDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(userCanOutData_);
        } else {
          return userCanOutDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        if (userCanOutDataBuilder_ == null) {
          return userCanOutData_.size();
        } else {
          return userCanOutDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getUserCanOutData(int index) {
        if (userCanOutDataBuilder_ == null) {
          return userCanOutData_.get(index);
        } else {
          return userCanOutDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCanOutDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCanOutDataIsMutable();
          userCanOutData_.set(index, value);
          onChanged();
        } else {
          userCanOutDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCanOutDataBuilder_ == null) {
          ensureUserCanOutDataIsMutable();
          userCanOutData_.set(index, builderForValue.build());
          onChanged();
        } else {
          userCanOutDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCanOutDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCanOutDataIsMutable();
          userCanOutData_.add(value);
          onChanged();
        } else {
          userCanOutDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCanOutDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCanOutDataIsMutable();
          userCanOutData_.add(index, value);
          onChanged();
        } else {
          userCanOutDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCanOutDataBuilder_ == null) {
          ensureUserCanOutDataIsMutable();
          userCanOutData_.add(builderForValue.build());
          onChanged();
        } else {
          userCanOutDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCanOutDataBuilder_ == null) {
          ensureUserCanOutDataIsMutable();
          userCanOutData_.add(index, builderForValue.build());
          onChanged();
        } else {
          userCanOutDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (userCanOutDataBuilder_ == null) {
          ensureUserCanOutDataIsMutable();
          super.addAll(values, userCanOutData_);
          onChanged();
        } else {
          userCanOutDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        if (userCanOutDataBuilder_ == null) {
          userCanOutData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          userCanOutDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder removeUserCanOutData(int index) {
        if (userCanOutDataBuilder_ == null) {
          ensureUserCanOutDataIsMutable();
          userCanOutData_.remove(index);
          onChanged();
        } else {
          userCanOutDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getUserCanOutDataBuilder(
          int index) {
        return getUserCanOutDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCanOutDataOrBuilder(
          int index) {
        if (userCanOutDataBuilder_ == null) {
          return userCanOutData_.get(index);  } else {
          return userCanOutDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getUserCanOutDataOrBuilderList() {
        if (userCanOutDataBuilder_ != null) {
          return userCanOutDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(userCanOutData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCanOutDataBuilder() {
        return getUserCanOutDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCanOutDataBuilder(
          int index) {
        return getUserCanOutDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_can_out_data = 11;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getUserCanOutDataBuilderList() {
        return getUserCanOutDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getUserCanOutDataFieldBuilder() {
        if (userCanOutDataBuilder_ == null) {
          userCanOutDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  userCanOutData_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          userCanOutData_ = null;
        }
        return userCanOutDataBuilder_;
      }

      // repeated int32 user_can_out_count = 12;
      private java.util.List<java.lang.Integer> userCanOutCount_ = java.util.Collections.emptyList();
      private void ensureUserCanOutCountIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          userCanOutCount_ = new java.util.ArrayList<java.lang.Integer>(userCanOutCount_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutCountList() {
        return java.util.Collections.unmodifiableList(userCanOutCount_);
      }
      /**
       * <code>repeated int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCountCount() {
        return userCanOutCount_.size();
      }
      /**
       * <code>repeated int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCount(int index) {
        return userCanOutCount_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setUserCanOutCount(
          int index, int value) {
        ensureUserCanOutCountIsMutable();
        userCanOutCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder addUserCanOutCount(int value) {
        ensureUserCanOutCountIsMutable();
        userCanOutCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder addAllUserCanOutCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutCountIsMutable();
        super.addAll(values, userCanOutCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_count = 12;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        userCanOutCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated int32 user_get_score = 13;
      private java.util.List<java.lang.Integer> userGetScore_ = java.util.Collections.emptyList();
      private void ensureUserGetScoreIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          userGetScore_ = new java.util.ArrayList<java.lang.Integer>(userGetScore_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 user_get_score = 13;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetScoreList() {
        return java.util.Collections.unmodifiableList(userGetScore_);
      }
      /**
       * <code>repeated int32 user_get_score = 13;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScoreCount() {
        return userGetScore_.size();
      }
      /**
       * <code>repeated int32 user_get_score = 13;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScore(int index) {
        return userGetScore_.get(index);
      }
      /**
       * <code>repeated int32 user_get_score = 13;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder setUserGetScore(
          int index, int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 13;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addUserGetScore(int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 13;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addAllUserGetScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetScoreIsMutable();
        super.addAll(values, userGetScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 13;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder clearUserGetScore() {
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 hand_card_count = 14;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 14;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 15;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00004000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 15;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00004000) == 0x00004000),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // repeated int32 win_order = 16;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 16;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // optional int32 is_current_first_out = 17;
      private int isCurrentFirstOut_ ;
      /**
       * <code>optional int32 is_current_first_out = 17;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public boolean hasIsCurrentFirstOut() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 is_current_first_out = 17;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public int getIsCurrentFirstOut() {
        return isCurrentFirstOut_;
      }
      /**
       * <code>optional int32 is_current_first_out = 17;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public Builder setIsCurrentFirstOut(int value) {
        bitField0_ |= 0x00010000;
        isCurrentFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_current_first_out = 17;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public Builder clearIsCurrentFirstOut() {
        bitField0_ = (bitField0_ & ~0x00010000);
        isCurrentFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_have_not_card = 18;
      private int isHaveNotCard_ ;
      /**
       * <code>optional int32 is_have_not_card = 18;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public boolean hasIsHaveNotCard() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 is_have_not_card = 18;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public int getIsHaveNotCard() {
        return isHaveNotCard_;
      }
      /**
       * <code>optional int32 is_have_not_card = 18;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public Builder setIsHaveNotCard(int value) {
        bitField0_ |= 0x00020000;
        isHaveNotCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_have_not_card = 18;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public Builder clearIsHaveNotCard() {
        bitField0_ = (bitField0_ & ~0x00020000);
        isHaveNotCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_bao_jing = 19;
      private int isBaoJing_ ;
      /**
       * <code>optional int32 is_bao_jing = 19;</code>
       */
      public boolean hasIsBaoJing() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 is_bao_jing = 19;</code>
       */
      public int getIsBaoJing() {
        return isBaoJing_;
      }
      /**
       * <code>optional int32 is_bao_jing = 19;</code>
       */
      public Builder setIsBaoJing(int value) {
        bitField0_ |= 0x00040000;
        isBaoJing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_bao_jing = 19;</code>
       */
      public Builder clearIsBaoJing() {
        bitField0_ = (bitField0_ & ~0x00040000);
        isBaoJing_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 friend_seat = 20;
      private java.util.List<java.lang.Integer> friendSeat_ = java.util.Collections.emptyList();
      private void ensureFriendSeatIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          friendSeat_ = new java.util.ArrayList<java.lang.Integer>(friendSeat_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 friend_seat = 20;</code>
       *
       * <pre>
       *叫庄结果
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getFriendSeatList() {
        return java.util.Collections.unmodifiableList(friendSeat_);
      }
      /**
       * <code>repeated int32 friend_seat = 20;</code>
       *
       * <pre>
       *叫庄结果
       * </pre>
       */
      public int getFriendSeatCount() {
        return friendSeat_.size();
      }
      /**
       * <code>repeated int32 friend_seat = 20;</code>
       *
       * <pre>
       *叫庄结果
       * </pre>
       */
      public int getFriendSeat(int index) {
        return friendSeat_.get(index);
      }
      /**
       * <code>repeated int32 friend_seat = 20;</code>
       *
       * <pre>
       *叫庄结果
       * </pre>
       */
      public Builder setFriendSeat(
          int index, int value) {
        ensureFriendSeatIsMutable();
        friendSeat_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 friend_seat = 20;</code>
       *
       * <pre>
       *叫庄结果
       * </pre>
       */
      public Builder addFriendSeat(int value) {
        ensureFriendSeatIsMutable();
        friendSeat_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 friend_seat = 20;</code>
       *
       * <pre>
       *叫庄结果
       * </pre>
       */
      public Builder addAllFriendSeat(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFriendSeatIsMutable();
        super.addAll(values, friendSeat_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 friend_seat = 20;</code>
       *
       * <pre>
       *叫庄结果
       * </pre>
       */
      public Builder clearFriendSeat() {
        friendSeat_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // optional int32 liang_pai = 21;
      private int liangPai_ ;
      /**
       * <code>optional int32 liang_pai = 21;</code>
       *
       * <pre>
       *亮牌
       * </pre>
       */
      public boolean hasLiangPai() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 liang_pai = 21;</code>
       *
       * <pre>
       *亮牌
       * </pre>
       */
      public int getLiangPai() {
        return liangPai_;
      }
      /**
       * <code>optional int32 liang_pai = 21;</code>
       *
       * <pre>
       *亮牌
       * </pre>
       */
      public Builder setLiangPai(int value) {
        bitField0_ |= 0x00100000;
        liangPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 liang_pai = 21;</code>
       *
       * <pre>
       *亮牌
       * </pre>
       */
      public Builder clearLiangPai() {
        bitField0_ = (bitField0_ & ~0x00100000);
        liangPai_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.OutCardDataWsk_GF)
    }

    static {
      defaultInstance = new OutCardDataWsk_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.OutCardDataWsk_GF)
  }

  public interface PaiFenDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Int32ArrayResponse cards_data = 1;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 cards_count = 2;
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsCountList();
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    int getCardsCountCount();
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    int getCardsCount(int index);

    // optional int32 yu_score = 3;
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    boolean hasYuScore();
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    int getYuScore();
  }
  /**
   * Protobuf type {@code gfWsk.PaiFenData}
   */
  public static final class PaiFenData extends
      com.google.protobuf.GeneratedMessage
      implements PaiFenDataOrBuilder {
    // Use PaiFenData.newBuilder() to construct.
    private PaiFenData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PaiFenData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PaiFenData defaultInstance;
    public static PaiFenData getDefaultInstance() {
      return defaultInstance;
    }

    public PaiFenData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PaiFenData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              yuScore_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsCount_ = java.util.Collections.unmodifiableList(cardsCount_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_PaiFenData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_PaiFenData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.PaiFenData.class, protobuf.clazz.gfWsk.gfWskRsp.PaiFenData.Builder.class);
    }

    public static com.google.protobuf.Parser<PaiFenData> PARSER =
        new com.google.protobuf.AbstractParser<PaiFenData>() {
      public PaiFenData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PaiFenData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PaiFenData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .Int32ArrayResponse cards_data = 1;
    public static final int CARDS_DATA_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 cards_count = 2;
    public static final int CARDS_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsCount_;
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsCountList() {
      return cardsCount_;
    }
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public int getCardsCountCount() {
      return cardsCount_.size();
    }
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public int getCardsCount(int index) {
      return cardsCount_.get(index);
    }

    // optional int32 yu_score = 3;
    public static final int YU_SCORE_FIELD_NUMBER = 3;
    private int yuScore_;
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    public boolean hasYuScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    public int getYuScore() {
      return yuScore_;
    }

    private void initFields() {
      cardsData_ = java.util.Collections.emptyList();
      cardsCount_ = java.util.Collections.emptyList();
      yuScore_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(1, cardsData_.get(i));
      }
      for (int i = 0; i < cardsCount_.size(); i++) {
        output.writeInt32(2, cardsCount_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, yuScore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsCountList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, yuScore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.PaiFenData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.PaiFenData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.PaiFenDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_PaiFenData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_PaiFenData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.PaiFenData.class, protobuf.clazz.gfWsk.gfWskRsp.PaiFenData.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.PaiFenData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cardsDataBuilder_.clear();
        }
        cardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        yuScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_PaiFenData_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.PaiFenData getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.PaiFenData.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.PaiFenData build() {
        protobuf.clazz.gfWsk.gfWskRsp.PaiFenData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.PaiFenData buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.PaiFenData result = new protobuf.clazz.gfWsk.gfWskRsp.PaiFenData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsCount_ = java.util.Collections.unmodifiableList(cardsCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.yuScore_ = yuScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.PaiFenData) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.PaiFenData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.PaiFenData other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.PaiFenData.getDefaultInstance()) return this;
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.cardsCount_.isEmpty()) {
          if (cardsCount_.isEmpty()) {
            cardsCount_ = other.cardsCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsCountIsMutable();
            cardsCount_.addAll(other.cardsCount_);
          }
          onChanged();
        }
        if (other.hasYuScore()) {
          setYuScore(other.getYuScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.PaiFenData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.PaiFenData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Int32ArrayResponse cards_data = 1;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 cards_count = 2;
      private java.util.List<java.lang.Integer> cardsCount_ = java.util.Collections.emptyList();
      private void ensureCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsCount_ = new java.util.ArrayList<java.lang.Integer>(cardsCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsCountList() {
        return java.util.Collections.unmodifiableList(cardsCount_);
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public int getCardsCountCount() {
        return cardsCount_.size();
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public int getCardsCount(int index) {
        return cardsCount_.get(index);
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder setCardsCount(
          int index, int value) {
        ensureCardsCountIsMutable();
        cardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder addCardsCount(int value) {
        ensureCardsCountIsMutable();
        cardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder addAllCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsCountIsMutable();
        super.addAll(values, cardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder clearCardsCount() {
        cardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 yu_score = 3;
      private int yuScore_ ;
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public boolean hasYuScore() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public int getYuScore() {
        return yuScore_;
      }
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public Builder setYuScore(int value) {
        bitField0_ |= 0x00000004;
        yuScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public Builder clearYuScore() {
        bitField0_ = (bitField0_ & ~0x00000004);
        yuScore_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.PaiFenData)
    }

    static {
      defaultInstance = new PaiFenData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.PaiFenData)
  }

  public interface UserCardDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code gfWsk.UserCardData}
   */
  public static final class UserCardData extends
      com.google.protobuf.GeneratedMessage
      implements UserCardDataOrBuilder {
    // Use UserCardData.newBuilder() to construct.
    private UserCardData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private UserCardData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final UserCardData defaultInstance;
    public static UserCardData getDefaultInstance() {
      return defaultInstance;
    }

    public UserCardData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private UserCardData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_UserCardData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_UserCardData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.UserCardData.class, protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder.class);
    }

    public static com.google.protobuf.Parser<UserCardData> PARSER =
        new com.google.protobuf.AbstractParser<UserCardData>() {
      public UserCardData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserCardData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<UserCardData> getParserForType() {
      return PARSER;
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    private void initFields() {
      cardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.UserCardData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.UserCardData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.UserCardData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.UserCardData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.UserCardData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.UserCardData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.UserCardData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.UserCardData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.UserCardData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.UserCardData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.UserCardData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.UserCardData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.UserCardDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_UserCardData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_UserCardData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.UserCardData.class, protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.UserCardData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_UserCardData_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.UserCardData getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.UserCardData.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.UserCardData build() {
        protobuf.clazz.gfWsk.gfWskRsp.UserCardData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.UserCardData buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.UserCardData result = new protobuf.clazz.gfWsk.gfWskRsp.UserCardData(this);
        int from_bitField0_ = bitField0_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.UserCardData) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.UserCardData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.UserCardData other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.UserCardData.getDefaultInstance()) return this;
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.UserCardData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.UserCardData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.UserCardData)
    }

    static {
      defaultInstance = new UserCardData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.UserCardData)
  }

  public interface PukeGameEndWsk_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional int32 cur_round = 2;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getCurRound();

    // optional int32 game_round = 3;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    int getGameRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .gfWsk.UserCardData cards_data = 5;
    /**
     * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.gfWsk.gfWskRsp.UserCardData> 
        getCardsDataList();
    /**
     * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.gfWsk.gfWskRsp.UserCardData getCardsData(int index);
    /**
     * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.gfWsk.gfWskRsp.UserCardDataOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.gfWsk.gfWskRsp.UserCardDataOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 boom_card_num = 6;
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getBoomCardNumList();
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    int getBoomCardNumCount();
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    int getBoomCardNum(int index);

    // repeated int32 end_score = 7;
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    int getEndScore(int index);

    // repeated int32 reward_score = 8;
    /**
     * <code>repeated int32 reward_score = 8;</code>
     *
     * <pre>
     *奖分
     * </pre>
     */
    java.util.List<java.lang.Integer> getRewardScoreList();
    /**
     * <code>repeated int32 reward_score = 8;</code>
     *
     * <pre>
     *奖分
     * </pre>
     */
    int getRewardScoreCount();
    /**
     * <code>repeated int32 reward_score = 8;</code>
     *
     * <pre>
     *奖分
     * </pre>
     */
    int getRewardScore(int index);

    // optional int32 player_num = 10;
    /**
     * <code>optional int32 player_num = 10;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 10;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 banker_player = 11;
    /**
     * <code>optional int32 banker_player = 11;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 11;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 reason = 12;
    /**
     * <code>optional int32 reason = 12;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 12;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 dang_ju_score = 18;
    /**
     * <code>repeated int32 dang_ju_score = 18;</code>
     *
     * <pre>
     *得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getDangJuScoreList();
    /**
     * <code>repeated int32 dang_ju_score = 18;</code>
     *
     * <pre>
     *得分
     * </pre>
     */
    int getDangJuScoreCount();
    /**
     * <code>repeated int32 dang_ju_score = 18;</code>
     *
     * <pre>
     *得分
     * </pre>
     */
    int getDangJuScore(int index);

    // repeated int32 zhua_fen = 19;
    /**
     * <code>repeated int32 zhua_fen = 19;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhuaFenList();
    /**
     * <code>repeated int32 zhua_fen = 19;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getZhuaFenCount();
    /**
     * <code>repeated int32 zhua_fen = 19;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getZhuaFen(int index);

    // repeated int32 win_order = 20;
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // repeated int32 jia_fa_socre = 21;
    /**
     * <code>repeated int32 jia_fa_socre = 21;</code>
     *
     * <pre>
     *加罚分
     * </pre>
     */
    java.util.List<java.lang.Integer> getJiaFaSocreList();
    /**
     * <code>repeated int32 jia_fa_socre = 21;</code>
     *
     * <pre>
     *加罚分
     * </pre>
     */
    int getJiaFaSocreCount();
    /**
     * <code>repeated int32 jia_fa_socre = 21;</code>
     *
     * <pre>
     *加罚分
     * </pre>
     */
    int getJiaFaSocre(int index);

    // repeated int32 shao_fen = 28;
    /**
     * <code>repeated int32 shao_fen = 28;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    java.util.List<java.lang.Integer> getShaoFenList();
    /**
     * <code>repeated int32 shao_fen = 28;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    int getShaoFenCount();
    /**
     * <code>repeated int32 shao_fen = 28;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    int getShaoFen(int index);

    // optional int32 mian_da = 30;
    /**
     * <code>optional int32 mian_da = 30;</code>
     *
     * <pre>
     *免打类型(1,罚王免打 2，罚王五十K免打 3.9炸(包括4王免打))
     * </pre>
     */
    boolean hasMianDa();
    /**
     * <code>optional int32 mian_da = 30;</code>
     *
     * <pre>
     *免打类型(1,罚王免打 2，罚王五十K免打 3.9炸(包括4王免打))
     * </pre>
     */
    int getMianDa();

    // repeated .Int32ArrayResponse fa_wang_card_data = 31;
    /**
     * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
     *
     * <pre>
     *罚王数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getFaWangCardDataList();
    /**
     * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
     *
     * <pre>
     *罚王数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getFaWangCardData(int index);
    /**
     * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
     *
     * <pre>
     *罚王数据
     * </pre>
     */
    int getFaWangCardDataCount();
    /**
     * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
     *
     * <pre>
     *罚王数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getFaWangCardDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
     *
     * <pre>
     *罚王数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getFaWangCardDataOrBuilder(
        int index);

    // repeated .Int32ArrayResponse card_data_score = 32;
    /**
     * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
     *
     * <pre>
     *牌型奖励分
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardDataScoreList();
    /**
     * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
     *
     * <pre>
     *牌型奖励分
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardDataScore(int index);
    /**
     * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
     *
     * <pre>
     *牌型奖励分
     * </pre>
     */
    int getCardDataScoreCount();
    /**
     * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
     *
     * <pre>
     *牌型奖励分
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardDataScoreOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
     *
     * <pre>
     *牌型奖励分
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardDataScoreOrBuilder(
        int index);

    // repeated int32 all_end_score = 13;
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated int32 end_score_max = 14;
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreMaxList();
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMaxCount();
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMax(int index);

    // repeated int32 win_num = 15;
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinNumList();
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNumCount();
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNum(int index);

    // repeated int32 lose_num = 16;
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getLoseNumList();
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNumCount();
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNum(int index);

    // repeated .RoomPlayerResponse players = 17;
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 all_reward_score = 22;
    /**
     * <code>repeated int32 all_reward_score = 22;</code>
     *
     * <pre>
     *总喜钱分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllRewardScoreList();
    /**
     * <code>repeated int32 all_reward_score = 22;</code>
     *
     * <pre>
     *总喜钱分
     * </pre>
     */
    int getAllRewardScoreCount();
    /**
     * <code>repeated int32 all_reward_score = 22;</code>
     *
     * <pre>
     *总喜钱分
     * </pre>
     */
    int getAllRewardScore(int index);

    // repeated int32 all_zhua_fen = 23;
    /**
     * <code>repeated int32 all_zhua_fen = 23;</code>
     *
     * <pre>
     * 总抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllZhuaFenList();
    /**
     * <code>repeated int32 all_zhua_fen = 23;</code>
     *
     * <pre>
     * 总抓分
     * </pre>
     */
    int getAllZhuaFenCount();
    /**
     * <code>repeated int32 all_zhua_fen = 23;</code>
     *
     * <pre>
     * 总抓分
     * </pre>
     */
    int getAllZhuaFen(int index);

    // repeated int32 end_zhua_fen_max = 24;
    /**
     * <code>repeated int32 end_zhua_fen_max = 24;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndZhuaFenMaxList();
    /**
     * <code>repeated int32 end_zhua_fen_max = 24;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    int getEndZhuaFenMaxCount();
    /**
     * <code>repeated int32 end_zhua_fen_max = 24;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    int getEndZhuaFenMax(int index);

    // repeated int32 all_tou_you = 25;
    /**
     * <code>repeated int32 all_tou_you = 25;</code>
     *
     * <pre>
     *头游总数
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllTouYouList();
    /**
     * <code>repeated int32 all_tou_you = 25;</code>
     *
     * <pre>
     *头游总数
     * </pre>
     */
    int getAllTouYouCount();
    /**
     * <code>repeated int32 all_tou_you = 25;</code>
     *
     * <pre>
     *头游总数
     * </pre>
     */
    int getAllTouYou(int index);

    // repeated int32 all_win_num = 26;
    /**
     * <code>repeated int32 all_win_num = 26;</code>
     *
     * <pre>
     *胜利数
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllWinNumList();
    /**
     * <code>repeated int32 all_win_num = 26;</code>
     *
     * <pre>
     *胜利数
     * </pre>
     */
    int getAllWinNumCount();
    /**
     * <code>repeated int32 all_win_num = 26;</code>
     *
     * <pre>
     *胜利数
     * </pre>
     */
    int getAllWinNum(int index);

    // repeated int32 all_fail_num = 27;
    /**
     * <code>repeated int32 all_fail_num = 27;</code>
     *
     * <pre>
     *失败数
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllFailNumList();
    /**
     * <code>repeated int32 all_fail_num = 27;</code>
     *
     * <pre>
     *失败数
     * </pre>
     */
    int getAllFailNumCount();
    /**
     * <code>repeated int32 all_fail_num = 27;</code>
     *
     * <pre>
     *失败数
     * </pre>
     */
    int getAllFailNum(int index);

    // repeated .Int32ArrayResponse hand_card_data = 29;
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
     *
     * <pre>
     *剩余手牌
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
     *
     * <pre>
     *剩余手牌
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
     *
     * <pre>
     *剩余手牌
     * </pre>
     */
    int getHandCardDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
     *
     * <pre>
     *剩余手牌
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
     *
     * <pre>
     *剩余手牌
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code gfWsk.PukeGameEndWsk_GF}
   *
   * <pre>
   *结算
   * </pre>
   */
  public static final class PukeGameEndWsk_GF extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndWsk_GFOrBuilder {
    // Use PukeGameEndWsk_GF.newBuilder() to construct.
    private PukeGameEndWsk_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndWsk_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndWsk_GF defaultInstance;
    public static PukeGameEndWsk_GF getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndWsk_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndWsk_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              curRound_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameRound_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.gfWsk.gfWskRsp.UserCardData>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.gfWsk.gfWskRsp.UserCardData.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              boomCardNum_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                boomCardNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                rewardScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              rewardScore_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                rewardScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                rewardScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000008;
              playerNum_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000010;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000020;
              reason_ = input.readInt32();
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              endScoreMax_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              winNum_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              loseNum_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                loseNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00800000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                dangJuScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              dangJuScore_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                dangJuScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                dangJuScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                zhuaFen_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              zhuaFen_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                zhuaFen_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhuaFen_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                jiaFaSocre_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              jiaFaSocre_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                jiaFaSocre_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                jiaFaSocre_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                allRewardScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              allRewardScore_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                allRewardScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allRewardScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                allZhuaFen_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              allZhuaFen_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                allZhuaFen_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allZhuaFen_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
                endZhuaFenMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              endZhuaFenMax_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000) && input.getBytesUntilLimit() > 0) {
                endZhuaFenMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endZhuaFenMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 200: {
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
                allTouYou_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x08000000;
              }
              allTouYou_.add(input.readInt32());
              break;
            }
            case 202: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000) && input.getBytesUntilLimit() > 0) {
                allTouYou_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x08000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allTouYou_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 208: {
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
                allWinNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x10000000;
              }
              allWinNum_.add(input.readInt32());
              break;
            }
            case 210: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000) && input.getBytesUntilLimit() > 0) {
                allWinNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x10000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allWinNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 216: {
              if (!((mutable_bitField0_ & 0x20000000) == 0x20000000)) {
                allFailNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x20000000;
              }
              allFailNum_.add(input.readInt32());
              break;
            }
            case 218: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x20000000) == 0x20000000) && input.getBytesUntilLimit() > 0) {
                allFailNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x20000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allFailNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 224: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                shaoFen_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              shaoFen_.add(input.readInt32());
              break;
            }
            case 226: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                shaoFen_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                shaoFen_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 234: {
              if (!((mutable_bitField0_ & 0x40000000) == 0x40000000)) {
                handCardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x40000000;
              }
              handCardData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 240: {
              bitField0_ |= 0x00000040;
              mianDa_ = input.readInt32();
              break;
            }
            case 250: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                faWangCardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00020000;
              }
              faWangCardData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 258: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                cardDataScore_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00040000;
              }
              cardDataScore_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          rewardScore_ = java.util.Collections.unmodifiableList(rewardScore_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          dangJuScore_ = java.util.Collections.unmodifiableList(dangJuScore_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          zhuaFen_ = java.util.Collections.unmodifiableList(zhuaFen_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          jiaFaSocre_ = java.util.Collections.unmodifiableList(jiaFaSocre_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          allRewardScore_ = java.util.Collections.unmodifiableList(allRewardScore_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          allZhuaFen_ = java.util.Collections.unmodifiableList(allZhuaFen_);
        }
        if (((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
          endZhuaFenMax_ = java.util.Collections.unmodifiableList(endZhuaFenMax_);
        }
        if (((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
          allTouYou_ = java.util.Collections.unmodifiableList(allTouYou_);
        }
        if (((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
          allWinNum_ = java.util.Collections.unmodifiableList(allWinNum_);
        }
        if (((mutable_bitField0_ & 0x20000000) == 0x20000000)) {
          allFailNum_ = java.util.Collections.unmodifiableList(allFailNum_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          shaoFen_ = java.util.Collections.unmodifiableList(shaoFen_);
        }
        if (((mutable_bitField0_ & 0x40000000) == 0x40000000)) {
          handCardData_ = java.util.Collections.unmodifiableList(handCardData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          faWangCardData_ = java.util.Collections.unmodifiableList(faWangCardData_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          cardDataScore_ = java.util.Collections.unmodifiableList(cardDataScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_PukeGameEndWsk_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_PukeGameEndWsk_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndWsk_GF> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndWsk_GF>() {
      public PukeGameEndWsk_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndWsk_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndWsk_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 cur_round = 2;
    public static final int CUR_ROUND_FIELD_NUMBER = 2;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_round = 3;
    public static final int GAME_ROUND_FIELD_NUMBER = 3;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .gfWsk.UserCardData cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.gfWsk.gfWskRsp.UserCardData> cardsData_;
    /**
     * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.gfWsk.gfWskRsp.UserCardData> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.gfWsk.gfWskRsp.UserCardDataOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.gfWsk.gfWskRsp.UserCardData getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.gfWsk.gfWskRsp.UserCardDataOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 boom_card_num = 6;
    public static final int BOOM_CARD_NUM_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> boomCardNum_;
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBoomCardNumList() {
      return boomCardNum_;
    }
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public int getBoomCardNumCount() {
      return boomCardNum_.size();
    }
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public int getBoomCardNum(int index) {
      return boomCardNum_.get(index);
    }

    // repeated int32 end_score = 7;
    public static final int END_SCORE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // repeated int32 reward_score = 8;
    public static final int REWARD_SCORE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> rewardScore_;
    /**
     * <code>repeated int32 reward_score = 8;</code>
     *
     * <pre>
     *奖分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRewardScoreList() {
      return rewardScore_;
    }
    /**
     * <code>repeated int32 reward_score = 8;</code>
     *
     * <pre>
     *奖分
     * </pre>
     */
    public int getRewardScoreCount() {
      return rewardScore_.size();
    }
    /**
     * <code>repeated int32 reward_score = 8;</code>
     *
     * <pre>
     *奖分
     * </pre>
     */
    public int getRewardScore(int index) {
      return rewardScore_.get(index);
    }

    // optional int32 player_num = 10;
    public static final int PLAYER_NUM_FIELD_NUMBER = 10;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 10;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_num = 10;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 banker_player = 11;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 11;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 11;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 banker_player = 11;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 reason = 12;
    public static final int REASON_FIELD_NUMBER = 12;
    private int reason_;
    /**
     * <code>optional int32 reason = 12;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 reason = 12;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 dang_ju_score = 18;
    public static final int DANG_JU_SCORE_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> dangJuScore_;
    /**
     * <code>repeated int32 dang_ju_score = 18;</code>
     *
     * <pre>
     *得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDangJuScoreList() {
      return dangJuScore_;
    }
    /**
     * <code>repeated int32 dang_ju_score = 18;</code>
     *
     * <pre>
     *得分
     * </pre>
     */
    public int getDangJuScoreCount() {
      return dangJuScore_.size();
    }
    /**
     * <code>repeated int32 dang_ju_score = 18;</code>
     *
     * <pre>
     *得分
     * </pre>
     */
    public int getDangJuScore(int index) {
      return dangJuScore_.get(index);
    }

    // repeated int32 zhua_fen = 19;
    public static final int ZHUA_FEN_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> zhuaFen_;
    /**
     * <code>repeated int32 zhua_fen = 19;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhuaFenList() {
      return zhuaFen_;
    }
    /**
     * <code>repeated int32 zhua_fen = 19;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getZhuaFenCount() {
      return zhuaFen_.size();
    }
    /**
     * <code>repeated int32 zhua_fen = 19;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getZhuaFen(int index) {
      return zhuaFen_.get(index);
    }

    // repeated int32 win_order = 20;
    public static final int WIN_ORDER_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // repeated int32 jia_fa_socre = 21;
    public static final int JIA_FA_SOCRE_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> jiaFaSocre_;
    /**
     * <code>repeated int32 jia_fa_socre = 21;</code>
     *
     * <pre>
     *加罚分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJiaFaSocreList() {
      return jiaFaSocre_;
    }
    /**
     * <code>repeated int32 jia_fa_socre = 21;</code>
     *
     * <pre>
     *加罚分
     * </pre>
     */
    public int getJiaFaSocreCount() {
      return jiaFaSocre_.size();
    }
    /**
     * <code>repeated int32 jia_fa_socre = 21;</code>
     *
     * <pre>
     *加罚分
     * </pre>
     */
    public int getJiaFaSocre(int index) {
      return jiaFaSocre_.get(index);
    }

    // repeated int32 shao_fen = 28;
    public static final int SHAO_FEN_FIELD_NUMBER = 28;
    private java.util.List<java.lang.Integer> shaoFen_;
    /**
     * <code>repeated int32 shao_fen = 28;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getShaoFenList() {
      return shaoFen_;
    }
    /**
     * <code>repeated int32 shao_fen = 28;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    public int getShaoFenCount() {
      return shaoFen_.size();
    }
    /**
     * <code>repeated int32 shao_fen = 28;</code>
     *
     * <pre>
     *烧分
     * </pre>
     */
    public int getShaoFen(int index) {
      return shaoFen_.get(index);
    }

    // optional int32 mian_da = 30;
    public static final int MIAN_DA_FIELD_NUMBER = 30;
    private int mianDa_;
    /**
     * <code>optional int32 mian_da = 30;</code>
     *
     * <pre>
     *免打类型(1,罚王免打 2，罚王五十K免打 3.9炸(包括4王免打))
     * </pre>
     */
    public boolean hasMianDa() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 mian_da = 30;</code>
     *
     * <pre>
     *免打类型(1,罚王免打 2，罚王五十K免打 3.9炸(包括4王免打))
     * </pre>
     */
    public int getMianDa() {
      return mianDa_;
    }

    // repeated .Int32ArrayResponse fa_wang_card_data = 31;
    public static final int FA_WANG_CARD_DATA_FIELD_NUMBER = 31;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> faWangCardData_;
    /**
     * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
     *
     * <pre>
     *罚王数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getFaWangCardDataList() {
      return faWangCardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
     *
     * <pre>
     *罚王数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getFaWangCardDataOrBuilderList() {
      return faWangCardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
     *
     * <pre>
     *罚王数据
     * </pre>
     */
    public int getFaWangCardDataCount() {
      return faWangCardData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
     *
     * <pre>
     *罚王数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getFaWangCardData(int index) {
      return faWangCardData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
     *
     * <pre>
     *罚王数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getFaWangCardDataOrBuilder(
        int index) {
      return faWangCardData_.get(index);
    }

    // repeated .Int32ArrayResponse card_data_score = 32;
    public static final int CARD_DATA_SCORE_FIELD_NUMBER = 32;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardDataScore_;
    /**
     * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
     *
     * <pre>
     *牌型奖励分
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardDataScoreList() {
      return cardDataScore_;
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
     *
     * <pre>
     *牌型奖励分
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardDataScoreOrBuilderList() {
      return cardDataScore_;
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
     *
     * <pre>
     *牌型奖励分
     * </pre>
     */
    public int getCardDataScoreCount() {
      return cardDataScore_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
     *
     * <pre>
     *牌型奖励分
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardDataScore(int index) {
      return cardDataScore_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
     *
     * <pre>
     *牌型奖励分
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardDataScoreOrBuilder(
        int index) {
      return cardDataScore_.get(index);
    }

    // repeated int32 all_end_score = 13;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 end_score_max = 14;
    public static final int END_SCORE_MAX_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> endScoreMax_;
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreMaxList() {
      return endScoreMax_;
    }
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMaxCount() {
      return endScoreMax_.size();
    }
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMax(int index) {
      return endScoreMax_.get(index);
    }

    // repeated int32 win_num = 15;
    public static final int WIN_NUM_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> winNum_;
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinNumList() {
      return winNum_;
    }
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNumCount() {
      return winNum_.size();
    }
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNum(int index) {
      return winNum_.get(index);
    }

    // repeated int32 lose_num = 16;
    public static final int LOSE_NUM_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> loseNum_;
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLoseNumList() {
      return loseNum_;
    }
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNumCount() {
      return loseNum_.size();
    }
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNum(int index) {
      return loseNum_.get(index);
    }

    // repeated .RoomPlayerResponse players = 17;
    public static final int PLAYERS_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 all_reward_score = 22;
    public static final int ALL_REWARD_SCORE_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> allRewardScore_;
    /**
     * <code>repeated int32 all_reward_score = 22;</code>
     *
     * <pre>
     *总喜钱分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllRewardScoreList() {
      return allRewardScore_;
    }
    /**
     * <code>repeated int32 all_reward_score = 22;</code>
     *
     * <pre>
     *总喜钱分
     * </pre>
     */
    public int getAllRewardScoreCount() {
      return allRewardScore_.size();
    }
    /**
     * <code>repeated int32 all_reward_score = 22;</code>
     *
     * <pre>
     *总喜钱分
     * </pre>
     */
    public int getAllRewardScore(int index) {
      return allRewardScore_.get(index);
    }

    // repeated int32 all_zhua_fen = 23;
    public static final int ALL_ZHUA_FEN_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> allZhuaFen_;
    /**
     * <code>repeated int32 all_zhua_fen = 23;</code>
     *
     * <pre>
     * 总抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllZhuaFenList() {
      return allZhuaFen_;
    }
    /**
     * <code>repeated int32 all_zhua_fen = 23;</code>
     *
     * <pre>
     * 总抓分
     * </pre>
     */
    public int getAllZhuaFenCount() {
      return allZhuaFen_.size();
    }
    /**
     * <code>repeated int32 all_zhua_fen = 23;</code>
     *
     * <pre>
     * 总抓分
     * </pre>
     */
    public int getAllZhuaFen(int index) {
      return allZhuaFen_.get(index);
    }

    // repeated int32 end_zhua_fen_max = 24;
    public static final int END_ZHUA_FEN_MAX_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> endZhuaFenMax_;
    /**
     * <code>repeated int32 end_zhua_fen_max = 24;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndZhuaFenMaxList() {
      return endZhuaFenMax_;
    }
    /**
     * <code>repeated int32 end_zhua_fen_max = 24;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    public int getEndZhuaFenMaxCount() {
      return endZhuaFenMax_.size();
    }
    /**
     * <code>repeated int32 end_zhua_fen_max = 24;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    public int getEndZhuaFenMax(int index) {
      return endZhuaFenMax_.get(index);
    }

    // repeated int32 all_tou_you = 25;
    public static final int ALL_TOU_YOU_FIELD_NUMBER = 25;
    private java.util.List<java.lang.Integer> allTouYou_;
    /**
     * <code>repeated int32 all_tou_you = 25;</code>
     *
     * <pre>
     *头游总数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllTouYouList() {
      return allTouYou_;
    }
    /**
     * <code>repeated int32 all_tou_you = 25;</code>
     *
     * <pre>
     *头游总数
     * </pre>
     */
    public int getAllTouYouCount() {
      return allTouYou_.size();
    }
    /**
     * <code>repeated int32 all_tou_you = 25;</code>
     *
     * <pre>
     *头游总数
     * </pre>
     */
    public int getAllTouYou(int index) {
      return allTouYou_.get(index);
    }

    // repeated int32 all_win_num = 26;
    public static final int ALL_WIN_NUM_FIELD_NUMBER = 26;
    private java.util.List<java.lang.Integer> allWinNum_;
    /**
     * <code>repeated int32 all_win_num = 26;</code>
     *
     * <pre>
     *胜利数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllWinNumList() {
      return allWinNum_;
    }
    /**
     * <code>repeated int32 all_win_num = 26;</code>
     *
     * <pre>
     *胜利数
     * </pre>
     */
    public int getAllWinNumCount() {
      return allWinNum_.size();
    }
    /**
     * <code>repeated int32 all_win_num = 26;</code>
     *
     * <pre>
     *胜利数
     * </pre>
     */
    public int getAllWinNum(int index) {
      return allWinNum_.get(index);
    }

    // repeated int32 all_fail_num = 27;
    public static final int ALL_FAIL_NUM_FIELD_NUMBER = 27;
    private java.util.List<java.lang.Integer> allFailNum_;
    /**
     * <code>repeated int32 all_fail_num = 27;</code>
     *
     * <pre>
     *失败数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllFailNumList() {
      return allFailNum_;
    }
    /**
     * <code>repeated int32 all_fail_num = 27;</code>
     *
     * <pre>
     *失败数
     * </pre>
     */
    public int getAllFailNumCount() {
      return allFailNum_.size();
    }
    /**
     * <code>repeated int32 all_fail_num = 27;</code>
     *
     * <pre>
     *失败数
     * </pre>
     */
    public int getAllFailNum(int index) {
      return allFailNum_.get(index);
    }

    // repeated .Int32ArrayResponse hand_card_data = 29;
    public static final int HAND_CARD_DATA_FIELD_NUMBER = 29;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
     *
     * <pre>
     *剩余手牌
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardDataList() {
      return handCardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
     *
     * <pre>
     *剩余手牌
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardDataOrBuilderList() {
      return handCardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
     *
     * <pre>
     *剩余手牌
     * </pre>
     */
    public int getHandCardDataCount() {
      return handCardData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
     *
     * <pre>
     *剩余手牌
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index) {
      return handCardData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
     *
     * <pre>
     *剩余手牌
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
        int index) {
      return handCardData_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      curRound_ = 0;
      gameRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      boomCardNum_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      rewardScore_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      bankerPlayer_ = 0;
      reason_ = 0;
      dangJuScore_ = java.util.Collections.emptyList();
      zhuaFen_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
      jiaFaSocre_ = java.util.Collections.emptyList();
      shaoFen_ = java.util.Collections.emptyList();
      mianDa_ = 0;
      faWangCardData_ = java.util.Collections.emptyList();
      cardDataScore_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      endScoreMax_ = java.util.Collections.emptyList();
      winNum_ = java.util.Collections.emptyList();
      loseNum_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
      allRewardScore_ = java.util.Collections.emptyList();
      allZhuaFen_ = java.util.Collections.emptyList();
      endZhuaFenMax_ = java.util.Collections.emptyList();
      allTouYou_ = java.util.Collections.emptyList();
      allWinNum_ = java.util.Collections.emptyList();
      allFailNum_ = java.util.Collections.emptyList();
      handCardData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameRound_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      for (int i = 0; i < boomCardNum_.size(); i++) {
        output.writeInt32(6, boomCardNum_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(7, endScore_.get(i));
      }
      for (int i = 0; i < rewardScore_.size(); i++) {
        output.writeInt32(8, rewardScore_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(10, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(11, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(12, reason_);
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(13, allEndScore_.get(i));
      }
      for (int i = 0; i < endScoreMax_.size(); i++) {
        output.writeInt32(14, endScoreMax_.get(i));
      }
      for (int i = 0; i < winNum_.size(); i++) {
        output.writeInt32(15, winNum_.get(i));
      }
      for (int i = 0; i < loseNum_.size(); i++) {
        output.writeInt32(16, loseNum_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(17, players_.get(i));
      }
      for (int i = 0; i < dangJuScore_.size(); i++) {
        output.writeInt32(18, dangJuScore_.get(i));
      }
      for (int i = 0; i < zhuaFen_.size(); i++) {
        output.writeInt32(19, zhuaFen_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(20, winOrder_.get(i));
      }
      for (int i = 0; i < jiaFaSocre_.size(); i++) {
        output.writeInt32(21, jiaFaSocre_.get(i));
      }
      for (int i = 0; i < allRewardScore_.size(); i++) {
        output.writeInt32(22, allRewardScore_.get(i));
      }
      for (int i = 0; i < allZhuaFen_.size(); i++) {
        output.writeInt32(23, allZhuaFen_.get(i));
      }
      for (int i = 0; i < endZhuaFenMax_.size(); i++) {
        output.writeInt32(24, endZhuaFenMax_.get(i));
      }
      for (int i = 0; i < allTouYou_.size(); i++) {
        output.writeInt32(25, allTouYou_.get(i));
      }
      for (int i = 0; i < allWinNum_.size(); i++) {
        output.writeInt32(26, allWinNum_.get(i));
      }
      for (int i = 0; i < allFailNum_.size(); i++) {
        output.writeInt32(27, allFailNum_.get(i));
      }
      for (int i = 0; i < shaoFen_.size(); i++) {
        output.writeInt32(28, shaoFen_.get(i));
      }
      for (int i = 0; i < handCardData_.size(); i++) {
        output.writeMessage(29, handCardData_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(30, mianDa_);
      }
      for (int i = 0; i < faWangCardData_.size(); i++) {
        output.writeMessage(31, faWangCardData_.get(i));
      }
      for (int i = 0; i < cardDataScore_.size(); i++) {
        output.writeMessage(32, cardDataScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boomCardNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boomCardNum_.get(i));
        }
        size += dataSize;
        size += 1 * getBoomCardNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < rewardScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(rewardScore_.get(i));
        }
        size += dataSize;
        size += 1 * getRewardScoreList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScoreMax_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreMaxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winNum_.get(i));
        }
        size += dataSize;
        size += 1 * getWinNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < loseNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(loseNum_.get(i));
        }
        size += dataSize;
        size += 2 * getLoseNumList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dangJuScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dangJuScore_.get(i));
        }
        size += dataSize;
        size += 2 * getDangJuScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < zhuaFen_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhuaFen_.get(i));
        }
        size += dataSize;
        size += 2 * getZhuaFenList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 2 * getWinOrderList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jiaFaSocre_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jiaFaSocre_.get(i));
        }
        size += dataSize;
        size += 2 * getJiaFaSocreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allRewardScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allRewardScore_.get(i));
        }
        size += dataSize;
        size += 2 * getAllRewardScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allZhuaFen_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allZhuaFen_.get(i));
        }
        size += dataSize;
        size += 2 * getAllZhuaFenList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endZhuaFenMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endZhuaFenMax_.get(i));
        }
        size += dataSize;
        size += 2 * getEndZhuaFenMaxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allTouYou_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allTouYou_.get(i));
        }
        size += dataSize;
        size += 2 * getAllTouYouList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allWinNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allWinNum_.get(i));
        }
        size += dataSize;
        size += 2 * getAllWinNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allFailNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allFailNum_.get(i));
        }
        size += dataSize;
        size += 2 * getAllFailNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < shaoFen_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(shaoFen_.get(i));
        }
        size += dataSize;
        size += 2 * getShaoFenList().size();
      }
      for (int i = 0; i < handCardData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, handCardData_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, mianDa_);
      }
      for (int i = 0; i < faWangCardData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, faWangCardData_.get(i));
      }
      for (int i = 0; i < cardDataScore_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, cardDataScore_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.PukeGameEndWsk_GF}
     *
     * <pre>
     *结算
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_PukeGameEndWsk_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_PukeGameEndWsk_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getFaWangCardDataFieldBuilder();
          getCardDataScoreFieldBuilder();
          getPlayersFieldBuilder();
          getHandCardDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        rewardScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        dangJuScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        zhuaFen_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        jiaFaSocre_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        shaoFen_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        mianDa_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        if (faWangCardDataBuilder_ == null) {
          faWangCardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          faWangCardDataBuilder_.clear();
        }
        if (cardDataScoreBuilder_ == null) {
          cardDataScore_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
        } else {
          cardDataScoreBuilder_.clear();
        }
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00800000);
        } else {
          playersBuilder_.clear();
        }
        allRewardScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        allZhuaFen_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        endZhuaFenMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        allTouYou_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        allWinNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        allFailNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x20000000);
        if (handCardDataBuilder_ == null) {
          handCardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x40000000);
        } else {
          handCardDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_PukeGameEndWsk_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF result = new protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRound_ = gameRound_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.boomCardNum_ = boomCardNum_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.endScore_ = endScore_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          rewardScore_ = java.util.Collections.unmodifiableList(rewardScore_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.rewardScore_ = rewardScore_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000020;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          dangJuScore_ = java.util.Collections.unmodifiableList(dangJuScore_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.dangJuScore_ = dangJuScore_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          zhuaFen_ = java.util.Collections.unmodifiableList(zhuaFen_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.zhuaFen_ = zhuaFen_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.winOrder_ = winOrder_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          jiaFaSocre_ = java.util.Collections.unmodifiableList(jiaFaSocre_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.jiaFaSocre_ = jiaFaSocre_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          shaoFen_ = java.util.Collections.unmodifiableList(shaoFen_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.shaoFen_ = shaoFen_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mianDa_ = mianDa_;
        if (faWangCardDataBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            faWangCardData_ = java.util.Collections.unmodifiableList(faWangCardData_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.faWangCardData_ = faWangCardData_;
        } else {
          result.faWangCardData_ = faWangCardDataBuilder_.build();
        }
        if (cardDataScoreBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000)) {
            cardDataScore_ = java.util.Collections.unmodifiableList(cardDataScore_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.cardDataScore_ = cardDataScore_;
        } else {
          result.cardDataScore_ = cardDataScoreBuilder_.build();
        }
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.endScoreMax_ = endScoreMax_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.winNum_ = winNum_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.loseNum_ = loseNum_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00800000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          allRewardScore_ = java.util.Collections.unmodifiableList(allRewardScore_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.allRewardScore_ = allRewardScore_;
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          allZhuaFen_ = java.util.Collections.unmodifiableList(allZhuaFen_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.allZhuaFen_ = allZhuaFen_;
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          endZhuaFenMax_ = java.util.Collections.unmodifiableList(endZhuaFenMax_);
          bitField0_ = (bitField0_ & ~0x04000000);
        }
        result.endZhuaFenMax_ = endZhuaFenMax_;
        if (((bitField0_ & 0x08000000) == 0x08000000)) {
          allTouYou_ = java.util.Collections.unmodifiableList(allTouYou_);
          bitField0_ = (bitField0_ & ~0x08000000);
        }
        result.allTouYou_ = allTouYou_;
        if (((bitField0_ & 0x10000000) == 0x10000000)) {
          allWinNum_ = java.util.Collections.unmodifiableList(allWinNum_);
          bitField0_ = (bitField0_ & ~0x10000000);
        }
        result.allWinNum_ = allWinNum_;
        if (((bitField0_ & 0x20000000) == 0x20000000)) {
          allFailNum_ = java.util.Collections.unmodifiableList(allFailNum_);
          bitField0_ = (bitField0_ & ~0x20000000);
        }
        result.allFailNum_ = allFailNum_;
        if (handCardDataBuilder_ == null) {
          if (((bitField0_ & 0x40000000) == 0x40000000)) {
            handCardData_ = java.util.Collections.unmodifiableList(handCardData_);
            bitField0_ = (bitField0_ & ~0x40000000);
          }
          result.handCardData_ = handCardData_;
        } else {
          result.handCardData_ = handCardDataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.boomCardNum_.isEmpty()) {
          if (boomCardNum_.isEmpty()) {
            boomCardNum_ = other.boomCardNum_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureBoomCardNumIsMutable();
            boomCardNum_.addAll(other.boomCardNum_);
          }
          onChanged();
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (!other.rewardScore_.isEmpty()) {
          if (rewardScore_.isEmpty()) {
            rewardScore_ = other.rewardScore_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureRewardScoreIsMutable();
            rewardScore_.addAll(other.rewardScore_);
          }
          onChanged();
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.dangJuScore_.isEmpty()) {
          if (dangJuScore_.isEmpty()) {
            dangJuScore_ = other.dangJuScore_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureDangJuScoreIsMutable();
            dangJuScore_.addAll(other.dangJuScore_);
          }
          onChanged();
        }
        if (!other.zhuaFen_.isEmpty()) {
          if (zhuaFen_.isEmpty()) {
            zhuaFen_ = other.zhuaFen_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureZhuaFenIsMutable();
            zhuaFen_.addAll(other.zhuaFen_);
          }
          onChanged();
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (!other.jiaFaSocre_.isEmpty()) {
          if (jiaFaSocre_.isEmpty()) {
            jiaFaSocre_ = other.jiaFaSocre_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureJiaFaSocreIsMutable();
            jiaFaSocre_.addAll(other.jiaFaSocre_);
          }
          onChanged();
        }
        if (!other.shaoFen_.isEmpty()) {
          if (shaoFen_.isEmpty()) {
            shaoFen_ = other.shaoFen_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureShaoFenIsMutable();
            shaoFen_.addAll(other.shaoFen_);
          }
          onChanged();
        }
        if (other.hasMianDa()) {
          setMianDa(other.getMianDa());
        }
        if (faWangCardDataBuilder_ == null) {
          if (!other.faWangCardData_.isEmpty()) {
            if (faWangCardData_.isEmpty()) {
              faWangCardData_ = other.faWangCardData_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensureFaWangCardDataIsMutable();
              faWangCardData_.addAll(other.faWangCardData_);
            }
            onChanged();
          }
        } else {
          if (!other.faWangCardData_.isEmpty()) {
            if (faWangCardDataBuilder_.isEmpty()) {
              faWangCardDataBuilder_.dispose();
              faWangCardDataBuilder_ = null;
              faWangCardData_ = other.faWangCardData_;
              bitField0_ = (bitField0_ & ~0x00020000);
              faWangCardDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFaWangCardDataFieldBuilder() : null;
            } else {
              faWangCardDataBuilder_.addAllMessages(other.faWangCardData_);
            }
          }
        }
        if (cardDataScoreBuilder_ == null) {
          if (!other.cardDataScore_.isEmpty()) {
            if (cardDataScore_.isEmpty()) {
              cardDataScore_ = other.cardDataScore_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensureCardDataScoreIsMutable();
              cardDataScore_.addAll(other.cardDataScore_);
            }
            onChanged();
          }
        } else {
          if (!other.cardDataScore_.isEmpty()) {
            if (cardDataScoreBuilder_.isEmpty()) {
              cardDataScoreBuilder_.dispose();
              cardDataScoreBuilder_ = null;
              cardDataScore_ = other.cardDataScore_;
              bitField0_ = (bitField0_ & ~0x00040000);
              cardDataScoreBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardDataScoreFieldBuilder() : null;
            } else {
              cardDataScoreBuilder_.addAllMessages(other.cardDataScore_);
            }
          }
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.endScoreMax_.isEmpty()) {
          if (endScoreMax_.isEmpty()) {
            endScoreMax_ = other.endScoreMax_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureEndScoreMaxIsMutable();
            endScoreMax_.addAll(other.endScoreMax_);
          }
          onChanged();
        }
        if (!other.winNum_.isEmpty()) {
          if (winNum_.isEmpty()) {
            winNum_ = other.winNum_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureWinNumIsMutable();
            winNum_.addAll(other.winNum_);
          }
          onChanged();
        }
        if (!other.loseNum_.isEmpty()) {
          if (loseNum_.isEmpty()) {
            loseNum_ = other.loseNum_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureLoseNumIsMutable();
            loseNum_.addAll(other.loseNum_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00800000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00800000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.allRewardScore_.isEmpty()) {
          if (allRewardScore_.isEmpty()) {
            allRewardScore_ = other.allRewardScore_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureAllRewardScoreIsMutable();
            allRewardScore_.addAll(other.allRewardScore_);
          }
          onChanged();
        }
        if (!other.allZhuaFen_.isEmpty()) {
          if (allZhuaFen_.isEmpty()) {
            allZhuaFen_ = other.allZhuaFen_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureAllZhuaFenIsMutable();
            allZhuaFen_.addAll(other.allZhuaFen_);
          }
          onChanged();
        }
        if (!other.endZhuaFenMax_.isEmpty()) {
          if (endZhuaFenMax_.isEmpty()) {
            endZhuaFenMax_ = other.endZhuaFenMax_;
            bitField0_ = (bitField0_ & ~0x04000000);
          } else {
            ensureEndZhuaFenMaxIsMutable();
            endZhuaFenMax_.addAll(other.endZhuaFenMax_);
          }
          onChanged();
        }
        if (!other.allTouYou_.isEmpty()) {
          if (allTouYou_.isEmpty()) {
            allTouYou_ = other.allTouYou_;
            bitField0_ = (bitField0_ & ~0x08000000);
          } else {
            ensureAllTouYouIsMutable();
            allTouYou_.addAll(other.allTouYou_);
          }
          onChanged();
        }
        if (!other.allWinNum_.isEmpty()) {
          if (allWinNum_.isEmpty()) {
            allWinNum_ = other.allWinNum_;
            bitField0_ = (bitField0_ & ~0x10000000);
          } else {
            ensureAllWinNumIsMutable();
            allWinNum_.addAll(other.allWinNum_);
          }
          onChanged();
        }
        if (!other.allFailNum_.isEmpty()) {
          if (allFailNum_.isEmpty()) {
            allFailNum_ = other.allFailNum_;
            bitField0_ = (bitField0_ & ~0x20000000);
          } else {
            ensureAllFailNumIsMutable();
            allFailNum_.addAll(other.allFailNum_);
          }
          onChanged();
        }
        if (handCardDataBuilder_ == null) {
          if (!other.handCardData_.isEmpty()) {
            if (handCardData_.isEmpty()) {
              handCardData_ = other.handCardData_;
              bitField0_ = (bitField0_ & ~0x40000000);
            } else {
              ensureHandCardDataIsMutable();
              handCardData_.addAll(other.handCardData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardData_.isEmpty()) {
            if (handCardDataBuilder_.isEmpty()) {
              handCardDataBuilder_.dispose();
              handCardDataBuilder_ = null;
              handCardData_ = other.handCardData_;
              bitField0_ = (bitField0_ & ~0x40000000);
              handCardDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardDataFieldBuilder() : null;
            } else {
              handCardDataBuilder_.addAllMessages(other.handCardData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.PukeGameEndWsk_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 cur_round = 2;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000002;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 3;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000004;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .gfWsk.UserCardData cards_data = 5;
      private java.util.List<protobuf.clazz.gfWsk.gfWskRsp.UserCardData> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.gfWsk.gfWskRsp.UserCardData>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.gfWsk.gfWskRsp.UserCardData, protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder, protobuf.clazz.gfWsk.gfWskRsp.UserCardDataOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.gfWsk.gfWskRsp.UserCardData> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.gfWsk.gfWskRsp.UserCardData getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.gfWsk.gfWskRsp.UserCardData value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.gfWsk.gfWskRsp.UserCardData value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.gfWsk.gfWskRsp.UserCardData value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.gfWsk.gfWskRsp.UserCardData> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.gfWsk.gfWskRsp.UserCardDataOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.gfWsk.gfWskRsp.UserCardDataOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.gfWsk.gfWskRsp.UserCardData.getDefaultInstance());
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.gfWsk.gfWskRsp.UserCardData.getDefaultInstance());
      }
      /**
       * <code>repeated .gfWsk.UserCardData cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.gfWsk.gfWskRsp.UserCardData, protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder, protobuf.clazz.gfWsk.gfWskRsp.UserCardDataOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.gfWsk.gfWskRsp.UserCardData, protobuf.clazz.gfWsk.gfWskRsp.UserCardData.Builder, protobuf.clazz.gfWsk.gfWskRsp.UserCardDataOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 boom_card_num = 6;
      private java.util.List<java.lang.Integer> boomCardNum_ = java.util.Collections.emptyList();
      private void ensureBoomCardNumIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = new java.util.ArrayList<java.lang.Integer>(boomCardNum_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBoomCardNumList() {
        return java.util.Collections.unmodifiableList(boomCardNum_);
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public int getBoomCardNumCount() {
        return boomCardNum_.size();
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public int getBoomCardNum(int index) {
        return boomCardNum_.get(index);
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder setBoomCardNum(
          int index, int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder addBoomCardNum(int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder addAllBoomCardNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoomCardNumIsMutable();
        super.addAll(values, boomCardNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder clearBoomCardNum() {
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 end_score = 7;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 reward_score = 8;
      private java.util.List<java.lang.Integer> rewardScore_ = java.util.Collections.emptyList();
      private void ensureRewardScoreIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          rewardScore_ = new java.util.ArrayList<java.lang.Integer>(rewardScore_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 reward_score = 8;</code>
       *
       * <pre>
       *奖分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRewardScoreList() {
        return java.util.Collections.unmodifiableList(rewardScore_);
      }
      /**
       * <code>repeated int32 reward_score = 8;</code>
       *
       * <pre>
       *奖分
       * </pre>
       */
      public int getRewardScoreCount() {
        return rewardScore_.size();
      }
      /**
       * <code>repeated int32 reward_score = 8;</code>
       *
       * <pre>
       *奖分
       * </pre>
       */
      public int getRewardScore(int index) {
        return rewardScore_.get(index);
      }
      /**
       * <code>repeated int32 reward_score = 8;</code>
       *
       * <pre>
       *奖分
       * </pre>
       */
      public Builder setRewardScore(
          int index, int value) {
        ensureRewardScoreIsMutable();
        rewardScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 reward_score = 8;</code>
       *
       * <pre>
       *奖分
       * </pre>
       */
      public Builder addRewardScore(int value) {
        ensureRewardScoreIsMutable();
        rewardScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 reward_score = 8;</code>
       *
       * <pre>
       *奖分
       * </pre>
       */
      public Builder addAllRewardScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRewardScoreIsMutable();
        super.addAll(values, rewardScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 reward_score = 8;</code>
       *
       * <pre>
       *奖分
       * </pre>
       */
      public Builder clearRewardScore() {
        rewardScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 player_num = 10;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 10;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 player_num = 10;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 10;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000100;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 10;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000100);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 11;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 11;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 banker_player = 11;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 11;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000200;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 11;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000200);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 12;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 12;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 reason = 12;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 12;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000400;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 12;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000400);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 dang_ju_score = 18;
      private java.util.List<java.lang.Integer> dangJuScore_ = java.util.Collections.emptyList();
      private void ensureDangJuScoreIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          dangJuScore_ = new java.util.ArrayList<java.lang.Integer>(dangJuScore_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 dang_ju_score = 18;</code>
       *
       * <pre>
       *得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDangJuScoreList() {
        return java.util.Collections.unmodifiableList(dangJuScore_);
      }
      /**
       * <code>repeated int32 dang_ju_score = 18;</code>
       *
       * <pre>
       *得分
       * </pre>
       */
      public int getDangJuScoreCount() {
        return dangJuScore_.size();
      }
      /**
       * <code>repeated int32 dang_ju_score = 18;</code>
       *
       * <pre>
       *得分
       * </pre>
       */
      public int getDangJuScore(int index) {
        return dangJuScore_.get(index);
      }
      /**
       * <code>repeated int32 dang_ju_score = 18;</code>
       *
       * <pre>
       *得分
       * </pre>
       */
      public Builder setDangJuScore(
          int index, int value) {
        ensureDangJuScoreIsMutable();
        dangJuScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dang_ju_score = 18;</code>
       *
       * <pre>
       *得分
       * </pre>
       */
      public Builder addDangJuScore(int value) {
        ensureDangJuScoreIsMutable();
        dangJuScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dang_ju_score = 18;</code>
       *
       * <pre>
       *得分
       * </pre>
       */
      public Builder addAllDangJuScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDangJuScoreIsMutable();
        super.addAll(values, dangJuScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dang_ju_score = 18;</code>
       *
       * <pre>
       *得分
       * </pre>
       */
      public Builder clearDangJuScore() {
        dangJuScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated int32 zhua_fen = 19;
      private java.util.List<java.lang.Integer> zhuaFen_ = java.util.Collections.emptyList();
      private void ensureZhuaFenIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          zhuaFen_ = new java.util.ArrayList<java.lang.Integer>(zhuaFen_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 zhua_fen = 19;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhuaFenList() {
        return java.util.Collections.unmodifiableList(zhuaFen_);
      }
      /**
       * <code>repeated int32 zhua_fen = 19;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getZhuaFenCount() {
        return zhuaFen_.size();
      }
      /**
       * <code>repeated int32 zhua_fen = 19;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getZhuaFen(int index) {
        return zhuaFen_.get(index);
      }
      /**
       * <code>repeated int32 zhua_fen = 19;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder setZhuaFen(
          int index, int value) {
        ensureZhuaFenIsMutable();
        zhuaFen_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhua_fen = 19;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder addZhuaFen(int value) {
        ensureZhuaFenIsMutable();
        zhuaFen_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhua_fen = 19;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder addAllZhuaFen(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhuaFenIsMutable();
        super.addAll(values, zhuaFen_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhua_fen = 19;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder clearZhuaFen() {
        zhuaFen_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 win_order = 20;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 jia_fa_socre = 21;
      private java.util.List<java.lang.Integer> jiaFaSocre_ = java.util.Collections.emptyList();
      private void ensureJiaFaSocreIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          jiaFaSocre_ = new java.util.ArrayList<java.lang.Integer>(jiaFaSocre_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 jia_fa_socre = 21;</code>
       *
       * <pre>
       *加罚分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJiaFaSocreList() {
        return java.util.Collections.unmodifiableList(jiaFaSocre_);
      }
      /**
       * <code>repeated int32 jia_fa_socre = 21;</code>
       *
       * <pre>
       *加罚分
       * </pre>
       */
      public int getJiaFaSocreCount() {
        return jiaFaSocre_.size();
      }
      /**
       * <code>repeated int32 jia_fa_socre = 21;</code>
       *
       * <pre>
       *加罚分
       * </pre>
       */
      public int getJiaFaSocre(int index) {
        return jiaFaSocre_.get(index);
      }
      /**
       * <code>repeated int32 jia_fa_socre = 21;</code>
       *
       * <pre>
       *加罚分
       * </pre>
       */
      public Builder setJiaFaSocre(
          int index, int value) {
        ensureJiaFaSocreIsMutable();
        jiaFaSocre_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jia_fa_socre = 21;</code>
       *
       * <pre>
       *加罚分
       * </pre>
       */
      public Builder addJiaFaSocre(int value) {
        ensureJiaFaSocreIsMutable();
        jiaFaSocre_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jia_fa_socre = 21;</code>
       *
       * <pre>
       *加罚分
       * </pre>
       */
      public Builder addAllJiaFaSocre(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJiaFaSocreIsMutable();
        super.addAll(values, jiaFaSocre_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jia_fa_socre = 21;</code>
       *
       * <pre>
       *加罚分
       * </pre>
       */
      public Builder clearJiaFaSocre() {
        jiaFaSocre_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated int32 shao_fen = 28;
      private java.util.List<java.lang.Integer> shaoFen_ = java.util.Collections.emptyList();
      private void ensureShaoFenIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          shaoFen_ = new java.util.ArrayList<java.lang.Integer>(shaoFen_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 shao_fen = 28;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getShaoFenList() {
        return java.util.Collections.unmodifiableList(shaoFen_);
      }
      /**
       * <code>repeated int32 shao_fen = 28;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public int getShaoFenCount() {
        return shaoFen_.size();
      }
      /**
       * <code>repeated int32 shao_fen = 28;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public int getShaoFen(int index) {
        return shaoFen_.get(index);
      }
      /**
       * <code>repeated int32 shao_fen = 28;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public Builder setShaoFen(
          int index, int value) {
        ensureShaoFenIsMutable();
        shaoFen_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 shao_fen = 28;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public Builder addShaoFen(int value) {
        ensureShaoFenIsMutable();
        shaoFen_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 shao_fen = 28;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public Builder addAllShaoFen(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureShaoFenIsMutable();
        super.addAll(values, shaoFen_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 shao_fen = 28;</code>
       *
       * <pre>
       *烧分
       * </pre>
       */
      public Builder clearShaoFen() {
        shaoFen_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // optional int32 mian_da = 30;
      private int mianDa_ ;
      /**
       * <code>optional int32 mian_da = 30;</code>
       *
       * <pre>
       *免打类型(1,罚王免打 2，罚王五十K免打 3.9炸(包括4王免打))
       * </pre>
       */
      public boolean hasMianDa() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 mian_da = 30;</code>
       *
       * <pre>
       *免打类型(1,罚王免打 2，罚王五十K免打 3.9炸(包括4王免打))
       * </pre>
       */
      public int getMianDa() {
        return mianDa_;
      }
      /**
       * <code>optional int32 mian_da = 30;</code>
       *
       * <pre>
       *免打类型(1,罚王免打 2，罚王五十K免打 3.9炸(包括4王免打))
       * </pre>
       */
      public Builder setMianDa(int value) {
        bitField0_ |= 0x00010000;
        mianDa_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mian_da = 30;</code>
       *
       * <pre>
       *免打类型(1,罚王免打 2，罚王五十K免打 3.9炸(包括4王免打))
       * </pre>
       */
      public Builder clearMianDa() {
        bitField0_ = (bitField0_ & ~0x00010000);
        mianDa_ = 0;
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse fa_wang_card_data = 31;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> faWangCardData_ =
        java.util.Collections.emptyList();
      private void ensureFaWangCardDataIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          faWangCardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(faWangCardData_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> faWangCardDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getFaWangCardDataList() {
        if (faWangCardDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(faWangCardData_);
        } else {
          return faWangCardDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public int getFaWangCardDataCount() {
        if (faWangCardDataBuilder_ == null) {
          return faWangCardData_.size();
        } else {
          return faWangCardDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getFaWangCardData(int index) {
        if (faWangCardDataBuilder_ == null) {
          return faWangCardData_.get(index);
        } else {
          return faWangCardDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public Builder setFaWangCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (faWangCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFaWangCardDataIsMutable();
          faWangCardData_.set(index, value);
          onChanged();
        } else {
          faWangCardDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public Builder setFaWangCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (faWangCardDataBuilder_ == null) {
          ensureFaWangCardDataIsMutable();
          faWangCardData_.set(index, builderForValue.build());
          onChanged();
        } else {
          faWangCardDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public Builder addFaWangCardData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (faWangCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFaWangCardDataIsMutable();
          faWangCardData_.add(value);
          onChanged();
        } else {
          faWangCardDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public Builder addFaWangCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (faWangCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFaWangCardDataIsMutable();
          faWangCardData_.add(index, value);
          onChanged();
        } else {
          faWangCardDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public Builder addFaWangCardData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (faWangCardDataBuilder_ == null) {
          ensureFaWangCardDataIsMutable();
          faWangCardData_.add(builderForValue.build());
          onChanged();
        } else {
          faWangCardDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public Builder addFaWangCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (faWangCardDataBuilder_ == null) {
          ensureFaWangCardDataIsMutable();
          faWangCardData_.add(index, builderForValue.build());
          onChanged();
        } else {
          faWangCardDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public Builder addAllFaWangCardData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (faWangCardDataBuilder_ == null) {
          ensureFaWangCardDataIsMutable();
          super.addAll(values, faWangCardData_);
          onChanged();
        } else {
          faWangCardDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public Builder clearFaWangCardData() {
        if (faWangCardDataBuilder_ == null) {
          faWangCardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          faWangCardDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public Builder removeFaWangCardData(int index) {
        if (faWangCardDataBuilder_ == null) {
          ensureFaWangCardDataIsMutable();
          faWangCardData_.remove(index);
          onChanged();
        } else {
          faWangCardDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getFaWangCardDataBuilder(
          int index) {
        return getFaWangCardDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getFaWangCardDataOrBuilder(
          int index) {
        if (faWangCardDataBuilder_ == null) {
          return faWangCardData_.get(index);  } else {
          return faWangCardDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getFaWangCardDataOrBuilderList() {
        if (faWangCardDataBuilder_ != null) {
          return faWangCardDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(faWangCardData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addFaWangCardDataBuilder() {
        return getFaWangCardDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addFaWangCardDataBuilder(
          int index) {
        return getFaWangCardDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse fa_wang_card_data = 31;</code>
       *
       * <pre>
       *罚王数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getFaWangCardDataBuilderList() {
        return getFaWangCardDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getFaWangCardDataFieldBuilder() {
        if (faWangCardDataBuilder_ == null) {
          faWangCardDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  faWangCardData_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          faWangCardData_ = null;
        }
        return faWangCardDataBuilder_;
      }

      // repeated .Int32ArrayResponse card_data_score = 32;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardDataScore_ =
        java.util.Collections.emptyList();
      private void ensureCardDataScoreIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          cardDataScore_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardDataScore_);
          bitField0_ |= 0x00040000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardDataScoreBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardDataScoreList() {
        if (cardDataScoreBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardDataScore_);
        } else {
          return cardDataScoreBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public int getCardDataScoreCount() {
        if (cardDataScoreBuilder_ == null) {
          return cardDataScore_.size();
        } else {
          return cardDataScoreBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardDataScore(int index) {
        if (cardDataScoreBuilder_ == null) {
          return cardDataScore_.get(index);
        } else {
          return cardDataScoreBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public Builder setCardDataScore(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardDataScoreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataScoreIsMutable();
          cardDataScore_.set(index, value);
          onChanged();
        } else {
          cardDataScoreBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public Builder setCardDataScore(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardDataScoreBuilder_ == null) {
          ensureCardDataScoreIsMutable();
          cardDataScore_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardDataScoreBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public Builder addCardDataScore(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardDataScoreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataScoreIsMutable();
          cardDataScore_.add(value);
          onChanged();
        } else {
          cardDataScoreBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public Builder addCardDataScore(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardDataScoreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataScoreIsMutable();
          cardDataScore_.add(index, value);
          onChanged();
        } else {
          cardDataScoreBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public Builder addCardDataScore(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardDataScoreBuilder_ == null) {
          ensureCardDataScoreIsMutable();
          cardDataScore_.add(builderForValue.build());
          onChanged();
        } else {
          cardDataScoreBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public Builder addCardDataScore(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardDataScoreBuilder_ == null) {
          ensureCardDataScoreIsMutable();
          cardDataScore_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardDataScoreBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public Builder addAllCardDataScore(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardDataScoreBuilder_ == null) {
          ensureCardDataScoreIsMutable();
          super.addAll(values, cardDataScore_);
          onChanged();
        } else {
          cardDataScoreBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public Builder clearCardDataScore() {
        if (cardDataScoreBuilder_ == null) {
          cardDataScore_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
        } else {
          cardDataScoreBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public Builder removeCardDataScore(int index) {
        if (cardDataScoreBuilder_ == null) {
          ensureCardDataScoreIsMutable();
          cardDataScore_.remove(index);
          onChanged();
        } else {
          cardDataScoreBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardDataScoreBuilder(
          int index) {
        return getCardDataScoreFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardDataScoreOrBuilder(
          int index) {
        if (cardDataScoreBuilder_ == null) {
          return cardDataScore_.get(index);  } else {
          return cardDataScoreBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardDataScoreOrBuilderList() {
        if (cardDataScoreBuilder_ != null) {
          return cardDataScoreBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardDataScore_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardDataScoreBuilder() {
        return getCardDataScoreFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardDataScoreBuilder(
          int index) {
        return getCardDataScoreFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data_score = 32;</code>
       *
       * <pre>
       *牌型奖励分
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardDataScoreBuilderList() {
        return getCardDataScoreFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardDataScoreFieldBuilder() {
        if (cardDataScoreBuilder_ == null) {
          cardDataScoreBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardDataScore_,
                  ((bitField0_ & 0x00040000) == 0x00040000),
                  getParentForChildren(),
                  isClean());
          cardDataScore_ = null;
        }
        return cardDataScoreBuilder_;
      }

      // repeated int32 all_end_score = 13;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // repeated int32 end_score_max = 14;
      private java.util.List<java.lang.Integer> endScoreMax_ = java.util.Collections.emptyList();
      private void ensureEndScoreMaxIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          endScoreMax_ = new java.util.ArrayList<java.lang.Integer>(endScoreMax_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreMaxList() {
        return java.util.Collections.unmodifiableList(endScoreMax_);
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMaxCount() {
        return endScoreMax_.size();
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMax(int index) {
        return endScoreMax_.get(index);
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder setEndScoreMax(
          int index, int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addEndScoreMax(int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addAllEndScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreMaxIsMutable();
        super.addAll(values, endScoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder clearEndScoreMax() {
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated int32 win_num = 15;
      private java.util.List<java.lang.Integer> winNum_ = java.util.Collections.emptyList();
      private void ensureWinNumIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          winNum_ = new java.util.ArrayList<java.lang.Integer>(winNum_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinNumList() {
        return java.util.Collections.unmodifiableList(winNum_);
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNumCount() {
        return winNum_.size();
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNum(int index) {
        return winNum_.get(index);
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder setWinNum(
          int index, int value) {
        ensureWinNumIsMutable();
        winNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addWinNum(int value) {
        ensureWinNumIsMutable();
        winNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addAllWinNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinNumIsMutable();
        super.addAll(values, winNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder clearWinNum() {
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 lose_num = 16;
      private java.util.List<java.lang.Integer> loseNum_ = java.util.Collections.emptyList();
      private void ensureLoseNumIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          loseNum_ = new java.util.ArrayList<java.lang.Integer>(loseNum_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLoseNumList() {
        return java.util.Collections.unmodifiableList(loseNum_);
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNumCount() {
        return loseNum_.size();
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNum(int index) {
        return loseNum_.get(index);
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder setLoseNum(
          int index, int value) {
        ensureLoseNumIsMutable();
        loseNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addLoseNum(int value) {
        ensureLoseNumIsMutable();
        loseNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addAllLoseNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLoseNumIsMutable();
        super.addAll(values, loseNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder clearLoseNum() {
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 17;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00800000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00800000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00800000) == 0x00800000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 all_reward_score = 22;
      private java.util.List<java.lang.Integer> allRewardScore_ = java.util.Collections.emptyList();
      private void ensureAllRewardScoreIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          allRewardScore_ = new java.util.ArrayList<java.lang.Integer>(allRewardScore_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated int32 all_reward_score = 22;</code>
       *
       * <pre>
       *总喜钱分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllRewardScoreList() {
        return java.util.Collections.unmodifiableList(allRewardScore_);
      }
      /**
       * <code>repeated int32 all_reward_score = 22;</code>
       *
       * <pre>
       *总喜钱分
       * </pre>
       */
      public int getAllRewardScoreCount() {
        return allRewardScore_.size();
      }
      /**
       * <code>repeated int32 all_reward_score = 22;</code>
       *
       * <pre>
       *总喜钱分
       * </pre>
       */
      public int getAllRewardScore(int index) {
        return allRewardScore_.get(index);
      }
      /**
       * <code>repeated int32 all_reward_score = 22;</code>
       *
       * <pre>
       *总喜钱分
       * </pre>
       */
      public Builder setAllRewardScore(
          int index, int value) {
        ensureAllRewardScoreIsMutable();
        allRewardScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_reward_score = 22;</code>
       *
       * <pre>
       *总喜钱分
       * </pre>
       */
      public Builder addAllRewardScore(int value) {
        ensureAllRewardScoreIsMutable();
        allRewardScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_reward_score = 22;</code>
       *
       * <pre>
       *总喜钱分
       * </pre>
       */
      public Builder addAllAllRewardScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllRewardScoreIsMutable();
        super.addAll(values, allRewardScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_reward_score = 22;</code>
       *
       * <pre>
       *总喜钱分
       * </pre>
       */
      public Builder clearAllRewardScore() {
        allRewardScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      // repeated int32 all_zhua_fen = 23;
      private java.util.List<java.lang.Integer> allZhuaFen_ = java.util.Collections.emptyList();
      private void ensureAllZhuaFenIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          allZhuaFen_ = new java.util.ArrayList<java.lang.Integer>(allZhuaFen_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated int32 all_zhua_fen = 23;</code>
       *
       * <pre>
       * 总抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllZhuaFenList() {
        return java.util.Collections.unmodifiableList(allZhuaFen_);
      }
      /**
       * <code>repeated int32 all_zhua_fen = 23;</code>
       *
       * <pre>
       * 总抓分
       * </pre>
       */
      public int getAllZhuaFenCount() {
        return allZhuaFen_.size();
      }
      /**
       * <code>repeated int32 all_zhua_fen = 23;</code>
       *
       * <pre>
       * 总抓分
       * </pre>
       */
      public int getAllZhuaFen(int index) {
        return allZhuaFen_.get(index);
      }
      /**
       * <code>repeated int32 all_zhua_fen = 23;</code>
       *
       * <pre>
       * 总抓分
       * </pre>
       */
      public Builder setAllZhuaFen(
          int index, int value) {
        ensureAllZhuaFenIsMutable();
        allZhuaFen_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_zhua_fen = 23;</code>
       *
       * <pre>
       * 总抓分
       * </pre>
       */
      public Builder addAllZhuaFen(int value) {
        ensureAllZhuaFenIsMutable();
        allZhuaFen_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_zhua_fen = 23;</code>
       *
       * <pre>
       * 总抓分
       * </pre>
       */
      public Builder addAllAllZhuaFen(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllZhuaFenIsMutable();
        super.addAll(values, allZhuaFen_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_zhua_fen = 23;</code>
       *
       * <pre>
       * 总抓分
       * </pre>
       */
      public Builder clearAllZhuaFen() {
        allZhuaFen_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      // repeated int32 end_zhua_fen_max = 24;
      private java.util.List<java.lang.Integer> endZhuaFenMax_ = java.util.Collections.emptyList();
      private void ensureEndZhuaFenMaxIsMutable() {
        if (!((bitField0_ & 0x04000000) == 0x04000000)) {
          endZhuaFenMax_ = new java.util.ArrayList<java.lang.Integer>(endZhuaFenMax_);
          bitField0_ |= 0x04000000;
         }
      }
      /**
       * <code>repeated int32 end_zhua_fen_max = 24;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndZhuaFenMaxList() {
        return java.util.Collections.unmodifiableList(endZhuaFenMax_);
      }
      /**
       * <code>repeated int32 end_zhua_fen_max = 24;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public int getEndZhuaFenMaxCount() {
        return endZhuaFenMax_.size();
      }
      /**
       * <code>repeated int32 end_zhua_fen_max = 24;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public int getEndZhuaFenMax(int index) {
        return endZhuaFenMax_.get(index);
      }
      /**
       * <code>repeated int32 end_zhua_fen_max = 24;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public Builder setEndZhuaFenMax(
          int index, int value) {
        ensureEndZhuaFenMaxIsMutable();
        endZhuaFenMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_zhua_fen_max = 24;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public Builder addEndZhuaFenMax(int value) {
        ensureEndZhuaFenMaxIsMutable();
        endZhuaFenMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_zhua_fen_max = 24;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public Builder addAllEndZhuaFenMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndZhuaFenMaxIsMutable();
        super.addAll(values, endZhuaFenMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_zhua_fen_max = 24;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public Builder clearEndZhuaFenMax() {
        endZhuaFenMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        onChanged();
        return this;
      }

      // repeated int32 all_tou_you = 25;
      private java.util.List<java.lang.Integer> allTouYou_ = java.util.Collections.emptyList();
      private void ensureAllTouYouIsMutable() {
        if (!((bitField0_ & 0x08000000) == 0x08000000)) {
          allTouYou_ = new java.util.ArrayList<java.lang.Integer>(allTouYou_);
          bitField0_ |= 0x08000000;
         }
      }
      /**
       * <code>repeated int32 all_tou_you = 25;</code>
       *
       * <pre>
       *头游总数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllTouYouList() {
        return java.util.Collections.unmodifiableList(allTouYou_);
      }
      /**
       * <code>repeated int32 all_tou_you = 25;</code>
       *
       * <pre>
       *头游总数
       * </pre>
       */
      public int getAllTouYouCount() {
        return allTouYou_.size();
      }
      /**
       * <code>repeated int32 all_tou_you = 25;</code>
       *
       * <pre>
       *头游总数
       * </pre>
       */
      public int getAllTouYou(int index) {
        return allTouYou_.get(index);
      }
      /**
       * <code>repeated int32 all_tou_you = 25;</code>
       *
       * <pre>
       *头游总数
       * </pre>
       */
      public Builder setAllTouYou(
          int index, int value) {
        ensureAllTouYouIsMutable();
        allTouYou_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_tou_you = 25;</code>
       *
       * <pre>
       *头游总数
       * </pre>
       */
      public Builder addAllTouYou(int value) {
        ensureAllTouYouIsMutable();
        allTouYou_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_tou_you = 25;</code>
       *
       * <pre>
       *头游总数
       * </pre>
       */
      public Builder addAllAllTouYou(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllTouYouIsMutable();
        super.addAll(values, allTouYou_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_tou_you = 25;</code>
       *
       * <pre>
       *头游总数
       * </pre>
       */
      public Builder clearAllTouYou() {
        allTouYou_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        onChanged();
        return this;
      }

      // repeated int32 all_win_num = 26;
      private java.util.List<java.lang.Integer> allWinNum_ = java.util.Collections.emptyList();
      private void ensureAllWinNumIsMutable() {
        if (!((bitField0_ & 0x10000000) == 0x10000000)) {
          allWinNum_ = new java.util.ArrayList<java.lang.Integer>(allWinNum_);
          bitField0_ |= 0x10000000;
         }
      }
      /**
       * <code>repeated int32 all_win_num = 26;</code>
       *
       * <pre>
       *胜利数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllWinNumList() {
        return java.util.Collections.unmodifiableList(allWinNum_);
      }
      /**
       * <code>repeated int32 all_win_num = 26;</code>
       *
       * <pre>
       *胜利数
       * </pre>
       */
      public int getAllWinNumCount() {
        return allWinNum_.size();
      }
      /**
       * <code>repeated int32 all_win_num = 26;</code>
       *
       * <pre>
       *胜利数
       * </pre>
       */
      public int getAllWinNum(int index) {
        return allWinNum_.get(index);
      }
      /**
       * <code>repeated int32 all_win_num = 26;</code>
       *
       * <pre>
       *胜利数
       * </pre>
       */
      public Builder setAllWinNum(
          int index, int value) {
        ensureAllWinNumIsMutable();
        allWinNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_win_num = 26;</code>
       *
       * <pre>
       *胜利数
       * </pre>
       */
      public Builder addAllWinNum(int value) {
        ensureAllWinNumIsMutable();
        allWinNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_win_num = 26;</code>
       *
       * <pre>
       *胜利数
       * </pre>
       */
      public Builder addAllAllWinNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllWinNumIsMutable();
        super.addAll(values, allWinNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_win_num = 26;</code>
       *
       * <pre>
       *胜利数
       * </pre>
       */
      public Builder clearAllWinNum() {
        allWinNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        onChanged();
        return this;
      }

      // repeated int32 all_fail_num = 27;
      private java.util.List<java.lang.Integer> allFailNum_ = java.util.Collections.emptyList();
      private void ensureAllFailNumIsMutable() {
        if (!((bitField0_ & 0x20000000) == 0x20000000)) {
          allFailNum_ = new java.util.ArrayList<java.lang.Integer>(allFailNum_);
          bitField0_ |= 0x20000000;
         }
      }
      /**
       * <code>repeated int32 all_fail_num = 27;</code>
       *
       * <pre>
       *失败数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllFailNumList() {
        return java.util.Collections.unmodifiableList(allFailNum_);
      }
      /**
       * <code>repeated int32 all_fail_num = 27;</code>
       *
       * <pre>
       *失败数
       * </pre>
       */
      public int getAllFailNumCount() {
        return allFailNum_.size();
      }
      /**
       * <code>repeated int32 all_fail_num = 27;</code>
       *
       * <pre>
       *失败数
       * </pre>
       */
      public int getAllFailNum(int index) {
        return allFailNum_.get(index);
      }
      /**
       * <code>repeated int32 all_fail_num = 27;</code>
       *
       * <pre>
       *失败数
       * </pre>
       */
      public Builder setAllFailNum(
          int index, int value) {
        ensureAllFailNumIsMutable();
        allFailNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_fail_num = 27;</code>
       *
       * <pre>
       *失败数
       * </pre>
       */
      public Builder addAllFailNum(int value) {
        ensureAllFailNumIsMutable();
        allFailNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_fail_num = 27;</code>
       *
       * <pre>
       *失败数
       * </pre>
       */
      public Builder addAllAllFailNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllFailNumIsMutable();
        super.addAll(values, allFailNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_fail_num = 27;</code>
       *
       * <pre>
       *失败数
       * </pre>
       */
      public Builder clearAllFailNum() {
        allFailNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x20000000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_card_data = 29;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardDataIsMutable() {
        if (!((bitField0_ & 0x40000000) == 0x40000000)) {
          handCardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardData_);
          bitField0_ |= 0x40000000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardDataList() {
        if (handCardDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardData_);
        } else {
          return handCardDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public int getHandCardDataCount() {
        if (handCardDataBuilder_ == null) {
          return handCardData_.size();
        } else {
          return handCardDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index) {
        if (handCardDataBuilder_ == null) {
          return handCardData_.get(index);
        } else {
          return handCardDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public Builder setHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.set(index, value);
          onChanged();
        } else {
          handCardDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public Builder setHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public Builder addHandCardData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.add(value);
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public Builder addHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.add(index, value);
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public Builder addHandCardData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public Builder addHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public Builder addAllHandCardData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          super.addAll(values, handCardData_);
          onChanged();
        } else {
          handCardDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public Builder clearHandCardData() {
        if (handCardDataBuilder_ == null) {
          handCardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x40000000);
          onChanged();
        } else {
          handCardDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public Builder removeHandCardData(int index) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.remove(index);
          onChanged();
        } else {
          handCardDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardDataBuilder(
          int index) {
        return getHandCardDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
          int index) {
        if (handCardDataBuilder_ == null) {
          return handCardData_.get(index);  } else {
          return handCardDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardDataOrBuilderList() {
        if (handCardDataBuilder_ != null) {
          return handCardDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardDataBuilder() {
        return getHandCardDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardDataBuilder(
          int index) {
        return getHandCardDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 29;</code>
       *
       * <pre>
       *剩余手牌
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardDataBuilderList() {
        return getHandCardDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardDataFieldBuilder() {
        if (handCardDataBuilder_ == null) {
          handCardDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardData_,
                  ((bitField0_ & 0x40000000) == 0x40000000),
                  getParentForChildren(),
                  isClean());
          handCardData_ = null;
        }
        return handCardDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.PukeGameEndWsk_GF)
    }

    static {
      defaultInstance = new PukeGameEndWsk_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.PukeGameEndWsk_GF)
  }

  public interface TableResponse_Wsk_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 6;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_pass = 7;
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // repeated int32 card_type = 8;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 9;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_cards_data = 10;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 11;
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 12;
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 13;
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 14;
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 15;
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 16;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .RoomInfo room_info = 17;
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 18;
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 user_can_out_data = 19;
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 20;
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCount();

    // repeated int32 user_get_score = 21;
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetScoreList();
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScoreCount();
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScore(int index);

    // repeated int32 win_order = 22;
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // optional bool is_yi_da_san = 23;
    /**
     * <code>optional bool is_yi_da_san = 23;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    boolean hasIsYiDaSan();
    /**
     * <code>optional bool is_yi_da_san = 23;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    boolean getIsYiDaSan();

    // repeated int32 tou_xiang_status = 24;
    /**
     * <code>repeated int32 tou_xiang_status = 24;</code>
     *
     * <pre>
     *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
     * </pre>
     */
    java.util.List<java.lang.Integer> getTouXiangStatusList();
    /**
     * <code>repeated int32 tou_xiang_status = 24;</code>
     *
     * <pre>
     *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
     * </pre>
     */
    int getTouXiangStatusCount();
    /**
     * <code>repeated int32 tou_xiang_status = 24;</code>
     *
     * <pre>
     *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
     * </pre>
     */
    int getTouXiangStatus(int index);

    // repeated .Int32ArrayResponse fei_wang = 25;
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getFeiWangList();
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getFeiWang(int index);
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    int getFeiWangCount();
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getFeiWangOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getFeiWangOrBuilder(
        int index);

    // repeated int32 jiao_card_data = 26;
    /**
     * <code>repeated int32 jiao_card_data = 26;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    java.util.List<java.lang.Integer> getJiaoCardDataList();
    /**
     * <code>repeated int32 jiao_card_data = 26;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    int getJiaoCardDataCount();
    /**
     * <code>repeated int32 jiao_card_data = 26;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    int getJiaoCardData(int index);
  }
  /**
   * Protobuf type {@code gfWsk.TableResponse_Wsk_GF}
   */
  public static final class TableResponse_Wsk_GF extends
      com.google.protobuf.GeneratedMessage
      implements TableResponse_Wsk_GFOrBuilder {
    // Use TableResponse_Wsk_GF.newBuilder() to construct.
    private TableResponse_Wsk_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponse_Wsk_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponse_Wsk_GF defaultInstance;
    public static TableResponse_Wsk_GF getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponse_Wsk_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponse_Wsk_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00008000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 138: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 146: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00020000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              bitField0_ |= 0x00000200;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              userGetScore_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              bitField0_ |= 0x00000400;
              isYiDaSan_ = input.readBool();
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                touXiangStatus_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              touXiangStatus_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                touXiangStatus_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                touXiangStatus_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 202: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                feiWang_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x01000000;
              }
              feiWang_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 208: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                jiaoCardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              jiaoCardData_.add(input.readInt32());
              break;
            }
            case 210: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                jiaoCardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                jiaoCardData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          touXiangStatus_ = java.util.Collections.unmodifiableList(touXiangStatus_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          feiWang_ = java.util.Collections.unmodifiableList(feiWang_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          jiaoCardData_ = java.util.Collections.unmodifiableList(jiaoCardData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TableResponse_Wsk_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TableResponse_Wsk_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponse_Wsk_GF> PARSER =
        new com.google.protobuf.AbstractParser<TableResponse_Wsk_GF>() {
      public TableResponse_Wsk_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponse_Wsk_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponse_Wsk_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 6;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_pass = 7;
    public static final int PLAYER_PASS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // repeated int32 card_type = 8;
    public static final int CARD_TYPE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 9;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 9;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_cards_data = 10;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 11;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 11;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 12;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 12;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 13;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 13;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 14;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 14;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 15;
    public static final int CARD_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 16;
    public static final int CARDS_DATA_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .RoomInfo room_info = 17;
    public static final int ROOM_INFO_FIELD_NUMBER = 17;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 18;
    public static final int PLAYERS_FIELD_NUMBER = 18;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 user_can_out_data = 19;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 20;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 20;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // repeated int32 user_get_score = 21;
    public static final int USER_GET_SCORE_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> userGetScore_;
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetScoreList() {
      return userGetScore_;
    }
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScoreCount() {
      return userGetScore_.size();
    }
    /**
     * <code>repeated int32 user_get_score = 21;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScore(int index) {
      return userGetScore_.get(index);
    }

    // repeated int32 win_order = 22;
    public static final int WIN_ORDER_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 22;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // optional bool is_yi_da_san = 23;
    public static final int IS_YI_DA_SAN_FIELD_NUMBER = 23;
    private boolean isYiDaSan_;
    /**
     * <code>optional bool is_yi_da_san = 23;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    public boolean hasIsYiDaSan() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool is_yi_da_san = 23;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    public boolean getIsYiDaSan() {
      return isYiDaSan_;
    }

    // repeated int32 tou_xiang_status = 24;
    public static final int TOU_XIANG_STATUS_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> touXiangStatus_;
    /**
     * <code>repeated int32 tou_xiang_status = 24;</code>
     *
     * <pre>
     *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTouXiangStatusList() {
      return touXiangStatus_;
    }
    /**
     * <code>repeated int32 tou_xiang_status = 24;</code>
     *
     * <pre>
     *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
     * </pre>
     */
    public int getTouXiangStatusCount() {
      return touXiangStatus_.size();
    }
    /**
     * <code>repeated int32 tou_xiang_status = 24;</code>
     *
     * <pre>
     *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
     * </pre>
     */
    public int getTouXiangStatus(int index) {
      return touXiangStatus_.get(index);
    }

    // repeated .Int32ArrayResponse fei_wang = 25;
    public static final int FEI_WANG_FIELD_NUMBER = 25;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> feiWang_;
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getFeiWangList() {
      return feiWang_;
    }
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getFeiWangOrBuilderList() {
      return feiWang_;
    }
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    public int getFeiWangCount() {
      return feiWang_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getFeiWang(int index) {
      return feiWang_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getFeiWangOrBuilder(
        int index) {
      return feiWang_.get(index);
    }

    // repeated int32 jiao_card_data = 26;
    public static final int JIAO_CARD_DATA_FIELD_NUMBER = 26;
    private java.util.List<java.lang.Integer> jiaoCardData_;
    /**
     * <code>repeated int32 jiao_card_data = 26;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJiaoCardDataList() {
      return jiaoCardData_;
    }
    /**
     * <code>repeated int32 jiao_card_data = 26;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    public int getJiaoCardDataCount() {
      return jiaoCardData_.size();
    }
    /**
     * <code>repeated int32 jiao_card_data = 26;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    public int getJiaoCardData(int index) {
      return jiaoCardData_.get(index);
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerPass_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      userGetScore_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
      isYiDaSan_ = false;
      touXiangStatus_ = java.util.Collections.emptyList();
      feiWang_ = java.util.Collections.emptyList();
      jiaoCardData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(6, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(7, playerPass_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(8, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(9, prOutCardPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(10, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(11, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(12, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(13, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(14, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(15, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(16, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(17, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(18, players_.get(i));
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(19, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(20, userCanOutCount_);
      }
      for (int i = 0; i < userGetScore_.size(); i++) {
        output.writeInt32(21, userGetScore_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(22, winOrder_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(23, isYiDaSan_);
      }
      for (int i = 0; i < touXiangStatus_.size(); i++) {
        output.writeInt32(24, touXiangStatus_.get(i));
      }
      for (int i = 0; i < feiWang_.size(); i++) {
        output.writeMessage(25, feiWang_.get(i));
      }
      for (int i = 0; i < jiaoCardData_.size(); i++) {
        output.writeInt32(26, jiaoCardData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerPassList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 2 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, userCanOutCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userGetScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetScore_.get(i));
        }
        size += dataSize;
        size += 2 * getUserGetScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 2 * getWinOrderList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(23, isYiDaSan_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < touXiangStatus_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(touXiangStatus_.get(i));
        }
        size += dataSize;
        size += 2 * getTouXiangStatusList().size();
      }
      for (int i = 0; i < feiWang_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, feiWang_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jiaoCardData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jiaoCardData_.get(i));
        }
        size += dataSize;
        size += 2 * getJiaoCardDataList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.TableResponse_Wsk_GF}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TableResponse_Wsk_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TableResponse_Wsk_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
          getFeiWangFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          playersBuilder_.clear();
        }
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        isYiDaSan_ = false;
        bitField0_ = (bitField0_ & ~0x00400000);
        touXiangStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        if (feiWangBuilder_ == null) {
          feiWang_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x01000000);
        } else {
          feiWangBuilder_.clear();
        }
        jiaoCardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TableResponse_Wsk_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF result = new protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.playerPass_ = playerPass_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.userGetScore_ = userGetScore_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.winOrder_ = winOrder_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isYiDaSan_ = isYiDaSan_;
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          touXiangStatus_ = java.util.Collections.unmodifiableList(touXiangStatus_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.touXiangStatus_ = touXiangStatus_;
        if (feiWangBuilder_ == null) {
          if (((bitField0_ & 0x01000000) == 0x01000000)) {
            feiWang_ = java.util.Collections.unmodifiableList(feiWang_);
            bitField0_ = (bitField0_ & ~0x01000000);
          }
          result.feiWang_ = feiWang_;
        } else {
          result.feiWang_ = feiWangBuilder_.build();
        }
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          jiaoCardData_ = java.util.Collections.unmodifiableList(jiaoCardData_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.jiaoCardData_ = jiaoCardData_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (!other.userGetScore_.isEmpty()) {
          if (userGetScore_.isEmpty()) {
            userGetScore_ = other.userGetScore_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureUserGetScoreIsMutable();
            userGetScore_.addAll(other.userGetScore_);
          }
          onChanged();
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (other.hasIsYiDaSan()) {
          setIsYiDaSan(other.getIsYiDaSan());
        }
        if (!other.touXiangStatus_.isEmpty()) {
          if (touXiangStatus_.isEmpty()) {
            touXiangStatus_ = other.touXiangStatus_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureTouXiangStatusIsMutable();
            touXiangStatus_.addAll(other.touXiangStatus_);
          }
          onChanged();
        }
        if (feiWangBuilder_ == null) {
          if (!other.feiWang_.isEmpty()) {
            if (feiWang_.isEmpty()) {
              feiWang_ = other.feiWang_;
              bitField0_ = (bitField0_ & ~0x01000000);
            } else {
              ensureFeiWangIsMutable();
              feiWang_.addAll(other.feiWang_);
            }
            onChanged();
          }
        } else {
          if (!other.feiWang_.isEmpty()) {
            if (feiWangBuilder_.isEmpty()) {
              feiWangBuilder_.dispose();
              feiWangBuilder_ = null;
              feiWang_ = other.feiWang_;
              bitField0_ = (bitField0_ & ~0x01000000);
              feiWangBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFeiWangFieldBuilder() : null;
            } else {
              feiWangBuilder_.addAllMessages(other.feiWang_);
            }
          }
        }
        if (!other.jiaoCardData_.isEmpty()) {
          if (jiaoCardData_.isEmpty()) {
            jiaoCardData_ = other.jiaoCardData_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureJiaoCardDataIsMutable();
            jiaoCardData_.addAll(other.jiaoCardData_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.TableResponse_Wsk_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 6;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 7;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 8;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 9;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000100;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 10;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 11;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000400;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 12;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000800;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000800);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 13;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00001000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00001000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 14;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00002000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00002000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 15;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 16;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .RoomInfo room_info = 17;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 18;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 user_can_out_data = 19;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 20;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00080000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00080000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_get_score = 21;
      private java.util.List<java.lang.Integer> userGetScore_ = java.util.Collections.emptyList();
      private void ensureUserGetScoreIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          userGetScore_ = new java.util.ArrayList<java.lang.Integer>(userGetScore_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetScoreList() {
        return java.util.Collections.unmodifiableList(userGetScore_);
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScoreCount() {
        return userGetScore_.size();
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScore(int index) {
        return userGetScore_.get(index);
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder setUserGetScore(
          int index, int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addUserGetScore(int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addAllUserGetScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetScoreIsMutable();
        super.addAll(values, userGetScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 21;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder clearUserGetScore() {
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated int32 win_order = 22;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 22;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // optional bool is_yi_da_san = 23;
      private boolean isYiDaSan_ ;
      /**
       * <code>optional bool is_yi_da_san = 23;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public boolean hasIsYiDaSan() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional bool is_yi_da_san = 23;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public boolean getIsYiDaSan() {
        return isYiDaSan_;
      }
      /**
       * <code>optional bool is_yi_da_san = 23;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public Builder setIsYiDaSan(boolean value) {
        bitField0_ |= 0x00400000;
        isYiDaSan_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_yi_da_san = 23;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public Builder clearIsYiDaSan() {
        bitField0_ = (bitField0_ & ~0x00400000);
        isYiDaSan_ = false;
        onChanged();
        return this;
      }

      // repeated int32 tou_xiang_status = 24;
      private java.util.List<java.lang.Integer> touXiangStatus_ = java.util.Collections.emptyList();
      private void ensureTouXiangStatusIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          touXiangStatus_ = new java.util.ArrayList<java.lang.Integer>(touXiangStatus_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated int32 tou_xiang_status = 24;</code>
       *
       * <pre>
       *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTouXiangStatusList() {
        return java.util.Collections.unmodifiableList(touXiangStatus_);
      }
      /**
       * <code>repeated int32 tou_xiang_status = 24;</code>
       *
       * <pre>
       *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
       * </pre>
       */
      public int getTouXiangStatusCount() {
        return touXiangStatus_.size();
      }
      /**
       * <code>repeated int32 tou_xiang_status = 24;</code>
       *
       * <pre>
       *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
       * </pre>
       */
      public int getTouXiangStatus(int index) {
        return touXiangStatus_.get(index);
      }
      /**
       * <code>repeated int32 tou_xiang_status = 24;</code>
       *
       * <pre>
       *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
       * </pre>
       */
      public Builder setTouXiangStatus(
          int index, int value) {
        ensureTouXiangStatusIsMutable();
        touXiangStatus_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 tou_xiang_status = 24;</code>
       *
       * <pre>
       *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
       * </pre>
       */
      public Builder addTouXiangStatus(int value) {
        ensureTouXiangStatusIsMutable();
        touXiangStatus_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 tou_xiang_status = 24;</code>
       *
       * <pre>
       *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
       * </pre>
       */
      public Builder addAllTouXiangStatus(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTouXiangStatusIsMutable();
        super.addAll(values, touXiangStatus_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 tou_xiang_status = 24;</code>
       *
       * <pre>
       *投降状态 0:还未操作 1：选择投降  2：选择不投降 3：不用显示
       * </pre>
       */
      public Builder clearTouXiangStatus() {
        touXiangStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse fei_wang = 25;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> feiWang_ =
        java.util.Collections.emptyList();
      private void ensureFeiWangIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          feiWang_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(feiWang_);
          bitField0_ |= 0x01000000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> feiWangBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getFeiWangList() {
        if (feiWangBuilder_ == null) {
          return java.util.Collections.unmodifiableList(feiWang_);
        } else {
          return feiWangBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public int getFeiWangCount() {
        if (feiWangBuilder_ == null) {
          return feiWang_.size();
        } else {
          return feiWangBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getFeiWang(int index) {
        if (feiWangBuilder_ == null) {
          return feiWang_.get(index);
        } else {
          return feiWangBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder setFeiWang(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (feiWangBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeiWangIsMutable();
          feiWang_.set(index, value);
          onChanged();
        } else {
          feiWangBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder setFeiWang(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (feiWangBuilder_ == null) {
          ensureFeiWangIsMutable();
          feiWang_.set(index, builderForValue.build());
          onChanged();
        } else {
          feiWangBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder addFeiWang(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (feiWangBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeiWangIsMutable();
          feiWang_.add(value);
          onChanged();
        } else {
          feiWangBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder addFeiWang(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (feiWangBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeiWangIsMutable();
          feiWang_.add(index, value);
          onChanged();
        } else {
          feiWangBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder addFeiWang(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (feiWangBuilder_ == null) {
          ensureFeiWangIsMutable();
          feiWang_.add(builderForValue.build());
          onChanged();
        } else {
          feiWangBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder addFeiWang(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (feiWangBuilder_ == null) {
          ensureFeiWangIsMutable();
          feiWang_.add(index, builderForValue.build());
          onChanged();
        } else {
          feiWangBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder addAllFeiWang(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (feiWangBuilder_ == null) {
          ensureFeiWangIsMutable();
          super.addAll(values, feiWang_);
          onChanged();
        } else {
          feiWangBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder clearFeiWang() {
        if (feiWangBuilder_ == null) {
          feiWang_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x01000000);
          onChanged();
        } else {
          feiWangBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder removeFeiWang(int index) {
        if (feiWangBuilder_ == null) {
          ensureFeiWangIsMutable();
          feiWang_.remove(index);
          onChanged();
        } else {
          feiWangBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getFeiWangBuilder(
          int index) {
        return getFeiWangFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getFeiWangOrBuilder(
          int index) {
        if (feiWangBuilder_ == null) {
          return feiWang_.get(index);  } else {
          return feiWangBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getFeiWangOrBuilderList() {
        if (feiWangBuilder_ != null) {
          return feiWangBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(feiWang_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addFeiWangBuilder() {
        return getFeiWangFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addFeiWangBuilder(
          int index) {
        return getFeiWangFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 25;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getFeiWangBuilderList() {
        return getFeiWangFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getFeiWangFieldBuilder() {
        if (feiWangBuilder_ == null) {
          feiWangBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  feiWang_,
                  ((bitField0_ & 0x01000000) == 0x01000000),
                  getParentForChildren(),
                  isClean());
          feiWang_ = null;
        }
        return feiWangBuilder_;
      }

      // repeated int32 jiao_card_data = 26;
      private java.util.List<java.lang.Integer> jiaoCardData_ = java.util.Collections.emptyList();
      private void ensureJiaoCardDataIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          jiaoCardData_ = new java.util.ArrayList<java.lang.Integer>(jiaoCardData_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated int32 jiao_card_data = 26;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJiaoCardDataList() {
        return java.util.Collections.unmodifiableList(jiaoCardData_);
      }
      /**
       * <code>repeated int32 jiao_card_data = 26;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public int getJiaoCardDataCount() {
        return jiaoCardData_.size();
      }
      /**
       * <code>repeated int32 jiao_card_data = 26;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public int getJiaoCardData(int index) {
        return jiaoCardData_.get(index);
      }
      /**
       * <code>repeated int32 jiao_card_data = 26;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public Builder setJiaoCardData(
          int index, int value) {
        ensureJiaoCardDataIsMutable();
        jiaoCardData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jiao_card_data = 26;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public Builder addJiaoCardData(int value) {
        ensureJiaoCardDataIsMutable();
        jiaoCardData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jiao_card_data = 26;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public Builder addAllJiaoCardData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJiaoCardDataIsMutable();
        super.addAll(values, jiaoCardData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jiao_card_data = 26;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public Builder clearJiaoCardData() {
        jiaoCardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.TableResponse_Wsk_GF)
    }

    static {
      defaultInstance = new TableResponse_Wsk_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.TableResponse_Wsk_GF)
  }

  public interface GameStart_Wsk_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 5;
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 7;
    /**
     * <code>repeated .RoomPlayerResponse players = 7;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 7;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 7;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 7;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 7;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 cur_banker = 1;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    int getCurBanker();

    // repeated int32 card_count = 2;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 3;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 display_time = 4;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated .Int32ArrayResponse fei_wang = 8;
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getFeiWangList();
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getFeiWang(int index);
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    int getFeiWangCount();
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getFeiWangOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getFeiWangOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code gfWsk.GameStart_Wsk_GF}
   */
  public static final class GameStart_Wsk_GF extends
      com.google.protobuf.GeneratedMessage
      implements GameStart_Wsk_GFOrBuilder {
    // Use GameStart_Wsk_GF.newBuilder() to construct.
    private GameStart_Wsk_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStart_Wsk_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStart_Wsk_GF defaultInstance;
    public static GameStart_Wsk_GF getDefaultInstance() {
      return defaultInstance;
    }

    public GameStart_Wsk_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStart_Wsk_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              curBanker_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              displayTime_ = input.readInt32();
              break;
            }
            case 42: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                feiWang_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000040;
              }
              feiWang_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          feiWang_ = java.util.Collections.unmodifiableList(feiWang_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_GameStart_Wsk_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_GameStart_Wsk_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStart_Wsk_GF> PARSER =
        new com.google.protobuf.AbstractParser<GameStart_Wsk_GF>() {
      public GameStart_Wsk_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStart_Wsk_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStart_Wsk_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 5;
    public static final int ROOM_INFO_FIELD_NUMBER = 5;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 7;
    public static final int PLAYERS_FIELD_NUMBER = 7;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 7;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 7;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 7;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 7;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 7;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 cur_banker = 1;
    public static final int CUR_BANKER_FIELD_NUMBER = 1;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // repeated int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 display_time = 4;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 4;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated .Int32ArrayResponse fei_wang = 8;
    public static final int FEI_WANG_FIELD_NUMBER = 8;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> feiWang_;
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getFeiWangList() {
      return feiWang_;
    }
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getFeiWangOrBuilderList() {
      return feiWang_;
    }
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    public int getFeiWangCount() {
      return feiWang_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getFeiWang(int index) {
      return feiWang_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
     *
     * <pre>
     *废王
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getFeiWangOrBuilder(
        int index) {
      return feiWang_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      curBanker_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      feiWang_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(1, curBanker_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(2, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, displayTime_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(5, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(7, players_.get(i));
      }
      for (int i = 0; i < feiWang_.size(); i++) {
        output.writeMessage(8, feiWang_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curBanker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, displayTime_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, players_.get(i));
      }
      for (int i = 0; i < feiWang_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, feiWang_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.GameStart_Wsk_GF}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_GameStart_Wsk_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_GameStart_Wsk_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
          getCardsDataFieldBuilder();
          getFeiWangFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (feiWangBuilder_ == null) {
          feiWang_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          feiWangBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_GameStart_Wsk_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF result = new protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curBanker_ = curBanker_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.displayTime_ = displayTime_;
        if (feiWangBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            feiWang_ = java.util.Collections.unmodifiableList(feiWang_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.feiWang_ = feiWang_;
        } else {
          result.feiWang_ = feiWangBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (feiWangBuilder_ == null) {
          if (!other.feiWang_.isEmpty()) {
            if (feiWang_.isEmpty()) {
              feiWang_ = other.feiWang_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureFeiWangIsMutable();
              feiWang_.addAll(other.feiWang_);
            }
            onChanged();
          }
        } else {
          if (!other.feiWang_.isEmpty()) {
            if (feiWangBuilder_.isEmpty()) {
              feiWangBuilder_.dispose();
              feiWangBuilder_ = null;
              feiWang_ = other.feiWang_;
              bitField0_ = (bitField0_ & ~0x00000040);
              feiWangBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFeiWangFieldBuilder() : null;
            } else {
              feiWangBuilder_.addAllMessages(other.feiWang_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.GameStart_Wsk_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 5;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 7;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 7;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 cur_banker = 1;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000004;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000004);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 2;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 display_time = 4;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000020;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse fei_wang = 8;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> feiWang_ =
        java.util.Collections.emptyList();
      private void ensureFeiWangIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          feiWang_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(feiWang_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> feiWangBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getFeiWangList() {
        if (feiWangBuilder_ == null) {
          return java.util.Collections.unmodifiableList(feiWang_);
        } else {
          return feiWangBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public int getFeiWangCount() {
        if (feiWangBuilder_ == null) {
          return feiWang_.size();
        } else {
          return feiWangBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getFeiWang(int index) {
        if (feiWangBuilder_ == null) {
          return feiWang_.get(index);
        } else {
          return feiWangBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder setFeiWang(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (feiWangBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeiWangIsMutable();
          feiWang_.set(index, value);
          onChanged();
        } else {
          feiWangBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder setFeiWang(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (feiWangBuilder_ == null) {
          ensureFeiWangIsMutable();
          feiWang_.set(index, builderForValue.build());
          onChanged();
        } else {
          feiWangBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder addFeiWang(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (feiWangBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeiWangIsMutable();
          feiWang_.add(value);
          onChanged();
        } else {
          feiWangBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder addFeiWang(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (feiWangBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeiWangIsMutable();
          feiWang_.add(index, value);
          onChanged();
        } else {
          feiWangBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder addFeiWang(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (feiWangBuilder_ == null) {
          ensureFeiWangIsMutable();
          feiWang_.add(builderForValue.build());
          onChanged();
        } else {
          feiWangBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder addFeiWang(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (feiWangBuilder_ == null) {
          ensureFeiWangIsMutable();
          feiWang_.add(index, builderForValue.build());
          onChanged();
        } else {
          feiWangBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder addAllFeiWang(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (feiWangBuilder_ == null) {
          ensureFeiWangIsMutable();
          super.addAll(values, feiWang_);
          onChanged();
        } else {
          feiWangBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder clearFeiWang() {
        if (feiWangBuilder_ == null) {
          feiWang_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          feiWangBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public Builder removeFeiWang(int index) {
        if (feiWangBuilder_ == null) {
          ensureFeiWangIsMutable();
          feiWang_.remove(index);
          onChanged();
        } else {
          feiWangBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getFeiWangBuilder(
          int index) {
        return getFeiWangFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getFeiWangOrBuilder(
          int index) {
        if (feiWangBuilder_ == null) {
          return feiWang_.get(index);  } else {
          return feiWangBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getFeiWangOrBuilderList() {
        if (feiWangBuilder_ != null) {
          return feiWangBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(feiWang_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addFeiWangBuilder() {
        return getFeiWangFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addFeiWangBuilder(
          int index) {
        return getFeiWangFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse fei_wang = 8;</code>
       *
       * <pre>
       *废王
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getFeiWangBuilderList() {
        return getFeiWangFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getFeiWangFieldBuilder() {
        if (feiWangBuilder_ == null) {
          feiWangBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  feiWang_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          feiWang_ = null;
        }
        return feiWangBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.GameStart_Wsk_GF)
    }

    static {
      defaultInstance = new GameStart_Wsk_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.GameStart_Wsk_GF)
  }

  public interface TouXiang_Anser_Wsk_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_seat_index = 1;
    /**
     * <code>optional int32 opreate_seat_index = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    boolean hasOpreateSeatIndex();
    /**
     * <code>optional int32 opreate_seat_index = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    int getOpreateSeatIndex();

    // optional string opreate_str = 2;
    /**
     * <code>optional string opreate_str = 2;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    boolean hasOpreateStr();
    /**
     * <code>optional string opreate_str = 2;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    java.lang.String getOpreateStr();
    /**
     * <code>optional string opreate_str = 2;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    com.google.protobuf.ByteString
        getOpreateStrBytes();

    // optional bool is_tou_xiang = 3;
    /**
     * <code>optional bool is_tou_xiang = 3;</code>
     *
     * <pre>
     *0不投降，1投降
     * </pre>
     */
    boolean hasIsTouXiang();
    /**
     * <code>optional bool is_tou_xiang = 3;</code>
     *
     * <pre>
     *0不投降，1投降
     * </pre>
     */
    boolean getIsTouXiang();
  }
  /**
   * Protobuf type {@code gfWsk.TouXiang_Anser_Wsk_GF}
   */
  public static final class TouXiang_Anser_Wsk_GF extends
      com.google.protobuf.GeneratedMessage
      implements TouXiang_Anser_Wsk_GFOrBuilder {
    // Use TouXiang_Anser_Wsk_GF.newBuilder() to construct.
    private TouXiang_Anser_Wsk_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TouXiang_Anser_Wsk_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TouXiang_Anser_Wsk_GF defaultInstance;
    public static TouXiang_Anser_Wsk_GF getDefaultInstance() {
      return defaultInstance;
    }

    public TouXiang_Anser_Wsk_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TouXiang_Anser_Wsk_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateSeatIndex_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              opreateStr_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              isTouXiang_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TouXiang_Anser_Wsk_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TouXiang_Anser_Wsk_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<TouXiang_Anser_Wsk_GF> PARSER =
        new com.google.protobuf.AbstractParser<TouXiang_Anser_Wsk_GF>() {
      public TouXiang_Anser_Wsk_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TouXiang_Anser_Wsk_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TouXiang_Anser_Wsk_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_seat_index = 1;
    public static final int OPREATE_SEAT_INDEX_FIELD_NUMBER = 1;
    private int opreateSeatIndex_;
    /**
     * <code>optional int32 opreate_seat_index = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public boolean hasOpreateSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_seat_index = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public int getOpreateSeatIndex() {
      return opreateSeatIndex_;
    }

    // optional string opreate_str = 2;
    public static final int OPREATE_STR_FIELD_NUMBER = 2;
    private java.lang.Object opreateStr_;
    /**
     * <code>optional string opreate_str = 2;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    public boolean hasOpreateStr() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string opreate_str = 2;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    public java.lang.String getOpreateStr() {
      java.lang.Object ref = opreateStr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          opreateStr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string opreate_str = 2;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    public com.google.protobuf.ByteString
        getOpreateStrBytes() {
      java.lang.Object ref = opreateStr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        opreateStr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional bool is_tou_xiang = 3;
    public static final int IS_TOU_XIANG_FIELD_NUMBER = 3;
    private boolean isTouXiang_;
    /**
     * <code>optional bool is_tou_xiang = 3;</code>
     *
     * <pre>
     *0不投降，1投降
     * </pre>
     */
    public boolean hasIsTouXiang() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool is_tou_xiang = 3;</code>
     *
     * <pre>
     *0不投降，1投降
     * </pre>
     */
    public boolean getIsTouXiang() {
      return isTouXiang_;
    }

    private void initFields() {
      opreateSeatIndex_ = 0;
      opreateStr_ = "";
      isTouXiang_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateSeatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getOpreateStrBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, isTouXiang_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateSeatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getOpreateStrBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isTouXiang_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.TouXiang_Anser_Wsk_GF}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TouXiang_Anser_Wsk_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TouXiang_Anser_Wsk_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateSeatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateStr_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        isTouXiang_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TouXiang_Anser_Wsk_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF result = new protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateSeatIndex_ = opreateSeatIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.opreateStr_ = opreateStr_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isTouXiang_ = isTouXiang_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF.getDefaultInstance()) return this;
        if (other.hasOpreateSeatIndex()) {
          setOpreateSeatIndex(other.getOpreateSeatIndex());
        }
        if (other.hasOpreateStr()) {
          bitField0_ |= 0x00000002;
          opreateStr_ = other.opreateStr_;
          onChanged();
        }
        if (other.hasIsTouXiang()) {
          setIsTouXiang(other.getIsTouXiang());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Anser_Wsk_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_seat_index = 1;
      private int opreateSeatIndex_ ;
      /**
       * <code>optional int32 opreate_seat_index = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public boolean hasOpreateSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_seat_index = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public int getOpreateSeatIndex() {
        return opreateSeatIndex_;
      }
      /**
       * <code>optional int32 opreate_seat_index = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder setOpreateSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        opreateSeatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_seat_index = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder clearOpreateSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateSeatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional string opreate_str = 2;
      private java.lang.Object opreateStr_ = "";
      /**
       * <code>optional string opreate_str = 2;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public boolean hasOpreateStr() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string opreate_str = 2;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public java.lang.String getOpreateStr() {
        java.lang.Object ref = opreateStr_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          opreateStr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string opreate_str = 2;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public com.google.protobuf.ByteString
          getOpreateStrBytes() {
        java.lang.Object ref = opreateStr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          opreateStr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string opreate_str = 2;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public Builder setOpreateStr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        opreateStr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string opreate_str = 2;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public Builder clearOpreateStr() {
        bitField0_ = (bitField0_ & ~0x00000002);
        opreateStr_ = getDefaultInstance().getOpreateStr();
        onChanged();
        return this;
      }
      /**
       * <code>optional string opreate_str = 2;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public Builder setOpreateStrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        opreateStr_ = value;
        onChanged();
        return this;
      }

      // optional bool is_tou_xiang = 3;
      private boolean isTouXiang_ ;
      /**
       * <code>optional bool is_tou_xiang = 3;</code>
       *
       * <pre>
       *0不投降，1投降
       * </pre>
       */
      public boolean hasIsTouXiang() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool is_tou_xiang = 3;</code>
       *
       * <pre>
       *0不投降，1投降
       * </pre>
       */
      public boolean getIsTouXiang() {
        return isTouXiang_;
      }
      /**
       * <code>optional bool is_tou_xiang = 3;</code>
       *
       * <pre>
       *0不投降，1投降
       * </pre>
       */
      public Builder setIsTouXiang(boolean value) {
        bitField0_ |= 0x00000004;
        isTouXiang_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_tou_xiang = 3;</code>
       *
       * <pre>
       *0不投降，1投降
       * </pre>
       */
      public Builder clearIsTouXiang() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isTouXiang_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.TouXiang_Anser_Wsk_GF)
    }

    static {
      defaultInstance = new TouXiang_Anser_Wsk_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.TouXiang_Anser_Wsk_GF)
  }

  public interface CallBankerResponse_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_action = 1;
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不叫 1：叫
     * </pre>
     */
    boolean hasOpreateAction();
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不叫 1：叫
     * </pre>
     */
    int getOpreateAction();

    // optional int32 call_player = 2;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    boolean hasCallPlayer();
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    int getCallPlayer();

    // optional int32 current_player = 3;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 banker_player = 4;
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 display_time = 5;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional .RoomInfo room_info = 6;
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();
  }
  /**
   * Protobuf type {@code gfWsk.CallBankerResponse_GF}
   *
   * <pre>
   *叫庄结果
   * </pre>
   */
  public static final class CallBankerResponse_GF extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResponse_GFOrBuilder {
    // Use CallBankerResponse_GF.newBuilder() to construct.
    private CallBankerResponse_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResponse_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResponse_GF defaultInstance;
    public static CallBankerResponse_GF getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResponse_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResponse_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateAction_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              callPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              displayTime_ = input.readInt32();
              break;
            }
            case 50: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_CallBankerResponse_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_CallBankerResponse_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF.class, protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResponse_GF> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResponse_GF>() {
      public CallBankerResponse_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResponse_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResponse_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_action = 1;
    public static final int OPREATE_ACTION_FIELD_NUMBER = 1;
    private int opreateAction_;
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不叫 1：叫
     * </pre>
     */
    public boolean hasOpreateAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不叫 1：叫
     * </pre>
     */
    public int getOpreateAction() {
      return opreateAction_;
    }

    // optional int32 call_player = 2;
    public static final int CALL_PLAYER_FIELD_NUMBER = 2;
    private int callPlayer_;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    public boolean hasCallPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    public int getCallPlayer() {
      return callPlayer_;
    }

    // optional int32 current_player = 3;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 3;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 banker_player = 4;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 4;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 display_time = 5;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 5;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional .RoomInfo room_info = 6;
    public static final int ROOM_INFO_FIELD_NUMBER = 6;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    private void initFields() {
      opreateAction_ = 0;
      callPlayer_ = 0;
      currentPlayer_ = 0;
      bankerPlayer_ = 0;
      displayTime_ = 0;
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateAction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, displayTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, roomInfo_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateAction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, displayTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, roomInfo_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.CallBankerResponse_GF}
     *
     * <pre>
     *叫庄结果
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_CallBankerResponse_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_CallBankerResponse_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF.class, protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateAction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        callPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_CallBankerResponse_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF result = new protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateAction_ = opreateAction_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.callPlayer_ = callPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF.getDefaultInstance()) return this;
        if (other.hasOpreateAction()) {
          setOpreateAction(other.getOpreateAction());
        }
        if (other.hasCallPlayer()) {
          setCallPlayer(other.getCallPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.CallBankerResponse_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_action = 1;
      private int opreateAction_ ;
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不叫 1：叫
       * </pre>
       */
      public boolean hasOpreateAction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不叫 1：叫
       * </pre>
       */
      public int getOpreateAction() {
        return opreateAction_;
      }
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不叫 1：叫
       * </pre>
       */
      public Builder setOpreateAction(int value) {
        bitField0_ |= 0x00000001;
        opreateAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不叫 1：叫
       * </pre>
       */
      public Builder clearOpreateAction() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateAction_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_player = 2;
      private int callPlayer_ ;
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public boolean hasCallPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public int getCallPlayer() {
        return callPlayer_;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public Builder setCallPlayer(int value) {
        bitField0_ |= 0x00000002;
        callPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public Builder clearCallPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        callPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 3;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000004;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 4;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000008;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 5;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000010;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional .RoomInfo room_info = 6;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.CallBankerResponse_GF)
    }

    static {
      defaultInstance = new CallBankerResponse_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.CallBankerResponse_GF)
  }

  public interface TouXiang_Result_Wsk_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_seat_index = 1;
    /**
     * <code>optional int32 opreate_seat_index = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    boolean hasOpreateSeatIndex();
    /**
     * <code>optional int32 opreate_seat_index = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    int getOpreateSeatIndex();

    // repeated int32 is_agree_touxiang = 2;
    /**
     * <code>repeated int32 is_agree_touxiang = 2;</code>
     *
     * <pre>
     *是否接受投降 0为处理 ，-1拒绝 1：同意
     * </pre>
     */
    java.util.List<java.lang.Integer> getIsAgreeTouxiangList();
    /**
     * <code>repeated int32 is_agree_touxiang = 2;</code>
     *
     * <pre>
     *是否接受投降 0为处理 ，-1拒绝 1：同意
     * </pre>
     */
    int getIsAgreeTouxiangCount();
    /**
     * <code>repeated int32 is_agree_touxiang = 2;</code>
     *
     * <pre>
     *是否接受投降 0为处理 ，-1拒绝 1：同意
     * </pre>
     */
    int getIsAgreeTouxiang(int index);

    // optional int32 request_tou_xiang = 3;
    /**
     * <code>optional int32 request_tou_xiang = 3;</code>
     *
     * <pre>
     *请求投降玩家
     * </pre>
     */
    boolean hasRequestTouXiang();
    /**
     * <code>optional int32 request_tou_xiang = 3;</code>
     *
     * <pre>
     *请求投降玩家
     * </pre>
     */
    int getRequestTouXiang();

    // optional string opreate_str = 4;
    /**
     * <code>optional string opreate_str = 4;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    boolean hasOpreateStr();
    /**
     * <code>optional string opreate_str = 4;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    java.lang.String getOpreateStr();
    /**
     * <code>optional string opreate_str = 4;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    com.google.protobuf.ByteString
        getOpreateStrBytes();

    // optional int32 is_ok_cancel = 5;
    /**
     * <code>optional int32 is_ok_cancel = 5;</code>
     *
     * <pre>
     *是否确定取消按钮 0：不需要 1：需要
     * </pre>
     */
    boolean hasIsOkCancel();
    /**
     * <code>optional int32 is_ok_cancel = 5;</code>
     *
     * <pre>
     *是否确定取消按钮 0：不需要 1：需要
     * </pre>
     */
    int getIsOkCancel();
  }
  /**
   * Protobuf type {@code gfWsk.TouXiang_Result_Wsk_GF}
   */
  public static final class TouXiang_Result_Wsk_GF extends
      com.google.protobuf.GeneratedMessage
      implements TouXiang_Result_Wsk_GFOrBuilder {
    // Use TouXiang_Result_Wsk_GF.newBuilder() to construct.
    private TouXiang_Result_Wsk_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TouXiang_Result_Wsk_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TouXiang_Result_Wsk_GF defaultInstance;
    public static TouXiang_Result_Wsk_GF getDefaultInstance() {
      return defaultInstance;
    }

    public TouXiang_Result_Wsk_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TouXiang_Result_Wsk_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateSeatIndex_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                isAgreeTouxiang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              isAgreeTouxiang_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                isAgreeTouxiang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                isAgreeTouxiang_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              requestTouXiang_ = input.readInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000004;
              opreateStr_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              isOkCancel_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          isAgreeTouxiang_ = java.util.Collections.unmodifiableList(isAgreeTouxiang_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TouXiang_Result_Wsk_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TouXiang_Result_Wsk_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<TouXiang_Result_Wsk_GF> PARSER =
        new com.google.protobuf.AbstractParser<TouXiang_Result_Wsk_GF>() {
      public TouXiang_Result_Wsk_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TouXiang_Result_Wsk_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TouXiang_Result_Wsk_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_seat_index = 1;
    public static final int OPREATE_SEAT_INDEX_FIELD_NUMBER = 1;
    private int opreateSeatIndex_;
    /**
     * <code>optional int32 opreate_seat_index = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public boolean hasOpreateSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_seat_index = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public int getOpreateSeatIndex() {
      return opreateSeatIndex_;
    }

    // repeated int32 is_agree_touxiang = 2;
    public static final int IS_AGREE_TOUXIANG_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> isAgreeTouxiang_;
    /**
     * <code>repeated int32 is_agree_touxiang = 2;</code>
     *
     * <pre>
     *是否接受投降 0为处理 ，-1拒绝 1：同意
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getIsAgreeTouxiangList() {
      return isAgreeTouxiang_;
    }
    /**
     * <code>repeated int32 is_agree_touxiang = 2;</code>
     *
     * <pre>
     *是否接受投降 0为处理 ，-1拒绝 1：同意
     * </pre>
     */
    public int getIsAgreeTouxiangCount() {
      return isAgreeTouxiang_.size();
    }
    /**
     * <code>repeated int32 is_agree_touxiang = 2;</code>
     *
     * <pre>
     *是否接受投降 0为处理 ，-1拒绝 1：同意
     * </pre>
     */
    public int getIsAgreeTouxiang(int index) {
      return isAgreeTouxiang_.get(index);
    }

    // optional int32 request_tou_xiang = 3;
    public static final int REQUEST_TOU_XIANG_FIELD_NUMBER = 3;
    private int requestTouXiang_;
    /**
     * <code>optional int32 request_tou_xiang = 3;</code>
     *
     * <pre>
     *请求投降玩家
     * </pre>
     */
    public boolean hasRequestTouXiang() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 request_tou_xiang = 3;</code>
     *
     * <pre>
     *请求投降玩家
     * </pre>
     */
    public int getRequestTouXiang() {
      return requestTouXiang_;
    }

    // optional string opreate_str = 4;
    public static final int OPREATE_STR_FIELD_NUMBER = 4;
    private java.lang.Object opreateStr_;
    /**
     * <code>optional string opreate_str = 4;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    public boolean hasOpreateStr() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string opreate_str = 4;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    public java.lang.String getOpreateStr() {
      java.lang.Object ref = opreateStr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          opreateStr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string opreate_str = 4;</code>
     *
     * <pre>
     *消息
     * </pre>
     */
    public com.google.protobuf.ByteString
        getOpreateStrBytes() {
      java.lang.Object ref = opreateStr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        opreateStr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 is_ok_cancel = 5;
    public static final int IS_OK_CANCEL_FIELD_NUMBER = 5;
    private int isOkCancel_;
    /**
     * <code>optional int32 is_ok_cancel = 5;</code>
     *
     * <pre>
     *是否确定取消按钮 0：不需要 1：需要
     * </pre>
     */
    public boolean hasIsOkCancel() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 is_ok_cancel = 5;</code>
     *
     * <pre>
     *是否确定取消按钮 0：不需要 1：需要
     * </pre>
     */
    public int getIsOkCancel() {
      return isOkCancel_;
    }

    private void initFields() {
      opreateSeatIndex_ = 0;
      isAgreeTouxiang_ = java.util.Collections.emptyList();
      requestTouXiang_ = 0;
      opreateStr_ = "";
      isOkCancel_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateSeatIndex_);
      }
      for (int i = 0; i < isAgreeTouxiang_.size(); i++) {
        output.writeInt32(2, isAgreeTouxiang_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, requestTouXiang_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(4, getOpreateStrBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, isOkCancel_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateSeatIndex_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < isAgreeTouxiang_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(isAgreeTouxiang_.get(i));
        }
        size += dataSize;
        size += 1 * getIsAgreeTouxiangList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, requestTouXiang_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getOpreateStrBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, isOkCancel_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.TouXiang_Result_Wsk_GF}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TouXiang_Result_Wsk_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TouXiang_Result_Wsk_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateSeatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        isAgreeTouxiang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        requestTouXiang_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        opreateStr_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        isOkCancel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_TouXiang_Result_Wsk_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF result = new protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateSeatIndex_ = opreateSeatIndex_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          isAgreeTouxiang_ = java.util.Collections.unmodifiableList(isAgreeTouxiang_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.isAgreeTouxiang_ = isAgreeTouxiang_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.requestTouXiang_ = requestTouXiang_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.opreateStr_ = opreateStr_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.isOkCancel_ = isOkCancel_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF.getDefaultInstance()) return this;
        if (other.hasOpreateSeatIndex()) {
          setOpreateSeatIndex(other.getOpreateSeatIndex());
        }
        if (!other.isAgreeTouxiang_.isEmpty()) {
          if (isAgreeTouxiang_.isEmpty()) {
            isAgreeTouxiang_ = other.isAgreeTouxiang_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureIsAgreeTouxiangIsMutable();
            isAgreeTouxiang_.addAll(other.isAgreeTouxiang_);
          }
          onChanged();
        }
        if (other.hasRequestTouXiang()) {
          setRequestTouXiang(other.getRequestTouXiang());
        }
        if (other.hasOpreateStr()) {
          bitField0_ |= 0x00000008;
          opreateStr_ = other.opreateStr_;
          onChanged();
        }
        if (other.hasIsOkCancel()) {
          setIsOkCancel(other.getIsOkCancel());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.TouXiang_Result_Wsk_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_seat_index = 1;
      private int opreateSeatIndex_ ;
      /**
       * <code>optional int32 opreate_seat_index = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public boolean hasOpreateSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_seat_index = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public int getOpreateSeatIndex() {
        return opreateSeatIndex_;
      }
      /**
       * <code>optional int32 opreate_seat_index = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder setOpreateSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        opreateSeatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_seat_index = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder clearOpreateSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateSeatIndex_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 is_agree_touxiang = 2;
      private java.util.List<java.lang.Integer> isAgreeTouxiang_ = java.util.Collections.emptyList();
      private void ensureIsAgreeTouxiangIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          isAgreeTouxiang_ = new java.util.ArrayList<java.lang.Integer>(isAgreeTouxiang_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 is_agree_touxiang = 2;</code>
       *
       * <pre>
       *是否接受投降 0为处理 ，-1拒绝 1：同意
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getIsAgreeTouxiangList() {
        return java.util.Collections.unmodifiableList(isAgreeTouxiang_);
      }
      /**
       * <code>repeated int32 is_agree_touxiang = 2;</code>
       *
       * <pre>
       *是否接受投降 0为处理 ，-1拒绝 1：同意
       * </pre>
       */
      public int getIsAgreeTouxiangCount() {
        return isAgreeTouxiang_.size();
      }
      /**
       * <code>repeated int32 is_agree_touxiang = 2;</code>
       *
       * <pre>
       *是否接受投降 0为处理 ，-1拒绝 1：同意
       * </pre>
       */
      public int getIsAgreeTouxiang(int index) {
        return isAgreeTouxiang_.get(index);
      }
      /**
       * <code>repeated int32 is_agree_touxiang = 2;</code>
       *
       * <pre>
       *是否接受投降 0为处理 ，-1拒绝 1：同意
       * </pre>
       */
      public Builder setIsAgreeTouxiang(
          int index, int value) {
        ensureIsAgreeTouxiangIsMutable();
        isAgreeTouxiang_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_agree_touxiang = 2;</code>
       *
       * <pre>
       *是否接受投降 0为处理 ，-1拒绝 1：同意
       * </pre>
       */
      public Builder addIsAgreeTouxiang(int value) {
        ensureIsAgreeTouxiangIsMutable();
        isAgreeTouxiang_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_agree_touxiang = 2;</code>
       *
       * <pre>
       *是否接受投降 0为处理 ，-1拒绝 1：同意
       * </pre>
       */
      public Builder addAllIsAgreeTouxiang(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIsAgreeTouxiangIsMutable();
        super.addAll(values, isAgreeTouxiang_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_agree_touxiang = 2;</code>
       *
       * <pre>
       *是否接受投降 0为处理 ，-1拒绝 1：同意
       * </pre>
       */
      public Builder clearIsAgreeTouxiang() {
        isAgreeTouxiang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 request_tou_xiang = 3;
      private int requestTouXiang_ ;
      /**
       * <code>optional int32 request_tou_xiang = 3;</code>
       *
       * <pre>
       *请求投降玩家
       * </pre>
       */
      public boolean hasRequestTouXiang() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 request_tou_xiang = 3;</code>
       *
       * <pre>
       *请求投降玩家
       * </pre>
       */
      public int getRequestTouXiang() {
        return requestTouXiang_;
      }
      /**
       * <code>optional int32 request_tou_xiang = 3;</code>
       *
       * <pre>
       *请求投降玩家
       * </pre>
       */
      public Builder setRequestTouXiang(int value) {
        bitField0_ |= 0x00000004;
        requestTouXiang_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 request_tou_xiang = 3;</code>
       *
       * <pre>
       *请求投降玩家
       * </pre>
       */
      public Builder clearRequestTouXiang() {
        bitField0_ = (bitField0_ & ~0x00000004);
        requestTouXiang_ = 0;
        onChanged();
        return this;
      }

      // optional string opreate_str = 4;
      private java.lang.Object opreateStr_ = "";
      /**
       * <code>optional string opreate_str = 4;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public boolean hasOpreateStr() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string opreate_str = 4;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public java.lang.String getOpreateStr() {
        java.lang.Object ref = opreateStr_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          opreateStr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string opreate_str = 4;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public com.google.protobuf.ByteString
          getOpreateStrBytes() {
        java.lang.Object ref = opreateStr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          opreateStr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string opreate_str = 4;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public Builder setOpreateStr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        opreateStr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string opreate_str = 4;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public Builder clearOpreateStr() {
        bitField0_ = (bitField0_ & ~0x00000008);
        opreateStr_ = getDefaultInstance().getOpreateStr();
        onChanged();
        return this;
      }
      /**
       * <code>optional string opreate_str = 4;</code>
       *
       * <pre>
       *消息
       * </pre>
       */
      public Builder setOpreateStrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        opreateStr_ = value;
        onChanged();
        return this;
      }

      // optional int32 is_ok_cancel = 5;
      private int isOkCancel_ ;
      /**
       * <code>optional int32 is_ok_cancel = 5;</code>
       *
       * <pre>
       *是否确定取消按钮 0：不需要 1：需要
       * </pre>
       */
      public boolean hasIsOkCancel() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 is_ok_cancel = 5;</code>
       *
       * <pre>
       *是否确定取消按钮 0：不需要 1：需要
       * </pre>
       */
      public int getIsOkCancel() {
        return isOkCancel_;
      }
      /**
       * <code>optional int32 is_ok_cancel = 5;</code>
       *
       * <pre>
       *是否确定取消按钮 0：不需要 1：需要
       * </pre>
       */
      public Builder setIsOkCancel(int value) {
        bitField0_ |= 0x00000010;
        isOkCancel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_ok_cancel = 5;</code>
       *
       * <pre>
       *是否确定取消按钮 0：不需要 1：需要
       * </pre>
       */
      public Builder clearIsOkCancel() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isOkCancel_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.TouXiang_Result_Wsk_GF)
    }

    static {
      defaultInstance = new TouXiang_Result_Wsk_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.TouXiang_Result_Wsk_GF)
  }

  public interface RefreshCardDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 hand_card_count = 1;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code gfWsk.RefreshCardData}
   */
  public static final class RefreshCardData extends
      com.google.protobuf.GeneratedMessage
      implements RefreshCardDataOrBuilder {
    // Use RefreshCardData.newBuilder() to construct.
    private RefreshCardData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshCardData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshCardData defaultInstance;
    public static RefreshCardData getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshCardData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshCardData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_RefreshCardData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_RefreshCardData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData.class, protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshCardData> PARSER =
        new com.google.protobuf.AbstractParser<RefreshCardData>() {
      public RefreshCardData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshCardData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshCardData> getParserForType() {
      return PARSER;
    }

    // repeated int32 hand_card_count = 1;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    private void initFields() {
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(1, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(2, handCardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, handCardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.RefreshCardData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.RefreshCardDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_RefreshCardData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_RefreshCardData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData.class, protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_RefreshCardData_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData build() {
        protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData result = new protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData.getDefaultInstance()) return this;
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.RefreshCardData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 hand_card_count = 1;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.RefreshCardData)
    }

    static {
      defaultInstance = new RefreshCardData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.RefreshCardData)
  }

  public interface Opreate_RequestWsk_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_type = 1;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:请求投降 2：同意投降 3：拒绝投降 4：亮牌 5:叫庄 6不叫 7:不投降 8:理牌排序 9:数量排序
     * </pre>
     */
    boolean hasOpreateType();
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:请求投降 2：同意投降 3：拒绝投降 4：亮牌 5:叫庄 6不叫 7:不投降 8:理牌排序 9:数量排序
     * </pre>
     */
    int getOpreateType();

    // optional int32 card_data = 2;
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *亮牌牌值
     * </pre>
     */
    boolean hasCardData();
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *亮牌牌值
     * </pre>
     */
    int getCardData();

    // repeated int32 sort_card = 3;
    /**
     * <code>repeated int32 sort_card = 3;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    java.util.List<java.lang.Integer> getSortCardList();
    /**
     * <code>repeated int32 sort_card = 3;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    int getSortCardCount();
    /**
     * <code>repeated int32 sort_card = 3;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    int getSortCard(int index);
  }
  /**
   * Protobuf type {@code gfWsk.Opreate_RequestWsk_GF}
   *
   * <pre>
   *请求
   * </pre>
   */
  public static final class Opreate_RequestWsk_GF extends
      com.google.protobuf.GeneratedMessage
      implements Opreate_RequestWsk_GFOrBuilder {
    // Use Opreate_RequestWsk_GF.newBuilder() to construct.
    private Opreate_RequestWsk_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Opreate_RequestWsk_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Opreate_RequestWsk_GF defaultInstance;
    public static Opreate_RequestWsk_GF getDefaultInstance() {
      return defaultInstance;
    }

    public Opreate_RequestWsk_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Opreate_RequestWsk_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cardData_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                sortCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              sortCard_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                sortCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                sortCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          sortCard_ = java.util.Collections.unmodifiableList(sortCard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_Opreate_RequestWsk_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_Opreate_RequestWsk_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<Opreate_RequestWsk_GF> PARSER =
        new com.google.protobuf.AbstractParser<Opreate_RequestWsk_GF>() {
      public Opreate_RequestWsk_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Opreate_RequestWsk_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Opreate_RequestWsk_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_type = 1;
    public static final int OPREATE_TYPE_FIELD_NUMBER = 1;
    private int opreateType_;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:请求投降 2：同意投降 3：拒绝投降 4：亮牌 5:叫庄 6不叫 7:不投降 8:理牌排序 9:数量排序
     * </pre>
     */
    public boolean hasOpreateType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:请求投降 2：同意投降 3：拒绝投降 4：亮牌 5:叫庄 6不叫 7:不投降 8:理牌排序 9:数量排序
     * </pre>
     */
    public int getOpreateType() {
      return opreateType_;
    }

    // optional int32 card_data = 2;
    public static final int CARD_DATA_FIELD_NUMBER = 2;
    private int cardData_;
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *亮牌牌值
     * </pre>
     */
    public boolean hasCardData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *亮牌牌值
     * </pre>
     */
    public int getCardData() {
      return cardData_;
    }

    // repeated int32 sort_card = 3;
    public static final int SORT_CARD_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> sortCard_;
    /**
     * <code>repeated int32 sort_card = 3;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSortCardList() {
      return sortCard_;
    }
    /**
     * <code>repeated int32 sort_card = 3;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    public int getSortCardCount() {
      return sortCard_.size();
    }
    /**
     * <code>repeated int32 sort_card = 3;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    public int getSortCard(int index) {
      return sortCard_.get(index);
    }

    private void initFields() {
      opreateType_ = 0;
      cardData_ = 0;
      sortCard_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, cardData_);
      }
      for (int i = 0; i < sortCard_.size(); i++) {
        output.writeInt32(3, sortCard_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardData_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sortCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(sortCard_.get(i));
        }
        size += dataSize;
        size += 1 * getSortCardList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.Opreate_RequestWsk_GF}
     *
     * <pre>
     *请求
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_Opreate_RequestWsk_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_Opreate_RequestWsk_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF.class, protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        sortCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_Opreate_RequestWsk_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF result = new protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateType_ = opreateType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardData_ = cardData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          sortCard_ = java.util.Collections.unmodifiableList(sortCard_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.sortCard_ = sortCard_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF.getDefaultInstance()) return this;
        if (other.hasOpreateType()) {
          setOpreateType(other.getOpreateType());
        }
        if (other.hasCardData()) {
          setCardData(other.getCardData());
        }
        if (!other.sortCard_.isEmpty()) {
          if (sortCard_.isEmpty()) {
            sortCard_ = other.sortCard_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureSortCardIsMutable();
            sortCard_.addAll(other.sortCard_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.Opreate_RequestWsk_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_type = 1;
      private int opreateType_ ;
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:请求投降 2：同意投降 3：拒绝投降 4：亮牌 5:叫庄 6不叫 7:不投降 8:理牌排序 9:数量排序
       * </pre>
       */
      public boolean hasOpreateType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:请求投降 2：同意投降 3：拒绝投降 4：亮牌 5:叫庄 6不叫 7:不投降 8:理牌排序 9:数量排序
       * </pre>
       */
      public int getOpreateType() {
        return opreateType_;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:请求投降 2：同意投降 3：拒绝投降 4：亮牌 5:叫庄 6不叫 7:不投降 8:理牌排序 9:数量排序
       * </pre>
       */
      public Builder setOpreateType(int value) {
        bitField0_ |= 0x00000001;
        opreateType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:请求投降 2：同意投降 3：拒绝投降 4：亮牌 5:叫庄 6不叫 7:不投降 8:理牌排序 9:数量排序
       * </pre>
       */
      public Builder clearOpreateType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_data = 2;
      private int cardData_ ;
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *亮牌牌值
       * </pre>
       */
      public boolean hasCardData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *亮牌牌值
       * </pre>
       */
      public int getCardData() {
        return cardData_;
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *亮牌牌值
       * </pre>
       */
      public Builder setCardData(int value) {
        bitField0_ |= 0x00000002;
        cardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *亮牌牌值
       * </pre>
       */
      public Builder clearCardData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardData_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 sort_card = 3;
      private java.util.List<java.lang.Integer> sortCard_ = java.util.Collections.emptyList();
      private void ensureSortCardIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          sortCard_ = new java.util.ArrayList<java.lang.Integer>(sortCard_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 sort_card = 3;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSortCardList() {
        return java.util.Collections.unmodifiableList(sortCard_);
      }
      /**
       * <code>repeated int32 sort_card = 3;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public int getSortCardCount() {
        return sortCard_.size();
      }
      /**
       * <code>repeated int32 sort_card = 3;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public int getSortCard(int index) {
        return sortCard_.get(index);
      }
      /**
       * <code>repeated int32 sort_card = 3;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public Builder setSortCard(
          int index, int value) {
        ensureSortCardIsMutable();
        sortCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sort_card = 3;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public Builder addSortCard(int value) {
        ensureSortCardIsMutable();
        sortCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sort_card = 3;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public Builder addAllSortCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSortCardIsMutable();
        super.addAll(values, sortCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sort_card = 3;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public Builder clearSortCard() {
        sortCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.Opreate_RequestWsk_GF)
    }

    static {
      defaultInstance = new Opreate_RequestWsk_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.Opreate_RequestWsk_GF)
  }

  public interface Refresh_Pai_GFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 seat_index = 1;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *队友位置
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *队友位置
     * </pre>
     */
    int getSeatIndex();

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 card_count = 3;
    /**
     * <code>optional int32 card_count = 3;</code>
     *
     * <pre>
     *牌的数量
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 3;</code>
     *
     * <pre>
     *牌的数量
     * </pre>
     */
    int getCardCount();
  }
  /**
   * Protobuf type {@code gfWsk.Refresh_Pai_GF}
   *
   * <pre>
   *刷新队友牌值
   * </pre>
   */
  public static final class Refresh_Pai_GF extends
      com.google.protobuf.GeneratedMessage
      implements Refresh_Pai_GFOrBuilder {
    // Use Refresh_Pai_GF.newBuilder() to construct.
    private Refresh_Pai_GF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Refresh_Pai_GF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Refresh_Pai_GF defaultInstance;
    public static Refresh_Pai_GF getDefaultInstance() {
      return defaultInstance;
    }

    public Refresh_Pai_GF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Refresh_Pai_GF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seatIndex_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              cardCount_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_Refresh_Pai_GF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_Refresh_Pai_GF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF.class, protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF.Builder.class);
    }

    public static com.google.protobuf.Parser<Refresh_Pai_GF> PARSER =
        new com.google.protobuf.AbstractParser<Refresh_Pai_GF>() {
      public Refresh_Pai_GF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Refresh_Pai_GF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Refresh_Pai_GF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 seat_index = 1;
    public static final int SEAT_INDEX_FIELD_NUMBER = 1;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *队友位置
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *队友位置
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 card_count = 3;
    public static final int CARD_COUNT_FIELD_NUMBER = 3;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 3;</code>
     *
     * <pre>
     *牌的数量
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card_count = 3;</code>
     *
     * <pre>
     *牌的数量
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    private void initFields() {
      seatIndex_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardCount_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, seatIndex_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, cardCount_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, seatIndex_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cardCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gfWsk.Refresh_Pai_GF}
     *
     * <pre>
     *刷新队友牌值
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_Refresh_Pai_GF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_Refresh_Pai_GF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF.class, protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF.Builder.class);
      }

      // Construct using protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.internal_static_gfWsk_Refresh_Pai_GF_descriptor;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF getDefaultInstanceForType() {
        return protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF.getDefaultInstance();
      }

      public protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF build() {
        protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF buildPartial() {
        protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF result = new protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seatIndex_ = seatIndex_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardCount_ = cardCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF) {
          return mergeFrom((protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF other) {
        if (other == protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF.getDefaultInstance()) return this;
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gfWsk.gfWskRsp.Refresh_Pai_GF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 seat_index = 1;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *队友位置
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *队友位置
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *队友位置
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *队友位置
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 card_count = 3;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 3;</code>
       *
       * <pre>
       *牌的数量
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 card_count = 3;</code>
       *
       * <pre>
       *牌的数量
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 3;</code>
       *
       * <pre>
       *牌的数量
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000004;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 3;</code>
       *
       * <pre>
       *牌的数量
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gfWsk.Refresh_Pai_GF)
    }

    static {
      defaultInstance = new Refresh_Pai_GF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gfWsk.Refresh_Pai_GF)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_RefreshScore_Wsk_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_RefreshScore_Wsk_GF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_LiangPai_Result_Wsk_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_LiangPai_Result_Wsk_GF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_OutCardDataWsk_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_OutCardDataWsk_GF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_PaiFenData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_PaiFenData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_UserCardData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_UserCardData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_PukeGameEndWsk_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_PukeGameEndWsk_GF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_TableResponse_Wsk_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_TableResponse_Wsk_GF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_GameStart_Wsk_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_GameStart_Wsk_GF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_TouXiang_Anser_Wsk_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_TouXiang_Anser_Wsk_GF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_CallBankerResponse_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_CallBankerResponse_GF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_TouXiang_Result_Wsk_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_TouXiang_Result_Wsk_GF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_RefreshCardData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_RefreshCardData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_Opreate_RequestWsk_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_Opreate_RequestWsk_GF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gfWsk_Refresh_Pai_GF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gfWsk_Refresh_Pai_GF_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024wsk/gfwskProto.proto\022\005gfWsk\032\024basic/pro" +
      "tocol.proto\"[\n\023RefreshScore_Wsk_GF\022\026\n\016us" +
      "er_get_score\030\001 \003(\005\022\023\n\013table_score\030\002 \001(\005\022" +
      "\027\n\017xian_qian_score\030\003 \003(\005\"W\n\026LiangPai_Res" +
      "ult_Wsk_GF\022\026\n\016opreate_player\030\001 \001(\005\022\021\n\tca" +
      "rd_data\030\002 \001(\005\022\022\n\nseat_index\030\003 \003(\005\"\244\004\n\021Ou" +
      "tCardDataWsk_GF\022\027\n\017out_card_player\030\001 \001(\005" +
      "\022\022\n\ncards_data\030\002 \003(\005\022\023\n\013cards_count\030\003 \001(" +
      "\005\022\021\n\tcard_type\030\004 \001(\005\022\022\n\ncur_player\030\005 \001(\005" +
      "\022\025\n\rpr_cards_data\030\006 \003(\005\022\026\n\016pr_cards_coun",
      "t\030\007 \001(\005\022\030\n\020pr_out_card_type\030\010 \001(\005\022\024\n\014is_" +
      "first_out\030\t \001(\010\022\024\n\014display_time\030\n \001(\005\022.\n" +
      "\021user_can_out_data\030\013 \003(\0132\023.Int32ArrayRes" +
      "ponse\022\032\n\022user_can_out_count\030\014 \003(\005\022\026\n\016use" +
      "r_get_score\030\r \003(\005\022\027\n\017hand_card_count\030\016 \003" +
      "(\005\022,\n\017hand_cards_data\030\017 \003(\0132\023.Int32Array" +
      "Response\022\021\n\twin_order\030\020 \003(\005\022\034\n\024is_curren" +
      "t_first_out\030\021 \001(\005\022\030\n\020is_have_not_card\030\022 " +
      "\001(\005\022\023\n\013is_bao_jing\030\023 \001(\005\022\023\n\013friend_seat\030" +
      "\024 \003(\005\022\021\n\tliang_pai\030\025 \001(\005\"\\\n\nPaiFenData\022\'",
      "\n\ncards_data\030\001 \003(\0132\023.Int32ArrayResponse\022" +
      "\023\n\013cards_count\030\002 \003(\005\022\020\n\010yu_score\030\003 \001(\005\"7" +
      "\n\014UserCardData\022\'\n\ncards_data\030\005 \003(\0132\023.Int" +
      "32ArrayResponse\"\221\006\n\021PukeGameEndWsk_GF\022\034\n" +
      "\troom_info\030\001 \001(\0132\t.RoomInfo\022\021\n\tcur_round" +
      "\030\002 \001(\005\022\022\n\ngame_round\030\003 \001(\005\022\022\n\ncard_count" +
      "\030\004 \003(\005\022\'\n\ncards_data\030\005 \003(\0132\023.gfWsk.UserC" +
      "ardData\022\025\n\rboom_card_num\030\006 \003(\005\022\021\n\tend_sc" +
      "ore\030\007 \003(\005\022\024\n\014reward_score\030\010 \003(\005\022\022\n\nplaye" +
      "r_num\030\n \001(\005\022\025\n\rbanker_player\030\013 \001(\005\022\016\n\006re",
      "ason\030\014 \001(\005\022\025\n\rdang_ju_score\030\022 \003(\005\022\020\n\010zhu" +
      "a_fen\030\023 \003(\005\022\021\n\twin_order\030\024 \003(\005\022\024\n\014jia_fa" +
      "_socre\030\025 \003(\005\022\020\n\010shao_fen\030\034 \003(\005\022\017\n\007mian_d" +
      "a\030\036 \001(\005\022.\n\021fa_wang_card_data\030\037 \003(\0132\023.Int" +
      "32ArrayResponse\022,\n\017card_data_score\030  \003(\013" +
      "2\023.Int32ArrayResponse\022\025\n\rall_end_score\030\r" +
      " \003(\005\022\025\n\rend_score_max\030\016 \003(\005\022\017\n\007win_num\030\017" +
      " \003(\005\022\020\n\010lose_num\030\020 \003(\005\022$\n\007players\030\021 \003(\0132" +
      "\023.RoomPlayerResponse\022\030\n\020all_reward_score" +
      "\030\026 \003(\005\022\024\n\014all_zhua_fen\030\027 \003(\005\022\030\n\020end_zhua",
      "_fen_max\030\030 \003(\005\022\023\n\013all_tou_you\030\031 \003(\005\022\023\n\013a" +
      "ll_win_num\030\032 \003(\005\022\024\n\014all_fail_num\030\033 \003(\005\022+" +
      "\n\016hand_card_data\030\035 \003(\0132\023.Int32ArrayRespo" +
      "nse\"\274\005\n\024TableResponse_Wsk_GF\022\025\n\rbanker_p" +
      "layer\030\001 \001(\005\022\026\n\016current_player\030\002 \001(\005\022\023\n\013p" +
      "rev_player\030\003 \001(\005\022\017\n\007trustee\030\004 \003(\010\022+\n\016out" +
      "_cards_data\030\005 \003(\0132\023.Int32ArrayResponse\022\027" +
      "\n\017out_cards_count\030\006 \003(\005\022\023\n\013player_pass\030\007" +
      " \003(\005\022\021\n\tcard_type\030\010 \003(\005\022\032\n\022pr_out_card_p" +
      "layer\030\t \001(\005\022\025\n\rpr_cards_data\030\n \003(\005\022\026\n\016pr",
      "_cards_count\030\013 \001(\005\022\030\n\020pr_out_card_type\030\014" +
      " \001(\005\022\024\n\014is_first_out\030\r \001(\005\022\024\n\014display_ti" +
      "me\030\016 \001(\005\022\022\n\ncard_count\030\017 \003(\005\022\'\n\ncards_da" +
      "ta\030\020 \003(\0132\023.Int32ArrayResponse\022\034\n\troom_in" +
      "fo\030\021 \001(\0132\t.RoomInfo\022$\n\007players\030\022 \003(\0132\023.R" +
      "oomPlayerResponse\022\031\n\021user_can_out_data\030\023" +
      " \003(\005\022\032\n\022user_can_out_count\030\024 \001(\005\022\026\n\016user" +
      "_get_score\030\025 \003(\005\022\021\n\twin_order\030\026 \003(\005\022\024\n\014i" +
      "s_yi_da_san\030\027 \001(\010\022\030\n\020tou_xiang_status\030\030 " +
      "\003(\005\022%\n\010fei_wang\030\031 \003(\0132\023.Int32ArrayRespon",
      "se\022\026\n\016jiao_card_data\030\032 \003(\005\"\344\001\n\020GameStart" +
      "_Wsk_GF\022\034\n\troom_info\030\005 \001(\0132\t.RoomInfo\022$\n" +
      "\007players\030\007 \003(\0132\023.RoomPlayerResponse\022\022\n\nc" +
      "ur_banker\030\001 \001(\005\022\022\n\ncard_count\030\002 \003(\005\022\'\n\nc" +
      "ards_data\030\003 \003(\0132\023.Int32ArrayResponse\022\024\n\014" +
      "display_time\030\004 \001(\005\022%\n\010fei_wang\030\010 \003(\0132\023.I" +
      "nt32ArrayResponse\"^\n\025TouXiang_Anser_Wsk_" +
      "GF\022\032\n\022opreate_seat_index\030\001 \001(\005\022\023\n\013opreat" +
      "e_str\030\002 \001(\t\022\024\n\014is_tou_xiang\030\003 \001(\010\"\247\001\n\025Ca" +
      "llBankerResponse_GF\022\026\n\016opreate_action\030\001 ",
      "\001(\005\022\023\n\013call_player\030\002 \001(\005\022\026\n\016current_play" +
      "er\030\003 \001(\005\022\025\n\rbanker_player\030\004 \001(\005\022\024\n\014displ" +
      "ay_time\030\005 \001(\005\022\034\n\troom_info\030\006 \001(\0132\t.RoomI" +
      "nfo\"\225\001\n\026TouXiang_Result_Wsk_GF\022\032\n\022opreat" +
      "e_seat_index\030\001 \001(\005\022\031\n\021is_agree_touxiang\030" +
      "\002 \003(\005\022\031\n\021request_tou_xiang\030\003 \001(\005\022\023\n\013opre" +
      "ate_str\030\004 \001(\t\022\024\n\014is_ok_cancel\030\005 \001(\005\"X\n\017R" +
      "efreshCardData\022\027\n\017hand_card_count\030\001 \003(\005\022" +
      ",\n\017hand_cards_data\030\002 \003(\0132\023.Int32ArrayRes" +
      "ponse\"S\n\025Opreate_RequestWsk_GF\022\024\n\014opreat",
      "e_type\030\001 \001(\005\022\021\n\tcard_data\030\002 \001(\005\022\021\n\tsort_" +
      "card\030\003 \003(\005\"a\n\016Refresh_Pai_GF\022\022\n\nseat_ind" +
      "ex\030\001 \001(\005\022\'\n\ncards_data\030\002 \003(\0132\023.Int32Arra" +
      "yResponse\022\022\n\ncard_count\030\003 \001(\005B \n\024protobu" +
      "f.clazz.gfWskB\010gfWskRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_gfWsk_RefreshScore_Wsk_GF_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_gfWsk_RefreshScore_Wsk_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_RefreshScore_Wsk_GF_descriptor,
              new java.lang.String[] { "UserGetScore", "TableScore", "XianQianScore", });
          internal_static_gfWsk_LiangPai_Result_Wsk_GF_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_gfWsk_LiangPai_Result_Wsk_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_LiangPai_Result_Wsk_GF_descriptor,
              new java.lang.String[] { "OpreatePlayer", "CardData", "SeatIndex", });
          internal_static_gfWsk_OutCardDataWsk_GF_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_gfWsk_OutCardDataWsk_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_OutCardDataWsk_GF_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "UserCanOutData", "UserCanOutCount", "UserGetScore", "HandCardCount", "HandCardsData", "WinOrder", "IsCurrentFirstOut", "IsHaveNotCard", "IsBaoJing", "FriendSeat", "LiangPai", });
          internal_static_gfWsk_PaiFenData_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_gfWsk_PaiFenData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_PaiFenData_descriptor,
              new java.lang.String[] { "CardsData", "CardsCount", "YuScore", });
          internal_static_gfWsk_UserCardData_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_gfWsk_UserCardData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_UserCardData_descriptor,
              new java.lang.String[] { "CardsData", });
          internal_static_gfWsk_PukeGameEndWsk_GF_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_gfWsk_PukeGameEndWsk_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_PukeGameEndWsk_GF_descriptor,
              new java.lang.String[] { "RoomInfo", "CurRound", "GameRound", "CardCount", "CardsData", "BoomCardNum", "EndScore", "RewardScore", "PlayerNum", "BankerPlayer", "Reason", "DangJuScore", "ZhuaFen", "WinOrder", "JiaFaSocre", "ShaoFen", "MianDa", "FaWangCardData", "CardDataScore", "AllEndScore", "EndScoreMax", "WinNum", "LoseNum", "Players", "AllRewardScore", "AllZhuaFen", "EndZhuaFenMax", "AllTouYou", "AllWinNum", "AllFailNum", "HandCardData", });
          internal_static_gfWsk_TableResponse_Wsk_GF_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_gfWsk_TableResponse_Wsk_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_TableResponse_Wsk_GF_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "OutCardsCount", "PlayerPass", "CardType", "PrOutCardPlayer", "PrCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "UserCanOutData", "UserCanOutCount", "UserGetScore", "WinOrder", "IsYiDaSan", "TouXiangStatus", "FeiWang", "JiaoCardData", });
          internal_static_gfWsk_GameStart_Wsk_GF_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_gfWsk_GameStart_Wsk_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_GameStart_Wsk_GF_descriptor,
              new java.lang.String[] { "RoomInfo", "Players", "CurBanker", "CardCount", "CardsData", "DisplayTime", "FeiWang", });
          internal_static_gfWsk_TouXiang_Anser_Wsk_GF_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_gfWsk_TouXiang_Anser_Wsk_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_TouXiang_Anser_Wsk_GF_descriptor,
              new java.lang.String[] { "OpreateSeatIndex", "OpreateStr", "IsTouXiang", });
          internal_static_gfWsk_CallBankerResponse_GF_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_gfWsk_CallBankerResponse_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_CallBankerResponse_GF_descriptor,
              new java.lang.String[] { "OpreateAction", "CallPlayer", "CurrentPlayer", "BankerPlayer", "DisplayTime", "RoomInfo", });
          internal_static_gfWsk_TouXiang_Result_Wsk_GF_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_gfWsk_TouXiang_Result_Wsk_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_TouXiang_Result_Wsk_GF_descriptor,
              new java.lang.String[] { "OpreateSeatIndex", "IsAgreeTouxiang", "RequestTouXiang", "OpreateStr", "IsOkCancel", });
          internal_static_gfWsk_RefreshCardData_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_gfWsk_RefreshCardData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_RefreshCardData_descriptor,
              new java.lang.String[] { "HandCardCount", "HandCardsData", });
          internal_static_gfWsk_Opreate_RequestWsk_GF_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_gfWsk_Opreate_RequestWsk_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_Opreate_RequestWsk_GF_descriptor,
              new java.lang.String[] { "OpreateType", "CardData", "SortCard", });
          internal_static_gfWsk_Refresh_Pai_GF_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_gfWsk_Refresh_Pai_GF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gfWsk_Refresh_Pai_GF_descriptor,
              new java.lang.String[] { "SeatIndex", "CardsData", "CardCount", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
