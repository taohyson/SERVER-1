// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mj/wuzhi.proto

package protobuf.clazz.mj;

public final class Wuzhi {
  private Wuzhi() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface LsdyCardsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 cardsCount = 1;
    /**
     * <code>repeated int32 cardsCount = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌有几张 一维
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsCountList();
    /**
     * <code>repeated int32 cardsCount = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌有几张 一维
     * </pre>
     */
    int getCardsCountCount();
    /**
     * <code>repeated int32 cardsCount = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌有几张 一维
     * </pre>
     */
    int getCardsCount(int index);

    // repeated .mj.IntegerArray cardsData = 2;
    /**
     * <code>repeated .mj.IntegerArray cardsData = 2;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 二维
     * </pre>
     */
    java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> 
        getCardsDataList();
    /**
     * <code>repeated .mj.IntegerArray cardsData = 2;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.IntegerArray getCardsData(int index);
    /**
     * <code>repeated .mj.IntegerArray cardsData = 2;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 二维
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .mj.IntegerArray cardsData = 2;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 二维
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .mj.IntegerArray cardsData = 2;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated .mj.IntegerArray ziMoCards = 3;
    /**
     * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
     *
     * <pre>
     * 每个玩家自摸胡的牌数据 二维
     * </pre>
     */
    java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> 
        getZiMoCardsList();
    /**
     * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
     *
     * <pre>
     * 每个玩家自摸胡的牌数据 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.IntegerArray getZiMoCards(int index);
    /**
     * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
     *
     * <pre>
     * 每个玩家自摸胡的牌数据 二维
     * </pre>
     */
    int getZiMoCardsCount();
    /**
     * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
     *
     * <pre>
     * 每个玩家自摸胡的牌数据 二维
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
        getZiMoCardsOrBuilderList();
    /**
     * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
     *
     * <pre>
     * 每个玩家自摸胡的牌数据 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getZiMoCardsOrBuilder(
        int index);

    // repeated .mj.IntegerArray shangJiaProvidedCards = 4;
    /**
     * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
     *
     * <pre>
     * 每个玩家上家提供的牌数据 二维
     * </pre>
     */
    java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> 
        getShangJiaProvidedCardsList();
    /**
     * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
     *
     * <pre>
     * 每个玩家上家提供的牌数据 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.IntegerArray getShangJiaProvidedCards(int index);
    /**
     * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
     *
     * <pre>
     * 每个玩家上家提供的牌数据 二维
     * </pre>
     */
    int getShangJiaProvidedCardsCount();
    /**
     * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
     *
     * <pre>
     * 每个玩家上家提供的牌数据 二维
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
        getShangJiaProvidedCardsOrBuilderList();
    /**
     * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
     *
     * <pre>
     * 每个玩家上家提供的牌数据 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getShangJiaProvidedCardsOrBuilder(
        int index);

    // repeated .mj.IntegerArray duiJiaProvidedCards = 5;
    /**
     * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
     *
     * <pre>
     * 每个玩家对家提供的牌数据 二维
     * </pre>
     */
    java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> 
        getDuiJiaProvidedCardsList();
    /**
     * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
     *
     * <pre>
     * 每个玩家对家提供的牌数据 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.IntegerArray getDuiJiaProvidedCards(int index);
    /**
     * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
     *
     * <pre>
     * 每个玩家对家提供的牌数据 二维
     * </pre>
     */
    int getDuiJiaProvidedCardsCount();
    /**
     * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
     *
     * <pre>
     * 每个玩家对家提供的牌数据 二维
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
        getDuiJiaProvidedCardsOrBuilderList();
    /**
     * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
     *
     * <pre>
     * 每个玩家对家提供的牌数据 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getDuiJiaProvidedCardsOrBuilder(
        int index);

    // repeated .mj.IntegerArray xiaJiaProviedCards = 6;
    /**
     * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
     *
     * <pre>
     * 每个玩家下家提供的牌数据 二维
     * </pre>
     */
    java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> 
        getXiaJiaProviedCardsList();
    /**
     * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
     *
     * <pre>
     * 每个玩家下家提供的牌数据 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.IntegerArray getXiaJiaProviedCards(int index);
    /**
     * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
     *
     * <pre>
     * 每个玩家下家提供的牌数据 二维
     * </pre>
     */
    int getXiaJiaProviedCardsCount();
    /**
     * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
     *
     * <pre>
     * 每个玩家下家提供的牌数据 二维
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
        getXiaJiaProviedCardsOrBuilderList();
    /**
     * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
     *
     * <pre>
     * 每个玩家下家提供的牌数据 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getXiaJiaProviedCardsOrBuilder(
        int index);

    // repeated .mj.AllWinDetails winDetailList = 7;
    /**
     * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
     *
     * <pre>
     * 所有玩家的胡牌得分详情 二维
     * </pre>
     */
    java.util.List<protobuf.clazz.mj.Wuzhi.AllWinDetails> 
        getWinDetailListList();
    /**
     * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
     *
     * <pre>
     * 所有玩家的胡牌得分详情 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.AllWinDetails getWinDetailList(int index);
    /**
     * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
     *
     * <pre>
     * 所有玩家的胡牌得分详情 二维
     * </pre>
     */
    int getWinDetailListCount();
    /**
     * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
     *
     * <pre>
     * 所有玩家的胡牌得分详情 二维
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.mj.Wuzhi.AllWinDetailsOrBuilder> 
        getWinDetailListOrBuilderList();
    /**
     * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
     *
     * <pre>
     * 所有玩家的胡牌得分详情 二维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.AllWinDetailsOrBuilder getWinDetailListOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code mj.LsdyCards}
   *
   * <pre>
   **
   * 游戏开始时或断线重连时，会放到RoomResponse的commResponse里边，保存所有玩家的亮四打一的牌数据。
   * 正常打牌时或断线重连时，所有玩家已经胡了的牌数据，自摸的牌只能自己看到，接炮或抢杠的牌所有人都能看到。
   * </pre>
   */
  public static final class LsdyCards extends
      com.google.protobuf.GeneratedMessage
      implements LsdyCardsOrBuilder {
    // Use LsdyCards.newBuilder() to construct.
    private LsdyCards(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LsdyCards(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LsdyCards defaultInstance;
    public static LsdyCards getDefaultInstance() {
      return defaultInstance;
    }

    public LsdyCards getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LsdyCards(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardsCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.IntegerArray>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.mj.Wuzhi.IntegerArray.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                ziMoCards_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.IntegerArray>();
                mutable_bitField0_ |= 0x00000004;
              }
              ziMoCards_.add(input.readMessage(protobuf.clazz.mj.Wuzhi.IntegerArray.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                shangJiaProvidedCards_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.IntegerArray>();
                mutable_bitField0_ |= 0x00000008;
              }
              shangJiaProvidedCards_.add(input.readMessage(protobuf.clazz.mj.Wuzhi.IntegerArray.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                duiJiaProvidedCards_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.IntegerArray>();
                mutable_bitField0_ |= 0x00000010;
              }
              duiJiaProvidedCards_.add(input.readMessage(protobuf.clazz.mj.Wuzhi.IntegerArray.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                xiaJiaProviedCards_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.IntegerArray>();
                mutable_bitField0_ |= 0x00000020;
              }
              xiaJiaProviedCards_.add(input.readMessage(protobuf.clazz.mj.Wuzhi.IntegerArray.PARSER, extensionRegistry));
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                winDetailList_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.AllWinDetails>();
                mutable_bitField0_ |= 0x00000040;
              }
              winDetailList_.add(input.readMessage(protobuf.clazz.mj.Wuzhi.AllWinDetails.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardsCount_ = java.util.Collections.unmodifiableList(cardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          ziMoCards_ = java.util.Collections.unmodifiableList(ziMoCards_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          shangJiaProvidedCards_ = java.util.Collections.unmodifiableList(shangJiaProvidedCards_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          duiJiaProvidedCards_ = java.util.Collections.unmodifiableList(duiJiaProvidedCards_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          xiaJiaProviedCards_ = java.util.Collections.unmodifiableList(xiaJiaProviedCards_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          winDetailList_ = java.util.Collections.unmodifiableList(winDetailList_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.mj.Wuzhi.internal_static_mj_LsdyCards_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.mj.Wuzhi.internal_static_mj_LsdyCards_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.mj.Wuzhi.LsdyCards.class, protobuf.clazz.mj.Wuzhi.LsdyCards.Builder.class);
    }

    public static com.google.protobuf.Parser<LsdyCards> PARSER =
        new com.google.protobuf.AbstractParser<LsdyCards>() {
      public LsdyCards parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LsdyCards(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LsdyCards> getParserForType() {
      return PARSER;
    }

    // repeated int32 cardsCount = 1;
    public static final int CARDSCOUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardsCount_;
    /**
     * <code>repeated int32 cardsCount = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌有几张 一维
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsCountList() {
      return cardsCount_;
    }
    /**
     * <code>repeated int32 cardsCount = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌有几张 一维
     * </pre>
     */
    public int getCardsCountCount() {
      return cardsCount_.size();
    }
    /**
     * <code>repeated int32 cardsCount = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌有几张 一维
     * </pre>
     */
    public int getCardsCount(int index) {
      return cardsCount_.get(index);
    }

    // repeated .mj.IntegerArray cardsData = 2;
    public static final int CARDSDATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> cardsData_;
    /**
     * <code>repeated .mj.IntegerArray cardsData = 2;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 二维
     * </pre>
     */
    public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .mj.IntegerArray cardsData = 2;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 二维
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .mj.IntegerArray cardsData = 2;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 二维
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .mj.IntegerArray cardsData = 2;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.IntegerArray getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .mj.IntegerArray cardsData = 2;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated .mj.IntegerArray ziMoCards = 3;
    public static final int ZIMOCARDS_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> ziMoCards_;
    /**
     * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
     *
     * <pre>
     * 每个玩家自摸胡的牌数据 二维
     * </pre>
     */
    public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> getZiMoCardsList() {
      return ziMoCards_;
    }
    /**
     * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
     *
     * <pre>
     * 每个玩家自摸胡的牌数据 二维
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
        getZiMoCardsOrBuilderList() {
      return ziMoCards_;
    }
    /**
     * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
     *
     * <pre>
     * 每个玩家自摸胡的牌数据 二维
     * </pre>
     */
    public int getZiMoCardsCount() {
      return ziMoCards_.size();
    }
    /**
     * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
     *
     * <pre>
     * 每个玩家自摸胡的牌数据 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.IntegerArray getZiMoCards(int index) {
      return ziMoCards_.get(index);
    }
    /**
     * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
     *
     * <pre>
     * 每个玩家自摸胡的牌数据 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getZiMoCardsOrBuilder(
        int index) {
      return ziMoCards_.get(index);
    }

    // repeated .mj.IntegerArray shangJiaProvidedCards = 4;
    public static final int SHANGJIAPROVIDEDCARDS_FIELD_NUMBER = 4;
    private java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> shangJiaProvidedCards_;
    /**
     * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
     *
     * <pre>
     * 每个玩家上家提供的牌数据 二维
     * </pre>
     */
    public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> getShangJiaProvidedCardsList() {
      return shangJiaProvidedCards_;
    }
    /**
     * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
     *
     * <pre>
     * 每个玩家上家提供的牌数据 二维
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
        getShangJiaProvidedCardsOrBuilderList() {
      return shangJiaProvidedCards_;
    }
    /**
     * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
     *
     * <pre>
     * 每个玩家上家提供的牌数据 二维
     * </pre>
     */
    public int getShangJiaProvidedCardsCount() {
      return shangJiaProvidedCards_.size();
    }
    /**
     * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
     *
     * <pre>
     * 每个玩家上家提供的牌数据 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.IntegerArray getShangJiaProvidedCards(int index) {
      return shangJiaProvidedCards_.get(index);
    }
    /**
     * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
     *
     * <pre>
     * 每个玩家上家提供的牌数据 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getShangJiaProvidedCardsOrBuilder(
        int index) {
      return shangJiaProvidedCards_.get(index);
    }

    // repeated .mj.IntegerArray duiJiaProvidedCards = 5;
    public static final int DUIJIAPROVIDEDCARDS_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> duiJiaProvidedCards_;
    /**
     * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
     *
     * <pre>
     * 每个玩家对家提供的牌数据 二维
     * </pre>
     */
    public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> getDuiJiaProvidedCardsList() {
      return duiJiaProvidedCards_;
    }
    /**
     * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
     *
     * <pre>
     * 每个玩家对家提供的牌数据 二维
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
        getDuiJiaProvidedCardsOrBuilderList() {
      return duiJiaProvidedCards_;
    }
    /**
     * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
     *
     * <pre>
     * 每个玩家对家提供的牌数据 二维
     * </pre>
     */
    public int getDuiJiaProvidedCardsCount() {
      return duiJiaProvidedCards_.size();
    }
    /**
     * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
     *
     * <pre>
     * 每个玩家对家提供的牌数据 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.IntegerArray getDuiJiaProvidedCards(int index) {
      return duiJiaProvidedCards_.get(index);
    }
    /**
     * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
     *
     * <pre>
     * 每个玩家对家提供的牌数据 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getDuiJiaProvidedCardsOrBuilder(
        int index) {
      return duiJiaProvidedCards_.get(index);
    }

    // repeated .mj.IntegerArray xiaJiaProviedCards = 6;
    public static final int XIAJIAPROVIEDCARDS_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> xiaJiaProviedCards_;
    /**
     * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
     *
     * <pre>
     * 每个玩家下家提供的牌数据 二维
     * </pre>
     */
    public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> getXiaJiaProviedCardsList() {
      return xiaJiaProviedCards_;
    }
    /**
     * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
     *
     * <pre>
     * 每个玩家下家提供的牌数据 二维
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
        getXiaJiaProviedCardsOrBuilderList() {
      return xiaJiaProviedCards_;
    }
    /**
     * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
     *
     * <pre>
     * 每个玩家下家提供的牌数据 二维
     * </pre>
     */
    public int getXiaJiaProviedCardsCount() {
      return xiaJiaProviedCards_.size();
    }
    /**
     * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
     *
     * <pre>
     * 每个玩家下家提供的牌数据 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.IntegerArray getXiaJiaProviedCards(int index) {
      return xiaJiaProviedCards_.get(index);
    }
    /**
     * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
     *
     * <pre>
     * 每个玩家下家提供的牌数据 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getXiaJiaProviedCardsOrBuilder(
        int index) {
      return xiaJiaProviedCards_.get(index);
    }

    // repeated .mj.AllWinDetails winDetailList = 7;
    public static final int WINDETAILLIST_FIELD_NUMBER = 7;
    private java.util.List<protobuf.clazz.mj.Wuzhi.AllWinDetails> winDetailList_;
    /**
     * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
     *
     * <pre>
     * 所有玩家的胡牌得分详情 二维
     * </pre>
     */
    public java.util.List<protobuf.clazz.mj.Wuzhi.AllWinDetails> getWinDetailListList() {
      return winDetailList_;
    }
    /**
     * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
     *
     * <pre>
     * 所有玩家的胡牌得分详情 二维
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.mj.Wuzhi.AllWinDetailsOrBuilder> 
        getWinDetailListOrBuilderList() {
      return winDetailList_;
    }
    /**
     * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
     *
     * <pre>
     * 所有玩家的胡牌得分详情 二维
     * </pre>
     */
    public int getWinDetailListCount() {
      return winDetailList_.size();
    }
    /**
     * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
     *
     * <pre>
     * 所有玩家的胡牌得分详情 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.AllWinDetails getWinDetailList(int index) {
      return winDetailList_.get(index);
    }
    /**
     * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
     *
     * <pre>
     * 所有玩家的胡牌得分详情 二维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.AllWinDetailsOrBuilder getWinDetailListOrBuilder(
        int index) {
      return winDetailList_.get(index);
    }

    private void initFields() {
      cardsCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      ziMoCards_ = java.util.Collections.emptyList();
      shangJiaProvidedCards_ = java.util.Collections.emptyList();
      duiJiaProvidedCards_ = java.util.Collections.emptyList();
      xiaJiaProviedCards_ = java.util.Collections.emptyList();
      winDetailList_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardsCount_.size(); i++) {
        output.writeInt32(1, cardsCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      for (int i = 0; i < ziMoCards_.size(); i++) {
        output.writeMessage(3, ziMoCards_.get(i));
      }
      for (int i = 0; i < shangJiaProvidedCards_.size(); i++) {
        output.writeMessage(4, shangJiaProvidedCards_.get(i));
      }
      for (int i = 0; i < duiJiaProvidedCards_.size(); i++) {
        output.writeMessage(5, duiJiaProvidedCards_.get(i));
      }
      for (int i = 0; i < xiaJiaProviedCards_.size(); i++) {
        output.writeMessage(6, xiaJiaProviedCards_.get(i));
      }
      for (int i = 0; i < winDetailList_.size(); i++) {
        output.writeMessage(7, winDetailList_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      for (int i = 0; i < ziMoCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, ziMoCards_.get(i));
      }
      for (int i = 0; i < shangJiaProvidedCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, shangJiaProvidedCards_.get(i));
      }
      for (int i = 0; i < duiJiaProvidedCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, duiJiaProvidedCards_.get(i));
      }
      for (int i = 0; i < xiaJiaProviedCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, xiaJiaProviedCards_.get(i));
      }
      for (int i = 0; i < winDetailList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, winDetailList_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.mj.Wuzhi.LsdyCards parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.mj.Wuzhi.LsdyCards parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.LsdyCards parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.mj.Wuzhi.LsdyCards parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.LsdyCards parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.LsdyCards parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.LsdyCards parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.LsdyCards parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.LsdyCards parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.LsdyCards parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.mj.Wuzhi.LsdyCards prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mj.LsdyCards}
     *
     * <pre>
     **
     * 游戏开始时或断线重连时，会放到RoomResponse的commResponse里边，保存所有玩家的亮四打一的牌数据。
     * 正常打牌时或断线重连时，所有玩家已经胡了的牌数据，自摸的牌只能自己看到，接炮或抢杠的牌所有人都能看到。
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.mj.Wuzhi.LsdyCardsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_LsdyCards_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_LsdyCards_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.mj.Wuzhi.LsdyCards.class, protobuf.clazz.mj.Wuzhi.LsdyCards.Builder.class);
      }

      // Construct using protobuf.clazz.mj.Wuzhi.LsdyCards.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
          getZiMoCardsFieldBuilder();
          getShangJiaProvidedCardsFieldBuilder();
          getDuiJiaProvidedCardsFieldBuilder();
          getXiaJiaProviedCardsFieldBuilder();
          getWinDetailListFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        if (ziMoCardsBuilder_ == null) {
          ziMoCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ziMoCardsBuilder_.clear();
        }
        if (shangJiaProvidedCardsBuilder_ == null) {
          shangJiaProvidedCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          shangJiaProvidedCardsBuilder_.clear();
        }
        if (duiJiaProvidedCardsBuilder_ == null) {
          duiJiaProvidedCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          duiJiaProvidedCardsBuilder_.clear();
        }
        if (xiaJiaProviedCardsBuilder_ == null) {
          xiaJiaProviedCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          xiaJiaProviedCardsBuilder_.clear();
        }
        if (winDetailListBuilder_ == null) {
          winDetailList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          winDetailListBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_LsdyCards_descriptor;
      }

      public protobuf.clazz.mj.Wuzhi.LsdyCards getDefaultInstanceForType() {
        return protobuf.clazz.mj.Wuzhi.LsdyCards.getDefaultInstance();
      }

      public protobuf.clazz.mj.Wuzhi.LsdyCards build() {
        protobuf.clazz.mj.Wuzhi.LsdyCards result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.mj.Wuzhi.LsdyCards buildPartial() {
        protobuf.clazz.mj.Wuzhi.LsdyCards result = new protobuf.clazz.mj.Wuzhi.LsdyCards(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsCount_ = java.util.Collections.unmodifiableList(cardsCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardsCount_ = cardsCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (ziMoCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            ziMoCards_ = java.util.Collections.unmodifiableList(ziMoCards_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.ziMoCards_ = ziMoCards_;
        } else {
          result.ziMoCards_ = ziMoCardsBuilder_.build();
        }
        if (shangJiaProvidedCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            shangJiaProvidedCards_ = java.util.Collections.unmodifiableList(shangJiaProvidedCards_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.shangJiaProvidedCards_ = shangJiaProvidedCards_;
        } else {
          result.shangJiaProvidedCards_ = shangJiaProvidedCardsBuilder_.build();
        }
        if (duiJiaProvidedCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            duiJiaProvidedCards_ = java.util.Collections.unmodifiableList(duiJiaProvidedCards_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.duiJiaProvidedCards_ = duiJiaProvidedCards_;
        } else {
          result.duiJiaProvidedCards_ = duiJiaProvidedCardsBuilder_.build();
        }
        if (xiaJiaProviedCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            xiaJiaProviedCards_ = java.util.Collections.unmodifiableList(xiaJiaProviedCards_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.xiaJiaProviedCards_ = xiaJiaProviedCards_;
        } else {
          result.xiaJiaProviedCards_ = xiaJiaProviedCardsBuilder_.build();
        }
        if (winDetailListBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            winDetailList_ = java.util.Collections.unmodifiableList(winDetailList_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.winDetailList_ = winDetailList_;
        } else {
          result.winDetailList_ = winDetailListBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.mj.Wuzhi.LsdyCards) {
          return mergeFrom((protobuf.clazz.mj.Wuzhi.LsdyCards)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.mj.Wuzhi.LsdyCards other) {
        if (other == protobuf.clazz.mj.Wuzhi.LsdyCards.getDefaultInstance()) return this;
        if (!other.cardsCount_.isEmpty()) {
          if (cardsCount_.isEmpty()) {
            cardsCount_ = other.cardsCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardsCountIsMutable();
            cardsCount_.addAll(other.cardsCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (ziMoCardsBuilder_ == null) {
          if (!other.ziMoCards_.isEmpty()) {
            if (ziMoCards_.isEmpty()) {
              ziMoCards_ = other.ziMoCards_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureZiMoCardsIsMutable();
              ziMoCards_.addAll(other.ziMoCards_);
            }
            onChanged();
          }
        } else {
          if (!other.ziMoCards_.isEmpty()) {
            if (ziMoCardsBuilder_.isEmpty()) {
              ziMoCardsBuilder_.dispose();
              ziMoCardsBuilder_ = null;
              ziMoCards_ = other.ziMoCards_;
              bitField0_ = (bitField0_ & ~0x00000004);
              ziMoCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getZiMoCardsFieldBuilder() : null;
            } else {
              ziMoCardsBuilder_.addAllMessages(other.ziMoCards_);
            }
          }
        }
        if (shangJiaProvidedCardsBuilder_ == null) {
          if (!other.shangJiaProvidedCards_.isEmpty()) {
            if (shangJiaProvidedCards_.isEmpty()) {
              shangJiaProvidedCards_ = other.shangJiaProvidedCards_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureShangJiaProvidedCardsIsMutable();
              shangJiaProvidedCards_.addAll(other.shangJiaProvidedCards_);
            }
            onChanged();
          }
        } else {
          if (!other.shangJiaProvidedCards_.isEmpty()) {
            if (shangJiaProvidedCardsBuilder_.isEmpty()) {
              shangJiaProvidedCardsBuilder_.dispose();
              shangJiaProvidedCardsBuilder_ = null;
              shangJiaProvidedCards_ = other.shangJiaProvidedCards_;
              bitField0_ = (bitField0_ & ~0x00000008);
              shangJiaProvidedCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getShangJiaProvidedCardsFieldBuilder() : null;
            } else {
              shangJiaProvidedCardsBuilder_.addAllMessages(other.shangJiaProvidedCards_);
            }
          }
        }
        if (duiJiaProvidedCardsBuilder_ == null) {
          if (!other.duiJiaProvidedCards_.isEmpty()) {
            if (duiJiaProvidedCards_.isEmpty()) {
              duiJiaProvidedCards_ = other.duiJiaProvidedCards_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureDuiJiaProvidedCardsIsMutable();
              duiJiaProvidedCards_.addAll(other.duiJiaProvidedCards_);
            }
            onChanged();
          }
        } else {
          if (!other.duiJiaProvidedCards_.isEmpty()) {
            if (duiJiaProvidedCardsBuilder_.isEmpty()) {
              duiJiaProvidedCardsBuilder_.dispose();
              duiJiaProvidedCardsBuilder_ = null;
              duiJiaProvidedCards_ = other.duiJiaProvidedCards_;
              bitField0_ = (bitField0_ & ~0x00000010);
              duiJiaProvidedCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDuiJiaProvidedCardsFieldBuilder() : null;
            } else {
              duiJiaProvidedCardsBuilder_.addAllMessages(other.duiJiaProvidedCards_);
            }
          }
        }
        if (xiaJiaProviedCardsBuilder_ == null) {
          if (!other.xiaJiaProviedCards_.isEmpty()) {
            if (xiaJiaProviedCards_.isEmpty()) {
              xiaJiaProviedCards_ = other.xiaJiaProviedCards_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureXiaJiaProviedCardsIsMutable();
              xiaJiaProviedCards_.addAll(other.xiaJiaProviedCards_);
            }
            onChanged();
          }
        } else {
          if (!other.xiaJiaProviedCards_.isEmpty()) {
            if (xiaJiaProviedCardsBuilder_.isEmpty()) {
              xiaJiaProviedCardsBuilder_.dispose();
              xiaJiaProviedCardsBuilder_ = null;
              xiaJiaProviedCards_ = other.xiaJiaProviedCards_;
              bitField0_ = (bitField0_ & ~0x00000020);
              xiaJiaProviedCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getXiaJiaProviedCardsFieldBuilder() : null;
            } else {
              xiaJiaProviedCardsBuilder_.addAllMessages(other.xiaJiaProviedCards_);
            }
          }
        }
        if (winDetailListBuilder_ == null) {
          if (!other.winDetailList_.isEmpty()) {
            if (winDetailList_.isEmpty()) {
              winDetailList_ = other.winDetailList_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureWinDetailListIsMutable();
              winDetailList_.addAll(other.winDetailList_);
            }
            onChanged();
          }
        } else {
          if (!other.winDetailList_.isEmpty()) {
            if (winDetailListBuilder_.isEmpty()) {
              winDetailListBuilder_.dispose();
              winDetailListBuilder_ = null;
              winDetailList_ = other.winDetailList_;
              bitField0_ = (bitField0_ & ~0x00000040);
              winDetailListBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getWinDetailListFieldBuilder() : null;
            } else {
              winDetailListBuilder_.addAllMessages(other.winDetailList_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.mj.Wuzhi.LsdyCards parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.mj.Wuzhi.LsdyCards) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 cardsCount = 1;
      private java.util.List<java.lang.Integer> cardsCount_ = java.util.Collections.emptyList();
      private void ensureCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsCount_ = new java.util.ArrayList<java.lang.Integer>(cardsCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 cardsCount = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌有几张 一维
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsCountList() {
        return java.util.Collections.unmodifiableList(cardsCount_);
      }
      /**
       * <code>repeated int32 cardsCount = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌有几张 一维
       * </pre>
       */
      public int getCardsCountCount() {
        return cardsCount_.size();
      }
      /**
       * <code>repeated int32 cardsCount = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌有几张 一维
       * </pre>
       */
      public int getCardsCount(int index) {
        return cardsCount_.get(index);
      }
      /**
       * <code>repeated int32 cardsCount = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌有几张 一维
       * </pre>
       */
      public Builder setCardsCount(
          int index, int value) {
        ensureCardsCountIsMutable();
        cardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cardsCount = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌有几张 一维
       * </pre>
       */
      public Builder addCardsCount(int value) {
        ensureCardsCountIsMutable();
        cardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cardsCount = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌有几张 一维
       * </pre>
       */
      public Builder addAllCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsCountIsMutable();
        super.addAll(values, cardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cardsCount = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌有几张 一维
       * </pre>
       */
      public Builder clearCardsCount() {
        cardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .mj.IntegerArray cardsData = 2;
      private java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.IntegerArray>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.mj.Wuzhi.IntegerArray> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.IntegerArray cardsData = 2;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated .mj.IntegerArray ziMoCards = 3;
      private java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> ziMoCards_ =
        java.util.Collections.emptyList();
      private void ensureZiMoCardsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          ziMoCards_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.IntegerArray>(ziMoCards_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> ziMoCardsBuilder_;

      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> getZiMoCardsList() {
        if (ziMoCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ziMoCards_);
        } else {
          return ziMoCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public int getZiMoCardsCount() {
        if (ziMoCardsBuilder_ == null) {
          return ziMoCards_.size();
        } else {
          return ziMoCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray getZiMoCards(int index) {
        if (ziMoCardsBuilder_ == null) {
          return ziMoCards_.get(index);
        } else {
          return ziMoCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public Builder setZiMoCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (ziMoCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureZiMoCardsIsMutable();
          ziMoCards_.set(index, value);
          onChanged();
        } else {
          ziMoCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public Builder setZiMoCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (ziMoCardsBuilder_ == null) {
          ensureZiMoCardsIsMutable();
          ziMoCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          ziMoCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public Builder addZiMoCards(protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (ziMoCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureZiMoCardsIsMutable();
          ziMoCards_.add(value);
          onChanged();
        } else {
          ziMoCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public Builder addZiMoCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (ziMoCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureZiMoCardsIsMutable();
          ziMoCards_.add(index, value);
          onChanged();
        } else {
          ziMoCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public Builder addZiMoCards(
          protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (ziMoCardsBuilder_ == null) {
          ensureZiMoCardsIsMutable();
          ziMoCards_.add(builderForValue.build());
          onChanged();
        } else {
          ziMoCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public Builder addZiMoCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (ziMoCardsBuilder_ == null) {
          ensureZiMoCardsIsMutable();
          ziMoCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          ziMoCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public Builder addAllZiMoCards(
          java.lang.Iterable<? extends protobuf.clazz.mj.Wuzhi.IntegerArray> values) {
        if (ziMoCardsBuilder_ == null) {
          ensureZiMoCardsIsMutable();
          super.addAll(values, ziMoCards_);
          onChanged();
        } else {
          ziMoCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public Builder clearZiMoCards() {
        if (ziMoCardsBuilder_ == null) {
          ziMoCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          ziMoCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public Builder removeZiMoCards(int index) {
        if (ziMoCardsBuilder_ == null) {
          ensureZiMoCardsIsMutable();
          ziMoCards_.remove(index);
          onChanged();
        } else {
          ziMoCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder getZiMoCardsBuilder(
          int index) {
        return getZiMoCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getZiMoCardsOrBuilder(
          int index) {
        if (ziMoCardsBuilder_ == null) {
          return ziMoCards_.get(index);  } else {
          return ziMoCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
           getZiMoCardsOrBuilderList() {
        if (ziMoCardsBuilder_ != null) {
          return ziMoCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ziMoCards_);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder addZiMoCardsBuilder() {
        return getZiMoCardsFieldBuilder().addBuilder(
            protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder addZiMoCardsBuilder(
          int index) {
        return getZiMoCardsFieldBuilder().addBuilder(
            index, protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.IntegerArray ziMoCards = 3;</code>
       *
       * <pre>
       * 每个玩家自摸胡的牌数据 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray.Builder> 
           getZiMoCardsBuilderList() {
        return getZiMoCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
          getZiMoCardsFieldBuilder() {
        if (ziMoCardsBuilder_ == null) {
          ziMoCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder>(
                  ziMoCards_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          ziMoCards_ = null;
        }
        return ziMoCardsBuilder_;
      }

      // repeated .mj.IntegerArray shangJiaProvidedCards = 4;
      private java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> shangJiaProvidedCards_ =
        java.util.Collections.emptyList();
      private void ensureShangJiaProvidedCardsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          shangJiaProvidedCards_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.IntegerArray>(shangJiaProvidedCards_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> shangJiaProvidedCardsBuilder_;

      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> getShangJiaProvidedCardsList() {
        if (shangJiaProvidedCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(shangJiaProvidedCards_);
        } else {
          return shangJiaProvidedCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public int getShangJiaProvidedCardsCount() {
        if (shangJiaProvidedCardsBuilder_ == null) {
          return shangJiaProvidedCards_.size();
        } else {
          return shangJiaProvidedCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray getShangJiaProvidedCards(int index) {
        if (shangJiaProvidedCardsBuilder_ == null) {
          return shangJiaProvidedCards_.get(index);
        } else {
          return shangJiaProvidedCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public Builder setShangJiaProvidedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (shangJiaProvidedCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShangJiaProvidedCardsIsMutable();
          shangJiaProvidedCards_.set(index, value);
          onChanged();
        } else {
          shangJiaProvidedCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public Builder setShangJiaProvidedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (shangJiaProvidedCardsBuilder_ == null) {
          ensureShangJiaProvidedCardsIsMutable();
          shangJiaProvidedCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          shangJiaProvidedCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public Builder addShangJiaProvidedCards(protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (shangJiaProvidedCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShangJiaProvidedCardsIsMutable();
          shangJiaProvidedCards_.add(value);
          onChanged();
        } else {
          shangJiaProvidedCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public Builder addShangJiaProvidedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (shangJiaProvidedCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShangJiaProvidedCardsIsMutable();
          shangJiaProvidedCards_.add(index, value);
          onChanged();
        } else {
          shangJiaProvidedCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public Builder addShangJiaProvidedCards(
          protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (shangJiaProvidedCardsBuilder_ == null) {
          ensureShangJiaProvidedCardsIsMutable();
          shangJiaProvidedCards_.add(builderForValue.build());
          onChanged();
        } else {
          shangJiaProvidedCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public Builder addShangJiaProvidedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (shangJiaProvidedCardsBuilder_ == null) {
          ensureShangJiaProvidedCardsIsMutable();
          shangJiaProvidedCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          shangJiaProvidedCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public Builder addAllShangJiaProvidedCards(
          java.lang.Iterable<? extends protobuf.clazz.mj.Wuzhi.IntegerArray> values) {
        if (shangJiaProvidedCardsBuilder_ == null) {
          ensureShangJiaProvidedCardsIsMutable();
          super.addAll(values, shangJiaProvidedCards_);
          onChanged();
        } else {
          shangJiaProvidedCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public Builder clearShangJiaProvidedCards() {
        if (shangJiaProvidedCardsBuilder_ == null) {
          shangJiaProvidedCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          shangJiaProvidedCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public Builder removeShangJiaProvidedCards(int index) {
        if (shangJiaProvidedCardsBuilder_ == null) {
          ensureShangJiaProvidedCardsIsMutable();
          shangJiaProvidedCards_.remove(index);
          onChanged();
        } else {
          shangJiaProvidedCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder getShangJiaProvidedCardsBuilder(
          int index) {
        return getShangJiaProvidedCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getShangJiaProvidedCardsOrBuilder(
          int index) {
        if (shangJiaProvidedCardsBuilder_ == null) {
          return shangJiaProvidedCards_.get(index);  } else {
          return shangJiaProvidedCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
           getShangJiaProvidedCardsOrBuilderList() {
        if (shangJiaProvidedCardsBuilder_ != null) {
          return shangJiaProvidedCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(shangJiaProvidedCards_);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder addShangJiaProvidedCardsBuilder() {
        return getShangJiaProvidedCardsFieldBuilder().addBuilder(
            protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder addShangJiaProvidedCardsBuilder(
          int index) {
        return getShangJiaProvidedCardsFieldBuilder().addBuilder(
            index, protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.IntegerArray shangJiaProvidedCards = 4;</code>
       *
       * <pre>
       * 每个玩家上家提供的牌数据 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray.Builder> 
           getShangJiaProvidedCardsBuilderList() {
        return getShangJiaProvidedCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
          getShangJiaProvidedCardsFieldBuilder() {
        if (shangJiaProvidedCardsBuilder_ == null) {
          shangJiaProvidedCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder>(
                  shangJiaProvidedCards_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          shangJiaProvidedCards_ = null;
        }
        return shangJiaProvidedCardsBuilder_;
      }

      // repeated .mj.IntegerArray duiJiaProvidedCards = 5;
      private java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> duiJiaProvidedCards_ =
        java.util.Collections.emptyList();
      private void ensureDuiJiaProvidedCardsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          duiJiaProvidedCards_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.IntegerArray>(duiJiaProvidedCards_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> duiJiaProvidedCardsBuilder_;

      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> getDuiJiaProvidedCardsList() {
        if (duiJiaProvidedCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(duiJiaProvidedCards_);
        } else {
          return duiJiaProvidedCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public int getDuiJiaProvidedCardsCount() {
        if (duiJiaProvidedCardsBuilder_ == null) {
          return duiJiaProvidedCards_.size();
        } else {
          return duiJiaProvidedCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray getDuiJiaProvidedCards(int index) {
        if (duiJiaProvidedCardsBuilder_ == null) {
          return duiJiaProvidedCards_.get(index);
        } else {
          return duiJiaProvidedCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public Builder setDuiJiaProvidedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (duiJiaProvidedCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDuiJiaProvidedCardsIsMutable();
          duiJiaProvidedCards_.set(index, value);
          onChanged();
        } else {
          duiJiaProvidedCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public Builder setDuiJiaProvidedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (duiJiaProvidedCardsBuilder_ == null) {
          ensureDuiJiaProvidedCardsIsMutable();
          duiJiaProvidedCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          duiJiaProvidedCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public Builder addDuiJiaProvidedCards(protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (duiJiaProvidedCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDuiJiaProvidedCardsIsMutable();
          duiJiaProvidedCards_.add(value);
          onChanged();
        } else {
          duiJiaProvidedCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public Builder addDuiJiaProvidedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (duiJiaProvidedCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDuiJiaProvidedCardsIsMutable();
          duiJiaProvidedCards_.add(index, value);
          onChanged();
        } else {
          duiJiaProvidedCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public Builder addDuiJiaProvidedCards(
          protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (duiJiaProvidedCardsBuilder_ == null) {
          ensureDuiJiaProvidedCardsIsMutable();
          duiJiaProvidedCards_.add(builderForValue.build());
          onChanged();
        } else {
          duiJiaProvidedCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public Builder addDuiJiaProvidedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (duiJiaProvidedCardsBuilder_ == null) {
          ensureDuiJiaProvidedCardsIsMutable();
          duiJiaProvidedCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          duiJiaProvidedCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public Builder addAllDuiJiaProvidedCards(
          java.lang.Iterable<? extends protobuf.clazz.mj.Wuzhi.IntegerArray> values) {
        if (duiJiaProvidedCardsBuilder_ == null) {
          ensureDuiJiaProvidedCardsIsMutable();
          super.addAll(values, duiJiaProvidedCards_);
          onChanged();
        } else {
          duiJiaProvidedCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public Builder clearDuiJiaProvidedCards() {
        if (duiJiaProvidedCardsBuilder_ == null) {
          duiJiaProvidedCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          duiJiaProvidedCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public Builder removeDuiJiaProvidedCards(int index) {
        if (duiJiaProvidedCardsBuilder_ == null) {
          ensureDuiJiaProvidedCardsIsMutable();
          duiJiaProvidedCards_.remove(index);
          onChanged();
        } else {
          duiJiaProvidedCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder getDuiJiaProvidedCardsBuilder(
          int index) {
        return getDuiJiaProvidedCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getDuiJiaProvidedCardsOrBuilder(
          int index) {
        if (duiJiaProvidedCardsBuilder_ == null) {
          return duiJiaProvidedCards_.get(index);  } else {
          return duiJiaProvidedCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
           getDuiJiaProvidedCardsOrBuilderList() {
        if (duiJiaProvidedCardsBuilder_ != null) {
          return duiJiaProvidedCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(duiJiaProvidedCards_);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder addDuiJiaProvidedCardsBuilder() {
        return getDuiJiaProvidedCardsFieldBuilder().addBuilder(
            protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder addDuiJiaProvidedCardsBuilder(
          int index) {
        return getDuiJiaProvidedCardsFieldBuilder().addBuilder(
            index, protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.IntegerArray duiJiaProvidedCards = 5;</code>
       *
       * <pre>
       * 每个玩家对家提供的牌数据 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray.Builder> 
           getDuiJiaProvidedCardsBuilderList() {
        return getDuiJiaProvidedCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
          getDuiJiaProvidedCardsFieldBuilder() {
        if (duiJiaProvidedCardsBuilder_ == null) {
          duiJiaProvidedCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder>(
                  duiJiaProvidedCards_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          duiJiaProvidedCards_ = null;
        }
        return duiJiaProvidedCardsBuilder_;
      }

      // repeated .mj.IntegerArray xiaJiaProviedCards = 6;
      private java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> xiaJiaProviedCards_ =
        java.util.Collections.emptyList();
      private void ensureXiaJiaProviedCardsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          xiaJiaProviedCards_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.IntegerArray>(xiaJiaProviedCards_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> xiaJiaProviedCardsBuilder_;

      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray> getXiaJiaProviedCardsList() {
        if (xiaJiaProviedCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(xiaJiaProviedCards_);
        } else {
          return xiaJiaProviedCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public int getXiaJiaProviedCardsCount() {
        if (xiaJiaProviedCardsBuilder_ == null) {
          return xiaJiaProviedCards_.size();
        } else {
          return xiaJiaProviedCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray getXiaJiaProviedCards(int index) {
        if (xiaJiaProviedCardsBuilder_ == null) {
          return xiaJiaProviedCards_.get(index);
        } else {
          return xiaJiaProviedCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public Builder setXiaJiaProviedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (xiaJiaProviedCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureXiaJiaProviedCardsIsMutable();
          xiaJiaProviedCards_.set(index, value);
          onChanged();
        } else {
          xiaJiaProviedCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public Builder setXiaJiaProviedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (xiaJiaProviedCardsBuilder_ == null) {
          ensureXiaJiaProviedCardsIsMutable();
          xiaJiaProviedCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          xiaJiaProviedCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public Builder addXiaJiaProviedCards(protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (xiaJiaProviedCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureXiaJiaProviedCardsIsMutable();
          xiaJiaProviedCards_.add(value);
          onChanged();
        } else {
          xiaJiaProviedCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public Builder addXiaJiaProviedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray value) {
        if (xiaJiaProviedCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureXiaJiaProviedCardsIsMutable();
          xiaJiaProviedCards_.add(index, value);
          onChanged();
        } else {
          xiaJiaProviedCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public Builder addXiaJiaProviedCards(
          protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (xiaJiaProviedCardsBuilder_ == null) {
          ensureXiaJiaProviedCardsIsMutable();
          xiaJiaProviedCards_.add(builderForValue.build());
          onChanged();
        } else {
          xiaJiaProviedCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public Builder addXiaJiaProviedCards(
          int index, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder builderForValue) {
        if (xiaJiaProviedCardsBuilder_ == null) {
          ensureXiaJiaProviedCardsIsMutable();
          xiaJiaProviedCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          xiaJiaProviedCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public Builder addAllXiaJiaProviedCards(
          java.lang.Iterable<? extends protobuf.clazz.mj.Wuzhi.IntegerArray> values) {
        if (xiaJiaProviedCardsBuilder_ == null) {
          ensureXiaJiaProviedCardsIsMutable();
          super.addAll(values, xiaJiaProviedCards_);
          onChanged();
        } else {
          xiaJiaProviedCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public Builder clearXiaJiaProviedCards() {
        if (xiaJiaProviedCardsBuilder_ == null) {
          xiaJiaProviedCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          xiaJiaProviedCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public Builder removeXiaJiaProviedCards(int index) {
        if (xiaJiaProviedCardsBuilder_ == null) {
          ensureXiaJiaProviedCardsIsMutable();
          xiaJiaProviedCards_.remove(index);
          onChanged();
        } else {
          xiaJiaProviedCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder getXiaJiaProviedCardsBuilder(
          int index) {
        return getXiaJiaProviedCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder getXiaJiaProviedCardsOrBuilder(
          int index) {
        if (xiaJiaProviedCardsBuilder_ == null) {
          return xiaJiaProviedCards_.get(index);  } else {
          return xiaJiaProviedCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
           getXiaJiaProviedCardsOrBuilderList() {
        if (xiaJiaProviedCardsBuilder_ != null) {
          return xiaJiaProviedCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(xiaJiaProviedCards_);
        }
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder addXiaJiaProviedCardsBuilder() {
        return getXiaJiaProviedCardsFieldBuilder().addBuilder(
            protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.IntegerArray.Builder addXiaJiaProviedCardsBuilder(
          int index) {
        return getXiaJiaProviedCardsFieldBuilder().addBuilder(
            index, protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.IntegerArray xiaJiaProviedCards = 6;</code>
       *
       * <pre>
       * 每个玩家下家提供的牌数据 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.IntegerArray.Builder> 
           getXiaJiaProviedCardsBuilderList() {
        return getXiaJiaProviedCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder> 
          getXiaJiaProviedCardsFieldBuilder() {
        if (xiaJiaProviedCardsBuilder_ == null) {
          xiaJiaProviedCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.mj.Wuzhi.IntegerArray, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder, protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder>(
                  xiaJiaProviedCards_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          xiaJiaProviedCards_ = null;
        }
        return xiaJiaProviedCardsBuilder_;
      }

      // repeated .mj.AllWinDetails winDetailList = 7;
      private java.util.List<protobuf.clazz.mj.Wuzhi.AllWinDetails> winDetailList_ =
        java.util.Collections.emptyList();
      private void ensureWinDetailListIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          winDetailList_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.AllWinDetails>(winDetailList_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.AllWinDetails, protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder, protobuf.clazz.mj.Wuzhi.AllWinDetailsOrBuilder> winDetailListBuilder_;

      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.AllWinDetails> getWinDetailListList() {
        if (winDetailListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(winDetailList_);
        } else {
          return winDetailListBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public int getWinDetailListCount() {
        if (winDetailListBuilder_ == null) {
          return winDetailList_.size();
        } else {
          return winDetailListBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.AllWinDetails getWinDetailList(int index) {
        if (winDetailListBuilder_ == null) {
          return winDetailList_.get(index);
        } else {
          return winDetailListBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public Builder setWinDetailList(
          int index, protobuf.clazz.mj.Wuzhi.AllWinDetails value) {
        if (winDetailListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWinDetailListIsMutable();
          winDetailList_.set(index, value);
          onChanged();
        } else {
          winDetailListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public Builder setWinDetailList(
          int index, protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder builderForValue) {
        if (winDetailListBuilder_ == null) {
          ensureWinDetailListIsMutable();
          winDetailList_.set(index, builderForValue.build());
          onChanged();
        } else {
          winDetailListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public Builder addWinDetailList(protobuf.clazz.mj.Wuzhi.AllWinDetails value) {
        if (winDetailListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWinDetailListIsMutable();
          winDetailList_.add(value);
          onChanged();
        } else {
          winDetailListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public Builder addWinDetailList(
          int index, protobuf.clazz.mj.Wuzhi.AllWinDetails value) {
        if (winDetailListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWinDetailListIsMutable();
          winDetailList_.add(index, value);
          onChanged();
        } else {
          winDetailListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public Builder addWinDetailList(
          protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder builderForValue) {
        if (winDetailListBuilder_ == null) {
          ensureWinDetailListIsMutable();
          winDetailList_.add(builderForValue.build());
          onChanged();
        } else {
          winDetailListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public Builder addWinDetailList(
          int index, protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder builderForValue) {
        if (winDetailListBuilder_ == null) {
          ensureWinDetailListIsMutable();
          winDetailList_.add(index, builderForValue.build());
          onChanged();
        } else {
          winDetailListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public Builder addAllWinDetailList(
          java.lang.Iterable<? extends protobuf.clazz.mj.Wuzhi.AllWinDetails> values) {
        if (winDetailListBuilder_ == null) {
          ensureWinDetailListIsMutable();
          super.addAll(values, winDetailList_);
          onChanged();
        } else {
          winDetailListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public Builder clearWinDetailList() {
        if (winDetailListBuilder_ == null) {
          winDetailList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          winDetailListBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public Builder removeWinDetailList(int index) {
        if (winDetailListBuilder_ == null) {
          ensureWinDetailListIsMutable();
          winDetailList_.remove(index);
          onChanged();
        } else {
          winDetailListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder getWinDetailListBuilder(
          int index) {
        return getWinDetailListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.AllWinDetailsOrBuilder getWinDetailListOrBuilder(
          int index) {
        if (winDetailListBuilder_ == null) {
          return winDetailList_.get(index);  } else {
          return winDetailListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.mj.Wuzhi.AllWinDetailsOrBuilder> 
           getWinDetailListOrBuilderList() {
        if (winDetailListBuilder_ != null) {
          return winDetailListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(winDetailList_);
        }
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder addWinDetailListBuilder() {
        return getWinDetailListFieldBuilder().addBuilder(
            protobuf.clazz.mj.Wuzhi.AllWinDetails.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder addWinDetailListBuilder(
          int index) {
        return getWinDetailListFieldBuilder().addBuilder(
            index, protobuf.clazz.mj.Wuzhi.AllWinDetails.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.AllWinDetails winDetailList = 7;</code>
       *
       * <pre>
       * 所有玩家的胡牌得分详情 二维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder> 
           getWinDetailListBuilderList() {
        return getWinDetailListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.AllWinDetails, protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder, protobuf.clazz.mj.Wuzhi.AllWinDetailsOrBuilder> 
          getWinDetailListFieldBuilder() {
        if (winDetailListBuilder_ == null) {
          winDetailListBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.mj.Wuzhi.AllWinDetails, protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder, protobuf.clazz.mj.Wuzhi.AllWinDetailsOrBuilder>(
                  winDetailList_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          winDetailList_ = null;
        }
        return winDetailListBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:mj.LsdyCards)
    }

    static {
      defaultInstance = new LsdyCards(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mj.LsdyCards)
  }

  public interface IntegerArrayOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card = 1;
    /**
     * <code>repeated int32 card = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 一维
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardList();
    /**
     * <code>repeated int32 card = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 一维
     * </pre>
     */
    int getCardCount();
    /**
     * <code>repeated int32 card = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 一维
     * </pre>
     */
    int getCard(int index);
  }
  /**
   * Protobuf type {@code mj.IntegerArray}
   *
   * <pre>
   **
   * 刷新手牌时，单独的一个玩家的亮四打一的牌数据，会放到RoomResponse的commResponse里边。
   * 如果亮四打一的四张牌都消耗完了，RoomResponse的commResponse为null。
   * </pre>
   */
  public static final class IntegerArray extends
      com.google.protobuf.GeneratedMessage
      implements IntegerArrayOrBuilder {
    // Use IntegerArray.newBuilder() to construct.
    private IntegerArray(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private IntegerArray(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final IntegerArray defaultInstance;
    public static IntegerArray getDefaultInstance() {
      return defaultInstance;
    }

    public IntegerArray getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private IntegerArray(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                card_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              card_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                card_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                card_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          card_ = java.util.Collections.unmodifiableList(card_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.mj.Wuzhi.internal_static_mj_IntegerArray_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.mj.Wuzhi.internal_static_mj_IntegerArray_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.mj.Wuzhi.IntegerArray.class, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder.class);
    }

    public static com.google.protobuf.Parser<IntegerArray> PARSER =
        new com.google.protobuf.AbstractParser<IntegerArray>() {
      public IntegerArray parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IntegerArray(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<IntegerArray> getParserForType() {
      return PARSER;
    }

    // repeated int32 card = 1;
    public static final int CARD_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> card_;
    /**
     * <code>repeated int32 card = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 一维
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardList() {
      return card_;
    }
    /**
     * <code>repeated int32 card = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 一维
     * </pre>
     */
    public int getCardCount() {
      return card_.size();
    }
    /**
     * <code>repeated int32 card = 1;</code>
     *
     * <pre>
     * 每个玩家亮四打一的牌数据 一维
     * </pre>
     */
    public int getCard(int index) {
      return card_.get(index);
    }

    private void initFields() {
      card_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < card_.size(); i++) {
        output.writeInt32(1, card_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < card_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(card_.get(i));
        }
        size += dataSize;
        size += 1 * getCardList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.mj.Wuzhi.IntegerArray parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.mj.Wuzhi.IntegerArray parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.IntegerArray parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.mj.Wuzhi.IntegerArray parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.IntegerArray parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.IntegerArray parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.IntegerArray parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.IntegerArray parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.IntegerArray parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.IntegerArray parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.mj.Wuzhi.IntegerArray prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mj.IntegerArray}
     *
     * <pre>
     **
     * 刷新手牌时，单独的一个玩家的亮四打一的牌数据，会放到RoomResponse的commResponse里边。
     * 如果亮四打一的四张牌都消耗完了，RoomResponse的commResponse为null。
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.mj.Wuzhi.IntegerArrayOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_IntegerArray_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_IntegerArray_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.mj.Wuzhi.IntegerArray.class, protobuf.clazz.mj.Wuzhi.IntegerArray.Builder.class);
      }

      // Construct using protobuf.clazz.mj.Wuzhi.IntegerArray.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        card_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_IntegerArray_descriptor;
      }

      public protobuf.clazz.mj.Wuzhi.IntegerArray getDefaultInstanceForType() {
        return protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance();
      }

      public protobuf.clazz.mj.Wuzhi.IntegerArray build() {
        protobuf.clazz.mj.Wuzhi.IntegerArray result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.mj.Wuzhi.IntegerArray buildPartial() {
        protobuf.clazz.mj.Wuzhi.IntegerArray result = new protobuf.clazz.mj.Wuzhi.IntegerArray(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          card_ = java.util.Collections.unmodifiableList(card_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.card_ = card_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.mj.Wuzhi.IntegerArray) {
          return mergeFrom((protobuf.clazz.mj.Wuzhi.IntegerArray)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.mj.Wuzhi.IntegerArray other) {
        if (other == protobuf.clazz.mj.Wuzhi.IntegerArray.getDefaultInstance()) return this;
        if (!other.card_.isEmpty()) {
          if (card_.isEmpty()) {
            card_ = other.card_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardIsMutable();
            card_.addAll(other.card_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.mj.Wuzhi.IntegerArray parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.mj.Wuzhi.IntegerArray) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card = 1;
      private java.util.List<java.lang.Integer> card_ = java.util.Collections.emptyList();
      private void ensureCardIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          card_ = new java.util.ArrayList<java.lang.Integer>(card_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 一维
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardList() {
        return java.util.Collections.unmodifiableList(card_);
      }
      /**
       * <code>repeated int32 card = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 一维
       * </pre>
       */
      public int getCardCount() {
        return card_.size();
      }
      /**
       * <code>repeated int32 card = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 一维
       * </pre>
       */
      public int getCard(int index) {
        return card_.get(index);
      }
      /**
       * <code>repeated int32 card = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 一维
       * </pre>
       */
      public Builder setCard(
          int index, int value) {
        ensureCardIsMutable();
        card_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 一维
       * </pre>
       */
      public Builder addCard(int value) {
        ensureCardIsMutable();
        card_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 一维
       * </pre>
       */
      public Builder addAllCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardIsMutable();
        super.addAll(values, card_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card = 1;</code>
       *
       * <pre>
       * 每个玩家亮四打一的牌数据 一维
       * </pre>
       */
      public Builder clearCard() {
        card_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mj.IntegerArray)
    }

    static {
      defaultInstance = new IntegerArray(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mj.IntegerArray)
  }

  public interface AllWinDetailsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .mj.WinDetail winDetails = 1;
    /**
     * <code>repeated .mj.WinDetail winDetails = 1;</code>
     *
     * <pre>
     * 所有的单条胡牌明细 一维
     * </pre>
     */
    java.util.List<protobuf.clazz.mj.Wuzhi.WinDetail> 
        getWinDetailsList();
    /**
     * <code>repeated .mj.WinDetail winDetails = 1;</code>
     *
     * <pre>
     * 所有的单条胡牌明细 一维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.WinDetail getWinDetails(int index);
    /**
     * <code>repeated .mj.WinDetail winDetails = 1;</code>
     *
     * <pre>
     * 所有的单条胡牌明细 一维
     * </pre>
     */
    int getWinDetailsCount();
    /**
     * <code>repeated .mj.WinDetail winDetails = 1;</code>
     *
     * <pre>
     * 所有的单条胡牌明细 一维
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.mj.Wuzhi.WinDetailOrBuilder> 
        getWinDetailsOrBuilderList();
    /**
     * <code>repeated .mj.WinDetail winDetails = 1;</code>
     *
     * <pre>
     * 所有的单条胡牌明细 一维
     * </pre>
     */
    protobuf.clazz.mj.Wuzhi.WinDetailOrBuilder getWinDetailsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code mj.AllWinDetails}
   *
   * <pre>
   **
   * 每个玩家所有胡牌明细
   * </pre>
   */
  public static final class AllWinDetails extends
      com.google.protobuf.GeneratedMessage
      implements AllWinDetailsOrBuilder {
    // Use AllWinDetails.newBuilder() to construct.
    private AllWinDetails(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AllWinDetails(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AllWinDetails defaultInstance;
    public static AllWinDetails getDefaultInstance() {
      return defaultInstance;
    }

    public AllWinDetails getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AllWinDetails(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                winDetails_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.WinDetail>();
                mutable_bitField0_ |= 0x00000001;
              }
              winDetails_.add(input.readMessage(protobuf.clazz.mj.Wuzhi.WinDetail.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          winDetails_ = java.util.Collections.unmodifiableList(winDetails_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.mj.Wuzhi.internal_static_mj_AllWinDetails_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.mj.Wuzhi.internal_static_mj_AllWinDetails_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.mj.Wuzhi.AllWinDetails.class, protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder.class);
    }

    public static com.google.protobuf.Parser<AllWinDetails> PARSER =
        new com.google.protobuf.AbstractParser<AllWinDetails>() {
      public AllWinDetails parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AllWinDetails(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AllWinDetails> getParserForType() {
      return PARSER;
    }

    // repeated .mj.WinDetail winDetails = 1;
    public static final int WINDETAILS_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.mj.Wuzhi.WinDetail> winDetails_;
    /**
     * <code>repeated .mj.WinDetail winDetails = 1;</code>
     *
     * <pre>
     * 所有的单条胡牌明细 一维
     * </pre>
     */
    public java.util.List<protobuf.clazz.mj.Wuzhi.WinDetail> getWinDetailsList() {
      return winDetails_;
    }
    /**
     * <code>repeated .mj.WinDetail winDetails = 1;</code>
     *
     * <pre>
     * 所有的单条胡牌明细 一维
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.mj.Wuzhi.WinDetailOrBuilder> 
        getWinDetailsOrBuilderList() {
      return winDetails_;
    }
    /**
     * <code>repeated .mj.WinDetail winDetails = 1;</code>
     *
     * <pre>
     * 所有的单条胡牌明细 一维
     * </pre>
     */
    public int getWinDetailsCount() {
      return winDetails_.size();
    }
    /**
     * <code>repeated .mj.WinDetail winDetails = 1;</code>
     *
     * <pre>
     * 所有的单条胡牌明细 一维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.WinDetail getWinDetails(int index) {
      return winDetails_.get(index);
    }
    /**
     * <code>repeated .mj.WinDetail winDetails = 1;</code>
     *
     * <pre>
     * 所有的单条胡牌明细 一维
     * </pre>
     */
    public protobuf.clazz.mj.Wuzhi.WinDetailOrBuilder getWinDetailsOrBuilder(
        int index) {
      return winDetails_.get(index);
    }

    private void initFields() {
      winDetails_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < winDetails_.size(); i++) {
        output.writeMessage(1, winDetails_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < winDetails_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, winDetails_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.mj.Wuzhi.AllWinDetails parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.mj.Wuzhi.AllWinDetails parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.AllWinDetails parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.mj.Wuzhi.AllWinDetails parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.AllWinDetails parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.AllWinDetails parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.AllWinDetails parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.AllWinDetails parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.AllWinDetails parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.AllWinDetails parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.mj.Wuzhi.AllWinDetails prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mj.AllWinDetails}
     *
     * <pre>
     **
     * 每个玩家所有胡牌明细
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.mj.Wuzhi.AllWinDetailsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_AllWinDetails_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_AllWinDetails_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.mj.Wuzhi.AllWinDetails.class, protobuf.clazz.mj.Wuzhi.AllWinDetails.Builder.class);
      }

      // Construct using protobuf.clazz.mj.Wuzhi.AllWinDetails.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWinDetailsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (winDetailsBuilder_ == null) {
          winDetails_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          winDetailsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_AllWinDetails_descriptor;
      }

      public protobuf.clazz.mj.Wuzhi.AllWinDetails getDefaultInstanceForType() {
        return protobuf.clazz.mj.Wuzhi.AllWinDetails.getDefaultInstance();
      }

      public protobuf.clazz.mj.Wuzhi.AllWinDetails build() {
        protobuf.clazz.mj.Wuzhi.AllWinDetails result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.mj.Wuzhi.AllWinDetails buildPartial() {
        protobuf.clazz.mj.Wuzhi.AllWinDetails result = new protobuf.clazz.mj.Wuzhi.AllWinDetails(this);
        int from_bitField0_ = bitField0_;
        if (winDetailsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            winDetails_ = java.util.Collections.unmodifiableList(winDetails_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.winDetails_ = winDetails_;
        } else {
          result.winDetails_ = winDetailsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.mj.Wuzhi.AllWinDetails) {
          return mergeFrom((protobuf.clazz.mj.Wuzhi.AllWinDetails)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.mj.Wuzhi.AllWinDetails other) {
        if (other == protobuf.clazz.mj.Wuzhi.AllWinDetails.getDefaultInstance()) return this;
        if (winDetailsBuilder_ == null) {
          if (!other.winDetails_.isEmpty()) {
            if (winDetails_.isEmpty()) {
              winDetails_ = other.winDetails_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureWinDetailsIsMutable();
              winDetails_.addAll(other.winDetails_);
            }
            onChanged();
          }
        } else {
          if (!other.winDetails_.isEmpty()) {
            if (winDetailsBuilder_.isEmpty()) {
              winDetailsBuilder_.dispose();
              winDetailsBuilder_ = null;
              winDetails_ = other.winDetails_;
              bitField0_ = (bitField0_ & ~0x00000001);
              winDetailsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getWinDetailsFieldBuilder() : null;
            } else {
              winDetailsBuilder_.addAllMessages(other.winDetails_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.mj.Wuzhi.AllWinDetails parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.mj.Wuzhi.AllWinDetails) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .mj.WinDetail winDetails = 1;
      private java.util.List<protobuf.clazz.mj.Wuzhi.WinDetail> winDetails_ =
        java.util.Collections.emptyList();
      private void ensureWinDetailsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          winDetails_ = new java.util.ArrayList<protobuf.clazz.mj.Wuzhi.WinDetail>(winDetails_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.WinDetail, protobuf.clazz.mj.Wuzhi.WinDetail.Builder, protobuf.clazz.mj.Wuzhi.WinDetailOrBuilder> winDetailsBuilder_;

      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.WinDetail> getWinDetailsList() {
        if (winDetailsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(winDetails_);
        } else {
          return winDetailsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public int getWinDetailsCount() {
        if (winDetailsBuilder_ == null) {
          return winDetails_.size();
        } else {
          return winDetailsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.WinDetail getWinDetails(int index) {
        if (winDetailsBuilder_ == null) {
          return winDetails_.get(index);
        } else {
          return winDetailsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public Builder setWinDetails(
          int index, protobuf.clazz.mj.Wuzhi.WinDetail value) {
        if (winDetailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWinDetailsIsMutable();
          winDetails_.set(index, value);
          onChanged();
        } else {
          winDetailsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public Builder setWinDetails(
          int index, protobuf.clazz.mj.Wuzhi.WinDetail.Builder builderForValue) {
        if (winDetailsBuilder_ == null) {
          ensureWinDetailsIsMutable();
          winDetails_.set(index, builderForValue.build());
          onChanged();
        } else {
          winDetailsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public Builder addWinDetails(protobuf.clazz.mj.Wuzhi.WinDetail value) {
        if (winDetailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWinDetailsIsMutable();
          winDetails_.add(value);
          onChanged();
        } else {
          winDetailsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public Builder addWinDetails(
          int index, protobuf.clazz.mj.Wuzhi.WinDetail value) {
        if (winDetailsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWinDetailsIsMutable();
          winDetails_.add(index, value);
          onChanged();
        } else {
          winDetailsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public Builder addWinDetails(
          protobuf.clazz.mj.Wuzhi.WinDetail.Builder builderForValue) {
        if (winDetailsBuilder_ == null) {
          ensureWinDetailsIsMutable();
          winDetails_.add(builderForValue.build());
          onChanged();
        } else {
          winDetailsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public Builder addWinDetails(
          int index, protobuf.clazz.mj.Wuzhi.WinDetail.Builder builderForValue) {
        if (winDetailsBuilder_ == null) {
          ensureWinDetailsIsMutable();
          winDetails_.add(index, builderForValue.build());
          onChanged();
        } else {
          winDetailsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public Builder addAllWinDetails(
          java.lang.Iterable<? extends protobuf.clazz.mj.Wuzhi.WinDetail> values) {
        if (winDetailsBuilder_ == null) {
          ensureWinDetailsIsMutable();
          super.addAll(values, winDetails_);
          onChanged();
        } else {
          winDetailsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public Builder clearWinDetails() {
        if (winDetailsBuilder_ == null) {
          winDetails_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          winDetailsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public Builder removeWinDetails(int index) {
        if (winDetailsBuilder_ == null) {
          ensureWinDetailsIsMutable();
          winDetails_.remove(index);
          onChanged();
        } else {
          winDetailsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.WinDetail.Builder getWinDetailsBuilder(
          int index) {
        return getWinDetailsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.WinDetailOrBuilder getWinDetailsOrBuilder(
          int index) {
        if (winDetailsBuilder_ == null) {
          return winDetails_.get(index);  } else {
          return winDetailsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.mj.Wuzhi.WinDetailOrBuilder> 
           getWinDetailsOrBuilderList() {
        if (winDetailsBuilder_ != null) {
          return winDetailsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(winDetails_);
        }
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.WinDetail.Builder addWinDetailsBuilder() {
        return getWinDetailsFieldBuilder().addBuilder(
            protobuf.clazz.mj.Wuzhi.WinDetail.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public protobuf.clazz.mj.Wuzhi.WinDetail.Builder addWinDetailsBuilder(
          int index) {
        return getWinDetailsFieldBuilder().addBuilder(
            index, protobuf.clazz.mj.Wuzhi.WinDetail.getDefaultInstance());
      }
      /**
       * <code>repeated .mj.WinDetail winDetails = 1;</code>
       *
       * <pre>
       * 所有的单条胡牌明细 一维
       * </pre>
       */
      public java.util.List<protobuf.clazz.mj.Wuzhi.WinDetail.Builder> 
           getWinDetailsBuilderList() {
        return getWinDetailsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.mj.Wuzhi.WinDetail, protobuf.clazz.mj.Wuzhi.WinDetail.Builder, protobuf.clazz.mj.Wuzhi.WinDetailOrBuilder> 
          getWinDetailsFieldBuilder() {
        if (winDetailsBuilder_ == null) {
          winDetailsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.mj.Wuzhi.WinDetail, protobuf.clazz.mj.Wuzhi.WinDetail.Builder, protobuf.clazz.mj.Wuzhi.WinDetailOrBuilder>(
                  winDetails_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          winDetails_ = null;
        }
        return winDetailsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:mj.AllWinDetails)
    }

    static {
      defaultInstance = new AllWinDetails(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mj.AllWinDetails)
  }

  public interface WinDetailOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 type = 1;
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     **
     * 明细类型：1.自摸；2.被自摸；3.接炮；4.点炮；5.接杠；6.点杠；7.暗杠；8.被暗杠
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     **
     * 明细类型：1.自摸；2.被自摸；3.接炮；4.点炮；5.接杠；6.点杠；7.暗杠；8.被暗杠
     * </pre>
     */
    int getType();

    // optional int32 card = 2;
    /**
     * <code>optional int32 card = 2;</code>
     *
     * <pre>
     **
     * 明细对应的牌数据
     * </pre>
     */
    boolean hasCard();
    /**
     * <code>optional int32 card = 2;</code>
     *
     * <pre>
     **
     * 明细对应的牌数据
     * </pre>
     */
    int getCard();

    // optional int32 provider = 3;
    /**
     * <code>optional int32 provider = 3;</code>
     *
     * <pre>
     **
     * 提供者：0.本人（不用显示出来）；1.上家；2.对家；3.下家
     * </pre>
     */
    boolean hasProvider();
    /**
     * <code>optional int32 provider = 3;</code>
     *
     * <pre>
     **
     * 提供者：0.本人（不用显示出来）；1.上家；2.对家；3.下家
     * </pre>
     */
    int getProvider();

    // optional int32 score = 4;
    /**
     * <code>optional int32 score = 4;</code>
     *
     * <pre>
     **
     * 分
     * </pre>
     */
    boolean hasScore();
    /**
     * <code>optional int32 score = 4;</code>
     *
     * <pre>
     **
     * 分
     * </pre>
     */
    int getScore();
  }
  /**
   * Protobuf type {@code mj.WinDetail}
   *
   * <pre>
   **
   * 单条胡牌明细
   * </pre>
   */
  public static final class WinDetail extends
      com.google.protobuf.GeneratedMessage
      implements WinDetailOrBuilder {
    // Use WinDetail.newBuilder() to construct.
    private WinDetail(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private WinDetail(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final WinDetail defaultInstance;
    public static WinDetail getDefaultInstance() {
      return defaultInstance;
    }

    public WinDetail getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private WinDetail(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              type_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              card_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              provider_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              score_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.mj.Wuzhi.internal_static_mj_WinDetail_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.mj.Wuzhi.internal_static_mj_WinDetail_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.mj.Wuzhi.WinDetail.class, protobuf.clazz.mj.Wuzhi.WinDetail.Builder.class);
    }

    public static com.google.protobuf.Parser<WinDetail> PARSER =
        new com.google.protobuf.AbstractParser<WinDetail>() {
      public WinDetail parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WinDetail(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WinDetail> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     **
     * 明细类型：1.自摸；2.被自摸；3.接炮；4.点炮；5.接杠；6.点杠；7.暗杠；8.被暗杠
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     **
     * 明细类型：1.自摸；2.被自摸；3.接炮；4.点炮；5.接杠；6.点杠；7.暗杠；8.被暗杠
     * </pre>
     */
    public int getType() {
      return type_;
    }

    // optional int32 card = 2;
    public static final int CARD_FIELD_NUMBER = 2;
    private int card_;
    /**
     * <code>optional int32 card = 2;</code>
     *
     * <pre>
     **
     * 明细对应的牌数据
     * </pre>
     */
    public boolean hasCard() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card = 2;</code>
     *
     * <pre>
     **
     * 明细对应的牌数据
     * </pre>
     */
    public int getCard() {
      return card_;
    }

    // optional int32 provider = 3;
    public static final int PROVIDER_FIELD_NUMBER = 3;
    private int provider_;
    /**
     * <code>optional int32 provider = 3;</code>
     *
     * <pre>
     **
     * 提供者：0.本人（不用显示出来）；1.上家；2.对家；3.下家
     * </pre>
     */
    public boolean hasProvider() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 provider = 3;</code>
     *
     * <pre>
     **
     * 提供者：0.本人（不用显示出来）；1.上家；2.对家；3.下家
     * </pre>
     */
    public int getProvider() {
      return provider_;
    }

    // optional int32 score = 4;
    public static final int SCORE_FIELD_NUMBER = 4;
    private int score_;
    /**
     * <code>optional int32 score = 4;</code>
     *
     * <pre>
     **
     * 分
     * </pre>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 score = 4;</code>
     *
     * <pre>
     **
     * 分
     * </pre>
     */
    public int getScore() {
      return score_;
    }

    private void initFields() {
      type_ = 0;
      card_ = 0;
      provider_ = 0;
      score_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, card_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, provider_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, score_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, card_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, provider_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, score_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.mj.Wuzhi.WinDetail parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.mj.Wuzhi.WinDetail parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.WinDetail parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.mj.Wuzhi.WinDetail parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.WinDetail parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.WinDetail parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.WinDetail parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.WinDetail parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.mj.Wuzhi.WinDetail parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.mj.Wuzhi.WinDetail parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.mj.Wuzhi.WinDetail prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code mj.WinDetail}
     *
     * <pre>
     **
     * 单条胡牌明细
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.mj.Wuzhi.WinDetailOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_WinDetail_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_WinDetail_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.mj.Wuzhi.WinDetail.class, protobuf.clazz.mj.Wuzhi.WinDetail.Builder.class);
      }

      // Construct using protobuf.clazz.mj.Wuzhi.WinDetail.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        card_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        provider_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.mj.Wuzhi.internal_static_mj_WinDetail_descriptor;
      }

      public protobuf.clazz.mj.Wuzhi.WinDetail getDefaultInstanceForType() {
        return protobuf.clazz.mj.Wuzhi.WinDetail.getDefaultInstance();
      }

      public protobuf.clazz.mj.Wuzhi.WinDetail build() {
        protobuf.clazz.mj.Wuzhi.WinDetail result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.mj.Wuzhi.WinDetail buildPartial() {
        protobuf.clazz.mj.Wuzhi.WinDetail result = new protobuf.clazz.mj.Wuzhi.WinDetail(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.card_ = card_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.provider_ = provider_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.score_ = score_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.mj.Wuzhi.WinDetail) {
          return mergeFrom((protobuf.clazz.mj.Wuzhi.WinDetail)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.mj.Wuzhi.WinDetail other) {
        if (other == protobuf.clazz.mj.Wuzhi.WinDetail.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasCard()) {
          setCard(other.getCard());
        }
        if (other.hasProvider()) {
          setProvider(other.getProvider());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.mj.Wuzhi.WinDetail parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.mj.Wuzhi.WinDetail) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 type = 1;
      private int type_ ;
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       **
       * 明细类型：1.自摸；2.被自摸；3.接炮；4.点炮；5.接杠；6.点杠；7.暗杠；8.被暗杠
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       **
       * 明细类型：1.自摸；2.被自摸；3.接炮；4.点炮；5.接杠；6.点杠；7.暗杠；8.被暗杠
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       **
       * 明细类型：1.自摸；2.被自摸；3.接炮；4.点炮；5.接杠；6.点杠；7.暗杠；8.被暗杠
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       **
       * 明细类型：1.自摸；2.被自摸；3.接炮；4.点炮；5.接杠；6.点杠；7.暗杠；8.被暗杠
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card = 2;
      private int card_ ;
      /**
       * <code>optional int32 card = 2;</code>
       *
       * <pre>
       **
       * 明细对应的牌数据
       * </pre>
       */
      public boolean hasCard() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card = 2;</code>
       *
       * <pre>
       **
       * 明细对应的牌数据
       * </pre>
       */
      public int getCard() {
        return card_;
      }
      /**
       * <code>optional int32 card = 2;</code>
       *
       * <pre>
       **
       * 明细对应的牌数据
       * </pre>
       */
      public Builder setCard(int value) {
        bitField0_ |= 0x00000002;
        card_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card = 2;</code>
       *
       * <pre>
       **
       * 明细对应的牌数据
       * </pre>
       */
      public Builder clearCard() {
        bitField0_ = (bitField0_ & ~0x00000002);
        card_ = 0;
        onChanged();
        return this;
      }

      // optional int32 provider = 3;
      private int provider_ ;
      /**
       * <code>optional int32 provider = 3;</code>
       *
       * <pre>
       **
       * 提供者：0.本人（不用显示出来）；1.上家；2.对家；3.下家
       * </pre>
       */
      public boolean hasProvider() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 provider = 3;</code>
       *
       * <pre>
       **
       * 提供者：0.本人（不用显示出来）；1.上家；2.对家；3.下家
       * </pre>
       */
      public int getProvider() {
        return provider_;
      }
      /**
       * <code>optional int32 provider = 3;</code>
       *
       * <pre>
       **
       * 提供者：0.本人（不用显示出来）；1.上家；2.对家；3.下家
       * </pre>
       */
      public Builder setProvider(int value) {
        bitField0_ |= 0x00000004;
        provider_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 provider = 3;</code>
       *
       * <pre>
       **
       * 提供者：0.本人（不用显示出来）；1.上家；2.对家；3.下家
       * </pre>
       */
      public Builder clearProvider() {
        bitField0_ = (bitField0_ & ~0x00000004);
        provider_ = 0;
        onChanged();
        return this;
      }

      // optional int32 score = 4;
      private int score_ ;
      /**
       * <code>optional int32 score = 4;</code>
       *
       * <pre>
       **
       * 分
       * </pre>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 score = 4;</code>
       *
       * <pre>
       **
       * 分
       * </pre>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>optional int32 score = 4;</code>
       *
       * <pre>
       **
       * 分
       * </pre>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000008;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score = 4;</code>
       *
       * <pre>
       **
       * 分
       * </pre>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000008);
        score_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:mj.WinDetail)
    }

    static {
      defaultInstance = new WinDetail(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mj.WinDetail)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mj_LsdyCards_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mj_LsdyCards_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mj_IntegerArray_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mj_IntegerArray_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mj_AllWinDetails_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mj_AllWinDetails_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_mj_WinDetail_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_mj_WinDetail_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016mj/wuzhi.proto\022\002mj\032\024basic/protocol.pro" +
      "to\"\241\002\n\tLsdyCards\022\022\n\ncardsCount\030\001 \003(\005\022#\n\t" +
      "cardsData\030\002 \003(\0132\020.mj.IntegerArray\022#\n\tziM" +
      "oCards\030\003 \003(\0132\020.mj.IntegerArray\022/\n\025shangJ" +
      "iaProvidedCards\030\004 \003(\0132\020.mj.IntegerArray\022" +
      "-\n\023duiJiaProvidedCards\030\005 \003(\0132\020.mj.Intege" +
      "rArray\022,\n\022xiaJiaProviedCards\030\006 \003(\0132\020.mj." +
      "IntegerArray\022(\n\rwinDetailList\030\007 \003(\0132\021.mj" +
      ".AllWinDetails\"\034\n\014IntegerArray\022\014\n\004card\030\001" +
      " \003(\005\"2\n\rAllWinDetails\022!\n\nwinDetails\030\001 \003(",
      "\0132\r.mj.WinDetail\"H\n\tWinDetail\022\014\n\004type\030\001 " +
      "\001(\005\022\014\n\004card\030\002 \001(\005\022\020\n\010provider\030\003 \001(\005\022\r\n\005s" +
      "core\030\004 \001(\005B\032\n\021protobuf.clazz.mjB\005Wuzhi"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_mj_LsdyCards_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_mj_LsdyCards_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mj_LsdyCards_descriptor,
              new java.lang.String[] { "CardsCount", "CardsData", "ZiMoCards", "ShangJiaProvidedCards", "DuiJiaProvidedCards", "XiaJiaProviedCards", "WinDetailList", });
          internal_static_mj_IntegerArray_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_mj_IntegerArray_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mj_IntegerArray_descriptor,
              new java.lang.String[] { "Card", });
          internal_static_mj_AllWinDetails_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_mj_AllWinDetails_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mj_AllWinDetails_descriptor,
              new java.lang.String[] { "WinDetails", });
          internal_static_mj_WinDetail_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_mj_WinDetail_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_mj_WinDetail_descriptor,
              new java.lang.String[] { "Type", "Card", "Provider", "Score", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
