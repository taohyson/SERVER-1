// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddz/lfddz.proto

package protobuf.clazz.ddz_lf;

public final class ddz_lfRsp {
  private ddz_lfRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GameStartDDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 2;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code ddz_lf.GameStartDDZ_LF}
   *
   * <pre>
   *1001
   * </pre>
   */
  public static final class GameStartDDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements GameStartDDZ_LFOrBuilder {
    // Use GameStartDDZ_LF.newBuilder() to construct.
    private GameStartDDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStartDDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStartDDZ_LF defaultInstance;
    public static GameStartDDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public GameStartDDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStartDDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_GameStartDDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_GameStartDDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStartDDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<GameStartDDZ_LF>() {
      public GameStartDDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStartDDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStartDDZ_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 2;
    public static final int PLAYERS_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(2, players_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, players_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.GameStartDDZ_LF}
     *
     * <pre>
     *1001
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_GameStartDDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_GameStartDDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_GameStartDDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.GameStartDDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 2;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.GameStartDDZ_LF)
    }

    static {
      defaultInstance = new GameStartDDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.GameStartDDZ_LF)
  }

  public interface RefreshCards_DDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 hand_card_count = 1;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code ddz_lf.RefreshCards_DDZ_LF}
   *
   * <pre>
   *刷新用户扑克 1002
   * </pre>
   */
  public static final class RefreshCards_DDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements RefreshCards_DDZ_LFOrBuilder {
    // Use RefreshCards_DDZ_LF.newBuilder() to construct.
    private RefreshCards_DDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshCards_DDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshCards_DDZ_LF defaultInstance;
    public static RefreshCards_DDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshCards_DDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshCards_DDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_RefreshCards_DDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_RefreshCards_DDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshCards_DDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<RefreshCards_DDZ_LF>() {
      public RefreshCards_DDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshCards_DDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshCards_DDZ_LF> getParserForType() {
      return PARSER;
    }

    // repeated int32 hand_card_count = 1;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    private void initFields() {
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(1, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(2, handCardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, handCardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.RefreshCards_DDZ_LF}
     *
     * <pre>
     *刷新用户扑克 1002
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_RefreshCards_DDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_RefreshCards_DDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_RefreshCards_DDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF.getDefaultInstance()) return this;
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.RefreshCards_DDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 hand_card_count = 1;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.RefreshCards_DDZ_LF)
    }

    static {
      defaultInstance = new RefreshCards_DDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.RefreshCards_DDZ_LF)
  }

  public interface OutCardData_DDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // repeated int32 change_cards_data = 3;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getChangeCardsDataList();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsData(int index);

    // optional int32 cards_count = 4;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 5;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 6;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 7;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_change_cards_data = 8;
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // optional int32 pr_cards_count = 9;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 10;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 display_time = 11;
    /**
     * <code>optional int32 display_time = 11;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 11;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 user_card_count = 12;
    /**
     * <code>optional int32 user_card_count = 12;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    boolean hasUserCardCount();
    /**
     * <code>optional int32 user_card_count = 12;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCount();

    // repeated int32 user_cards_data = 13;
    /**
     * <code>repeated int32 user_cards_data = 13;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCardsDataList();
    /**
     * <code>repeated int32 user_cards_data = 13;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getUserCardsDataCount();
    /**
     * <code>repeated int32 user_cards_data = 13;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getUserCardsData(int index);

    // optional int32 is_first_out = 14;
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 is_ya_pai = 15;
    /**
     * <code>optional int32 is_ya_pai = 15;</code>
     *
     * <pre>
     *是否能压牌
     * </pre>
     */
    boolean hasIsYaPai();
    /**
     * <code>optional int32 is_ya_pai = 15;</code>
     *
     * <pre>
     *是否能压牌
     * </pre>
     */
    int getIsYaPai();
  }
  /**
   * Protobuf type {@code ddz_lf.OutCardData_DDZ_LF}
   *
   * <pre>
   *用户出牌 1003
   * </pre>
   */
  public static final class OutCardData_DDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements OutCardData_DDZ_LFOrBuilder {
    // Use OutCardData_DDZ_LF.newBuilder() to construct.
    private OutCardData_DDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardData_DDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardData_DDZ_LF defaultInstance;
    public static OutCardData_DDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardData_DDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardData_DDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              changeCardsData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                changeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              displayTime_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              userCardCount_ = input.readInt32();
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                userCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              userCardsData_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                userCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              bitField0_ |= 0x00000100;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000200;
              isYaPai_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_OutCardData_DDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_OutCardData_DDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardData_DDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<OutCardData_DDZ_LF>() {
      public OutCardData_DDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardData_DDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardData_DDZ_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // repeated int32 change_cards_data = 3;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> changeCardsData_;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }

    // optional int32 cards_count = 4;
    public static final int CARDS_COUNT_FIELD_NUMBER = 4;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 5;
    public static final int CARD_TYPE_FIELD_NUMBER = 5;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 6;
    public static final int CUR_PLAYER_FIELD_NUMBER = 6;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 7;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_change_cards_data = 8;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 8;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 9;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 9;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 10;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 10;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 display_time = 11;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 11;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 11;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 display_time = 11;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 user_card_count = 12;
    public static final int USER_CARD_COUNT_FIELD_NUMBER = 12;
    private int userCardCount_;
    /**
     * <code>optional int32 user_card_count = 12;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public boolean hasUserCardCount() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 user_card_count = 12;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCount() {
      return userCardCount_;
    }

    // repeated int32 user_cards_data = 13;
    public static final int USER_CARDS_DATA_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> userCardsData_;
    /**
     * <code>repeated int32 user_cards_data = 13;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCardsDataList() {
      return userCardsData_;
    }
    /**
     * <code>repeated int32 user_cards_data = 13;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getUserCardsDataCount() {
      return userCardsData_.size();
    }
    /**
     * <code>repeated int32 user_cards_data = 13;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getUserCardsData(int index) {
      return userCardsData_.get(index);
    }

    // optional int32 is_first_out = 14;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 14;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 is_ya_pai = 15;
    public static final int IS_YA_PAI_FIELD_NUMBER = 15;
    private int isYaPai_;
    /**
     * <code>optional int32 is_ya_pai = 15;</code>
     *
     * <pre>
     *是否能压牌
     * </pre>
     */
    public boolean hasIsYaPai() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 is_ya_pai = 15;</code>
     *
     * <pre>
     *是否能压牌
     * </pre>
     */
    public int getIsYaPai() {
      return isYaPai_;
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      displayTime_ = 0;
      userCardCount_ = 0;
      userCardsData_ = java.util.Collections.emptyList();
      isFirstOut_ = 0;
      isYaPai_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeInt32(3, changeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(7, prCardsData_.get(i));
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(8, prChangeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(11, displayTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, userCardCount_);
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        output.writeInt32(13, userCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(14, isFirstOut_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(15, isYaPai_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < changeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(changeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, displayTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, userCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCardsDataList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, isFirstOut_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, isYaPai_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.OutCardData_DDZ_LF}
     *
     * <pre>
     *用户出牌 1003
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_OutCardData_DDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_OutCardData_DDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        userCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        userCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        isYaPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_OutCardData_DDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.changeCardsData_ = changeCardsData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.userCardCount_ = userCardCount_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.userCardsData_ = userCardsData_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isYaPai_ = isYaPai_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (!other.changeCardsData_.isEmpty()) {
          if (changeCardsData_.isEmpty()) {
            changeCardsData_ = other.changeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChangeCardsDataIsMutable();
            changeCardsData_.addAll(other.changeCardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasUserCardCount()) {
          setUserCardCount(other.getUserCardCount());
        }
        if (!other.userCardsData_.isEmpty()) {
          if (userCardsData_.isEmpty()) {
            userCardsData_ = other.userCardsData_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureUserCardsDataIsMutable();
            userCardsData_.addAll(other.userCardsData_);
          }
          onChanged();
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasIsYaPai()) {
          setIsYaPai(other.getIsYaPai());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.OutCardData_DDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 change_cards_data = 3;
      private java.util.List<java.lang.Integer> changeCardsData_ = java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = new java.util.ArrayList<java.lang.Integer>(changeCardsData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(changeCardsData_);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        return changeCardsData_.size();
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsData(int index) {
        return changeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChangeCardsDataIsMutable();
        super.addAll(values, changeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 4;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000008;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 5;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 6;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000020;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 7;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 8;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 8;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 9;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000100;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 10;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000200;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 11;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 11;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 display_time = 11;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 11;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000400;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 11;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000400);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 user_card_count = 12;
      private int userCardCount_ ;
      /**
       * <code>optional int32 user_card_count = 12;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public boolean hasUserCardCount() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 user_card_count = 12;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCount() {
        return userCardCount_;
      }
      /**
       * <code>optional int32 user_card_count = 12;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setUserCardCount(int value) {
        bitField0_ |= 0x00000800;
        userCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_card_count = 12;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearUserCardCount() {
        bitField0_ = (bitField0_ & ~0x00000800);
        userCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_cards_data = 13;
      private java.util.List<java.lang.Integer> userCardsData_ = java.util.Collections.emptyList();
      private void ensureUserCardsDataIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          userCardsData_ = new java.util.ArrayList<java.lang.Integer>(userCardsData_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 user_cards_data = 13;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCardsDataList() {
        return java.util.Collections.unmodifiableList(userCardsData_);
      }
      /**
       * <code>repeated int32 user_cards_data = 13;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getUserCardsDataCount() {
        return userCardsData_.size();
      }
      /**
       * <code>repeated int32 user_cards_data = 13;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getUserCardsData(int index) {
        return userCardsData_.get(index);
      }
      /**
       * <code>repeated int32 user_cards_data = 13;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, int value) {
        ensureUserCardsDataIsMutable();
        userCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_cards_data = 13;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(int value) {
        ensureUserCardsDataIsMutable();
        userCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_cards_data = 13;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllUserCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCardsDataIsMutable();
        super.addAll(values, userCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_cards_data = 13;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearUserCardsData() {
        userCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 14;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00002000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00002000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_ya_pai = 15;
      private int isYaPai_ ;
      /**
       * <code>optional int32 is_ya_pai = 15;</code>
       *
       * <pre>
       *是否能压牌
       * </pre>
       */
      public boolean hasIsYaPai() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 is_ya_pai = 15;</code>
       *
       * <pre>
       *是否能压牌
       * </pre>
       */
      public int getIsYaPai() {
        return isYaPai_;
      }
      /**
       * <code>optional int32 is_ya_pai = 15;</code>
       *
       * <pre>
       *是否能压牌
       * </pre>
       */
      public Builder setIsYaPai(int value) {
        bitField0_ |= 0x00004000;
        isYaPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_ya_pai = 15;</code>
       *
       * <pre>
       *是否能压牌
       * </pre>
       */
      public Builder clearIsYaPai() {
        bitField0_ = (bitField0_ & ~0x00004000);
        isYaPai_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.OutCardData_DDZ_LF)
    }

    static {
      defaultInstance = new OutCardData_DDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.OutCardData_DDZ_LF)
  }

  public interface PukeGameEnd_DDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional int32 cur_round = 2;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getCurRound();

    // optional int32 game_round = 3;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    int getGameRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 boom_card_num = 6;
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getBoomCardNumList();
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    int getBoomCardNumCount();
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    int getBoomCardNum(int index);

    // repeated int32 end_score = 7;
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    int getEndScore(int index);

    // optional int32 player_num = 8;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 banker_player = 9;
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 reason = 10;
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 chun_tian_player = 11;
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    java.util.List<java.lang.Integer> getChunTianPlayerList();
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    int getChunTianPlayerCount();
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    int getChunTianPlayer(int index);

    // repeated int32 all_boom_card_num = 12;
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllBoomCardNumList();
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllBoomCardNumCount();
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllBoomCardNum(int index);

    // repeated int32 all_end_score = 13;
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated int32 end_score_max = 14;
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreMaxList();
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMaxCount();
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMax(int index);

    // repeated int32 win_num = 15;
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinNumList();
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNumCount();
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNum(int index);

    // repeated int32 lose_num = 16;
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getLoseNumList();
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNumCount();
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNum(int index);

    // repeated .RoomPlayerResponse players = 17;
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 cell_score = 18;
    /**
     * <code>repeated int32 cell_score = 18;</code>
     */
    java.util.List<java.lang.Integer> getCellScoreList();
    /**
     * <code>repeated int32 cell_score = 18;</code>
     */
    int getCellScoreCount();
    /**
     * <code>repeated int32 cell_score = 18;</code>
     */
    int getCellScore(int index);

    // repeated int32 times = 19;
    /**
     * <code>repeated int32 times = 19;</code>
     */
    java.util.List<java.lang.Integer> getTimesList();
    /**
     * <code>repeated int32 times = 19;</code>
     */
    int getTimesCount();
    /**
     * <code>repeated int32 times = 19;</code>
     */
    int getTimes(int index);
  }
  /**
   * Protobuf type {@code ddz_lf.PukeGameEnd_DDZ_LF}
   *
   * <pre>
   *结算 1004
   * </pre>
   */
  public static final class PukeGameEnd_DDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEnd_DDZ_LFOrBuilder {
    // Use PukeGameEnd_DDZ_LF.newBuilder() to construct.
    private PukeGameEnd_DDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEnd_DDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEnd_DDZ_LF defaultInstance;
    public static PukeGameEnd_DDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEnd_DDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEnd_DDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              curRound_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameRound_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              boomCardNum_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                boomCardNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              playerNum_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              reason_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                chunTianPlayer_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              chunTianPlayer_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                chunTianPlayer_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                chunTianPlayer_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              allBoomCardNum_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                allBoomCardNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              endScoreMax_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              winNum_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              loseNum_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                loseNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00010000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                cellScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              cellScore_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                cellScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cellScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                times_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              times_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                times_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                times_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          chunTianPlayer_ = java.util.Collections.unmodifiableList(chunTianPlayer_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          allBoomCardNum_ = java.util.Collections.unmodifiableList(allBoomCardNum_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          cellScore_ = java.util.Collections.unmodifiableList(cellScore_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          times_ = java.util.Collections.unmodifiableList(times_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_PukeGameEnd_DDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_PukeGameEnd_DDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEnd_DDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEnd_DDZ_LF>() {
      public PukeGameEnd_DDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEnd_DDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEnd_DDZ_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 cur_round = 2;
    public static final int CUR_ROUND_FIELD_NUMBER = 2;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_round = 3;
    public static final int GAME_ROUND_FIELD_NUMBER = 3;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 boom_card_num = 6;
    public static final int BOOM_CARD_NUM_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> boomCardNum_;
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBoomCardNumList() {
      return boomCardNum_;
    }
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public int getBoomCardNumCount() {
      return boomCardNum_.size();
    }
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public int getBoomCardNum(int index) {
      return boomCardNum_.get(index);
    }

    // repeated int32 end_score = 7;
    public static final int END_SCORE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // optional int32 player_num = 8;
    public static final int PLAYER_NUM_FIELD_NUMBER = 8;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 banker_player = 9;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 9;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 reason = 10;
    public static final int REASON_FIELD_NUMBER = 10;
    private int reason_;
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 chun_tian_player = 11;
    public static final int CHUN_TIAN_PLAYER_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> chunTianPlayer_;
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChunTianPlayerList() {
      return chunTianPlayer_;
    }
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    public int getChunTianPlayerCount() {
      return chunTianPlayer_.size();
    }
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    public int getChunTianPlayer(int index) {
      return chunTianPlayer_.get(index);
    }

    // repeated int32 all_boom_card_num = 12;
    public static final int ALL_BOOM_CARD_NUM_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> allBoomCardNum_;
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllBoomCardNumList() {
      return allBoomCardNum_;
    }
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllBoomCardNumCount() {
      return allBoomCardNum_.size();
    }
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllBoomCardNum(int index) {
      return allBoomCardNum_.get(index);
    }

    // repeated int32 all_end_score = 13;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 end_score_max = 14;
    public static final int END_SCORE_MAX_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> endScoreMax_;
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreMaxList() {
      return endScoreMax_;
    }
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMaxCount() {
      return endScoreMax_.size();
    }
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMax(int index) {
      return endScoreMax_.get(index);
    }

    // repeated int32 win_num = 15;
    public static final int WIN_NUM_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> winNum_;
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinNumList() {
      return winNum_;
    }
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNumCount() {
      return winNum_.size();
    }
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNum(int index) {
      return winNum_.get(index);
    }

    // repeated int32 lose_num = 16;
    public static final int LOSE_NUM_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> loseNum_;
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLoseNumList() {
      return loseNum_;
    }
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNumCount() {
      return loseNum_.size();
    }
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNum(int index) {
      return loseNum_.get(index);
    }

    // repeated .RoomPlayerResponse players = 17;
    public static final int PLAYERS_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 cell_score = 18;
    public static final int CELL_SCORE_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> cellScore_;
    /**
     * <code>repeated int32 cell_score = 18;</code>
     */
    public java.util.List<java.lang.Integer>
        getCellScoreList() {
      return cellScore_;
    }
    /**
     * <code>repeated int32 cell_score = 18;</code>
     */
    public int getCellScoreCount() {
      return cellScore_.size();
    }
    /**
     * <code>repeated int32 cell_score = 18;</code>
     */
    public int getCellScore(int index) {
      return cellScore_.get(index);
    }

    // repeated int32 times = 19;
    public static final int TIMES_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> times_;
    /**
     * <code>repeated int32 times = 19;</code>
     */
    public java.util.List<java.lang.Integer>
        getTimesList() {
      return times_;
    }
    /**
     * <code>repeated int32 times = 19;</code>
     */
    public int getTimesCount() {
      return times_.size();
    }
    /**
     * <code>repeated int32 times = 19;</code>
     */
    public int getTimes(int index) {
      return times_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      curRound_ = 0;
      gameRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      boomCardNum_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      bankerPlayer_ = 0;
      reason_ = 0;
      chunTianPlayer_ = java.util.Collections.emptyList();
      allBoomCardNum_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      endScoreMax_ = java.util.Collections.emptyList();
      winNum_ = java.util.Collections.emptyList();
      loseNum_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
      cellScore_ = java.util.Collections.emptyList();
      times_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameRound_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      for (int i = 0; i < boomCardNum_.size(); i++) {
        output.writeInt32(6, boomCardNum_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(7, endScore_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, reason_);
      }
      for (int i = 0; i < chunTianPlayer_.size(); i++) {
        output.writeInt32(11, chunTianPlayer_.get(i));
      }
      for (int i = 0; i < allBoomCardNum_.size(); i++) {
        output.writeInt32(12, allBoomCardNum_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(13, allEndScore_.get(i));
      }
      for (int i = 0; i < endScoreMax_.size(); i++) {
        output.writeInt32(14, endScoreMax_.get(i));
      }
      for (int i = 0; i < winNum_.size(); i++) {
        output.writeInt32(15, winNum_.get(i));
      }
      for (int i = 0; i < loseNum_.size(); i++) {
        output.writeInt32(16, loseNum_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(17, players_.get(i));
      }
      for (int i = 0; i < cellScore_.size(); i++) {
        output.writeInt32(18, cellScore_.get(i));
      }
      for (int i = 0; i < times_.size(); i++) {
        output.writeInt32(19, times_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boomCardNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boomCardNum_.get(i));
        }
        size += dataSize;
        size += 1 * getBoomCardNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chunTianPlayer_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chunTianPlayer_.get(i));
        }
        size += dataSize;
        size += 1 * getChunTianPlayerList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allBoomCardNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allBoomCardNum_.get(i));
        }
        size += dataSize;
        size += 1 * getAllBoomCardNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScoreMax_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreMaxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winNum_.get(i));
        }
        size += dataSize;
        size += 1 * getWinNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < loseNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(loseNum_.get(i));
        }
        size += dataSize;
        size += 2 * getLoseNumList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cellScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cellScore_.get(i));
        }
        size += dataSize;
        size += 2 * getCellScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < times_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(times_.get(i));
        }
        size += dataSize;
        size += 2 * getTimesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.PukeGameEnd_DDZ_LF}
     *
     * <pre>
     *结算 1004
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_PukeGameEnd_DDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_PukeGameEnd_DDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        chunTianPlayer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        allBoomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
        } else {
          playersBuilder_.clear();
        }
        cellScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        times_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_PukeGameEnd_DDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRound_ = gameRound_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.boomCardNum_ = boomCardNum_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.endScore_ = endScore_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          chunTianPlayer_ = java.util.Collections.unmodifiableList(chunTianPlayer_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.chunTianPlayer_ = chunTianPlayer_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          allBoomCardNum_ = java.util.Collections.unmodifiableList(allBoomCardNum_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.allBoomCardNum_ = allBoomCardNum_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.endScoreMax_ = endScoreMax_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.winNum_ = winNum_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.loseNum_ = loseNum_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          cellScore_ = java.util.Collections.unmodifiableList(cellScore_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.cellScore_ = cellScore_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          times_ = java.util.Collections.unmodifiableList(times_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.times_ = times_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.boomCardNum_.isEmpty()) {
          if (boomCardNum_.isEmpty()) {
            boomCardNum_ = other.boomCardNum_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureBoomCardNumIsMutable();
            boomCardNum_.addAll(other.boomCardNum_);
          }
          onChanged();
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.chunTianPlayer_.isEmpty()) {
          if (chunTianPlayer_.isEmpty()) {
            chunTianPlayer_ = other.chunTianPlayer_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureChunTianPlayerIsMutable();
            chunTianPlayer_.addAll(other.chunTianPlayer_);
          }
          onChanged();
        }
        if (!other.allBoomCardNum_.isEmpty()) {
          if (allBoomCardNum_.isEmpty()) {
            allBoomCardNum_ = other.allBoomCardNum_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureAllBoomCardNumIsMutable();
            allBoomCardNum_.addAll(other.allBoomCardNum_);
          }
          onChanged();
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.endScoreMax_.isEmpty()) {
          if (endScoreMax_.isEmpty()) {
            endScoreMax_ = other.endScoreMax_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureEndScoreMaxIsMutable();
            endScoreMax_.addAll(other.endScoreMax_);
          }
          onChanged();
        }
        if (!other.winNum_.isEmpty()) {
          if (winNum_.isEmpty()) {
            winNum_ = other.winNum_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureWinNumIsMutable();
            winNum_.addAll(other.winNum_);
          }
          onChanged();
        }
        if (!other.loseNum_.isEmpty()) {
          if (loseNum_.isEmpty()) {
            loseNum_ = other.loseNum_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureLoseNumIsMutable();
            loseNum_.addAll(other.loseNum_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00010000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.cellScore_.isEmpty()) {
          if (cellScore_.isEmpty()) {
            cellScore_ = other.cellScore_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureCellScoreIsMutable();
            cellScore_.addAll(other.cellScore_);
          }
          onChanged();
        }
        if (!other.times_.isEmpty()) {
          if (times_.isEmpty()) {
            times_ = other.times_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureTimesIsMutable();
            times_.addAll(other.times_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.PukeGameEnd_DDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 cur_round = 2;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000002;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 3;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000004;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 boom_card_num = 6;
      private java.util.List<java.lang.Integer> boomCardNum_ = java.util.Collections.emptyList();
      private void ensureBoomCardNumIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = new java.util.ArrayList<java.lang.Integer>(boomCardNum_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBoomCardNumList() {
        return java.util.Collections.unmodifiableList(boomCardNum_);
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public int getBoomCardNumCount() {
        return boomCardNum_.size();
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public int getBoomCardNum(int index) {
        return boomCardNum_.get(index);
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder setBoomCardNum(
          int index, int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder addBoomCardNum(int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder addAllBoomCardNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoomCardNumIsMutable();
        super.addAll(values, boomCardNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder clearBoomCardNum() {
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 end_score = 7;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional int32 player_num = 8;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000080;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000080);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 9;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000100;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000100);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 10;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000200;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000200);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 chun_tian_player = 11;
      private java.util.List<java.lang.Integer> chunTianPlayer_ = java.util.Collections.emptyList();
      private void ensureChunTianPlayerIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          chunTianPlayer_ = new java.util.ArrayList<java.lang.Integer>(chunTianPlayer_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChunTianPlayerList() {
        return java.util.Collections.unmodifiableList(chunTianPlayer_);
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public int getChunTianPlayerCount() {
        return chunTianPlayer_.size();
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public int getChunTianPlayer(int index) {
        return chunTianPlayer_.get(index);
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder setChunTianPlayer(
          int index, int value) {
        ensureChunTianPlayerIsMutable();
        chunTianPlayer_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder addChunTianPlayer(int value) {
        ensureChunTianPlayerIsMutable();
        chunTianPlayer_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder addAllChunTianPlayer(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChunTianPlayerIsMutable();
        super.addAll(values, chunTianPlayer_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder clearChunTianPlayer() {
        chunTianPlayer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 all_boom_card_num = 12;
      private java.util.List<java.lang.Integer> allBoomCardNum_ = java.util.Collections.emptyList();
      private void ensureAllBoomCardNumIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>(allBoomCardNum_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllBoomCardNumList() {
        return java.util.Collections.unmodifiableList(allBoomCardNum_);
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllBoomCardNumCount() {
        return allBoomCardNum_.size();
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllBoomCardNum(int index) {
        return allBoomCardNum_.get(index);
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllBoomCardNum(
          int index, int value) {
        ensureAllBoomCardNumIsMutable();
        allBoomCardNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllBoomCardNum(int value) {
        ensureAllBoomCardNumIsMutable();
        allBoomCardNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllBoomCardNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllBoomCardNumIsMutable();
        super.addAll(values, allBoomCardNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllBoomCardNum() {
        allBoomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated int32 all_end_score = 13;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 end_score_max = 14;
      private java.util.List<java.lang.Integer> endScoreMax_ = java.util.Collections.emptyList();
      private void ensureEndScoreMaxIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          endScoreMax_ = new java.util.ArrayList<java.lang.Integer>(endScoreMax_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreMaxList() {
        return java.util.Collections.unmodifiableList(endScoreMax_);
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMaxCount() {
        return endScoreMax_.size();
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMax(int index) {
        return endScoreMax_.get(index);
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder setEndScoreMax(
          int index, int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addEndScoreMax(int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addAllEndScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreMaxIsMutable();
        super.addAll(values, endScoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder clearEndScoreMax() {
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 win_num = 15;
      private java.util.List<java.lang.Integer> winNum_ = java.util.Collections.emptyList();
      private void ensureWinNumIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          winNum_ = new java.util.ArrayList<java.lang.Integer>(winNum_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinNumList() {
        return java.util.Collections.unmodifiableList(winNum_);
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNumCount() {
        return winNum_.size();
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNum(int index) {
        return winNum_.get(index);
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder setWinNum(
          int index, int value) {
        ensureWinNumIsMutable();
        winNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addWinNum(int value) {
        ensureWinNumIsMutable();
        winNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addAllWinNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinNumIsMutable();
        super.addAll(values, winNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder clearWinNum() {
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated int32 lose_num = 16;
      private java.util.List<java.lang.Integer> loseNum_ = java.util.Collections.emptyList();
      private void ensureLoseNumIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          loseNum_ = new java.util.ArrayList<java.lang.Integer>(loseNum_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLoseNumList() {
        return java.util.Collections.unmodifiableList(loseNum_);
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNumCount() {
        return loseNum_.size();
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNum(int index) {
        return loseNum_.get(index);
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder setLoseNum(
          int index, int value) {
        ensureLoseNumIsMutable();
        loseNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addLoseNum(int value) {
        ensureLoseNumIsMutable();
        loseNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addAllLoseNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLoseNumIsMutable();
        super.addAll(values, loseNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder clearLoseNum() {
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 17;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00010000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00010000) == 0x00010000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 cell_score = 18;
      private java.util.List<java.lang.Integer> cellScore_ = java.util.Collections.emptyList();
      private void ensureCellScoreIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          cellScore_ = new java.util.ArrayList<java.lang.Integer>(cellScore_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 cell_score = 18;</code>
       */
      public java.util.List<java.lang.Integer>
          getCellScoreList() {
        return java.util.Collections.unmodifiableList(cellScore_);
      }
      /**
       * <code>repeated int32 cell_score = 18;</code>
       */
      public int getCellScoreCount() {
        return cellScore_.size();
      }
      /**
       * <code>repeated int32 cell_score = 18;</code>
       */
      public int getCellScore(int index) {
        return cellScore_.get(index);
      }
      /**
       * <code>repeated int32 cell_score = 18;</code>
       */
      public Builder setCellScore(
          int index, int value) {
        ensureCellScoreIsMutable();
        cellScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cell_score = 18;</code>
       */
      public Builder addCellScore(int value) {
        ensureCellScoreIsMutable();
        cellScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cell_score = 18;</code>
       */
      public Builder addAllCellScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCellScoreIsMutable();
        super.addAll(values, cellScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cell_score = 18;</code>
       */
      public Builder clearCellScore() {
        cellScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // repeated int32 times = 19;
      private java.util.List<java.lang.Integer> times_ = java.util.Collections.emptyList();
      private void ensureTimesIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          times_ = new java.util.ArrayList<java.lang.Integer>(times_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 times = 19;</code>
       */
      public java.util.List<java.lang.Integer>
          getTimesList() {
        return java.util.Collections.unmodifiableList(times_);
      }
      /**
       * <code>repeated int32 times = 19;</code>
       */
      public int getTimesCount() {
        return times_.size();
      }
      /**
       * <code>repeated int32 times = 19;</code>
       */
      public int getTimes(int index) {
        return times_.get(index);
      }
      /**
       * <code>repeated int32 times = 19;</code>
       */
      public Builder setTimes(
          int index, int value) {
        ensureTimesIsMutable();
        times_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 times = 19;</code>
       */
      public Builder addTimes(int value) {
        ensureTimesIsMutable();
        times_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 times = 19;</code>
       */
      public Builder addAllTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTimesIsMutable();
        super.addAll(values, times_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 times = 19;</code>
       */
      public Builder clearTimes() {
        times_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.PukeGameEnd_DDZ_LF)
    }

    static {
      defaultInstance = new PukeGameEnd_DDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.PukeGameEnd_DDZ_LF)
  }

  public interface TableResponse_DDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated .Int32ArrayResponse change_cards_data = 6;
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getChangeCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChangeCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 7;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_pass = 8;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // repeated int32 card_type = 9;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 10;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_change_cards_data = 11;
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // repeated int32 pr_cards_data = 12;
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 13;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 14;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 display_time = 15;
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 16;
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 17;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 user_card_count = 18;
    /**
     * <code>optional int32 user_card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    boolean hasUserCardCount();
    /**
     * <code>optional int32 user_card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCount();

    // repeated int32 user_cards_data = 19;
    /**
     * <code>repeated int32 user_cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCardsDataList();
    /**
     * <code>repeated int32 user_cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getUserCardsDataCount();
    /**
     * <code>repeated int32 user_cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getUserCardsData(int index);

    // optional int32 is_ya_pai = 20;
    /**
     * <code>optional int32 is_ya_pai = 20;</code>
     *
     * <pre>
     *是否能压牌
     * </pre>
     */
    boolean hasIsYaPai();
    /**
     * <code>optional int32 is_ya_pai = 20;</code>
     *
     * <pre>
     *是否能压牌
     * </pre>
     */
    int getIsYaPai();

    // optional .RoomInfo room_info = 21;
    /**
     * <code>optional .RoomInfo room_info = 21;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 21;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 21;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 22;
    /**
     * <code>repeated .RoomPlayerResponse players = 22;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 22;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 22;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 22;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 22;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 is_first_out = 23;
    /**
     * <code>optional int32 is_first_out = 23;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 23;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    int getIsFirstOut();
  }
  /**
   * Protobuf type {@code ddz_lf.TableResponse_DDZ_LF}
   *
   * <pre>
   *1005
   * </pre>
   */
  public static final class TableResponse_DDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements TableResponse_DDZ_LFOrBuilder {
    // Use TableResponse_DDZ_LF.newBuilder() to construct.
    private TableResponse_DDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponse_DDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponse_DDZ_LF defaultInstance;
    public static TableResponse_DDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponse_DDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponse_DDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                changeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000020;
              }
              changeCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000040;
              displayTime_ = input.readInt32();
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00010000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 144: {
              bitField0_ |= 0x00000080;
              userCardCount_ = input.readInt32();
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                userCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              userCardsData_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                userCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              bitField0_ |= 0x00000100;
              isYaPai_ = input.readInt32();
              break;
            }
            case 170: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 178: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00200000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 184: {
              bitField0_ |= 0x00000400;
              isFirstOut_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_TableResponse_DDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_TableResponse_DDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponse_DDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<TableResponse_DDZ_LF>() {
      public TableResponse_DDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponse_DDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponse_DDZ_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated .Int32ArrayResponse change_cards_data = 6;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> changeCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChangeCardsDataOrBuilderList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
        int index) {
      return changeCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 7;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_pass = 8;
    public static final int PLAYER_PASS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // repeated int32 card_type = 9;
    public static final int CARD_TYPE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 10;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 10;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_change_cards_data = 11;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // repeated int32 pr_cards_data = 12;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 13;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 13;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 14;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 14;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 display_time = 15;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 15;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 16;
    public static final int CARD_COUNT_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 17;
    public static final int CARDS_DATA_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 user_card_count = 18;
    public static final int USER_CARD_COUNT_FIELD_NUMBER = 18;
    private int userCardCount_;
    /**
     * <code>optional int32 user_card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public boolean hasUserCardCount() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 user_card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCount() {
      return userCardCount_;
    }

    // repeated int32 user_cards_data = 19;
    public static final int USER_CARDS_DATA_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> userCardsData_;
    /**
     * <code>repeated int32 user_cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCardsDataList() {
      return userCardsData_;
    }
    /**
     * <code>repeated int32 user_cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getUserCardsDataCount() {
      return userCardsData_.size();
    }
    /**
     * <code>repeated int32 user_cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getUserCardsData(int index) {
      return userCardsData_.get(index);
    }

    // optional int32 is_ya_pai = 20;
    public static final int IS_YA_PAI_FIELD_NUMBER = 20;
    private int isYaPai_;
    /**
     * <code>optional int32 is_ya_pai = 20;</code>
     *
     * <pre>
     *是否能压牌
     * </pre>
     */
    public boolean hasIsYaPai() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 is_ya_pai = 20;</code>
     *
     * <pre>
     *是否能压牌
     * </pre>
     */
    public int getIsYaPai() {
      return isYaPai_;
    }

    // optional .RoomInfo room_info = 21;
    public static final int ROOM_INFO_FIELD_NUMBER = 21;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 21;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .RoomInfo room_info = 21;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 21;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 22;
    public static final int PLAYERS_FIELD_NUMBER = 22;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 22;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 22;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 22;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 22;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 22;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 is_first_out = 23;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 23;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 23;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 is_first_out = 23;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerPass_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      userCardCount_ = 0;
      userCardsData_ = java.util.Collections.emptyList();
      isYaPai_ = 0;
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      isFirstOut_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeMessage(6, changeCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(7, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(8, playerPass_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(9, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(10, prOutCardPlayer_);
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(11, prChangeCardsData_.get(i));
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(12, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(15, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(16, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(17, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(18, userCardCount_);
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        output.writeInt32(19, userCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(20, isYaPai_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(21, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(22, players_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(23, isFirstOut_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, changeCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerPassList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, userCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCardsData_.get(i));
        }
        size += dataSize;
        size += 2 * getUserCardsDataList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, isYaPai_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, players_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(23, isFirstOut_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.TableResponse_DDZ_LF}
     *
     * <pre>
     *1005
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_TableResponse_DDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_TableResponse_DDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getChangeCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        if (changeCardsDataBuilder_ == null) {
          changeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          changeCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
        } else {
          cardsDataBuilder_.clear();
        }
        userCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        userCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        isYaPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
        } else {
          playersBuilder_.clear();
        }
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_TableResponse_DDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (changeCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.changeCardsData_ = changeCardsData_;
        } else {
          result.changeCardsData_ = changeCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.playerPass_ = playerPass_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.userCardCount_ = userCardCount_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.userCardsData_ = userCardsData_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.isYaPai_ = isYaPai_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000200;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00200000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isFirstOut_ = isFirstOut_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (changeCardsDataBuilder_ == null) {
          if (!other.changeCardsData_.isEmpty()) {
            if (changeCardsData_.isEmpty()) {
              changeCardsData_ = other.changeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureChangeCardsDataIsMutable();
              changeCardsData_.addAll(other.changeCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.changeCardsData_.isEmpty()) {
            if (changeCardsDataBuilder_.isEmpty()) {
              changeCardsDataBuilder_.dispose();
              changeCardsDataBuilder_ = null;
              changeCardsData_ = other.changeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
              changeCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChangeCardsDataFieldBuilder() : null;
            } else {
              changeCardsDataBuilder_.addAllMessages(other.changeCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00010000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasUserCardCount()) {
          setUserCardCount(other.getUserCardCount());
        }
        if (!other.userCardsData_.isEmpty()) {
          if (userCardsData_.isEmpty()) {
            userCardsData_ = other.userCardsData_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureUserCardsDataIsMutable();
            userCardsData_.addAll(other.userCardsData_);
          }
          onChanged();
        }
        if (other.hasIsYaPai()) {
          setIsYaPai(other.getIsYaPai());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00200000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00200000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.TableResponse_DDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated .Int32ArrayResponse change_cards_data = 6;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> changeCardsData_ =
        java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          changeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(changeCardsData_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> changeCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChangeCardsDataList() {
        if (changeCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(changeCardsData_);
        } else {
          return changeCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.size();
        } else {
          return changeCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index) {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.get(index);
        } else {
          return changeCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.set(index, value);
          onChanged();
        } else {
          changeCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(value);
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(index, value);
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          super.addAll(values, changeCardsData_);
          onChanged();
        } else {
          changeCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        if (changeCardsDataBuilder_ == null) {
          changeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          changeCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder removeChangeCardsData(int index) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.remove(index);
          onChanged();
        } else {
          changeCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getChangeCardsDataBuilder(
          int index) {
        return getChangeCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
          int index) {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.get(index);  } else {
          return changeCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getChangeCardsDataOrBuilderList() {
        if (changeCardsDataBuilder_ != null) {
          return changeCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(changeCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChangeCardsDataBuilder() {
        return getChangeCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChangeCardsDataBuilder(
          int index) {
        return getChangeCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getChangeCardsDataBuilderList() {
        return getChangeCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getChangeCardsDataFieldBuilder() {
        if (changeCardsDataBuilder_ == null) {
          changeCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  changeCardsData_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          changeCardsData_ = null;
        }
        return changeCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 7;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 8;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 9;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 10;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000200;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 11;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 12;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 13;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00001000;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00001000);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 14;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00002000;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00002000);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 15;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00004000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00004000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 16;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 17;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00010000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00010000) == 0x00010000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 user_card_count = 18;
      private int userCardCount_ ;
      /**
       * <code>optional int32 user_card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public boolean hasUserCardCount() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 user_card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCount() {
        return userCardCount_;
      }
      /**
       * <code>optional int32 user_card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setUserCardCount(int value) {
        bitField0_ |= 0x00020000;
        userCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearUserCardCount() {
        bitField0_ = (bitField0_ & ~0x00020000);
        userCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_cards_data = 19;
      private java.util.List<java.lang.Integer> userCardsData_ = java.util.Collections.emptyList();
      private void ensureUserCardsDataIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          userCardsData_ = new java.util.ArrayList<java.lang.Integer>(userCardsData_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 user_cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCardsDataList() {
        return java.util.Collections.unmodifiableList(userCardsData_);
      }
      /**
       * <code>repeated int32 user_cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getUserCardsDataCount() {
        return userCardsData_.size();
      }
      /**
       * <code>repeated int32 user_cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getUserCardsData(int index) {
        return userCardsData_.get(index);
      }
      /**
       * <code>repeated int32 user_cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, int value) {
        ensureUserCardsDataIsMutable();
        userCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(int value) {
        ensureUserCardsDataIsMutable();
        userCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllUserCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCardsDataIsMutable();
        super.addAll(values, userCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearUserCardsData() {
        userCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // optional int32 is_ya_pai = 20;
      private int isYaPai_ ;
      /**
       * <code>optional int32 is_ya_pai = 20;</code>
       *
       * <pre>
       *是否能压牌
       * </pre>
       */
      public boolean hasIsYaPai() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 is_ya_pai = 20;</code>
       *
       * <pre>
       *是否能压牌
       * </pre>
       */
      public int getIsYaPai() {
        return isYaPai_;
      }
      /**
       * <code>optional int32 is_ya_pai = 20;</code>
       *
       * <pre>
       *是否能压牌
       * </pre>
       */
      public Builder setIsYaPai(int value) {
        bitField0_ |= 0x00080000;
        isYaPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_ya_pai = 20;</code>
       *
       * <pre>
       *是否能压牌
       * </pre>
       */
      public Builder clearIsYaPai() {
        bitField0_ = (bitField0_ & ~0x00080000);
        isYaPai_ = 0;
        onChanged();
        return this;
      }

      // optional .RoomInfo room_info = 21;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 21;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .RoomInfo room_info = 21;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 21;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 21;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 21;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 21;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 21;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 21;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 22;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00200000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 22;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00200000) == 0x00200000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 is_first_out = 23;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 23;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional int32 is_first_out = 23;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 23;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00400000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 23;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00400000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.TableResponse_DDZ_LF)
    }

    static {
      defaultInstance = new TableResponse_DDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.TableResponse_DDZ_LF)
  }

  public interface Send_Card_DDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_count = 1;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 type = 3;
    /**
     * <code>optional int32 type = 3;</code>
     *
     * <pre>
     *0：第一次发牌  1：重新发牌
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 3;</code>
     *
     * <pre>
     *0：第一次发牌  1：重新发牌
     * </pre>
     */
    int getType();
  }
  /**
   * Protobuf type {@code ddz_lf.Send_Card_DDZ_LF}
   *
   * <pre>
   *1006
   * </pre>
   */
  public static final class Send_Card_DDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements Send_Card_DDZ_LFOrBuilder {
    // Use Send_Card_DDZ_LF.newBuilder() to construct.
    private Send_Card_DDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Send_Card_DDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Send_Card_DDZ_LF defaultInstance;
    public static Send_Card_DDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public Send_Card_DDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Send_Card_DDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              type_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_Card_DDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_Card_DDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<Send_Card_DDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<Send_Card_DDZ_LF>() {
      public Send_Card_DDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Send_Card_DDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Send_Card_DDZ_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 type = 3;
    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <code>optional int32 type = 3;</code>
     *
     * <pre>
     *0：第一次发牌  1：重新发牌
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 type = 3;</code>
     *
     * <pre>
     *0：第一次发牌  1：重新发牌
     * </pre>
     */
    public int getType() {
      return type_;
    }

    private void initFields() {
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      type_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(1, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, type_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, type_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.Send_Card_DDZ_LF}
     *
     * <pre>
     *1006
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_Card_DDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_Card_DDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_Card_DDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF.getDefaultInstance()) return this;
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Card_DDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_count = 1;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 type = 3;
      private int type_ ;
      /**
       * <code>optional int32 type = 3;</code>
       *
       * <pre>
       *0：第一次发牌  1：重新发牌
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 type = 3;</code>
       *
       * <pre>
       *0：第一次发牌  1：重新发牌
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 3;</code>
       *
       * <pre>
       *0：第一次发牌  1：重新发牌
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000004;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 3;</code>
       *
       * <pre>
       *0：第一次发牌  1：重新发牌
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.Send_Card_DDZ_LF)
    }

    static {
      defaultInstance = new Send_Card_DDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.Send_Card_DDZ_LF)
  }

  public interface PlayerControl_DDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 type = 1;
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     *操作类型 1:叫地主 2提 3：回提
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     *操作类型 1:叫地主 2提 3：回提
     * </pre>
     */
    int getType();

    // optional int32 prv_type = 8;
    /**
     * <code>optional int32 prv_type = 8;</code>
     *
     * <pre>
     *上一个操作类型
     * </pre>
     */
    boolean hasPrvType();
    /**
     * <code>optional int32 prv_type = 8;</code>
     *
     * <pre>
     *上一个操作类型
     * </pre>
     */
    int getPrvType();

    // optional int32 call_player = 2;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *上一个操作玩家
     * </pre>
     */
    boolean hasCallPlayer();
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *上一个操作玩家
     * </pre>
     */
    int getCallPlayer();

    // optional int32 call_action = 3;
    /**
     * <code>optional int32 call_action = 3;</code>
     *
     * <pre>
     *具体操作  0都为否
     * </pre>
     */
    boolean hasCallAction();
    /**
     * <code>optional int32 call_action = 3;</code>
     *
     * <pre>
     *具体操作  0都为否
     * </pre>
     */
    int getCallAction();

    // optional int32 current_player = 4;
    /**
     * <code>optional int32 current_player = 4;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 4;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // repeated int32 all_call_action = 5;
    /**
     * <code>repeated int32 all_call_action = 5;</code>
     *
     * <pre>
     *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllCallActionList();
    /**
     * <code>repeated int32 all_call_action = 5;</code>
     *
     * <pre>
     *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
     * </pre>
     */
    int getAllCallActionCount();
    /**
     * <code>repeated int32 all_call_action = 5;</code>
     *
     * <pre>
     *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
     * </pre>
     */
    int getAllCallAction(int index);

    // repeated int32 current_player_call_action = 6;
    /**
     * <code>repeated int32 current_player_call_action = 6;</code>
     *
     * <pre>
     *当前玩家操作按钮
     * </pre>
     */
    java.util.List<java.lang.Integer> getCurrentPlayerCallActionList();
    /**
     * <code>repeated int32 current_player_call_action = 6;</code>
     *
     * <pre>
     *当前玩家操作按钮
     * </pre>
     */
    int getCurrentPlayerCallActionCount();
    /**
     * <code>repeated int32 current_player_call_action = 6;</code>
     *
     * <pre>
     *当前玩家操作按钮
     * </pre>
     */
    int getCurrentPlayerCallAction(int index);

    // optional int32 display_time = 7;
    /**
     * <code>optional int32 display_time = 7;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 7;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code ddz_lf.PlayerControl_DDZ_LF}
   *
   * <pre>
   *1007
   *用户操作
   * </pre>
   */
  public static final class PlayerControl_DDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements PlayerControl_DDZ_LFOrBuilder {
    // Use PlayerControl_DDZ_LF.newBuilder() to construct.
    private PlayerControl_DDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlayerControl_DDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PlayerControl_DDZ_LF defaultInstance;
    public static PlayerControl_DDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public PlayerControl_DDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PlayerControl_DDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              type_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000004;
              callPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000008;
              callAction_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000010;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                allCallAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              allCallAction_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                allCallAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                allCallAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                currentPlayerCallAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              currentPlayerCallAction_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                currentPlayerCallAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                currentPlayerCallAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              displayTime_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000002;
              prvType_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          allCallAction_ = java.util.Collections.unmodifiableList(allCallAction_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          currentPlayerCallAction_ = java.util.Collections.unmodifiableList(currentPlayerCallAction_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_PlayerControl_DDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_PlayerControl_DDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<PlayerControl_DDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<PlayerControl_DDZ_LF>() {
      public PlayerControl_DDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlayerControl_DDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlayerControl_DDZ_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     *操作类型 1:叫地主 2提 3：回提
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     *操作类型 1:叫地主 2提 3：回提
     * </pre>
     */
    public int getType() {
      return type_;
    }

    // optional int32 prv_type = 8;
    public static final int PRV_TYPE_FIELD_NUMBER = 8;
    private int prvType_;
    /**
     * <code>optional int32 prv_type = 8;</code>
     *
     * <pre>
     *上一个操作类型
     * </pre>
     */
    public boolean hasPrvType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 prv_type = 8;</code>
     *
     * <pre>
     *上一个操作类型
     * </pre>
     */
    public int getPrvType() {
      return prvType_;
    }

    // optional int32 call_player = 2;
    public static final int CALL_PLAYER_FIELD_NUMBER = 2;
    private int callPlayer_;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *上一个操作玩家
     * </pre>
     */
    public boolean hasCallPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *上一个操作玩家
     * </pre>
     */
    public int getCallPlayer() {
      return callPlayer_;
    }

    // optional int32 call_action = 3;
    public static final int CALL_ACTION_FIELD_NUMBER = 3;
    private int callAction_;
    /**
     * <code>optional int32 call_action = 3;</code>
     *
     * <pre>
     *具体操作  0都为否
     * </pre>
     */
    public boolean hasCallAction() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 call_action = 3;</code>
     *
     * <pre>
     *具体操作  0都为否
     * </pre>
     */
    public int getCallAction() {
      return callAction_;
    }

    // optional int32 current_player = 4;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 4;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 4;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 current_player = 4;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // repeated int32 all_call_action = 5;
    public static final int ALL_CALL_ACTION_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> allCallAction_;
    /**
     * <code>repeated int32 all_call_action = 5;</code>
     *
     * <pre>
     *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllCallActionList() {
      return allCallAction_;
    }
    /**
     * <code>repeated int32 all_call_action = 5;</code>
     *
     * <pre>
     *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
     * </pre>
     */
    public int getAllCallActionCount() {
      return allCallAction_.size();
    }
    /**
     * <code>repeated int32 all_call_action = 5;</code>
     *
     * <pre>
     *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
     * </pre>
     */
    public int getAllCallAction(int index) {
      return allCallAction_.get(index);
    }

    // repeated int32 current_player_call_action = 6;
    public static final int CURRENT_PLAYER_CALL_ACTION_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> currentPlayerCallAction_;
    /**
     * <code>repeated int32 current_player_call_action = 6;</code>
     *
     * <pre>
     *当前玩家操作按钮
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCurrentPlayerCallActionList() {
      return currentPlayerCallAction_;
    }
    /**
     * <code>repeated int32 current_player_call_action = 6;</code>
     *
     * <pre>
     *当前玩家操作按钮
     * </pre>
     */
    public int getCurrentPlayerCallActionCount() {
      return currentPlayerCallAction_.size();
    }
    /**
     * <code>repeated int32 current_player_call_action = 6;</code>
     *
     * <pre>
     *当前玩家操作按钮
     * </pre>
     */
    public int getCurrentPlayerCallAction(int index) {
      return currentPlayerCallAction_.get(index);
    }

    // optional int32 display_time = 7;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 7;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 7;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 display_time = 7;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      type_ = 0;
      prvType_ = 0;
      callPlayer_ = 0;
      callAction_ = 0;
      currentPlayer_ = 0;
      allCallAction_ = java.util.Collections.emptyList();
      currentPlayerCallAction_ = java.util.Collections.emptyList();
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, type_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(3, callAction_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(4, currentPlayer_);
      }
      for (int i = 0; i < allCallAction_.size(); i++) {
        output.writeInt32(5, allCallAction_.get(i));
      }
      for (int i = 0; i < currentPlayerCallAction_.size(); i++) {
        output.writeInt32(6, currentPlayerCallAction_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, displayTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(8, prvType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, type_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, callAction_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, currentPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allCallAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allCallAction_.get(i));
        }
        size += dataSize;
        size += 1 * getAllCallActionList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < currentPlayerCallAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(currentPlayerCallAction_.get(i));
        }
        size += dataSize;
        size += 1 * getCurrentPlayerCallActionList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, displayTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, prvType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.PlayerControl_DDZ_LF}
     *
     * <pre>
     *1007
     *用户操作
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_PlayerControl_DDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_PlayerControl_DDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        prvType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        callPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        callAction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        allCallAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        currentPlayerCallAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_PlayerControl_DDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.prvType_ = prvType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.callPlayer_ = callPlayer_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.callAction_ = callAction_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          allCallAction_ = java.util.Collections.unmodifiableList(allCallAction_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.allCallAction_ = allCallAction_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          currentPlayerCallAction_ = java.util.Collections.unmodifiableList(currentPlayerCallAction_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.currentPlayerCallAction_ = currentPlayerCallAction_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasPrvType()) {
          setPrvType(other.getPrvType());
        }
        if (other.hasCallPlayer()) {
          setCallPlayer(other.getCallPlayer());
        }
        if (other.hasCallAction()) {
          setCallAction(other.getCallAction());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (!other.allCallAction_.isEmpty()) {
          if (allCallAction_.isEmpty()) {
            allCallAction_ = other.allCallAction_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureAllCallActionIsMutable();
            allCallAction_.addAll(other.allCallAction_);
          }
          onChanged();
        }
        if (!other.currentPlayerCallAction_.isEmpty()) {
          if (currentPlayerCallAction_.isEmpty()) {
            currentPlayerCallAction_ = other.currentPlayerCallAction_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureCurrentPlayerCallActionIsMutable();
            currentPlayerCallAction_.addAll(other.currentPlayerCallAction_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.PlayerControl_DDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 type = 1;
      private int type_ ;
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       *操作类型 1:叫地主 2提 3：回提
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       *操作类型 1:叫地主 2提 3：回提
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       *操作类型 1:叫地主 2提 3：回提
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       *操作类型 1:叫地主 2提 3：回提
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prv_type = 8;
      private int prvType_ ;
      /**
       * <code>optional int32 prv_type = 8;</code>
       *
       * <pre>
       *上一个操作类型
       * </pre>
       */
      public boolean hasPrvType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 prv_type = 8;</code>
       *
       * <pre>
       *上一个操作类型
       * </pre>
       */
      public int getPrvType() {
        return prvType_;
      }
      /**
       * <code>optional int32 prv_type = 8;</code>
       *
       * <pre>
       *上一个操作类型
       * </pre>
       */
      public Builder setPrvType(int value) {
        bitField0_ |= 0x00000002;
        prvType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prv_type = 8;</code>
       *
       * <pre>
       *上一个操作类型
       * </pre>
       */
      public Builder clearPrvType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        prvType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_player = 2;
      private int callPlayer_ ;
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *上一个操作玩家
       * </pre>
       */
      public boolean hasCallPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *上一个操作玩家
       * </pre>
       */
      public int getCallPlayer() {
        return callPlayer_;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *上一个操作玩家
       * </pre>
       */
      public Builder setCallPlayer(int value) {
        bitField0_ |= 0x00000004;
        callPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *上一个操作玩家
       * </pre>
       */
      public Builder clearCallPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        callPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_action = 3;
      private int callAction_ ;
      /**
       * <code>optional int32 call_action = 3;</code>
       *
       * <pre>
       *具体操作  0都为否
       * </pre>
       */
      public boolean hasCallAction() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 call_action = 3;</code>
       *
       * <pre>
       *具体操作  0都为否
       * </pre>
       */
      public int getCallAction() {
        return callAction_;
      }
      /**
       * <code>optional int32 call_action = 3;</code>
       *
       * <pre>
       *具体操作  0都为否
       * </pre>
       */
      public Builder setCallAction(int value) {
        bitField0_ |= 0x00000008;
        callAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_action = 3;</code>
       *
       * <pre>
       *具体操作  0都为否
       * </pre>
       */
      public Builder clearCallAction() {
        bitField0_ = (bitField0_ & ~0x00000008);
        callAction_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 4;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 4;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 current_player = 4;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 4;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000010;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 4;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000010);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 all_call_action = 5;
      private java.util.List<java.lang.Integer> allCallAction_ = java.util.Collections.emptyList();
      private void ensureAllCallActionIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          allCallAction_ = new java.util.ArrayList<java.lang.Integer>(allCallAction_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 all_call_action = 5;</code>
       *
       * <pre>
       *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllCallActionList() {
        return java.util.Collections.unmodifiableList(allCallAction_);
      }
      /**
       * <code>repeated int32 all_call_action = 5;</code>
       *
       * <pre>
       *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
       * </pre>
       */
      public int getAllCallActionCount() {
        return allCallAction_.size();
      }
      /**
       * <code>repeated int32 all_call_action = 5;</code>
       *
       * <pre>
       *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
       * </pre>
       */
      public int getAllCallAction(int index) {
        return allCallAction_.get(index);
      }
      /**
       * <code>repeated int32 all_call_action = 5;</code>
       *
       * <pre>
       *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
       * </pre>
       */
      public Builder setAllCallAction(
          int index, int value) {
        ensureAllCallActionIsMutable();
        allCallAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_call_action = 5;</code>
       *
       * <pre>
       *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
       * </pre>
       */
      public Builder addAllCallAction(int value) {
        ensureAllCallActionIsMutable();
        allCallAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_call_action = 5;</code>
       *
       * <pre>
       *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
       * </pre>
       */
      public Builder addAllAllCallAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllCallActionIsMutable();
        super.addAll(values, allCallAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_call_action = 5;</code>
       *
       * <pre>
       *所有的玩家操作 -1：未操作 0：不提 1：提 2：回提
       * </pre>
       */
      public Builder clearAllCallAction() {
        allCallAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 current_player_call_action = 6;
      private java.util.List<java.lang.Integer> currentPlayerCallAction_ = java.util.Collections.emptyList();
      private void ensureCurrentPlayerCallActionIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          currentPlayerCallAction_ = new java.util.ArrayList<java.lang.Integer>(currentPlayerCallAction_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 current_player_call_action = 6;</code>
       *
       * <pre>
       *当前玩家操作按钮
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCurrentPlayerCallActionList() {
        return java.util.Collections.unmodifiableList(currentPlayerCallAction_);
      }
      /**
       * <code>repeated int32 current_player_call_action = 6;</code>
       *
       * <pre>
       *当前玩家操作按钮
       * </pre>
       */
      public int getCurrentPlayerCallActionCount() {
        return currentPlayerCallAction_.size();
      }
      /**
       * <code>repeated int32 current_player_call_action = 6;</code>
       *
       * <pre>
       *当前玩家操作按钮
       * </pre>
       */
      public int getCurrentPlayerCallAction(int index) {
        return currentPlayerCallAction_.get(index);
      }
      /**
       * <code>repeated int32 current_player_call_action = 6;</code>
       *
       * <pre>
       *当前玩家操作按钮
       * </pre>
       */
      public Builder setCurrentPlayerCallAction(
          int index, int value) {
        ensureCurrentPlayerCallActionIsMutable();
        currentPlayerCallAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 current_player_call_action = 6;</code>
       *
       * <pre>
       *当前玩家操作按钮
       * </pre>
       */
      public Builder addCurrentPlayerCallAction(int value) {
        ensureCurrentPlayerCallActionIsMutable();
        currentPlayerCallAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 current_player_call_action = 6;</code>
       *
       * <pre>
       *当前玩家操作按钮
       * </pre>
       */
      public Builder addAllCurrentPlayerCallAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCurrentPlayerCallActionIsMutable();
        super.addAll(values, currentPlayerCallAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 current_player_call_action = 6;</code>
       *
       * <pre>
       *当前玩家操作按钮
       * </pre>
       */
      public Builder clearCurrentPlayerCallAction() {
        currentPlayerCallAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional int32 display_time = 7;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 7;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 display_time = 7;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 7;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000080;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 7;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000080);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.PlayerControl_DDZ_LF)
    }

    static {
      defaultInstance = new PlayerControl_DDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.PlayerControl_DDZ_LF)
  }

  public interface CallBankerResult_DDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    int getBankerPlayer();
  }
  /**
   * Protobuf type {@code ddz_lf.CallBankerResult_DDZ_LF}
   *
   * <pre>
   *叫庄结果 1008
   * </pre>
   */
  public static final class CallBankerResult_DDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResult_DDZ_LFOrBuilder {
    // Use CallBankerResult_DDZ_LF.newBuilder() to construct.
    private CallBankerResult_DDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResult_DDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResult_DDZ_LF defaultInstance;
    public static CallBankerResult_DDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResult_DDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResult_DDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_CallBankerResult_DDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_CallBankerResult_DDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResult_DDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResult_DDZ_LF>() {
      public CallBankerResult_DDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResult_DDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResult_DDZ_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.CallBankerResult_DDZ_LF}
     *
     * <pre>
     *叫庄结果 1008
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_CallBankerResult_DDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_CallBankerResult_DDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_CallBankerResult_DDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.CallBankerResult_DDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.CallBankerResult_DDZ_LF)
    }

    static {
      defaultInstance = new CallBankerResult_DDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.CallBankerResult_DDZ_LF)
  }

  public interface Send_Last_Card_DDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 card_count = 1;
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    int getCardCount();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_type = 3;
    /**
     * <code>optional int32 cards_type = 3;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    boolean hasCardsType();
    /**
     * <code>optional int32 cards_type = 3;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    int getCardsType();

    // optional int32 cards_times = 4;
    /**
     * <code>optional int32 cards_times = 4;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    boolean hasCardsTimes();
    /**
     * <code>optional int32 cards_times = 4;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    int getCardsTimes();

    // optional int32 game_times = 5;
    /**
     * <code>optional int32 game_times = 5;</code>
     *
     * <pre>
     *游戏倍数
     * </pre>
     */
    boolean hasGameTimes();
    /**
     * <code>optional int32 game_times = 5;</code>
     *
     * <pre>
     *游戏倍数
     * </pre>
     */
    int getGameTimes();

    // optional bool show_dipai_action = 6;
    /**
     * <code>optional bool show_dipai_action = 6;</code>
     *
     * <pre>
     *播放底牌动画
     * </pre>
     */
    boolean hasShowDipaiAction();
    /**
     * <code>optional bool show_dipai_action = 6;</code>
     *
     * <pre>
     *播放底牌动画
     * </pre>
     */
    boolean getShowDipaiAction();
  }
  /**
   * Protobuf type {@code ddz_lf.Send_Last_Card_DDZ_LF}
   *
   * <pre>
   *发底牌 1009
   * </pre>
   */
  public static final class Send_Last_Card_DDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements Send_Last_Card_DDZ_LFOrBuilder {
    // Use Send_Last_Card_DDZ_LF.newBuilder() to construct.
    private Send_Last_Card_DDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Send_Last_Card_DDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Send_Last_Card_DDZ_LF defaultInstance;
    public static Send_Last_Card_DDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public Send_Last_Card_DDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Send_Last_Card_DDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cardCount_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              cardsType_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              cardsTimes_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              gameTimes_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              showDipaiAction_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_Last_Card_DDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_Last_Card_DDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<Send_Last_Card_DDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<Send_Last_Card_DDZ_LF>() {
      public Send_Last_Card_DDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Send_Last_Card_DDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Send_Last_Card_DDZ_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_type = 3;
    public static final int CARDS_TYPE_FIELD_NUMBER = 3;
    private int cardsType_;
    /**
     * <code>optional int32 cards_type = 3;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    public boolean hasCardsType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_type = 3;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    public int getCardsType() {
      return cardsType_;
    }

    // optional int32 cards_times = 4;
    public static final int CARDS_TIMES_FIELD_NUMBER = 4;
    private int cardsTimes_;
    /**
     * <code>optional int32 cards_times = 4;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    public boolean hasCardsTimes() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 cards_times = 4;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    public int getCardsTimes() {
      return cardsTimes_;
    }

    // optional int32 game_times = 5;
    public static final int GAME_TIMES_FIELD_NUMBER = 5;
    private int gameTimes_;
    /**
     * <code>optional int32 game_times = 5;</code>
     *
     * <pre>
     *游戏倍数
     * </pre>
     */
    public boolean hasGameTimes() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 game_times = 5;</code>
     *
     * <pre>
     *游戏倍数
     * </pre>
     */
    public int getGameTimes() {
      return gameTimes_;
    }

    // optional bool show_dipai_action = 6;
    public static final int SHOW_DIPAI_ACTION_FIELD_NUMBER = 6;
    private boolean showDipaiAction_;
    /**
     * <code>optional bool show_dipai_action = 6;</code>
     *
     * <pre>
     *播放底牌动画
     * </pre>
     */
    public boolean hasShowDipaiAction() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool show_dipai_action = 6;</code>
     *
     * <pre>
     *播放底牌动画
     * </pre>
     */
    public boolean getShowDipaiAction() {
      return showDipaiAction_;
    }

    private void initFields() {
      cardCount_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsType_ = 0;
      cardsTimes_ = 0;
      gameTimes_ = 0;
      showDipaiAction_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cardCount_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, cardsType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, cardsTimes_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, gameTimes_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(6, showDipaiAction_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cardsType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsTimes_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, gameTimes_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, showDipaiAction_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.Send_Last_Card_DDZ_LF}
     *
     * <pre>
     *发底牌 1009
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_Last_Card_DDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_Last_Card_DDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        gameTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        showDipaiAction_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_Last_Card_DDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardCount_ = cardCount_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsType_ = cardsType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardsTimes_ = cardsTimes_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.gameTimes_ = gameTimes_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.showDipaiAction_ = showDipaiAction_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF.getDefaultInstance()) return this;
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsType()) {
          setCardsType(other.getCardsType());
        }
        if (other.hasCardsTimes()) {
          setCardsTimes(other.getCardsTimes());
        }
        if (other.hasGameTimes()) {
          setGameTimes(other.getGameTimes());
        }
        if (other.hasShowDipaiAction()) {
          setShowDipaiAction(other.getShowDipaiAction());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.Send_Last_Card_DDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 card_count = 1;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000001;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 cards_type = 3;
      private int cardsType_ ;
      /**
       * <code>optional int32 cards_type = 3;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public boolean hasCardsType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cards_type = 3;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public int getCardsType() {
        return cardsType_;
      }
      /**
       * <code>optional int32 cards_type = 3;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public Builder setCardsType(int value) {
        bitField0_ |= 0x00000004;
        cardsType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_type = 3;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public Builder clearCardsType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cards_times = 4;
      private int cardsTimes_ ;
      /**
       * <code>optional int32 cards_times = 4;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public boolean hasCardsTimes() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_times = 4;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public int getCardsTimes() {
        return cardsTimes_;
      }
      /**
       * <code>optional int32 cards_times = 4;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public Builder setCardsTimes(int value) {
        bitField0_ |= 0x00000008;
        cardsTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_times = 4;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public Builder clearCardsTimes() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsTimes_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_times = 5;
      private int gameTimes_ ;
      /**
       * <code>optional int32 game_times = 5;</code>
       *
       * <pre>
       *游戏倍数
       * </pre>
       */
      public boolean hasGameTimes() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 game_times = 5;</code>
       *
       * <pre>
       *游戏倍数
       * </pre>
       */
      public int getGameTimes() {
        return gameTimes_;
      }
      /**
       * <code>optional int32 game_times = 5;</code>
       *
       * <pre>
       *游戏倍数
       * </pre>
       */
      public Builder setGameTimes(int value) {
        bitField0_ |= 0x00000010;
        gameTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_times = 5;</code>
       *
       * <pre>
       *游戏倍数
       * </pre>
       */
      public Builder clearGameTimes() {
        bitField0_ = (bitField0_ & ~0x00000010);
        gameTimes_ = 0;
        onChanged();
        return this;
      }

      // optional bool show_dipai_action = 6;
      private boolean showDipaiAction_ ;
      /**
       * <code>optional bool show_dipai_action = 6;</code>
       *
       * <pre>
       *播放底牌动画
       * </pre>
       */
      public boolean hasShowDipaiAction() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool show_dipai_action = 6;</code>
       *
       * <pre>
       *播放底牌动画
       * </pre>
       */
      public boolean getShowDipaiAction() {
        return showDipaiAction_;
      }
      /**
       * <code>optional bool show_dipai_action = 6;</code>
       *
       * <pre>
       *播放底牌动画
       * </pre>
       */
      public Builder setShowDipaiAction(boolean value) {
        bitField0_ |= 0x00000020;
        showDipaiAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool show_dipai_action = 6;</code>
       *
       * <pre>
       *播放底牌动画
       * </pre>
       */
      public Builder clearShowDipaiAction() {
        bitField0_ = (bitField0_ & ~0x00000020);
        showDipaiAction_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.Send_Last_Card_DDZ_LF)
    }

    static {
      defaultInstance = new Send_Last_Card_DDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.Send_Last_Card_DDZ_LF)
  }

  public interface Send_SpecialCard_DDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 card_count = 1;
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 action_type = 3;
    /**
     * <code>optional int32 action_type = 3;</code>
     *
     * <pre>
     *1 先叫 2 赖子
     * </pre>
     */
    boolean hasActionType();
    /**
     * <code>optional int32 action_type = 3;</code>
     *
     * <pre>
     *1 先叫 2 赖子
     * </pre>
     */
    int getActionType();

    // optional int32 action_chair = 4;
    /**
     * <code>optional int32 action_chair = 4;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasActionChair();
    /**
     * <code>optional int32 action_chair = 4;</code>
     *
     * <pre>
     * </pre>
     */
    int getActionChair();
  }
  /**
   * Protobuf type {@code ddz_lf.Send_SpecialCard_DDZ_LF}
   *
   * <pre>
   *首出牌 或者 赖子牌动画等 1010
   * </pre>
   */
  public static final class Send_SpecialCard_DDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements Send_SpecialCard_DDZ_LFOrBuilder {
    // Use Send_SpecialCard_DDZ_LF.newBuilder() to construct.
    private Send_SpecialCard_DDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Send_SpecialCard_DDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Send_SpecialCard_DDZ_LF defaultInstance;
    public static Send_SpecialCard_DDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public Send_SpecialCard_DDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Send_SpecialCard_DDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cardCount_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              actionType_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              actionChair_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_SpecialCard_DDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_SpecialCard_DDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<Send_SpecialCard_DDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<Send_SpecialCard_DDZ_LF>() {
      public Send_SpecialCard_DDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Send_SpecialCard_DDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Send_SpecialCard_DDZ_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 action_type = 3;
    public static final int ACTION_TYPE_FIELD_NUMBER = 3;
    private int actionType_;
    /**
     * <code>optional int32 action_type = 3;</code>
     *
     * <pre>
     *1 先叫 2 赖子
     * </pre>
     */
    public boolean hasActionType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 action_type = 3;</code>
     *
     * <pre>
     *1 先叫 2 赖子
     * </pre>
     */
    public int getActionType() {
      return actionType_;
    }

    // optional int32 action_chair = 4;
    public static final int ACTION_CHAIR_FIELD_NUMBER = 4;
    private int actionChair_;
    /**
     * <code>optional int32 action_chair = 4;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasActionChair() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 action_chair = 4;</code>
     *
     * <pre>
     * </pre>
     */
    public int getActionChair() {
      return actionChair_;
    }

    private void initFields() {
      cardCount_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      actionType_ = 0;
      actionChair_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cardCount_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, actionType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, actionChair_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, actionType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, actionChair_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.Send_SpecialCard_DDZ_LF}
     *
     * <pre>
     *首出牌 或者 赖子牌动画等 1010
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_SpecialCard_DDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_SpecialCard_DDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        actionType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        actionChair_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Send_SpecialCard_DDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardCount_ = cardCount_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.actionType_ = actionType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.actionChair_ = actionChair_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF.getDefaultInstance()) return this;
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasActionType()) {
          setActionType(other.getActionType());
        }
        if (other.hasActionChair()) {
          setActionChair(other.getActionChair());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.Send_SpecialCard_DDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 card_count = 1;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000001;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 action_type = 3;
      private int actionType_ ;
      /**
       * <code>optional int32 action_type = 3;</code>
       *
       * <pre>
       *1 先叫 2 赖子
       * </pre>
       */
      public boolean hasActionType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 action_type = 3;</code>
       *
       * <pre>
       *1 先叫 2 赖子
       * </pre>
       */
      public int getActionType() {
        return actionType_;
      }
      /**
       * <code>optional int32 action_type = 3;</code>
       *
       * <pre>
       *1 先叫 2 赖子
       * </pre>
       */
      public Builder setActionType(int value) {
        bitField0_ |= 0x00000004;
        actionType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 action_type = 3;</code>
       *
       * <pre>
       *1 先叫 2 赖子
       * </pre>
       */
      public Builder clearActionType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        actionType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 action_chair = 4;
      private int actionChair_ ;
      /**
       * <code>optional int32 action_chair = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasActionChair() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 action_chair = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public int getActionChair() {
        return actionChair_;
      }
      /**
       * <code>optional int32 action_chair = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setActionChair(int value) {
        bitField0_ |= 0x00000008;
        actionChair_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 action_chair = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearActionChair() {
        bitField0_ = (bitField0_ & ~0x00000008);
        actionChair_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.Send_SpecialCard_DDZ_LF)
    }

    static {
      defaultInstance = new Send_SpecialCard_DDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.Send_SpecialCard_DDZ_LF)
  }

  public interface effect_type_DDZ_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 type = 1;
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     *1流局
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     *1流局
     * </pre>
     */
    int getType();

    // optional int32 target_seat = 2;
    /**
     * <code>optional int32 target_seat = 2;</code>
     *
     * <pre>
     *目标位置
     * </pre>
     */
    boolean hasTargetSeat();
    /**
     * <code>optional int32 target_seat = 2;</code>
     *
     * <pre>
     *目标位置
     * </pre>
     */
    int getTargetSeat();
  }
  /**
   * Protobuf type {@code ddz_lf.effect_type_DDZ_LF}
   *
   * <pre>
   *特效 1011
   * </pre>
   */
  public static final class effect_type_DDZ_LF extends
      com.google.protobuf.GeneratedMessage
      implements effect_type_DDZ_LFOrBuilder {
    // Use effect_type_DDZ_LF.newBuilder() to construct.
    private effect_type_DDZ_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private effect_type_DDZ_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final effect_type_DDZ_LF defaultInstance;
    public static effect_type_DDZ_LF getDefaultInstance() {
      return defaultInstance;
    }

    public effect_type_DDZ_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private effect_type_DDZ_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              type_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              targetSeat_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_effect_type_DDZ_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_effect_type_DDZ_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<effect_type_DDZ_LF> PARSER =
        new com.google.protobuf.AbstractParser<effect_type_DDZ_LF>() {
      public effect_type_DDZ_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new effect_type_DDZ_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<effect_type_DDZ_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     *1流局
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     *1流局
     * </pre>
     */
    public int getType() {
      return type_;
    }

    // optional int32 target_seat = 2;
    public static final int TARGET_SEAT_FIELD_NUMBER = 2;
    private int targetSeat_;
    /**
     * <code>optional int32 target_seat = 2;</code>
     *
     * <pre>
     *目标位置
     * </pre>
     */
    public boolean hasTargetSeat() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 target_seat = 2;</code>
     *
     * <pre>
     *目标位置
     * </pre>
     */
    public int getTargetSeat() {
      return targetSeat_;
    }

    private void initFields() {
      type_ = 0;
      targetSeat_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, targetSeat_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, targetSeat_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.effect_type_DDZ_LF}
     *
     * <pre>
     *特效 1011
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_effect_type_DDZ_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_effect_type_DDZ_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        targetSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_effect_type_DDZ_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.targetSeat_ = targetSeat_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasTargetSeat()) {
          setTargetSeat(other.getTargetSeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.effect_type_DDZ_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 type = 1;
      private int type_ ;
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       *1流局
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       *1流局
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       *1流局
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       *1流局
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      // optional int32 target_seat = 2;
      private int targetSeat_ ;
      /**
       * <code>optional int32 target_seat = 2;</code>
       *
       * <pre>
       *目标位置
       * </pre>
       */
      public boolean hasTargetSeat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 target_seat = 2;</code>
       *
       * <pre>
       *目标位置
       * </pre>
       */
      public int getTargetSeat() {
        return targetSeat_;
      }
      /**
       * <code>optional int32 target_seat = 2;</code>
       *
       * <pre>
       *目标位置
       * </pre>
       */
      public Builder setTargetSeat(int value) {
        bitField0_ |= 0x00000002;
        targetSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 target_seat = 2;</code>
       *
       * <pre>
       *目标位置
       * </pre>
       */
      public Builder clearTargetSeat() {
        bitField0_ = (bitField0_ & ~0x00000002);
        targetSeat_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.effect_type_DDZ_LF)
    }

    static {
      defaultInstance = new effect_type_DDZ_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.effect_type_DDZ_LF)
  }

  public interface Opreate_RequestDdz_LFOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_type = 1;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：叫地主 2：踢
     * </pre>
     */
    boolean hasOpreateType();
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：叫地主 2：踢
     * </pre>
     */
    int getOpreateType();

    // optional int32 action = 2;
    /**
     * <code>optional int32 action = 2;</code>
     *
     * <pre>
     *动作
     * </pre>
     */
    boolean hasAction();
    /**
     * <code>optional int32 action = 2;</code>
     *
     * <pre>
     *动作
     * </pre>
     */
    int getAction();
  }
  /**
   * Protobuf type {@code ddz_lf.Opreate_RequestDdz_LF}
   *
   * <pre>
   *请求 1072
   * </pre>
   */
  public static final class Opreate_RequestDdz_LF extends
      com.google.protobuf.GeneratedMessage
      implements Opreate_RequestDdz_LFOrBuilder {
    // Use Opreate_RequestDdz_LF.newBuilder() to construct.
    private Opreate_RequestDdz_LF(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Opreate_RequestDdz_LF(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Opreate_RequestDdz_LF defaultInstance;
    public static Opreate_RequestDdz_LF getDefaultInstance() {
      return defaultInstance;
    }

    public Opreate_RequestDdz_LF getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Opreate_RequestDdz_LF(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              action_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Opreate_RequestDdz_LF_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Opreate_RequestDdz_LF_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF.Builder.class);
    }

    public static com.google.protobuf.Parser<Opreate_RequestDdz_LF> PARSER =
        new com.google.protobuf.AbstractParser<Opreate_RequestDdz_LF>() {
      public Opreate_RequestDdz_LF parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Opreate_RequestDdz_LF(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Opreate_RequestDdz_LF> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_type = 1;
    public static final int OPREATE_TYPE_FIELD_NUMBER = 1;
    private int opreateType_;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：叫地主 2：踢
     * </pre>
     */
    public boolean hasOpreateType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：叫地主 2：踢
     * </pre>
     */
    public int getOpreateType() {
      return opreateType_;
    }

    // optional int32 action = 2;
    public static final int ACTION_FIELD_NUMBER = 2;
    private int action_;
    /**
     * <code>optional int32 action = 2;</code>
     *
     * <pre>
     *动作
     * </pre>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 action = 2;</code>
     *
     * <pre>
     *动作
     * </pre>
     */
    public int getAction() {
      return action_;
    }

    private void initFields() {
      opreateType_ = 0;
      action_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, action_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, action_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ddz_lf.Opreate_RequestDdz_LF}
     *
     * <pre>
     *请求 1072
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LFOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Opreate_RequestDdz_LF_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Opreate_RequestDdz_LF_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF.class, protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF.Builder.class);
      }

      // Construct using protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.internal_static_ddz_lf_Opreate_RequestDdz_LF_descriptor;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF getDefaultInstanceForType() {
        return protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF.getDefaultInstance();
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF build() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF buildPartial() {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF result = new protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateType_ = opreateType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.action_ = action_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF) {
          return mergeFrom((protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF other) {
        if (other == protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF.getDefaultInstance()) return this;
        if (other.hasOpreateType()) {
          setOpreateType(other.getOpreateType());
        }
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.ddz_lf.ddz_lfRsp.Opreate_RequestDdz_LF) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_type = 1;
      private int opreateType_ ;
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：叫地主 2：踢
       * </pre>
       */
      public boolean hasOpreateType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：叫地主 2：踢
       * </pre>
       */
      public int getOpreateType() {
        return opreateType_;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：叫地主 2：踢
       * </pre>
       */
      public Builder setOpreateType(int value) {
        bitField0_ |= 0x00000001;
        opreateType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：叫地主 2：踢
       * </pre>
       */
      public Builder clearOpreateType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 action = 2;
      private int action_ ;
      /**
       * <code>optional int32 action = 2;</code>
       *
       * <pre>
       *动作
       * </pre>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 action = 2;</code>
       *
       * <pre>
       *动作
       * </pre>
       */
      public int getAction() {
        return action_;
      }
      /**
       * <code>optional int32 action = 2;</code>
       *
       * <pre>
       *动作
       * </pre>
       */
      public Builder setAction(int value) {
        bitField0_ |= 0x00000002;
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 action = 2;</code>
       *
       * <pre>
       *动作
       * </pre>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000002);
        action_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ddz_lf.Opreate_RequestDdz_LF)
    }

    static {
      defaultInstance = new Opreate_RequestDdz_LF(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ddz_lf.Opreate_RequestDdz_LF)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_GameStartDDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_GameStartDDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_RefreshCards_DDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_RefreshCards_DDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_OutCardData_DDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_OutCardData_DDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_PukeGameEnd_DDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_PukeGameEnd_DDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_TableResponse_DDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_TableResponse_DDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_Send_Card_DDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_Send_Card_DDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_PlayerControl_DDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_PlayerControl_DDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_CallBankerResult_DDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_CallBankerResult_DDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_Send_Last_Card_DDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_Send_Last_Card_DDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_Send_SpecialCard_DDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_Send_SpecialCard_DDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_effect_type_DDZ_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_effect_type_DDZ_LF_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ddz_lf_Opreate_RequestDdz_LF_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ddz_lf_Opreate_RequestDdz_LF_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017ddz/lfddz.proto\022\006ddz_lf\032\024basic/protoco" +
      "l.proto\"U\n\017GameStartDDZ_LF\022\034\n\troom_info\030" +
      "\001 \001(\0132\t.RoomInfo\022$\n\007players\030\002 \003(\0132\023.Room" +
      "PlayerResponse\"\\\n\023RefreshCards_DDZ_LF\022\027\n" +
      "\017hand_card_count\030\001 \003(\005\022,\n\017hand_cards_dat" +
      "a\030\002 \003(\0132\023.Int32ArrayResponse\"\360\002\n\022OutCard" +
      "Data_DDZ_LF\022\027\n\017out_card_player\030\001 \001(\005\022\022\n\n" +
      "cards_data\030\002 \003(\005\022\031\n\021change_cards_data\030\003 " +
      "\003(\005\022\023\n\013cards_count\030\004 \001(\005\022\021\n\tcard_type\030\005 " +
      "\001(\005\022\022\n\ncur_player\030\006 \001(\005\022\025\n\rpr_cards_data",
      "\030\007 \003(\005\022\034\n\024pr_change_cards_data\030\010 \003(\005\022\026\n\016" +
      "pr_cards_count\030\t \001(\005\022\030\n\020pr_out_card_type" +
      "\030\n \001(\005\022\024\n\014display_time\030\013 \001(\005\022\027\n\017user_car" +
      "d_count\030\014 \001(\005\022\027\n\017user_cards_data\030\r \003(\005\022\024" +
      "\n\014is_first_out\030\016 \001(\005\022\021\n\tis_ya_pai\030\017 \001(\005\"" +
      "\312\003\n\022PukeGameEnd_DDZ_LF\022\034\n\troom_info\030\001 \001(" +
      "\0132\t.RoomInfo\022\021\n\tcur_round\030\002 \001(\005\022\022\n\ngame_" +
      "round\030\003 \001(\005\022\022\n\ncard_count\030\004 \003(\005\022\'\n\ncards" +
      "_data\030\005 \003(\0132\023.Int32ArrayResponse\022\025\n\rboom" +
      "_card_num\030\006 \003(\005\022\021\n\tend_score\030\007 \003(\005\022\022\n\npl",
      "ayer_num\030\010 \001(\005\022\025\n\rbanker_player\030\t \001(\005\022\016\n" +
      "\006reason\030\n \001(\005\022\030\n\020chun_tian_player\030\013 \003(\005\022" +
      "\031\n\021all_boom_card_num\030\014 \003(\005\022\025\n\rall_end_sc" +
      "ore\030\r \003(\005\022\025\n\rend_score_max\030\016 \003(\005\022\017\n\007win_" +
      "num\030\017 \003(\005\022\020\n\010lose_num\030\020 \003(\005\022$\n\007players\030\021" +
      " \003(\0132\023.RoomPlayerResponse\022\022\n\ncell_score\030" +
      "\022 \003(\005\022\r\n\005times\030\023 \003(\005\"\376\004\n\024TableResponse_D" +
      "DZ_LF\022\025\n\rbanker_player\030\001 \001(\005\022\026\n\016current_" +
      "player\030\002 \001(\005\022\023\n\013prev_player\030\003 \001(\005\022\017\n\007tru" +
      "stee\030\004 \003(\010\022+\n\016out_cards_data\030\005 \003(\0132\023.Int",
      "32ArrayResponse\022.\n\021change_cards_data\030\006 \003" +
      "(\0132\023.Int32ArrayResponse\022\027\n\017out_cards_cou" +
      "nt\030\007 \003(\005\022\023\n\013player_pass\030\010 \003(\005\022\021\n\tcard_ty" +
      "pe\030\t \003(\005\022\032\n\022pr_out_card_player\030\n \001(\005\022\034\n\024" +
      "pr_change_cards_data\030\013 \003(\005\022\025\n\rpr_cards_d" +
      "ata\030\014 \003(\005\022\026\n\016pr_cards_count\030\r \001(\005\022\030\n\020pr_" +
      "out_card_type\030\016 \001(\005\022\024\n\014display_time\030\017 \001(" +
      "\005\022\022\n\ncard_count\030\020 \003(\005\022\'\n\ncards_data\030\021 \003(" +
      "\0132\023.Int32ArrayResponse\022\027\n\017user_card_coun" +
      "t\030\022 \001(\005\022\027\n\017user_cards_data\030\023 \003(\005\022\021\n\tis_y",
      "a_pai\030\024 \001(\005\022\034\n\troom_info\030\025 \001(\0132\t.RoomInf" +
      "o\022$\n\007players\030\026 \003(\0132\023.RoomPlayerResponse\022" +
      "\024\n\014is_first_out\030\027 \001(\005\"]\n\020Send_Card_DDZ_L" +
      "F\022\022\n\ncard_count\030\001 \003(\005\022\'\n\ncards_data\030\002 \003(" +
      "\0132\023.Int32ArrayResponse\022\014\n\004type\030\003 \001(\005\"\313\001\n" +
      "\024PlayerControl_DDZ_LF\022\014\n\004type\030\001 \001(\005\022\020\n\010p" +
      "rv_type\030\010 \001(\005\022\023\n\013call_player\030\002 \001(\005\022\023\n\013ca" +
      "ll_action\030\003 \001(\005\022\026\n\016current_player\030\004 \001(\005\022" +
      "\027\n\017all_call_action\030\005 \003(\005\022\"\n\032current_play" +
      "er_call_action\030\006 \003(\005\022\024\n\014display_time\030\007 \001",
      "(\005\"0\n\027CallBankerResult_DDZ_LF\022\025\n\rbanker_" +
      "player\030\001 \001(\005\"\227\001\n\025Send_Last_Card_DDZ_LF\022\022" +
      "\n\ncard_count\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\022" +
      "\n\ncards_type\030\003 \001(\005\022\023\n\013cards_times\030\004 \001(\005\022" +
      "\022\n\ngame_times\030\005 \001(\005\022\031\n\021show_dipai_action" +
      "\030\006 \001(\010\"l\n\027Send_SpecialCard_DDZ_LF\022\022\n\ncar" +
      "d_count\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\023\n\013act" +
      "ion_type\030\003 \001(\005\022\024\n\014action_chair\030\004 \001(\005\"7\n\022" +
      "effect_type_DDZ_LF\022\014\n\004type\030\001 \001(\005\022\023\n\013targ" +
      "et_seat\030\002 \001(\005\"=\n\025Opreate_RequestDdz_LF\022\024",
      "\n\014opreate_type\030\001 \001(\005\022\016\n\006action\030\002 \001(\005B\"\n\025" +
      "protobuf.clazz.ddz_lfB\tddz_lfRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_ddz_lf_GameStartDDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_ddz_lf_GameStartDDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_GameStartDDZ_LF_descriptor,
              new java.lang.String[] { "RoomInfo", "Players", });
          internal_static_ddz_lf_RefreshCards_DDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_ddz_lf_RefreshCards_DDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_RefreshCards_DDZ_LF_descriptor,
              new java.lang.String[] { "HandCardCount", "HandCardsData", });
          internal_static_ddz_lf_OutCardData_DDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_ddz_lf_OutCardData_DDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_OutCardData_DDZ_LF_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "ChangeCardsData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrChangeCardsData", "PrCardsCount", "PrOutCardType", "DisplayTime", "UserCardCount", "UserCardsData", "IsFirstOut", "IsYaPai", });
          internal_static_ddz_lf_PukeGameEnd_DDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_ddz_lf_PukeGameEnd_DDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_PukeGameEnd_DDZ_LF_descriptor,
              new java.lang.String[] { "RoomInfo", "CurRound", "GameRound", "CardCount", "CardsData", "BoomCardNum", "EndScore", "PlayerNum", "BankerPlayer", "Reason", "ChunTianPlayer", "AllBoomCardNum", "AllEndScore", "EndScoreMax", "WinNum", "LoseNum", "Players", "CellScore", "Times", });
          internal_static_ddz_lf_TableResponse_DDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_ddz_lf_TableResponse_DDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_TableResponse_DDZ_LF_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "ChangeCardsData", "OutCardsCount", "PlayerPass", "CardType", "PrOutCardPlayer", "PrChangeCardsData", "PrCardsData", "PrCardsCount", "PrOutCardType", "DisplayTime", "CardCount", "CardsData", "UserCardCount", "UserCardsData", "IsYaPai", "RoomInfo", "Players", "IsFirstOut", });
          internal_static_ddz_lf_Send_Card_DDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_ddz_lf_Send_Card_DDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_Send_Card_DDZ_LF_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", "Type", });
          internal_static_ddz_lf_PlayerControl_DDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_ddz_lf_PlayerControl_DDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_PlayerControl_DDZ_LF_descriptor,
              new java.lang.String[] { "Type", "PrvType", "CallPlayer", "CallAction", "CurrentPlayer", "AllCallAction", "CurrentPlayerCallAction", "DisplayTime", });
          internal_static_ddz_lf_CallBankerResult_DDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_ddz_lf_CallBankerResult_DDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_CallBankerResult_DDZ_LF_descriptor,
              new java.lang.String[] { "BankerPlayer", });
          internal_static_ddz_lf_Send_Last_Card_DDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_ddz_lf_Send_Last_Card_DDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_Send_Last_Card_DDZ_LF_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", "CardsType", "CardsTimes", "GameTimes", "ShowDipaiAction", });
          internal_static_ddz_lf_Send_SpecialCard_DDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_ddz_lf_Send_SpecialCard_DDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_Send_SpecialCard_DDZ_LF_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", "ActionType", "ActionChair", });
          internal_static_ddz_lf_effect_type_DDZ_LF_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_ddz_lf_effect_type_DDZ_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_effect_type_DDZ_LF_descriptor,
              new java.lang.String[] { "Type", "TargetSeat", });
          internal_static_ddz_lf_Opreate_RequestDdz_LF_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_ddz_lf_Opreate_RequestDdz_LF_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ddz_lf_Opreate_RequestDdz_LF_descriptor,
              new java.lang.String[] { "OpreateType", "Action", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
