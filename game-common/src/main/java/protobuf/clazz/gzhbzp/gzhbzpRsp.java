// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wsk/gzhbzpWsk.proto

package protobuf.clazz.gzhbzp;

public final class gzhbzpRsp {
  private gzhbzpRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RefreshScore_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 user_get_score = 1;
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetScoreList();
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getUserGetScoreCount();
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getUserGetScore(int index);

    // optional int32 table_score = 2;
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    boolean hasTableScore();
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    int getTableScore();

    // repeated int32 xian_qian_score = 3;
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    java.util.List<java.lang.Integer> getXianQianScoreList();
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    int getXianQianScoreCount();
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    int getXianQianScore(int index);
  }
  /**
   * Protobuf type {@code gzhbzp.RefreshScore_gzhbzp}
   *
   * <pre>
   *刷新用户抓分
   * </pre>
   */
  public static final class RefreshScore_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements RefreshScore_gzhbzpOrBuilder {
    // Use RefreshScore_gzhbzp.newBuilder() to construct.
    private RefreshScore_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshScore_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshScore_gzhbzp defaultInstance;
    public static RefreshScore_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshScore_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshScore_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              userGetScore_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              tableScore_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                xianQianScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              xianQianScore_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                xianQianScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                xianQianScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          xianQianScore_ = java.util.Collections.unmodifiableList(xianQianScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshScore_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshScore_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshScore_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<RefreshScore_gzhbzp>() {
      public RefreshScore_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshScore_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshScore_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 user_get_score = 1;
    public static final int USER_GET_SCORE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> userGetScore_;
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetScoreList() {
      return userGetScore_;
    }
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getUserGetScoreCount() {
      return userGetScore_.size();
    }
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getUserGetScore(int index) {
      return userGetScore_.get(index);
    }

    // optional int32 table_score = 2;
    public static final int TABLE_SCORE_FIELD_NUMBER = 2;
    private int tableScore_;
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    public boolean hasTableScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    public int getTableScore() {
      return tableScore_;
    }

    // repeated int32 xian_qian_score = 3;
    public static final int XIAN_QIAN_SCORE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> xianQianScore_;
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getXianQianScoreList() {
      return xianQianScore_;
    }
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    public int getXianQianScoreCount() {
      return xianQianScore_.size();
    }
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    public int getXianQianScore(int index) {
      return xianQianScore_.get(index);
    }

    private void initFields() {
      userGetScore_ = java.util.Collections.emptyList();
      tableScore_ = 0;
      xianQianScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < userGetScore_.size(); i++) {
        output.writeInt32(1, userGetScore_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, tableScore_);
      }
      for (int i = 0; i < xianQianScore_.size(); i++) {
        output.writeInt32(3, xianQianScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < userGetScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetScore_.get(i));
        }
        size += dataSize;
        size += 1 * getUserGetScoreList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, tableScore_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xianQianScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(xianQianScore_.get(i));
        }
        size += dataSize;
        size += 1 * getXianQianScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.RefreshScore_gzhbzp}
     *
     * <pre>
     *刷新用户抓分
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshScore_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshScore_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        tableScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        xianQianScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshScore_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.userGetScore_ = userGetScore_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tableScore_ = tableScore_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          xianQianScore_ = java.util.Collections.unmodifiableList(xianQianScore_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.xianQianScore_ = xianQianScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp.getDefaultInstance()) return this;
        if (!other.userGetScore_.isEmpty()) {
          if (userGetScore_.isEmpty()) {
            userGetScore_ = other.userGetScore_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureUserGetScoreIsMutable();
            userGetScore_.addAll(other.userGetScore_);
          }
          onChanged();
        }
        if (other.hasTableScore()) {
          setTableScore(other.getTableScore());
        }
        if (!other.xianQianScore_.isEmpty()) {
          if (xianQianScore_.isEmpty()) {
            xianQianScore_ = other.xianQianScore_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureXianQianScoreIsMutable();
            xianQianScore_.addAll(other.xianQianScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshScore_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 user_get_score = 1;
      private java.util.List<java.lang.Integer> userGetScore_ = java.util.Collections.emptyList();
      private void ensureUserGetScoreIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          userGetScore_ = new java.util.ArrayList<java.lang.Integer>(userGetScore_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetScoreList() {
        return java.util.Collections.unmodifiableList(userGetScore_);
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getUserGetScoreCount() {
        return userGetScore_.size();
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getUserGetScore(int index) {
        return userGetScore_.get(index);
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder setUserGetScore(
          int index, int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder addUserGetScore(int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder addAllUserGetScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetScoreIsMutable();
        super.addAll(values, userGetScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder clearUserGetScore() {
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 table_score = 2;
      private int tableScore_ ;
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public boolean hasTableScore() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public int getTableScore() {
        return tableScore_;
      }
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public Builder setTableScore(int value) {
        bitField0_ |= 0x00000002;
        tableScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public Builder clearTableScore() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tableScore_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 xian_qian_score = 3;
      private java.util.List<java.lang.Integer> xianQianScore_ = java.util.Collections.emptyList();
      private void ensureXianQianScoreIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          xianQianScore_ = new java.util.ArrayList<java.lang.Integer>(xianQianScore_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXianQianScoreList() {
        return java.util.Collections.unmodifiableList(xianQianScore_);
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public int getXianQianScoreCount() {
        return xianQianScore_.size();
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public int getXianQianScore(int index) {
        return xianQianScore_.get(index);
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder setXianQianScore(
          int index, int value) {
        ensureXianQianScoreIsMutable();
        xianQianScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder addXianQianScore(int value) {
        ensureXianQianScoreIsMutable();
        xianQianScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder addAllXianQianScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureXianQianScoreIsMutable();
        super.addAll(values, xianQianScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder clearXianQianScore() {
        xianQianScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.RefreshScore_gzhbzp)
    }

    static {
      defaultInstance = new RefreshScore_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.RefreshScore_gzhbzp)
  }

  public interface LiangPai_Begin_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_player = 1;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();
  }
  /**
   * Protobuf type {@code gzhbzp.LiangPai_Begin_gzhbzp}
   *
   * <pre>
   *亮牌开始
   * </pre>
   */
  public static final class LiangPai_Begin_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements LiangPai_Begin_gzhbzpOrBuilder {
    // Use LiangPai_Begin_gzhbzp.newBuilder() to construct.
    private LiangPai_Begin_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LiangPai_Begin_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LiangPai_Begin_gzhbzp defaultInstance;
    public static LiangPai_Begin_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public LiangPai_Begin_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LiangPai_Begin_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curPlayer_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_LiangPai_Begin_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_LiangPai_Begin_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<LiangPai_Begin_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<LiangPai_Begin_gzhbzp>() {
      public LiangPai_Begin_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LiangPai_Begin_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LiangPai_Begin_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_player = 1;
    public static final int CUR_PLAYER_FIELD_NUMBER = 1;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    private void initFields() {
      curPlayer_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curPlayer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curPlayer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.LiangPai_Begin_gzhbzp}
     *
     * <pre>
     *亮牌开始
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_LiangPai_Begin_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_LiangPai_Begin_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_LiangPai_Begin_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curPlayer_ = curPlayer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp.getDefaultInstance()) return this;
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Begin_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_player = 1;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000001;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.LiangPai_Begin_gzhbzp)
    }

    static {
      defaultInstance = new LiangPai_Begin_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.LiangPai_Begin_gzhbzp)
  }

  public interface LiangPai_Result_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_player = 1;
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    boolean hasOpreatePlayer();
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    int getOpreatePlayer();

    // optional int32 card_data = 2;
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    boolean hasCardData();
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    int getCardData();

    // repeated int32 seat_index = 3;
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    java.util.List<java.lang.Integer> getSeatIndexList();
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    int getSeatIndexCount();
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    int getSeatIndex(int index);
  }
  /**
   * Protobuf type {@code gzhbzp.LiangPai_Result_gzhbzp}
   *
   * <pre>
   *亮牌回复
   * </pre>
   */
  public static final class LiangPai_Result_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements LiangPai_Result_gzhbzpOrBuilder {
    // Use LiangPai_Result_gzhbzp.newBuilder() to construct.
    private LiangPai_Result_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LiangPai_Result_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LiangPai_Result_gzhbzp defaultInstance;
    public static LiangPai_Result_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public LiangPai_Result_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LiangPai_Result_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreatePlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cardData_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                seatIndex_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              seatIndex_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                seatIndex_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                seatIndex_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          seatIndex_ = java.util.Collections.unmodifiableList(seatIndex_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_LiangPai_Result_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_LiangPai_Result_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<LiangPai_Result_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<LiangPai_Result_gzhbzp>() {
      public LiangPai_Result_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LiangPai_Result_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LiangPai_Result_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_player = 1;
    public static final int OPREATE_PLAYER_FIELD_NUMBER = 1;
    private int opreatePlayer_;
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public boolean hasOpreatePlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public int getOpreatePlayer() {
      return opreatePlayer_;
    }

    // optional int32 card_data = 2;
    public static final int CARD_DATA_FIELD_NUMBER = 2;
    private int cardData_;
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    public boolean hasCardData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    public int getCardData() {
      return cardData_;
    }

    // repeated int32 seat_index = 3;
    public static final int SEAT_INDEX_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> seatIndex_;
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getSeatIndexList() {
      return seatIndex_;
    }
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    public int getSeatIndexCount() {
      return seatIndex_.size();
    }
    /**
     * <code>repeated int32 seat_index = 3;</code>
     */
    public int getSeatIndex(int index) {
      return seatIndex_.get(index);
    }

    private void initFields() {
      opreatePlayer_ = 0;
      cardData_ = 0;
      seatIndex_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreatePlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, cardData_);
      }
      for (int i = 0; i < seatIndex_.size(); i++) {
        output.writeInt32(3, seatIndex_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreatePlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardData_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < seatIndex_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(seatIndex_.get(i));
        }
        size += dataSize;
        size += 1 * getSeatIndexList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.LiangPai_Result_gzhbzp}
     *
     * <pre>
     *亮牌回复
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_LiangPai_Result_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_LiangPai_Result_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreatePlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        seatIndex_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_LiangPai_Result_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreatePlayer_ = opreatePlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardData_ = cardData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          seatIndex_ = java.util.Collections.unmodifiableList(seatIndex_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.seatIndex_ = seatIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp.getDefaultInstance()) return this;
        if (other.hasOpreatePlayer()) {
          setOpreatePlayer(other.getOpreatePlayer());
        }
        if (other.hasCardData()) {
          setCardData(other.getCardData());
        }
        if (!other.seatIndex_.isEmpty()) {
          if (seatIndex_.isEmpty()) {
            seatIndex_ = other.seatIndex_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureSeatIndexIsMutable();
            seatIndex_.addAll(other.seatIndex_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.LiangPai_Result_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_player = 1;
      private int opreatePlayer_ ;
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public boolean hasOpreatePlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public int getOpreatePlayer() {
        return opreatePlayer_;
      }
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder setOpreatePlayer(int value) {
        bitField0_ |= 0x00000001;
        opreatePlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder clearOpreatePlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreatePlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_data = 2;
      private int cardData_ ;
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public boolean hasCardData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public int getCardData() {
        return cardData_;
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public Builder setCardData(int value) {
        bitField0_ |= 0x00000002;
        cardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public Builder clearCardData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardData_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 seat_index = 3;
      private java.util.List<java.lang.Integer> seatIndex_ = java.util.Collections.emptyList();
      private void ensureSeatIndexIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          seatIndex_ = new java.util.ArrayList<java.lang.Integer>(seatIndex_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getSeatIndexList() {
        return java.util.Collections.unmodifiableList(seatIndex_);
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public int getSeatIndexCount() {
        return seatIndex_.size();
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public int getSeatIndex(int index) {
        return seatIndex_.get(index);
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public Builder setSeatIndex(
          int index, int value) {
        ensureSeatIndexIsMutable();
        seatIndex_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public Builder addSeatIndex(int value) {
        ensureSeatIndexIsMutable();
        seatIndex_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public Builder addAllSeatIndex(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSeatIndexIsMutable();
        super.addAll(values, seatIndex_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 seat_index = 3;</code>
       */
      public Builder clearSeatIndex() {
        seatIndex_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.LiangPai_Result_gzhbzp)
    }

    static {
      defaultInstance = new LiangPai_Result_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.LiangPai_Result_gzhbzp)
  }

  public interface OutCardDataWsk_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // repeated int32 cards_change_data = 3;
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsChangeDataList();
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getCardsChangeDataCount();
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getCardsChangeData(int index);

    // optional int32 cards_count = 4;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 5;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 6;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 7;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_cards_change_data = 8;
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsChangeDataList();
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getPrCardsChangeDataCount();
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getPrCardsChangeData(int index);

    // optional int32 pr_cards_count = 9;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 10;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional bool is_first_out = 11;
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean getIsFirstOut();

    // optional int32 display_time = 12;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 user_can_out_data = 13;
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 14;
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCount();

    // repeated int32 user_get_count = 15;
    /**
     * <code>repeated int32 user_get_count = 15;</code>
     *
     * <pre>
     *玩家抓牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetCountList();
    /**
     * <code>repeated int32 user_get_count = 15;</code>
     *
     * <pre>
     *玩家抓牌
     * </pre>
     */
    int getUserGetCountCount();
    /**
     * <code>repeated int32 user_get_count = 15;</code>
     *
     * <pre>
     *玩家抓牌
     * </pre>
     */
    int getUserGetCount(int index);

    // repeated int32 hand_card_count = 16;
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 17;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);

    // repeated int32 win_order = 18;
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // optional int32 is_current_first_out = 19;
    /**
     * <code>optional int32 is_current_first_out = 19;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    boolean hasIsCurrentFirstOut();
    /**
     * <code>optional int32 is_current_first_out = 19;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    int getIsCurrentFirstOut();

    // optional int32 is_have_not_card = 20;
    /**
     * <code>optional int32 is_have_not_card = 20;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    boolean hasIsHaveNotCard();
    /**
     * <code>optional int32 is_have_not_card = 20;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    int getIsHaveNotCard();

    // optional int32 is_bao_jing = 21;
    /**
     * <code>optional int32 is_bao_jing = 21;</code>
     */
    boolean hasIsBaoJing();
    /**
     * <code>optional int32 is_bao_jing = 21;</code>
     */
    int getIsBaoJing();

    // optional int32 friend_seat_index = 22;
    /**
     * <code>optional int32 friend_seat_index = 22;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    boolean hasFriendSeatIndex();
    /**
     * <code>optional int32 friend_seat_index = 22;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    int getFriendSeatIndex();
  }
  /**
   * Protobuf type {@code gzhbzp.OutCardDataWsk_gzhbzp}
   *
   * <pre>
   *用户出牌
   * </pre>
   */
  public static final class OutCardDataWsk_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataWsk_gzhbzpOrBuilder {
    // Use OutCardDataWsk_gzhbzp.newBuilder() to construct.
    private OutCardDataWsk_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataWsk_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataWsk_gzhbzp defaultInstance;
    public static OutCardDataWsk_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataWsk_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataWsk_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsChangeData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsChangeData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              prCardsChangeData_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsChangeData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              bitField0_ |= 0x00000100;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                userGetCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              userGetCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                userGetCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00010000;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              bitField0_ |= 0x00000200;
              isCurrentFirstOut_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00000400;
              isHaveNotCard_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00000800;
              isBaoJing_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00001000;
              friendSeatIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsChangeData_ = java.util.Collections.unmodifiableList(cardsChangeData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsChangeData_ = java.util.Collections.unmodifiableList(prCardsChangeData_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          userGetCount_ = java.util.Collections.unmodifiableList(userGetCount_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_OutCardDataWsk_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_OutCardDataWsk_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataWsk_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataWsk_gzhbzp>() {
      public OutCardDataWsk_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataWsk_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataWsk_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // repeated int32 cards_change_data = 3;
    public static final int CARDS_CHANGE_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cardsChangeData_;
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsChangeDataList() {
      return cardsChangeData_;
    }
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getCardsChangeDataCount() {
      return cardsChangeData_.size();
    }
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getCardsChangeData(int index) {
      return cardsChangeData_.get(index);
    }

    // optional int32 cards_count = 4;
    public static final int CARDS_COUNT_FIELD_NUMBER = 4;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 5;
    public static final int CARD_TYPE_FIELD_NUMBER = 5;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 6;
    public static final int CUR_PLAYER_FIELD_NUMBER = 6;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 7;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_cards_change_data = 8;
    public static final int PR_CARDS_CHANGE_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> prCardsChangeData_;
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsChangeDataList() {
      return prCardsChangeData_;
    }
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getPrCardsChangeDataCount() {
      return prCardsChangeData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getPrCardsChangeData(int index) {
      return prCardsChangeData_.get(index);
    }

    // optional int32 pr_cards_count = 9;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 9;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 10;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 10;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional bool is_first_out = 11;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 11;
    private boolean isFirstOut_;
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 12;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 12;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 user_can_out_data = 13;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 14;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 14;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // repeated int32 user_get_count = 15;
    public static final int USER_GET_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> userGetCount_;
    /**
     * <code>repeated int32 user_get_count = 15;</code>
     *
     * <pre>
     *玩家抓牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetCountList() {
      return userGetCount_;
    }
    /**
     * <code>repeated int32 user_get_count = 15;</code>
     *
     * <pre>
     *玩家抓牌
     * </pre>
     */
    public int getUserGetCountCount() {
      return userGetCount_.size();
    }
    /**
     * <code>repeated int32 user_get_count = 15;</code>
     *
     * <pre>
     *玩家抓牌
     * </pre>
     */
    public int getUserGetCount(int index) {
      return userGetCount_.get(index);
    }

    // repeated int32 hand_card_count = 16;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 17;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    // repeated int32 win_order = 18;
    public static final int WIN_ORDER_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // optional int32 is_current_first_out = 19;
    public static final int IS_CURRENT_FIRST_OUT_FIELD_NUMBER = 19;
    private int isCurrentFirstOut_;
    /**
     * <code>optional int32 is_current_first_out = 19;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    public boolean hasIsCurrentFirstOut() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 is_current_first_out = 19;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    public int getIsCurrentFirstOut() {
      return isCurrentFirstOut_;
    }

    // optional int32 is_have_not_card = 20;
    public static final int IS_HAVE_NOT_CARD_FIELD_NUMBER = 20;
    private int isHaveNotCard_;
    /**
     * <code>optional int32 is_have_not_card = 20;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    public boolean hasIsHaveNotCard() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 is_have_not_card = 20;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    public int getIsHaveNotCard() {
      return isHaveNotCard_;
    }

    // optional int32 is_bao_jing = 21;
    public static final int IS_BAO_JING_FIELD_NUMBER = 21;
    private int isBaoJing_;
    /**
     * <code>optional int32 is_bao_jing = 21;</code>
     */
    public boolean hasIsBaoJing() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 is_bao_jing = 21;</code>
     */
    public int getIsBaoJing() {
      return isBaoJing_;
    }

    // optional int32 friend_seat_index = 22;
    public static final int FRIEND_SEAT_INDEX_FIELD_NUMBER = 22;
    private int friendSeatIndex_;
    /**
     * <code>optional int32 friend_seat_index = 22;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    public boolean hasFriendSeatIndex() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 friend_seat_index = 22;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    public int getFriendSeatIndex() {
      return friendSeatIndex_;
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsChangeData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsChangeData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = false;
      displayTime_ = 0;
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      userGetCount_ = java.util.Collections.emptyList();
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
      isCurrentFirstOut_ = 0;
      isHaveNotCard_ = 0;
      isBaoJing_ = 0;
      friendSeatIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      for (int i = 0; i < cardsChangeData_.size(); i++) {
        output.writeInt32(3, cardsChangeData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(7, prCardsData_.get(i));
      }
      for (int i = 0; i < prCardsChangeData_.size(); i++) {
        output.writeInt32(8, prCardsChangeData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(11, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, displayTime_);
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(13, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(14, userCanOutCount_);
      }
      for (int i = 0; i < userGetCount_.size(); i++) {
        output.writeInt32(15, userGetCount_.get(i));
      }
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(16, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(17, handCardsData_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(18, winOrder_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(19, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(20, isHaveNotCard_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(21, isBaoJing_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(22, friendSeatIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsChangeData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsChangeData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsChangeDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsChangeData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsChangeData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsChangeDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, userCanOutCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userGetCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetCount_.get(i));
        }
        size += dataSize;
        size += 1 * getUserGetCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, handCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 2 * getWinOrderList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, isHaveNotCard_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, isBaoJing_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, friendSeatIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.OutCardDataWsk_gzhbzp}
     *
     * <pre>
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_OutCardDataWsk_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_OutCardDataWsk_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        prCardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        isFirstOut_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        userGetCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
        } else {
          handCardsDataBuilder_.clear();
        }
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        isCurrentFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        isHaveNotCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        isBaoJing_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        friendSeatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_OutCardDataWsk_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsChangeData_ = java.util.Collections.unmodifiableList(cardsChangeData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cardsChangeData_ = cardsChangeData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsChangeData_ = java.util.Collections.unmodifiableList(prCardsChangeData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.prCardsChangeData_ = prCardsChangeData_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          userGetCount_ = java.util.Collections.unmodifiableList(userGetCount_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.userGetCount_ = userGetCount_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.winOrder_ = winOrder_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isCurrentFirstOut_ = isCurrentFirstOut_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isHaveNotCard_ = isHaveNotCard_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.isBaoJing_ = isBaoJing_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.friendSeatIndex_ = friendSeatIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (!other.cardsChangeData_.isEmpty()) {
          if (cardsChangeData_.isEmpty()) {
            cardsChangeData_ = other.cardsChangeData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardsChangeDataIsMutable();
            cardsChangeData_.addAll(other.cardsChangeData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prCardsChangeData_.isEmpty()) {
          if (prCardsChangeData_.isEmpty()) {
            prCardsChangeData_ = other.prCardsChangeData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePrCardsChangeDataIsMutable();
            prCardsChangeData_.addAll(other.prCardsChangeData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (!other.userGetCount_.isEmpty()) {
          if (userGetCount_.isEmpty()) {
            userGetCount_ = other.userGetCount_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureUserGetCountIsMutable();
            userGetCount_.addAll(other.userGetCount_);
          }
          onChanged();
        }
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00010000);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (other.hasIsCurrentFirstOut()) {
          setIsCurrentFirstOut(other.getIsCurrentFirstOut());
        }
        if (other.hasIsHaveNotCard()) {
          setIsHaveNotCard(other.getIsHaveNotCard());
        }
        if (other.hasIsBaoJing()) {
          setIsBaoJing(other.getIsBaoJing());
        }
        if (other.hasFriendSeatIndex()) {
          setFriendSeatIndex(other.getFriendSeatIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.OutCardDataWsk_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 cards_change_data = 3;
      private java.util.List<java.lang.Integer> cardsChangeData_ = java.util.Collections.emptyList();
      private void ensureCardsChangeDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsChangeData_ = new java.util.ArrayList<java.lang.Integer>(cardsChangeData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsChangeDataList() {
        return java.util.Collections.unmodifiableList(cardsChangeData_);
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getCardsChangeDataCount() {
        return cardsChangeData_.size();
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getCardsChangeData(int index) {
        return cardsChangeData_.get(index);
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder setCardsChangeData(
          int index, int value) {
        ensureCardsChangeDataIsMutable();
        cardsChangeData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addCardsChangeData(int value) {
        ensureCardsChangeDataIsMutable();
        cardsChangeData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addAllCardsChangeData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsChangeDataIsMutable();
        super.addAll(values, cardsChangeData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder clearCardsChangeData() {
        cardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 4;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000008;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 5;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 6;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000020;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 7;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_change_data = 8;
      private java.util.List<java.lang.Integer> prCardsChangeData_ = java.util.Collections.emptyList();
      private void ensurePrCardsChangeDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>(prCardsChangeData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsChangeDataList() {
        return java.util.Collections.unmodifiableList(prCardsChangeData_);
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getPrCardsChangeDataCount() {
        return prCardsChangeData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getPrCardsChangeData(int index) {
        return prCardsChangeData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder setPrCardsChangeData(
          int index, int value) {
        ensurePrCardsChangeDataIsMutable();
        prCardsChangeData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addPrCardsChangeData(int value) {
        ensurePrCardsChangeDataIsMutable();
        prCardsChangeData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addAllPrCardsChangeData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsChangeDataIsMutable();
        super.addAll(values, prCardsChangeData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder clearPrCardsChangeData() {
        prCardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 9;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000100;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 10;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000200;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_first_out = 11;
      private boolean isFirstOut_ ;
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder setIsFirstOut(boolean value) {
        bitField0_ |= 0x00000400;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isFirstOut_ = false;
        onChanged();
        return this;
      }

      // optional int32 display_time = 12;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000800;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_can_out_data = 13;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 14;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00002000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00002000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_get_count = 15;
      private java.util.List<java.lang.Integer> userGetCount_ = java.util.Collections.emptyList();
      private void ensureUserGetCountIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          userGetCount_ = new java.util.ArrayList<java.lang.Integer>(userGetCount_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 user_get_count = 15;</code>
       *
       * <pre>
       *玩家抓牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetCountList() {
        return java.util.Collections.unmodifiableList(userGetCount_);
      }
      /**
       * <code>repeated int32 user_get_count = 15;</code>
       *
       * <pre>
       *玩家抓牌
       * </pre>
       */
      public int getUserGetCountCount() {
        return userGetCount_.size();
      }
      /**
       * <code>repeated int32 user_get_count = 15;</code>
       *
       * <pre>
       *玩家抓牌
       * </pre>
       */
      public int getUserGetCount(int index) {
        return userGetCount_.get(index);
      }
      /**
       * <code>repeated int32 user_get_count = 15;</code>
       *
       * <pre>
       *玩家抓牌
       * </pre>
       */
      public Builder setUserGetCount(
          int index, int value) {
        ensureUserGetCountIsMutable();
        userGetCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_count = 15;</code>
       *
       * <pre>
       *玩家抓牌
       * </pre>
       */
      public Builder addUserGetCount(int value) {
        ensureUserGetCountIsMutable();
        userGetCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_count = 15;</code>
       *
       * <pre>
       *玩家抓牌
       * </pre>
       */
      public Builder addAllUserGetCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetCountIsMutable();
        super.addAll(values, userGetCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_count = 15;</code>
       *
       * <pre>
       *玩家抓牌
       * </pre>
       */
      public Builder clearUserGetCount() {
        userGetCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated int32 hand_card_count = 16;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 17;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00010000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00010000) == 0x00010000),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // repeated int32 win_order = 18;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // optional int32 is_current_first_out = 19;
      private int isCurrentFirstOut_ ;
      /**
       * <code>optional int32 is_current_first_out = 19;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public boolean hasIsCurrentFirstOut() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 is_current_first_out = 19;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public int getIsCurrentFirstOut() {
        return isCurrentFirstOut_;
      }
      /**
       * <code>optional int32 is_current_first_out = 19;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public Builder setIsCurrentFirstOut(int value) {
        bitField0_ |= 0x00040000;
        isCurrentFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_current_first_out = 19;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public Builder clearIsCurrentFirstOut() {
        bitField0_ = (bitField0_ & ~0x00040000);
        isCurrentFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_have_not_card = 20;
      private int isHaveNotCard_ ;
      /**
       * <code>optional int32 is_have_not_card = 20;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public boolean hasIsHaveNotCard() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 is_have_not_card = 20;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public int getIsHaveNotCard() {
        return isHaveNotCard_;
      }
      /**
       * <code>optional int32 is_have_not_card = 20;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public Builder setIsHaveNotCard(int value) {
        bitField0_ |= 0x00080000;
        isHaveNotCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_have_not_card = 20;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public Builder clearIsHaveNotCard() {
        bitField0_ = (bitField0_ & ~0x00080000);
        isHaveNotCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_bao_jing = 21;
      private int isBaoJing_ ;
      /**
       * <code>optional int32 is_bao_jing = 21;</code>
       */
      public boolean hasIsBaoJing() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 is_bao_jing = 21;</code>
       */
      public int getIsBaoJing() {
        return isBaoJing_;
      }
      /**
       * <code>optional int32 is_bao_jing = 21;</code>
       */
      public Builder setIsBaoJing(int value) {
        bitField0_ |= 0x00100000;
        isBaoJing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_bao_jing = 21;</code>
       */
      public Builder clearIsBaoJing() {
        bitField0_ = (bitField0_ & ~0x00100000);
        isBaoJing_ = 0;
        onChanged();
        return this;
      }

      // optional int32 friend_seat_index = 22;
      private int friendSeatIndex_ ;
      /**
       * <code>optional int32 friend_seat_index = 22;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public boolean hasFriendSeatIndex() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 friend_seat_index = 22;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public int getFriendSeatIndex() {
        return friendSeatIndex_;
      }
      /**
       * <code>optional int32 friend_seat_index = 22;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public Builder setFriendSeatIndex(int value) {
        bitField0_ |= 0x00200000;
        friendSeatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 friend_seat_index = 22;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public Builder clearFriendSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00200000);
        friendSeatIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.OutCardDataWsk_gzhbzp)
    }

    static {
      defaultInstance = new OutCardDataWsk_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.OutCardDataWsk_gzhbzp)
  }

  public interface PaiFenData_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Int32ArrayResponse cards_data = 1;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 cards_count = 2;
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsCountList();
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    int getCardsCountCount();
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    int getCardsCount(int index);

    // optional int32 yu_score = 3;
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    boolean hasYuScore();
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    int getYuScore();
  }
  /**
   * Protobuf type {@code gzhbzp.PaiFenData_gzhbzp}
   */
  public static final class PaiFenData_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements PaiFenData_gzhbzpOrBuilder {
    // Use PaiFenData_gzhbzp.newBuilder() to construct.
    private PaiFenData_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PaiFenData_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PaiFenData_gzhbzp defaultInstance;
    public static PaiFenData_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public PaiFenData_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PaiFenData_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              yuScore_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsCount_ = java.util.Collections.unmodifiableList(cardsCount_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_PaiFenData_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_PaiFenData_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<PaiFenData_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<PaiFenData_gzhbzp>() {
      public PaiFenData_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PaiFenData_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PaiFenData_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .Int32ArrayResponse cards_data = 1;
    public static final int CARDS_DATA_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 cards_count = 2;
    public static final int CARDS_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsCount_;
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsCountList() {
      return cardsCount_;
    }
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public int getCardsCountCount() {
      return cardsCount_.size();
    }
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public int getCardsCount(int index) {
      return cardsCount_.get(index);
    }

    // optional int32 yu_score = 3;
    public static final int YU_SCORE_FIELD_NUMBER = 3;
    private int yuScore_;
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    public boolean hasYuScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    public int getYuScore() {
      return yuScore_;
    }

    private void initFields() {
      cardsData_ = java.util.Collections.emptyList();
      cardsCount_ = java.util.Collections.emptyList();
      yuScore_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(1, cardsData_.get(i));
      }
      for (int i = 0; i < cardsCount_.size(); i++) {
        output.writeInt32(2, cardsCount_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, yuScore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsCountList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, yuScore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.PaiFenData_gzhbzp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_PaiFenData_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_PaiFenData_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cardsDataBuilder_.clear();
        }
        cardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        yuScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_PaiFenData_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsCount_ = java.util.Collections.unmodifiableList(cardsCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.yuScore_ = yuScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp.getDefaultInstance()) return this;
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.cardsCount_.isEmpty()) {
          if (cardsCount_.isEmpty()) {
            cardsCount_ = other.cardsCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsCountIsMutable();
            cardsCount_.addAll(other.cardsCount_);
          }
          onChanged();
        }
        if (other.hasYuScore()) {
          setYuScore(other.getYuScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.PaiFenData_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Int32ArrayResponse cards_data = 1;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 cards_count = 2;
      private java.util.List<java.lang.Integer> cardsCount_ = java.util.Collections.emptyList();
      private void ensureCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsCount_ = new java.util.ArrayList<java.lang.Integer>(cardsCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsCountList() {
        return java.util.Collections.unmodifiableList(cardsCount_);
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public int getCardsCountCount() {
        return cardsCount_.size();
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public int getCardsCount(int index) {
        return cardsCount_.get(index);
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder setCardsCount(
          int index, int value) {
        ensureCardsCountIsMutable();
        cardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder addCardsCount(int value) {
        ensureCardsCountIsMutable();
        cardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder addAllCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsCountIsMutable();
        super.addAll(values, cardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder clearCardsCount() {
        cardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 yu_score = 3;
      private int yuScore_ ;
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public boolean hasYuScore() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public int getYuScore() {
        return yuScore_;
      }
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public Builder setYuScore(int value) {
        bitField0_ |= 0x00000004;
        yuScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public Builder clearYuScore() {
        bitField0_ = (bitField0_ & ~0x00000004);
        yuScore_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.PaiFenData_gzhbzp)
    }

    static {
      defaultInstance = new PaiFenData_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.PaiFenData_gzhbzp)
  }

  public interface PukeGameEndWsk_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional int32 cur_round = 2;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getCurRound();

    // optional int32 game_round = 3;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    int getGameRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 end_score = 6;
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    int getEndScore(int index);

    // optional int32 player_num = 7;
    /**
     * <code>optional int32 player_num = 7;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 7;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 banker_player = 8;
    /**
     * <code>optional int32 banker_player = 8;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 8;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 reason = 9;
    /**
     * <code>optional int32 reason = 9;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 9;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 win_order = 10;
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // repeated int32 zhua_pai = 11;
    /**
     * <code>repeated int32 zhua_pai = 11;</code>
     *
     * <pre>
     *抓牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhuaPaiList();
    /**
     * <code>repeated int32 zhua_pai = 11;</code>
     *
     * <pre>
     *抓牌
     * </pre>
     */
    int getZhuaPaiCount();
    /**
     * <code>repeated int32 zhua_pai = 11;</code>
     *
     * <pre>
     *抓牌
     * </pre>
     */
    int getZhuaPai(int index);

    // repeated int32 award_dou = 12;
    /**
     * <code>repeated int32 award_dou = 12;</code>
     *
     * <pre>
     *豆
     * </pre>
     */
    java.util.List<java.lang.Integer> getAwardDouList();
    /**
     * <code>repeated int32 award_dou = 12;</code>
     *
     * <pre>
     *豆
     * </pre>
     */
    int getAwardDouCount();
    /**
     * <code>repeated int32 award_dou = 12;</code>
     *
     * <pre>
     *豆
     * </pre>
     */
    int getAwardDou(int index);

    // repeated int32 award_plane = 13;
    /**
     * <code>repeated int32 award_plane = 13;</code>
     *
     * <pre>
     *滚筒
     * </pre>
     */
    java.util.List<java.lang.Integer> getAwardPlaneList();
    /**
     * <code>repeated int32 award_plane = 13;</code>
     *
     * <pre>
     *滚筒
     * </pre>
     */
    int getAwardPlaneCount();
    /**
     * <code>repeated int32 award_plane = 13;</code>
     *
     * <pre>
     *滚筒
     * </pre>
     */
    int getAwardPlane(int index);

    // repeated int32 end_type = 14;
    /**
     * <code>repeated int32 end_type = 14;</code>
     *
     * <pre>
     *类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndTypeList();
    /**
     * <code>repeated int32 end_type = 14;</code>
     *
     * <pre>
     *类型
     * </pre>
     */
    int getEndTypeCount();
    /**
     * <code>repeated int32 end_type = 14;</code>
     *
     * <pre>
     *类型
     * </pre>
     */
    int getEndType(int index);

    // repeated int32 round_score = 15;
    /**
     * <code>repeated int32 round_score = 15;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundScoreList();
    /**
     * <code>repeated int32 round_score = 15;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    int getRoundScoreCount();
    /**
     * <code>repeated int32 round_score = 15;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    int getRoundScore(int index);

    // repeated .RoomPlayerResponse players = 16;
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 all_end_score = 17;
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated int32 award_score = 18;
    /**
     * <code>repeated int32 award_score = 18;</code>
     *
     * <pre>
     *将分输赢
     * </pre>
     */
    java.util.List<java.lang.Integer> getAwardScoreList();
    /**
     * <code>repeated int32 award_score = 18;</code>
     *
     * <pre>
     *将分输赢
     * </pre>
     */
    int getAwardScoreCount();
    /**
     * <code>repeated int32 award_score = 18;</code>
     *
     * <pre>
     *将分输赢
     * </pre>
     */
    int getAwardScore(int index);

    // repeated int32 gun_long_count = 19;
    /**
     * <code>repeated int32 gun_long_count = 19;</code>
     *
     * <pre>
     *滚龙次数
     * </pre>
     */
    java.util.List<java.lang.Integer> getGunLongCountList();
    /**
     * <code>repeated int32 gun_long_count = 19;</code>
     *
     * <pre>
     *滚龙次数
     * </pre>
     */
    int getGunLongCountCount();
    /**
     * <code>repeated int32 gun_long_count = 19;</code>
     *
     * <pre>
     *滚龙次数
     * </pre>
     */
    int getGunLongCount(int index);

    // repeated int32 all_single_count = 20;
    /**
     * <code>repeated int32 all_single_count = 20;</code>
     *
     * <pre>
     *十三烂次数
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllSingleCountList();
    /**
     * <code>repeated int32 all_single_count = 20;</code>
     *
     * <pre>
     *十三烂次数
     * </pre>
     */
    int getAllSingleCountCount();
    /**
     * <code>repeated int32 all_single_count = 20;</code>
     *
     * <pre>
     *十三烂次数
     * </pre>
     */
    int getAllSingleCount(int index);

    // repeated int32 team_number = 21;
    /**
     * <code>repeated int32 team_number = 21;</code>
     *
     * <pre>
     * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
     * </pre>
     */
    java.util.List<java.lang.Integer> getTeamNumberList();
    /**
     * <code>repeated int32 team_number = 21;</code>
     *
     * <pre>
     * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
     * </pre>
     */
    int getTeamNumberCount();
    /**
     * <code>repeated int32 team_number = 21;</code>
     *
     * <pre>
     * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
     * </pre>
     */
    int getTeamNumber(int index);

    // repeated int32 user_cardtype = 22;
    /**
     * <code>repeated int32 user_cardtype = 22;</code>
     *
     * <pre>
     *手牌牌型 不成牌型 都是-1
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCardtypeList();
    /**
     * <code>repeated int32 user_cardtype = 22;</code>
     *
     * <pre>
     *手牌牌型 不成牌型 都是-1
     * </pre>
     */
    int getUserCardtypeCount();
    /**
     * <code>repeated int32 user_cardtype = 22;</code>
     *
     * <pre>
     *手牌牌型 不成牌型 都是-1
     * </pre>
     */
    int getUserCardtype(int index);

    // repeated int32 all_round_score = 23;
    /**
     * <code>repeated int32 all_round_score = 23;</code>
     *
     * <pre>
     * 牌局输赢
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllRoundScoreList();
    /**
     * <code>repeated int32 all_round_score = 23;</code>
     *
     * <pre>
     * 牌局输赢
     * </pre>
     */
    int getAllRoundScoreCount();
    /**
     * <code>repeated int32 all_round_score = 23;</code>
     *
     * <pre>
     * 牌局输赢
     * </pre>
     */
    int getAllRoundScore(int index);
  }
  /**
   * Protobuf type {@code gzhbzp.PukeGameEndWsk_gzhbzp}
   *
   * <pre>
   *结算
   * </pre>
   */
  public static final class PukeGameEndWsk_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndWsk_gzhbzpOrBuilder {
    // Use PukeGameEndWsk_gzhbzp.newBuilder() to construct.
    private PukeGameEndWsk_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndWsk_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndWsk_gzhbzp defaultInstance;
    public static PukeGameEndWsk_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndWsk_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndWsk_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              curRound_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameRound_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              playerNum_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000010;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000020;
              reason_ = input.readInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                zhuaPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              zhuaPai_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                zhuaPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhuaPai_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                awardDou_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              awardDou_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                awardDou_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                awardDou_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                awardPlane_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              awardPlane_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                awardPlane_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                awardPlane_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                endType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              endType_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                endType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                roundScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              roundScore_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                roundScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                roundScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00008000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                awardScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              awardScore_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                awardScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                awardScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                gunLongCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              gunLongCount_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                gunLongCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                gunLongCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                allSingleCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              allSingleCount_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                allSingleCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allSingleCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                teamNumber_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              teamNumber_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                teamNumber_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                teamNumber_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                userCardtype_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              userCardtype_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                userCardtype_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCardtype_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                allRoundScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              allRoundScore_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                allRoundScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allRoundScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          zhuaPai_ = java.util.Collections.unmodifiableList(zhuaPai_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          awardDou_ = java.util.Collections.unmodifiableList(awardDou_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          awardPlane_ = java.util.Collections.unmodifiableList(awardPlane_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          endType_ = java.util.Collections.unmodifiableList(endType_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          roundScore_ = java.util.Collections.unmodifiableList(roundScore_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          awardScore_ = java.util.Collections.unmodifiableList(awardScore_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          gunLongCount_ = java.util.Collections.unmodifiableList(gunLongCount_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          allSingleCount_ = java.util.Collections.unmodifiableList(allSingleCount_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          teamNumber_ = java.util.Collections.unmodifiableList(teamNumber_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          userCardtype_ = java.util.Collections.unmodifiableList(userCardtype_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          allRoundScore_ = java.util.Collections.unmodifiableList(allRoundScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_PukeGameEndWsk_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_PukeGameEndWsk_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndWsk_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndWsk_gzhbzp>() {
      public PukeGameEndWsk_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndWsk_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndWsk_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 cur_round = 2;
    public static final int CUR_ROUND_FIELD_NUMBER = 2;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_round = 3;
    public static final int GAME_ROUND_FIELD_NUMBER = 3;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 end_score = 6;
    public static final int END_SCORE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // optional int32 player_num = 7;
    public static final int PLAYER_NUM_FIELD_NUMBER = 7;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 7;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_num = 7;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 banker_player = 8;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 8;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 8;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 banker_player = 8;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 reason = 9;
    public static final int REASON_FIELD_NUMBER = 9;
    private int reason_;
    /**
     * <code>optional int32 reason = 9;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 reason = 9;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 win_order = 10;
    public static final int WIN_ORDER_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // repeated int32 zhua_pai = 11;
    public static final int ZHUA_PAI_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> zhuaPai_;
    /**
     * <code>repeated int32 zhua_pai = 11;</code>
     *
     * <pre>
     *抓牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhuaPaiList() {
      return zhuaPai_;
    }
    /**
     * <code>repeated int32 zhua_pai = 11;</code>
     *
     * <pre>
     *抓牌
     * </pre>
     */
    public int getZhuaPaiCount() {
      return zhuaPai_.size();
    }
    /**
     * <code>repeated int32 zhua_pai = 11;</code>
     *
     * <pre>
     *抓牌
     * </pre>
     */
    public int getZhuaPai(int index) {
      return zhuaPai_.get(index);
    }

    // repeated int32 award_dou = 12;
    public static final int AWARD_DOU_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> awardDou_;
    /**
     * <code>repeated int32 award_dou = 12;</code>
     *
     * <pre>
     *豆
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAwardDouList() {
      return awardDou_;
    }
    /**
     * <code>repeated int32 award_dou = 12;</code>
     *
     * <pre>
     *豆
     * </pre>
     */
    public int getAwardDouCount() {
      return awardDou_.size();
    }
    /**
     * <code>repeated int32 award_dou = 12;</code>
     *
     * <pre>
     *豆
     * </pre>
     */
    public int getAwardDou(int index) {
      return awardDou_.get(index);
    }

    // repeated int32 award_plane = 13;
    public static final int AWARD_PLANE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> awardPlane_;
    /**
     * <code>repeated int32 award_plane = 13;</code>
     *
     * <pre>
     *滚筒
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAwardPlaneList() {
      return awardPlane_;
    }
    /**
     * <code>repeated int32 award_plane = 13;</code>
     *
     * <pre>
     *滚筒
     * </pre>
     */
    public int getAwardPlaneCount() {
      return awardPlane_.size();
    }
    /**
     * <code>repeated int32 award_plane = 13;</code>
     *
     * <pre>
     *滚筒
     * </pre>
     */
    public int getAwardPlane(int index) {
      return awardPlane_.get(index);
    }

    // repeated int32 end_type = 14;
    public static final int END_TYPE_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> endType_;
    /**
     * <code>repeated int32 end_type = 14;</code>
     *
     * <pre>
     *类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndTypeList() {
      return endType_;
    }
    /**
     * <code>repeated int32 end_type = 14;</code>
     *
     * <pre>
     *类型
     * </pre>
     */
    public int getEndTypeCount() {
      return endType_.size();
    }
    /**
     * <code>repeated int32 end_type = 14;</code>
     *
     * <pre>
     *类型
     * </pre>
     */
    public int getEndType(int index) {
      return endType_.get(index);
    }

    // repeated int32 round_score = 15;
    public static final int ROUND_SCORE_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> roundScore_;
    /**
     * <code>repeated int32 round_score = 15;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundScoreList() {
      return roundScore_;
    }
    /**
     * <code>repeated int32 round_score = 15;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    public int getRoundScoreCount() {
      return roundScore_.size();
    }
    /**
     * <code>repeated int32 round_score = 15;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    public int getRoundScore(int index) {
      return roundScore_.get(index);
    }

    // repeated .RoomPlayerResponse players = 16;
    public static final int PLAYERS_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 all_end_score = 17;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 award_score = 18;
    public static final int AWARD_SCORE_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> awardScore_;
    /**
     * <code>repeated int32 award_score = 18;</code>
     *
     * <pre>
     *将分输赢
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAwardScoreList() {
      return awardScore_;
    }
    /**
     * <code>repeated int32 award_score = 18;</code>
     *
     * <pre>
     *将分输赢
     * </pre>
     */
    public int getAwardScoreCount() {
      return awardScore_.size();
    }
    /**
     * <code>repeated int32 award_score = 18;</code>
     *
     * <pre>
     *将分输赢
     * </pre>
     */
    public int getAwardScore(int index) {
      return awardScore_.get(index);
    }

    // repeated int32 gun_long_count = 19;
    public static final int GUN_LONG_COUNT_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> gunLongCount_;
    /**
     * <code>repeated int32 gun_long_count = 19;</code>
     *
     * <pre>
     *滚龙次数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getGunLongCountList() {
      return gunLongCount_;
    }
    /**
     * <code>repeated int32 gun_long_count = 19;</code>
     *
     * <pre>
     *滚龙次数
     * </pre>
     */
    public int getGunLongCountCount() {
      return gunLongCount_.size();
    }
    /**
     * <code>repeated int32 gun_long_count = 19;</code>
     *
     * <pre>
     *滚龙次数
     * </pre>
     */
    public int getGunLongCount(int index) {
      return gunLongCount_.get(index);
    }

    // repeated int32 all_single_count = 20;
    public static final int ALL_SINGLE_COUNT_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> allSingleCount_;
    /**
     * <code>repeated int32 all_single_count = 20;</code>
     *
     * <pre>
     *十三烂次数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllSingleCountList() {
      return allSingleCount_;
    }
    /**
     * <code>repeated int32 all_single_count = 20;</code>
     *
     * <pre>
     *十三烂次数
     * </pre>
     */
    public int getAllSingleCountCount() {
      return allSingleCount_.size();
    }
    /**
     * <code>repeated int32 all_single_count = 20;</code>
     *
     * <pre>
     *十三烂次数
     * </pre>
     */
    public int getAllSingleCount(int index) {
      return allSingleCount_.get(index);
    }

    // repeated int32 team_number = 21;
    public static final int TEAM_NUMBER_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> teamNumber_;
    /**
     * <code>repeated int32 team_number = 21;</code>
     *
     * <pre>
     * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTeamNumberList() {
      return teamNumber_;
    }
    /**
     * <code>repeated int32 team_number = 21;</code>
     *
     * <pre>
     * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
     * </pre>
     */
    public int getTeamNumberCount() {
      return teamNumber_.size();
    }
    /**
     * <code>repeated int32 team_number = 21;</code>
     *
     * <pre>
     * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
     * </pre>
     */
    public int getTeamNumber(int index) {
      return teamNumber_.get(index);
    }

    // repeated int32 user_cardtype = 22;
    public static final int USER_CARDTYPE_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> userCardtype_;
    /**
     * <code>repeated int32 user_cardtype = 22;</code>
     *
     * <pre>
     *手牌牌型 不成牌型 都是-1
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCardtypeList() {
      return userCardtype_;
    }
    /**
     * <code>repeated int32 user_cardtype = 22;</code>
     *
     * <pre>
     *手牌牌型 不成牌型 都是-1
     * </pre>
     */
    public int getUserCardtypeCount() {
      return userCardtype_.size();
    }
    /**
     * <code>repeated int32 user_cardtype = 22;</code>
     *
     * <pre>
     *手牌牌型 不成牌型 都是-1
     * </pre>
     */
    public int getUserCardtype(int index) {
      return userCardtype_.get(index);
    }

    // repeated int32 all_round_score = 23;
    public static final int ALL_ROUND_SCORE_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> allRoundScore_;
    /**
     * <code>repeated int32 all_round_score = 23;</code>
     *
     * <pre>
     * 牌局输赢
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllRoundScoreList() {
      return allRoundScore_;
    }
    /**
     * <code>repeated int32 all_round_score = 23;</code>
     *
     * <pre>
     * 牌局输赢
     * </pre>
     */
    public int getAllRoundScoreCount() {
      return allRoundScore_.size();
    }
    /**
     * <code>repeated int32 all_round_score = 23;</code>
     *
     * <pre>
     * 牌局输赢
     * </pre>
     */
    public int getAllRoundScore(int index) {
      return allRoundScore_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      curRound_ = 0;
      gameRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      bankerPlayer_ = 0;
      reason_ = 0;
      winOrder_ = java.util.Collections.emptyList();
      zhuaPai_ = java.util.Collections.emptyList();
      awardDou_ = java.util.Collections.emptyList();
      awardPlane_ = java.util.Collections.emptyList();
      endType_ = java.util.Collections.emptyList();
      roundScore_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      awardScore_ = java.util.Collections.emptyList();
      gunLongCount_ = java.util.Collections.emptyList();
      allSingleCount_ = java.util.Collections.emptyList();
      teamNumber_ = java.util.Collections.emptyList();
      userCardtype_ = java.util.Collections.emptyList();
      allRoundScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameRound_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(6, endScore_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(7, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(8, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(9, reason_);
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(10, winOrder_.get(i));
      }
      for (int i = 0; i < zhuaPai_.size(); i++) {
        output.writeInt32(11, zhuaPai_.get(i));
      }
      for (int i = 0; i < awardDou_.size(); i++) {
        output.writeInt32(12, awardDou_.get(i));
      }
      for (int i = 0; i < awardPlane_.size(); i++) {
        output.writeInt32(13, awardPlane_.get(i));
      }
      for (int i = 0; i < endType_.size(); i++) {
        output.writeInt32(14, endType_.get(i));
      }
      for (int i = 0; i < roundScore_.size(); i++) {
        output.writeInt32(15, roundScore_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(16, players_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(17, allEndScore_.get(i));
      }
      for (int i = 0; i < awardScore_.size(); i++) {
        output.writeInt32(18, awardScore_.get(i));
      }
      for (int i = 0; i < gunLongCount_.size(); i++) {
        output.writeInt32(19, gunLongCount_.get(i));
      }
      for (int i = 0; i < allSingleCount_.size(); i++) {
        output.writeInt32(20, allSingleCount_.get(i));
      }
      for (int i = 0; i < teamNumber_.size(); i++) {
        output.writeInt32(21, teamNumber_.get(i));
      }
      for (int i = 0; i < userCardtype_.size(); i++) {
        output.writeInt32(22, userCardtype_.get(i));
      }
      for (int i = 0; i < allRoundScore_.size(); i++) {
        output.writeInt32(23, allRoundScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 1 * getWinOrderList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < zhuaPai_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhuaPai_.get(i));
        }
        size += dataSize;
        size += 1 * getZhuaPaiList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < awardDou_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(awardDou_.get(i));
        }
        size += dataSize;
        size += 1 * getAwardDouList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < awardPlane_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(awardPlane_.get(i));
        }
        size += dataSize;
        size += 1 * getAwardPlaneList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endType_.get(i));
        }
        size += dataSize;
        size += 1 * getEndTypeList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < roundScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(roundScore_.get(i));
        }
        size += dataSize;
        size += 1 * getRoundScoreList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 2 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < awardScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(awardScore_.get(i));
        }
        size += dataSize;
        size += 2 * getAwardScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < gunLongCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(gunLongCount_.get(i));
        }
        size += dataSize;
        size += 2 * getGunLongCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allSingleCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allSingleCount_.get(i));
        }
        size += dataSize;
        size += 2 * getAllSingleCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < teamNumber_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(teamNumber_.get(i));
        }
        size += dataSize;
        size += 2 * getTeamNumberList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCardtype_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCardtype_.get(i));
        }
        size += dataSize;
        size += 2 * getUserCardtypeList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allRoundScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allRoundScore_.get(i));
        }
        size += dataSize;
        size += 2 * getAllRoundScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.PukeGameEndWsk_gzhbzp}
     *
     * <pre>
     *结算
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_PukeGameEndWsk_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_PukeGameEndWsk_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        zhuaPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        awardDou_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        awardPlane_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        endType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        roundScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          playersBuilder_.clear();
        }
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        awardScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        gunLongCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        allSingleCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        teamNumber_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        userCardtype_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        allRoundScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_PukeGameEndWsk_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRound_ = gameRound_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.endScore_ = endScore_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000020;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.winOrder_ = winOrder_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          zhuaPai_ = java.util.Collections.unmodifiableList(zhuaPai_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.zhuaPai_ = zhuaPai_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          awardDou_ = java.util.Collections.unmodifiableList(awardDou_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.awardDou_ = awardDou_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          awardPlane_ = java.util.Collections.unmodifiableList(awardPlane_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.awardPlane_ = awardPlane_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          endType_ = java.util.Collections.unmodifiableList(endType_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.endType_ = endType_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          roundScore_ = java.util.Collections.unmodifiableList(roundScore_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.roundScore_ = roundScore_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          awardScore_ = java.util.Collections.unmodifiableList(awardScore_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.awardScore_ = awardScore_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          gunLongCount_ = java.util.Collections.unmodifiableList(gunLongCount_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.gunLongCount_ = gunLongCount_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          allSingleCount_ = java.util.Collections.unmodifiableList(allSingleCount_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.allSingleCount_ = allSingleCount_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          teamNumber_ = java.util.Collections.unmodifiableList(teamNumber_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.teamNumber_ = teamNumber_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          userCardtype_ = java.util.Collections.unmodifiableList(userCardtype_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.userCardtype_ = userCardtype_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          allRoundScore_ = java.util.Collections.unmodifiableList(allRoundScore_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.allRoundScore_ = allRoundScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (!other.zhuaPai_.isEmpty()) {
          if (zhuaPai_.isEmpty()) {
            zhuaPai_ = other.zhuaPai_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureZhuaPaiIsMutable();
            zhuaPai_.addAll(other.zhuaPai_);
          }
          onChanged();
        }
        if (!other.awardDou_.isEmpty()) {
          if (awardDou_.isEmpty()) {
            awardDou_ = other.awardDou_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureAwardDouIsMutable();
            awardDou_.addAll(other.awardDou_);
          }
          onChanged();
        }
        if (!other.awardPlane_.isEmpty()) {
          if (awardPlane_.isEmpty()) {
            awardPlane_ = other.awardPlane_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureAwardPlaneIsMutable();
            awardPlane_.addAll(other.awardPlane_);
          }
          onChanged();
        }
        if (!other.endType_.isEmpty()) {
          if (endType_.isEmpty()) {
            endType_ = other.endType_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureEndTypeIsMutable();
            endType_.addAll(other.endType_);
          }
          onChanged();
        }
        if (!other.roundScore_.isEmpty()) {
          if (roundScore_.isEmpty()) {
            roundScore_ = other.roundScore_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureRoundScoreIsMutable();
            roundScore_.addAll(other.roundScore_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00008000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.awardScore_.isEmpty()) {
          if (awardScore_.isEmpty()) {
            awardScore_ = other.awardScore_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureAwardScoreIsMutable();
            awardScore_.addAll(other.awardScore_);
          }
          onChanged();
        }
        if (!other.gunLongCount_.isEmpty()) {
          if (gunLongCount_.isEmpty()) {
            gunLongCount_ = other.gunLongCount_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureGunLongCountIsMutable();
            gunLongCount_.addAll(other.gunLongCount_);
          }
          onChanged();
        }
        if (!other.allSingleCount_.isEmpty()) {
          if (allSingleCount_.isEmpty()) {
            allSingleCount_ = other.allSingleCount_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureAllSingleCountIsMutable();
            allSingleCount_.addAll(other.allSingleCount_);
          }
          onChanged();
        }
        if (!other.teamNumber_.isEmpty()) {
          if (teamNumber_.isEmpty()) {
            teamNumber_ = other.teamNumber_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureTeamNumberIsMutable();
            teamNumber_.addAll(other.teamNumber_);
          }
          onChanged();
        }
        if (!other.userCardtype_.isEmpty()) {
          if (userCardtype_.isEmpty()) {
            userCardtype_ = other.userCardtype_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureUserCardtypeIsMutable();
            userCardtype_.addAll(other.userCardtype_);
          }
          onChanged();
        }
        if (!other.allRoundScore_.isEmpty()) {
          if (allRoundScore_.isEmpty()) {
            allRoundScore_ = other.allRoundScore_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureAllRoundScoreIsMutable();
            allRoundScore_.addAll(other.allRoundScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.PukeGameEndWsk_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 cur_round = 2;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000002;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 3;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000004;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 end_score = 6;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional int32 player_num = 7;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 7;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 player_num = 7;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 7;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000040;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 7;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000040);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 8;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 8;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 banker_player = 8;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 8;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000080;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 8;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000080);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 9;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 9;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 reason = 9;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 9;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000100;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 9;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000100);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 win_order = 10;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 zhua_pai = 11;
      private java.util.List<java.lang.Integer> zhuaPai_ = java.util.Collections.emptyList();
      private void ensureZhuaPaiIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          zhuaPai_ = new java.util.ArrayList<java.lang.Integer>(zhuaPai_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 zhua_pai = 11;</code>
       *
       * <pre>
       *抓牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhuaPaiList() {
        return java.util.Collections.unmodifiableList(zhuaPai_);
      }
      /**
       * <code>repeated int32 zhua_pai = 11;</code>
       *
       * <pre>
       *抓牌
       * </pre>
       */
      public int getZhuaPaiCount() {
        return zhuaPai_.size();
      }
      /**
       * <code>repeated int32 zhua_pai = 11;</code>
       *
       * <pre>
       *抓牌
       * </pre>
       */
      public int getZhuaPai(int index) {
        return zhuaPai_.get(index);
      }
      /**
       * <code>repeated int32 zhua_pai = 11;</code>
       *
       * <pre>
       *抓牌
       * </pre>
       */
      public Builder setZhuaPai(
          int index, int value) {
        ensureZhuaPaiIsMutable();
        zhuaPai_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhua_pai = 11;</code>
       *
       * <pre>
       *抓牌
       * </pre>
       */
      public Builder addZhuaPai(int value) {
        ensureZhuaPaiIsMutable();
        zhuaPai_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhua_pai = 11;</code>
       *
       * <pre>
       *抓牌
       * </pre>
       */
      public Builder addAllZhuaPai(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhuaPaiIsMutable();
        super.addAll(values, zhuaPai_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhua_pai = 11;</code>
       *
       * <pre>
       *抓牌
       * </pre>
       */
      public Builder clearZhuaPai() {
        zhuaPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 award_dou = 12;
      private java.util.List<java.lang.Integer> awardDou_ = java.util.Collections.emptyList();
      private void ensureAwardDouIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          awardDou_ = new java.util.ArrayList<java.lang.Integer>(awardDou_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 award_dou = 12;</code>
       *
       * <pre>
       *豆
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAwardDouList() {
        return java.util.Collections.unmodifiableList(awardDou_);
      }
      /**
       * <code>repeated int32 award_dou = 12;</code>
       *
       * <pre>
       *豆
       * </pre>
       */
      public int getAwardDouCount() {
        return awardDou_.size();
      }
      /**
       * <code>repeated int32 award_dou = 12;</code>
       *
       * <pre>
       *豆
       * </pre>
       */
      public int getAwardDou(int index) {
        return awardDou_.get(index);
      }
      /**
       * <code>repeated int32 award_dou = 12;</code>
       *
       * <pre>
       *豆
       * </pre>
       */
      public Builder setAwardDou(
          int index, int value) {
        ensureAwardDouIsMutable();
        awardDou_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 award_dou = 12;</code>
       *
       * <pre>
       *豆
       * </pre>
       */
      public Builder addAwardDou(int value) {
        ensureAwardDouIsMutable();
        awardDou_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 award_dou = 12;</code>
       *
       * <pre>
       *豆
       * </pre>
       */
      public Builder addAllAwardDou(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAwardDouIsMutable();
        super.addAll(values, awardDou_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 award_dou = 12;</code>
       *
       * <pre>
       *豆
       * </pre>
       */
      public Builder clearAwardDou() {
        awardDou_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated int32 award_plane = 13;
      private java.util.List<java.lang.Integer> awardPlane_ = java.util.Collections.emptyList();
      private void ensureAwardPlaneIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          awardPlane_ = new java.util.ArrayList<java.lang.Integer>(awardPlane_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 award_plane = 13;</code>
       *
       * <pre>
       *滚筒
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAwardPlaneList() {
        return java.util.Collections.unmodifiableList(awardPlane_);
      }
      /**
       * <code>repeated int32 award_plane = 13;</code>
       *
       * <pre>
       *滚筒
       * </pre>
       */
      public int getAwardPlaneCount() {
        return awardPlane_.size();
      }
      /**
       * <code>repeated int32 award_plane = 13;</code>
       *
       * <pre>
       *滚筒
       * </pre>
       */
      public int getAwardPlane(int index) {
        return awardPlane_.get(index);
      }
      /**
       * <code>repeated int32 award_plane = 13;</code>
       *
       * <pre>
       *滚筒
       * </pre>
       */
      public Builder setAwardPlane(
          int index, int value) {
        ensureAwardPlaneIsMutable();
        awardPlane_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 award_plane = 13;</code>
       *
       * <pre>
       *滚筒
       * </pre>
       */
      public Builder addAwardPlane(int value) {
        ensureAwardPlaneIsMutable();
        awardPlane_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 award_plane = 13;</code>
       *
       * <pre>
       *滚筒
       * </pre>
       */
      public Builder addAllAwardPlane(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAwardPlaneIsMutable();
        super.addAll(values, awardPlane_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 award_plane = 13;</code>
       *
       * <pre>
       *滚筒
       * </pre>
       */
      public Builder clearAwardPlane() {
        awardPlane_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 end_type = 14;
      private java.util.List<java.lang.Integer> endType_ = java.util.Collections.emptyList();
      private void ensureEndTypeIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          endType_ = new java.util.ArrayList<java.lang.Integer>(endType_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 end_type = 14;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndTypeList() {
        return java.util.Collections.unmodifiableList(endType_);
      }
      /**
       * <code>repeated int32 end_type = 14;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public int getEndTypeCount() {
        return endType_.size();
      }
      /**
       * <code>repeated int32 end_type = 14;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public int getEndType(int index) {
        return endType_.get(index);
      }
      /**
       * <code>repeated int32 end_type = 14;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public Builder setEndType(
          int index, int value) {
        ensureEndTypeIsMutable();
        endType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_type = 14;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public Builder addEndType(int value) {
        ensureEndTypeIsMutable();
        endType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_type = 14;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public Builder addAllEndType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndTypeIsMutable();
        super.addAll(values, endType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_type = 14;</code>
       *
       * <pre>
       *类型
       * </pre>
       */
      public Builder clearEndType() {
        endType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 round_score = 15;
      private java.util.List<java.lang.Integer> roundScore_ = java.util.Collections.emptyList();
      private void ensureRoundScoreIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          roundScore_ = new java.util.ArrayList<java.lang.Integer>(roundScore_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 round_score = 15;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundScoreList() {
        return java.util.Collections.unmodifiableList(roundScore_);
      }
      /**
       * <code>repeated int32 round_score = 15;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public int getRoundScoreCount() {
        return roundScore_.size();
      }
      /**
       * <code>repeated int32 round_score = 15;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public int getRoundScore(int index) {
        return roundScore_.get(index);
      }
      /**
       * <code>repeated int32 round_score = 15;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public Builder setRoundScore(
          int index, int value) {
        ensureRoundScoreIsMutable();
        roundScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_score = 15;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public Builder addRoundScore(int value) {
        ensureRoundScoreIsMutable();
        roundScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_score = 15;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public Builder addAllRoundScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundScoreIsMutable();
        super.addAll(values, roundScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round_score = 15;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public Builder clearRoundScore() {
        roundScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 16;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 all_end_score = 17;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      // repeated int32 award_score = 18;
      private java.util.List<java.lang.Integer> awardScore_ = java.util.Collections.emptyList();
      private void ensureAwardScoreIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          awardScore_ = new java.util.ArrayList<java.lang.Integer>(awardScore_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 award_score = 18;</code>
       *
       * <pre>
       *将分输赢
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAwardScoreList() {
        return java.util.Collections.unmodifiableList(awardScore_);
      }
      /**
       * <code>repeated int32 award_score = 18;</code>
       *
       * <pre>
       *将分输赢
       * </pre>
       */
      public int getAwardScoreCount() {
        return awardScore_.size();
      }
      /**
       * <code>repeated int32 award_score = 18;</code>
       *
       * <pre>
       *将分输赢
       * </pre>
       */
      public int getAwardScore(int index) {
        return awardScore_.get(index);
      }
      /**
       * <code>repeated int32 award_score = 18;</code>
       *
       * <pre>
       *将分输赢
       * </pre>
       */
      public Builder setAwardScore(
          int index, int value) {
        ensureAwardScoreIsMutable();
        awardScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 award_score = 18;</code>
       *
       * <pre>
       *将分输赢
       * </pre>
       */
      public Builder addAwardScore(int value) {
        ensureAwardScoreIsMutable();
        awardScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 award_score = 18;</code>
       *
       * <pre>
       *将分输赢
       * </pre>
       */
      public Builder addAllAwardScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAwardScoreIsMutable();
        super.addAll(values, awardScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 award_score = 18;</code>
       *
       * <pre>
       *将分输赢
       * </pre>
       */
      public Builder clearAwardScore() {
        awardScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // repeated int32 gun_long_count = 19;
      private java.util.List<java.lang.Integer> gunLongCount_ = java.util.Collections.emptyList();
      private void ensureGunLongCountIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          gunLongCount_ = new java.util.ArrayList<java.lang.Integer>(gunLongCount_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 gun_long_count = 19;</code>
       *
       * <pre>
       *滚龙次数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getGunLongCountList() {
        return java.util.Collections.unmodifiableList(gunLongCount_);
      }
      /**
       * <code>repeated int32 gun_long_count = 19;</code>
       *
       * <pre>
       *滚龙次数
       * </pre>
       */
      public int getGunLongCountCount() {
        return gunLongCount_.size();
      }
      /**
       * <code>repeated int32 gun_long_count = 19;</code>
       *
       * <pre>
       *滚龙次数
       * </pre>
       */
      public int getGunLongCount(int index) {
        return gunLongCount_.get(index);
      }
      /**
       * <code>repeated int32 gun_long_count = 19;</code>
       *
       * <pre>
       *滚龙次数
       * </pre>
       */
      public Builder setGunLongCount(
          int index, int value) {
        ensureGunLongCountIsMutable();
        gunLongCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 gun_long_count = 19;</code>
       *
       * <pre>
       *滚龙次数
       * </pre>
       */
      public Builder addGunLongCount(int value) {
        ensureGunLongCountIsMutable();
        gunLongCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 gun_long_count = 19;</code>
       *
       * <pre>
       *滚龙次数
       * </pre>
       */
      public Builder addAllGunLongCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGunLongCountIsMutable();
        super.addAll(values, gunLongCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 gun_long_count = 19;</code>
       *
       * <pre>
       *滚龙次数
       * </pre>
       */
      public Builder clearGunLongCount() {
        gunLongCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // repeated int32 all_single_count = 20;
      private java.util.List<java.lang.Integer> allSingleCount_ = java.util.Collections.emptyList();
      private void ensureAllSingleCountIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          allSingleCount_ = new java.util.ArrayList<java.lang.Integer>(allSingleCount_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 all_single_count = 20;</code>
       *
       * <pre>
       *十三烂次数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllSingleCountList() {
        return java.util.Collections.unmodifiableList(allSingleCount_);
      }
      /**
       * <code>repeated int32 all_single_count = 20;</code>
       *
       * <pre>
       *十三烂次数
       * </pre>
       */
      public int getAllSingleCountCount() {
        return allSingleCount_.size();
      }
      /**
       * <code>repeated int32 all_single_count = 20;</code>
       *
       * <pre>
       *十三烂次数
       * </pre>
       */
      public int getAllSingleCount(int index) {
        return allSingleCount_.get(index);
      }
      /**
       * <code>repeated int32 all_single_count = 20;</code>
       *
       * <pre>
       *十三烂次数
       * </pre>
       */
      public Builder setAllSingleCount(
          int index, int value) {
        ensureAllSingleCountIsMutable();
        allSingleCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_single_count = 20;</code>
       *
       * <pre>
       *十三烂次数
       * </pre>
       */
      public Builder addAllSingleCount(int value) {
        ensureAllSingleCountIsMutable();
        allSingleCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_single_count = 20;</code>
       *
       * <pre>
       *十三烂次数
       * </pre>
       */
      public Builder addAllAllSingleCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllSingleCountIsMutable();
        super.addAll(values, allSingleCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_single_count = 20;</code>
       *
       * <pre>
       *十三烂次数
       * </pre>
       */
      public Builder clearAllSingleCount() {
        allSingleCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // repeated int32 team_number = 21;
      private java.util.List<java.lang.Integer> teamNumber_ = java.util.Collections.emptyList();
      private void ensureTeamNumberIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          teamNumber_ = new java.util.ArrayList<java.lang.Integer>(teamNumber_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 team_number = 21;</code>
       *
       * <pre>
       * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTeamNumberList() {
        return java.util.Collections.unmodifiableList(teamNumber_);
      }
      /**
       * <code>repeated int32 team_number = 21;</code>
       *
       * <pre>
       * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
       * </pre>
       */
      public int getTeamNumberCount() {
        return teamNumber_.size();
      }
      /**
       * <code>repeated int32 team_number = 21;</code>
       *
       * <pre>
       * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
       * </pre>
       */
      public int getTeamNumber(int index) {
        return teamNumber_.get(index);
      }
      /**
       * <code>repeated int32 team_number = 21;</code>
       *
       * <pre>
       * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
       * </pre>
       */
      public Builder setTeamNumber(
          int index, int value) {
        ensureTeamNumberIsMutable();
        teamNumber_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 team_number = 21;</code>
       *
       * <pre>
       * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
       * </pre>
       */
      public Builder addTeamNumber(int value) {
        ensureTeamNumberIsMutable();
        teamNumber_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 team_number = 21;</code>
       *
       * <pre>
       * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
       * </pre>
       */
      public Builder addAllTeamNumber(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTeamNumberIsMutable();
        super.addAll(values, teamNumber_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 team_number = 21;</code>
       *
       * <pre>
       * 分队 独牌时，庄为1，其他人为2；其他时候，庄和他的队友为1，其他人为2；
       * </pre>
       */
      public Builder clearTeamNumber() {
        teamNumber_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated int32 user_cardtype = 22;
      private java.util.List<java.lang.Integer> userCardtype_ = java.util.Collections.emptyList();
      private void ensureUserCardtypeIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          userCardtype_ = new java.util.ArrayList<java.lang.Integer>(userCardtype_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 user_cardtype = 22;</code>
       *
       * <pre>
       *手牌牌型 不成牌型 都是-1
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCardtypeList() {
        return java.util.Collections.unmodifiableList(userCardtype_);
      }
      /**
       * <code>repeated int32 user_cardtype = 22;</code>
       *
       * <pre>
       *手牌牌型 不成牌型 都是-1
       * </pre>
       */
      public int getUserCardtypeCount() {
        return userCardtype_.size();
      }
      /**
       * <code>repeated int32 user_cardtype = 22;</code>
       *
       * <pre>
       *手牌牌型 不成牌型 都是-1
       * </pre>
       */
      public int getUserCardtype(int index) {
        return userCardtype_.get(index);
      }
      /**
       * <code>repeated int32 user_cardtype = 22;</code>
       *
       * <pre>
       *手牌牌型 不成牌型 都是-1
       * </pre>
       */
      public Builder setUserCardtype(
          int index, int value) {
        ensureUserCardtypeIsMutable();
        userCardtype_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_cardtype = 22;</code>
       *
       * <pre>
       *手牌牌型 不成牌型 都是-1
       * </pre>
       */
      public Builder addUserCardtype(int value) {
        ensureUserCardtypeIsMutable();
        userCardtype_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_cardtype = 22;</code>
       *
       * <pre>
       *手牌牌型 不成牌型 都是-1
       * </pre>
       */
      public Builder addAllUserCardtype(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCardtypeIsMutable();
        super.addAll(values, userCardtype_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_cardtype = 22;</code>
       *
       * <pre>
       *手牌牌型 不成牌型 都是-1
       * </pre>
       */
      public Builder clearUserCardtype() {
        userCardtype_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 all_round_score = 23;
      private java.util.List<java.lang.Integer> allRoundScore_ = java.util.Collections.emptyList();
      private void ensureAllRoundScoreIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          allRoundScore_ = new java.util.ArrayList<java.lang.Integer>(allRoundScore_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 all_round_score = 23;</code>
       *
       * <pre>
       * 牌局输赢
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllRoundScoreList() {
        return java.util.Collections.unmodifiableList(allRoundScore_);
      }
      /**
       * <code>repeated int32 all_round_score = 23;</code>
       *
       * <pre>
       * 牌局输赢
       * </pre>
       */
      public int getAllRoundScoreCount() {
        return allRoundScore_.size();
      }
      /**
       * <code>repeated int32 all_round_score = 23;</code>
       *
       * <pre>
       * 牌局输赢
       * </pre>
       */
      public int getAllRoundScore(int index) {
        return allRoundScore_.get(index);
      }
      /**
       * <code>repeated int32 all_round_score = 23;</code>
       *
       * <pre>
       * 牌局输赢
       * </pre>
       */
      public Builder setAllRoundScore(
          int index, int value) {
        ensureAllRoundScoreIsMutable();
        allRoundScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_round_score = 23;</code>
       *
       * <pre>
       * 牌局输赢
       * </pre>
       */
      public Builder addAllRoundScore(int value) {
        ensureAllRoundScoreIsMutable();
        allRoundScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_round_score = 23;</code>
       *
       * <pre>
       * 牌局输赢
       * </pre>
       */
      public Builder addAllAllRoundScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllRoundScoreIsMutable();
        super.addAll(values, allRoundScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_round_score = 23;</code>
       *
       * <pre>
       * 牌局输赢
       * </pre>
       */
      public Builder clearAllRoundScore() {
        allRoundScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.PukeGameEndWsk_gzhbzp)
    }

    static {
      defaultInstance = new PukeGameEndWsk_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.PukeGameEndWsk_gzhbzp)
  }

  public interface TableResponse_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 6;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_pass = 7;
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // repeated int32 card_type = 8;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 9;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_cards_data = 10;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_cards_change_data = 11;
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsChangeDataList();
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getPrCardsChangeDataCount();
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getPrCardsChangeData(int index);

    // optional int32 pr_cards_count = 12;
    /**
     * <code>optional int32 pr_cards_count = 12;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 12;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 13;
    /**
     * <code>optional int32 pr_out_card_type = 13;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 13;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 14;
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 15;
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 16;
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 17;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .RoomInfo room_info = 18;
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 19;
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 user_can_out_data = 20;
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 21;
    /**
     * <code>optional int32 user_can_out_count = 21;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 21;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCount();

    // repeated int32 user_get_count = 22;
    /**
     * <code>repeated int32 user_get_count = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetCountList();
    /**
     * <code>repeated int32 user_get_count = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetCountCount();
    /**
     * <code>repeated int32 user_get_count = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetCount(int index);

    // repeated int32 win_order = 23;
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // optional bool is_yi_da_san = 24;
    /**
     * <code>optional bool is_yi_da_san = 24;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    boolean hasIsYiDaSan();
    /**
     * <code>optional bool is_yi_da_san = 24;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    boolean getIsYiDaSan();

    // optional int32 jiao_card_data = 25;
    /**
     * <code>optional int32 jiao_card_data = 25;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    boolean hasJiaoCardData();
    /**
     * <code>optional int32 jiao_card_data = 25;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    int getJiaoCardData();

    // repeated bool is_call_banker = 26;
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    java.util.List<java.lang.Boolean> getIsCallBankerList();
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    int getIsCallBankerCount();
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    boolean getIsCallBanker(int index);

    // optional int32 banker_friend_seat = 27;
    /**
     * <code>optional int32 banker_friend_seat = 27;</code>
     *
     * <pre>
     * 庄家的队友 用来处理明鸡
     * </pre>
     */
    boolean hasBankerFriendSeat();
    /**
     * <code>optional int32 banker_friend_seat = 27;</code>
     *
     * <pre>
     * 庄家的队友 用来处理明鸡
     * </pre>
     */
    int getBankerFriendSeat();

    // optional int32 friend_seat_index = 28;
    /**
     * <code>optional int32 friend_seat_index = 28;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    boolean hasFriendSeatIndex();
    /**
     * <code>optional int32 friend_seat_index = 28;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    int getFriendSeatIndex();
  }
  /**
   * Protobuf type {@code gzhbzp.TableResponse_gzhbzp}
   */
  public static final class TableResponse_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements TableResponse_gzhbzpOrBuilder {
    // Use TableResponse_gzhbzp.newBuilder() to construct.
    private TableResponse_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponse_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponse_gzhbzp defaultInstance;
    public static TableResponse_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponse_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponse_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              prCardsChangeData_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsChangeData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00010000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 146: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00040000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              bitField0_ |= 0x00000200;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                userGetCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              userGetCount_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                userGetCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              bitField0_ |= 0x00000400;
              isYiDaSan_ = input.readBool();
              break;
            }
            case 200: {
              bitField0_ |= 0x00000800;
              jiaoCardData_ = input.readInt32();
              break;
            }
            case 208: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                isCallBanker_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x02000000;
              }
              isCallBanker_.add(input.readBool());
              break;
            }
            case 210: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                isCallBanker_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                isCallBanker_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 216: {
              bitField0_ |= 0x00001000;
              bankerFriendSeat_ = input.readInt32();
              break;
            }
            case 224: {
              bitField0_ |= 0x00002000;
              friendSeatIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsChangeData_ = java.util.Collections.unmodifiableList(prCardsChangeData_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          userGetCount_ = java.util.Collections.unmodifiableList(userGetCount_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          isCallBanker_ = java.util.Collections.unmodifiableList(isCallBanker_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_TableResponse_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_TableResponse_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponse_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<TableResponse_gzhbzp>() {
      public TableResponse_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponse_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponse_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 6;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_pass = 7;
    public static final int PLAYER_PASS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // repeated int32 card_type = 8;
    public static final int CARD_TYPE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 9;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 9;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_cards_data = 10;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_cards_change_data = 11;
    public static final int PR_CARDS_CHANGE_DATA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> prCardsChangeData_;
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsChangeDataList() {
      return prCardsChangeData_;
    }
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getPrCardsChangeDataCount() {
      return prCardsChangeData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getPrCardsChangeData(int index) {
      return prCardsChangeData_.get(index);
    }

    // optional int32 pr_cards_count = 12;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 12;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 12;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 12;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 13;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 13;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 13;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 13;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 14;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 14;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 15;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 15;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 16;
    public static final int CARD_COUNT_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 17;
    public static final int CARDS_DATA_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .RoomInfo room_info = 18;
    public static final int ROOM_INFO_FIELD_NUMBER = 18;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 19;
    public static final int PLAYERS_FIELD_NUMBER = 19;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 user_can_out_data = 20;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 21;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 21;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 21;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 user_can_out_count = 21;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // repeated int32 user_get_count = 22;
    public static final int USER_GET_COUNT_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> userGetCount_;
    /**
     * <code>repeated int32 user_get_count = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetCountList() {
      return userGetCount_;
    }
    /**
     * <code>repeated int32 user_get_count = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetCountCount() {
      return userGetCount_.size();
    }
    /**
     * <code>repeated int32 user_get_count = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetCount(int index) {
      return userGetCount_.get(index);
    }

    // repeated int32 win_order = 23;
    public static final int WIN_ORDER_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // optional bool is_yi_da_san = 24;
    public static final int IS_YI_DA_SAN_FIELD_NUMBER = 24;
    private boolean isYiDaSan_;
    /**
     * <code>optional bool is_yi_da_san = 24;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    public boolean hasIsYiDaSan() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool is_yi_da_san = 24;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    public boolean getIsYiDaSan() {
      return isYiDaSan_;
    }

    // optional int32 jiao_card_data = 25;
    public static final int JIAO_CARD_DATA_FIELD_NUMBER = 25;
    private int jiaoCardData_;
    /**
     * <code>optional int32 jiao_card_data = 25;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    public boolean hasJiaoCardData() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 jiao_card_data = 25;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    public int getJiaoCardData() {
      return jiaoCardData_;
    }

    // repeated bool is_call_banker = 26;
    public static final int IS_CALL_BANKER_FIELD_NUMBER = 26;
    private java.util.List<java.lang.Boolean> isCallBanker_;
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getIsCallBankerList() {
      return isCallBanker_;
    }
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    public int getIsCallBankerCount() {
      return isCallBanker_.size();
    }
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    public boolean getIsCallBanker(int index) {
      return isCallBanker_.get(index);
    }

    // optional int32 banker_friend_seat = 27;
    public static final int BANKER_FRIEND_SEAT_FIELD_NUMBER = 27;
    private int bankerFriendSeat_;
    /**
     * <code>optional int32 banker_friend_seat = 27;</code>
     *
     * <pre>
     * 庄家的队友 用来处理明鸡
     * </pre>
     */
    public boolean hasBankerFriendSeat() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 banker_friend_seat = 27;</code>
     *
     * <pre>
     * 庄家的队友 用来处理明鸡
     * </pre>
     */
    public int getBankerFriendSeat() {
      return bankerFriendSeat_;
    }

    // optional int32 friend_seat_index = 28;
    public static final int FRIEND_SEAT_INDEX_FIELD_NUMBER = 28;
    private int friendSeatIndex_;
    /**
     * <code>optional int32 friend_seat_index = 28;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    public boolean hasFriendSeatIndex() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 friend_seat_index = 28;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    public int getFriendSeatIndex() {
      return friendSeatIndex_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerPass_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsChangeData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      userGetCount_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
      isYiDaSan_ = false;
      jiaoCardData_ = 0;
      isCallBanker_ = java.util.Collections.emptyList();
      bankerFriendSeat_ = 0;
      friendSeatIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(6, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(7, playerPass_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(8, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(9, prOutCardPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(10, prCardsData_.get(i));
      }
      for (int i = 0; i < prCardsChangeData_.size(); i++) {
        output.writeInt32(11, prCardsChangeData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(12, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(13, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(14, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(15, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(16, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(17, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(18, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(19, players_.get(i));
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(20, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(21, userCanOutCount_);
      }
      for (int i = 0; i < userGetCount_.size(); i++) {
        output.writeInt32(22, userGetCount_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(23, winOrder_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(24, isYiDaSan_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(25, jiaoCardData_);
      }
      for (int i = 0; i < isCallBanker_.size(); i++) {
        output.writeBool(26, isCallBanker_.get(i));
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(27, bankerFriendSeat_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(28, friendSeatIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerPassList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsChangeData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsChangeData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsChangeDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 2 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, userCanOutCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userGetCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetCount_.get(i));
        }
        size += dataSize;
        size += 2 * getUserGetCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 2 * getWinOrderList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(24, isYiDaSan_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, jiaoCardData_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getIsCallBankerList().size();
        size += dataSize;
        size += 2 * getIsCallBankerList().size();
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(27, bankerFriendSeat_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, friendSeatIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.TableResponse_gzhbzp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_TableResponse_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_TableResponse_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
        } else {
          playersBuilder_.clear();
        }
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        userGetCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        isYiDaSan_ = false;
        bitField0_ = (bitField0_ & ~0x00800000);
        jiaoCardData_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        isCallBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        bankerFriendSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        friendSeatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_TableResponse_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.playerPass_ = playerPass_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsChangeData_ = java.util.Collections.unmodifiableList(prCardsChangeData_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.prCardsChangeData_ = prCardsChangeData_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          userGetCount_ = java.util.Collections.unmodifiableList(userGetCount_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.userGetCount_ = userGetCount_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.winOrder_ = winOrder_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isYiDaSan_ = isYiDaSan_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.jiaoCardData_ = jiaoCardData_;
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          isCallBanker_ = java.util.Collections.unmodifiableList(isCallBanker_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.isCallBanker_ = isCallBanker_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.bankerFriendSeat_ = bankerFriendSeat_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.friendSeatIndex_ = friendSeatIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prCardsChangeData_.isEmpty()) {
          if (prCardsChangeData_.isEmpty()) {
            prCardsChangeData_ = other.prCardsChangeData_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensurePrCardsChangeDataIsMutable();
            prCardsChangeData_.addAll(other.prCardsChangeData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00010000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00040000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (!other.userGetCount_.isEmpty()) {
          if (userGetCount_.isEmpty()) {
            userGetCount_ = other.userGetCount_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureUserGetCountIsMutable();
            userGetCount_.addAll(other.userGetCount_);
          }
          onChanged();
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (other.hasIsYiDaSan()) {
          setIsYiDaSan(other.getIsYiDaSan());
        }
        if (other.hasJiaoCardData()) {
          setJiaoCardData(other.getJiaoCardData());
        }
        if (!other.isCallBanker_.isEmpty()) {
          if (isCallBanker_.isEmpty()) {
            isCallBanker_ = other.isCallBanker_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureIsCallBankerIsMutable();
            isCallBanker_.addAll(other.isCallBanker_);
          }
          onChanged();
        }
        if (other.hasBankerFriendSeat()) {
          setBankerFriendSeat(other.getBankerFriendSeat());
        }
        if (other.hasFriendSeatIndex()) {
          setFriendSeatIndex(other.getFriendSeatIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.TableResponse_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 6;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 7;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 8;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 9;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000100;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 10;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_change_data = 11;
      private java.util.List<java.lang.Integer> prCardsChangeData_ = java.util.Collections.emptyList();
      private void ensurePrCardsChangeDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>(prCardsChangeData_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsChangeDataList() {
        return java.util.Collections.unmodifiableList(prCardsChangeData_);
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getPrCardsChangeDataCount() {
        return prCardsChangeData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getPrCardsChangeData(int index) {
        return prCardsChangeData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder setPrCardsChangeData(
          int index, int value) {
        ensurePrCardsChangeDataIsMutable();
        prCardsChangeData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addPrCardsChangeData(int value) {
        ensurePrCardsChangeDataIsMutable();
        prCardsChangeData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addAllPrCardsChangeData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsChangeDataIsMutable();
        super.addAll(values, prCardsChangeData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder clearPrCardsChangeData() {
        prCardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 12;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 12;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 pr_cards_count = 12;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 12;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000800;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 12;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000800);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 13;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 13;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 pr_out_card_type = 13;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 13;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00001000;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 13;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00001000);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 14;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00002000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00002000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 15;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00004000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00004000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 16;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 17;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00010000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00010000) == 0x00010000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .RoomInfo room_info = 18;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 19;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00040000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00040000) == 0x00040000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 user_can_out_data = 20;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 21;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 21;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 user_can_out_count = 21;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 21;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00100000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 21;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00100000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_get_count = 22;
      private java.util.List<java.lang.Integer> userGetCount_ = java.util.Collections.emptyList();
      private void ensureUserGetCountIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          userGetCount_ = new java.util.ArrayList<java.lang.Integer>(userGetCount_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 user_get_count = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetCountList() {
        return java.util.Collections.unmodifiableList(userGetCount_);
      }
      /**
       * <code>repeated int32 user_get_count = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetCountCount() {
        return userGetCount_.size();
      }
      /**
       * <code>repeated int32 user_get_count = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetCount(int index) {
        return userGetCount_.get(index);
      }
      /**
       * <code>repeated int32 user_get_count = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder setUserGetCount(
          int index, int value) {
        ensureUserGetCountIsMutable();
        userGetCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_count = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addUserGetCount(int value) {
        ensureUserGetCountIsMutable();
        userGetCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_count = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addAllUserGetCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetCountIsMutable();
        super.addAll(values, userGetCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_count = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder clearUserGetCount() {
        userGetCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 win_order = 23;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // optional bool is_yi_da_san = 24;
      private boolean isYiDaSan_ ;
      /**
       * <code>optional bool is_yi_da_san = 24;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public boolean hasIsYiDaSan() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional bool is_yi_da_san = 24;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public boolean getIsYiDaSan() {
        return isYiDaSan_;
      }
      /**
       * <code>optional bool is_yi_da_san = 24;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public Builder setIsYiDaSan(boolean value) {
        bitField0_ |= 0x00800000;
        isYiDaSan_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_yi_da_san = 24;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public Builder clearIsYiDaSan() {
        bitField0_ = (bitField0_ & ~0x00800000);
        isYiDaSan_ = false;
        onChanged();
        return this;
      }

      // optional int32 jiao_card_data = 25;
      private int jiaoCardData_ ;
      /**
       * <code>optional int32 jiao_card_data = 25;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public boolean hasJiaoCardData() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int32 jiao_card_data = 25;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public int getJiaoCardData() {
        return jiaoCardData_;
      }
      /**
       * <code>optional int32 jiao_card_data = 25;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public Builder setJiaoCardData(int value) {
        bitField0_ |= 0x01000000;
        jiaoCardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 jiao_card_data = 25;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public Builder clearJiaoCardData() {
        bitField0_ = (bitField0_ & ~0x01000000);
        jiaoCardData_ = 0;
        onChanged();
        return this;
      }

      // repeated bool is_call_banker = 26;
      private java.util.List<java.lang.Boolean> isCallBanker_ = java.util.Collections.emptyList();
      private void ensureIsCallBankerIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          isCallBanker_ = new java.util.ArrayList<java.lang.Boolean>(isCallBanker_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getIsCallBankerList() {
        return java.util.Collections.unmodifiableList(isCallBanker_);
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public int getIsCallBankerCount() {
        return isCallBanker_.size();
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public boolean getIsCallBanker(int index) {
        return isCallBanker_.get(index);
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public Builder setIsCallBanker(
          int index, boolean value) {
        ensureIsCallBankerIsMutable();
        isCallBanker_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public Builder addIsCallBanker(boolean value) {
        ensureIsCallBankerIsMutable();
        isCallBanker_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public Builder addAllIsCallBanker(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureIsCallBankerIsMutable();
        super.addAll(values, isCallBanker_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public Builder clearIsCallBanker() {
        isCallBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      // optional int32 banker_friend_seat = 27;
      private int bankerFriendSeat_ ;
      /**
       * <code>optional int32 banker_friend_seat = 27;</code>
       *
       * <pre>
       * 庄家的队友 用来处理明鸡
       * </pre>
       */
      public boolean hasBankerFriendSeat() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 banker_friend_seat = 27;</code>
       *
       * <pre>
       * 庄家的队友 用来处理明鸡
       * </pre>
       */
      public int getBankerFriendSeat() {
        return bankerFriendSeat_;
      }
      /**
       * <code>optional int32 banker_friend_seat = 27;</code>
       *
       * <pre>
       * 庄家的队友 用来处理明鸡
       * </pre>
       */
      public Builder setBankerFriendSeat(int value) {
        bitField0_ |= 0x04000000;
        bankerFriendSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_friend_seat = 27;</code>
       *
       * <pre>
       * 庄家的队友 用来处理明鸡
       * </pre>
       */
      public Builder clearBankerFriendSeat() {
        bitField0_ = (bitField0_ & ~0x04000000);
        bankerFriendSeat_ = 0;
        onChanged();
        return this;
      }

      // optional int32 friend_seat_index = 28;
      private int friendSeatIndex_ ;
      /**
       * <code>optional int32 friend_seat_index = 28;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public boolean hasFriendSeatIndex() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 friend_seat_index = 28;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public int getFriendSeatIndex() {
        return friendSeatIndex_;
      }
      /**
       * <code>optional int32 friend_seat_index = 28;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public Builder setFriendSeatIndex(int value) {
        bitField0_ |= 0x08000000;
        friendSeatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 friend_seat_index = 28;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public Builder clearFriendSeatIndex() {
        bitField0_ = (bitField0_ & ~0x08000000);
        friendSeatIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.TableResponse_gzhbzp)
    }

    static {
      defaultInstance = new TableResponse_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.TableResponse_gzhbzp)
  }

  public interface GameStart_Wsk_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 2;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 cur_banker = 3;
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    int getCurBanker();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 display_time = 6;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code gzhbzp.GameStart_Wsk_gzhbzp}
   */
  public static final class GameStart_Wsk_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements GameStart_Wsk_gzhbzpOrBuilder {
    // Use GameStart_Wsk_gzhbzp.newBuilder() to construct.
    private GameStart_Wsk_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStart_Wsk_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStart_Wsk_gzhbzp defaultInstance;
    public static GameStart_Wsk_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public GameStart_Wsk_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStart_Wsk_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              curBanker_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_GameStart_Wsk_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_GameStart_Wsk_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStart_Wsk_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<GameStart_Wsk_gzhbzp>() {
      public GameStart_Wsk_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStart_Wsk_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStart_Wsk_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 2;
    public static final int PLAYERS_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 cur_banker = 3;
    public static final int CUR_BANKER_FIELD_NUMBER = 3;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 display_time = 6;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 6;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      curBanker_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(2, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, curBanker_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(6, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, curBanker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.GameStart_Wsk_gzhbzp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_GameStart_Wsk_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_GameStart_Wsk_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_GameStart_Wsk_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curBanker_ = curBanker_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.GameStart_Wsk_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 2;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 cur_banker = 3;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000004;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000004);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 display_time = 6;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000020;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.GameStart_Wsk_gzhbzp)
    }

    static {
      defaultInstance = new GameStart_Wsk_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.GameStart_Wsk_gzhbzp)
  }

  public interface CallBankerOpreate_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_player = 1;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作用户
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作用户
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 button = 2;
    /**
     * <code>repeated int32 button = 2;</code>
     *
     * <pre>
     *操作控钮0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    java.util.List<java.lang.Integer> getButtonList();
    /**
     * <code>repeated int32 button = 2;</code>
     *
     * <pre>
     *操作控钮0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    int getButtonCount();
    /**
     * <code>repeated int32 button = 2;</code>
     *
     * <pre>
     *操作控钮0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    int getButton(int index);

    // optional int32 display_time = 3;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 all_opreate_action = 4;
    /**
     * <code>repeated int32 all_opreate_action = 4;</code>
     *
     * <pre>
     *无操作为-1
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllOpreateActionList();
    /**
     * <code>repeated int32 all_opreate_action = 4;</code>
     *
     * <pre>
     *无操作为-1
     * </pre>
     */
    int getAllOpreateActionCount();
    /**
     * <code>repeated int32 all_opreate_action = 4;</code>
     *
     * <pre>
     *无操作为-1
     * </pre>
     */
    int getAllOpreateAction(int index);
  }
  /**
   * Protobuf type {@code gzhbzp.CallBankerOpreate_gzhbzp}
   *
   * <pre>
   *弹出叫庄操作
   * </pre>
   */
  public static final class CallBankerOpreate_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerOpreate_gzhbzpOrBuilder {
    // Use CallBankerOpreate_gzhbzp.newBuilder() to construct.
    private CallBankerOpreate_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerOpreate_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerOpreate_gzhbzp defaultInstance;
    public static CallBankerOpreate_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerOpreate_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerOpreate_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                button_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              button_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                button_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                button_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                allOpreateAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              allOpreateAction_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                allOpreateAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                allOpreateAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          button_ = java.util.Collections.unmodifiableList(button_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          allOpreateAction_ = java.util.Collections.unmodifiableList(allOpreateAction_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_CallBankerOpreate_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_CallBankerOpreate_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerOpreate_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerOpreate_gzhbzp>() {
      public CallBankerOpreate_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerOpreate_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerOpreate_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_player = 1;
    public static final int CUR_PLAYER_FIELD_NUMBER = 1;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作用户
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作用户
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 button = 2;
    public static final int BUTTON_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> button_;
    /**
     * <code>repeated int32 button = 2;</code>
     *
     * <pre>
     *操作控钮0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getButtonList() {
      return button_;
    }
    /**
     * <code>repeated int32 button = 2;</code>
     *
     * <pre>
     *操作控钮0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    public int getButtonCount() {
      return button_.size();
    }
    /**
     * <code>repeated int32 button = 2;</code>
     *
     * <pre>
     *操作控钮0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    public int getButton(int index) {
      return button_.get(index);
    }

    // optional int32 display_time = 3;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 3;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 all_opreate_action = 4;
    public static final int ALL_OPREATE_ACTION_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> allOpreateAction_;
    /**
     * <code>repeated int32 all_opreate_action = 4;</code>
     *
     * <pre>
     *无操作为-1
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllOpreateActionList() {
      return allOpreateAction_;
    }
    /**
     * <code>repeated int32 all_opreate_action = 4;</code>
     *
     * <pre>
     *无操作为-1
     * </pre>
     */
    public int getAllOpreateActionCount() {
      return allOpreateAction_.size();
    }
    /**
     * <code>repeated int32 all_opreate_action = 4;</code>
     *
     * <pre>
     *无操作为-1
     * </pre>
     */
    public int getAllOpreateAction(int index) {
      return allOpreateAction_.get(index);
    }

    private void initFields() {
      curPlayer_ = 0;
      button_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      allOpreateAction_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curPlayer_);
      }
      for (int i = 0; i < button_.size(); i++) {
        output.writeInt32(2, button_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, displayTime_);
      }
      for (int i = 0; i < allOpreateAction_.size(); i++) {
        output.writeInt32(4, allOpreateAction_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < button_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(button_.get(i));
        }
        size += dataSize;
        size += 1 * getButtonList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allOpreateAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allOpreateAction_.get(i));
        }
        size += dataSize;
        size += 1 * getAllOpreateActionList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.CallBankerOpreate_gzhbzp}
     *
     * <pre>
     *弹出叫庄操作
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_CallBankerOpreate_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_CallBankerOpreate_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        button_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        allOpreateAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_CallBankerOpreate_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          button_ = java.util.Collections.unmodifiableList(button_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.button_ = button_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          allOpreateAction_ = java.util.Collections.unmodifiableList(allOpreateAction_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.allOpreateAction_ = allOpreateAction_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp.getDefaultInstance()) return this;
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.button_.isEmpty()) {
          if (button_.isEmpty()) {
            button_ = other.button_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureButtonIsMutable();
            button_.addAll(other.button_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.allOpreateAction_.isEmpty()) {
          if (allOpreateAction_.isEmpty()) {
            allOpreateAction_ = other.allOpreateAction_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureAllOpreateActionIsMutable();
            allOpreateAction_.addAll(other.allOpreateAction_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerOpreate_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_player = 1;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作用户
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作用户
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作用户
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000001;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作用户
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 button = 2;
      private java.util.List<java.lang.Integer> button_ = java.util.Collections.emptyList();
      private void ensureButtonIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          button_ = new java.util.ArrayList<java.lang.Integer>(button_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 button = 2;</code>
       *
       * <pre>
       *操作控钮0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getButtonList() {
        return java.util.Collections.unmodifiableList(button_);
      }
      /**
       * <code>repeated int32 button = 2;</code>
       *
       * <pre>
       *操作控钮0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public int getButtonCount() {
        return button_.size();
      }
      /**
       * <code>repeated int32 button = 2;</code>
       *
       * <pre>
       *操作控钮0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public int getButton(int index) {
        return button_.get(index);
      }
      /**
       * <code>repeated int32 button = 2;</code>
       *
       * <pre>
       *操作控钮0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public Builder setButton(
          int index, int value) {
        ensureButtonIsMutable();
        button_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 button = 2;</code>
       *
       * <pre>
       *操作控钮0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public Builder addButton(int value) {
        ensureButtonIsMutable();
        button_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 button = 2;</code>
       *
       * <pre>
       *操作控钮0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public Builder addAllButton(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureButtonIsMutable();
        super.addAll(values, button_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 button = 2;</code>
       *
       * <pre>
       *操作控钮0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public Builder clearButton() {
        button_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 display_time = 3;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000004;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 all_opreate_action = 4;
      private java.util.List<java.lang.Integer> allOpreateAction_ = java.util.Collections.emptyList();
      private void ensureAllOpreateActionIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          allOpreateAction_ = new java.util.ArrayList<java.lang.Integer>(allOpreateAction_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 all_opreate_action = 4;</code>
       *
       * <pre>
       *无操作为-1
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllOpreateActionList() {
        return java.util.Collections.unmodifiableList(allOpreateAction_);
      }
      /**
       * <code>repeated int32 all_opreate_action = 4;</code>
       *
       * <pre>
       *无操作为-1
       * </pre>
       */
      public int getAllOpreateActionCount() {
        return allOpreateAction_.size();
      }
      /**
       * <code>repeated int32 all_opreate_action = 4;</code>
       *
       * <pre>
       *无操作为-1
       * </pre>
       */
      public int getAllOpreateAction(int index) {
        return allOpreateAction_.get(index);
      }
      /**
       * <code>repeated int32 all_opreate_action = 4;</code>
       *
       * <pre>
       *无操作为-1
       * </pre>
       */
      public Builder setAllOpreateAction(
          int index, int value) {
        ensureAllOpreateActionIsMutable();
        allOpreateAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_opreate_action = 4;</code>
       *
       * <pre>
       *无操作为-1
       * </pre>
       */
      public Builder addAllOpreateAction(int value) {
        ensureAllOpreateActionIsMutable();
        allOpreateAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_opreate_action = 4;</code>
       *
       * <pre>
       *无操作为-1
       * </pre>
       */
      public Builder addAllAllOpreateAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllOpreateActionIsMutable();
        super.addAll(values, allOpreateAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_opreate_action = 4;</code>
       *
       * <pre>
       *无操作为-1
       * </pre>
       */
      public Builder clearAllOpreateAction() {
        allOpreateAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.CallBankerOpreate_gzhbzp)
    }

    static {
      defaultInstance = new CallBankerOpreate_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.CallBankerOpreate_gzhbzp)
  }

  public interface RefreshCardData_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 hand_card_count = 1;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code gzhbzp.RefreshCardData_gzhbzp}
   */
  public static final class RefreshCardData_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements RefreshCardData_gzhbzpOrBuilder {
    // Use RefreshCardData_gzhbzp.newBuilder() to construct.
    private RefreshCardData_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshCardData_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshCardData_gzhbzp defaultInstance;
    public static RefreshCardData_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshCardData_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshCardData_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshCardData_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshCardData_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshCardData_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<RefreshCardData_gzhbzp>() {
      public RefreshCardData_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshCardData_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshCardData_gzhbzp> getParserForType() {
      return PARSER;
    }

    // repeated int32 hand_card_count = 1;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    private void initFields() {
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(1, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(2, handCardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, handCardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.RefreshCardData_gzhbzp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshCardData_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshCardData_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshCardData_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp.getDefaultInstance()) return this;
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshCardData_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 hand_card_count = 1;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.RefreshCardData_gzhbzp)
    }

    static {
      defaultInstance = new RefreshCardData_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.RefreshCardData_gzhbzp)
  }

  public interface CallBankerResponse_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_action = 1;
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    boolean hasOpreateAction();
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    int getOpreateAction();

    // optional int32 call_player = 2;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    boolean hasCallPlayer();
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    int getCallPlayer();

    // optional int32 banker_player = 3;
    /**
     * <code>optional int32 banker_player = 3;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 3;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    int getBankerPlayer();
  }
  /**
   * Protobuf type {@code gzhbzp.CallBankerResponse_gzhbzp}
   *
   * <pre>
   *操作结果
   * </pre>
   */
  public static final class CallBankerResponse_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResponse_gzhbzpOrBuilder {
    // Use CallBankerResponse_gzhbzp.newBuilder() to construct.
    private CallBankerResponse_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResponse_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResponse_gzhbzp defaultInstance;
    public static CallBankerResponse_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResponse_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResponse_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateAction_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              callPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              bankerPlayer_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_CallBankerResponse_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_CallBankerResponse_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResponse_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResponse_gzhbzp>() {
      public CallBankerResponse_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResponse_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResponse_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_action = 1;
    public static final int OPREATE_ACTION_FIELD_NUMBER = 1;
    private int opreateAction_;
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    public boolean hasOpreateAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    public int getOpreateAction() {
      return opreateAction_;
    }

    // optional int32 call_player = 2;
    public static final int CALL_PLAYER_FIELD_NUMBER = 2;
    private int callPlayer_;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public boolean hasCallPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public int getCallPlayer() {
      return callPlayer_;
    }

    // optional int32 banker_player = 3;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 3;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 3;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 banker_player = 3;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    private void initFields() {
      opreateAction_ = 0;
      callPlayer_ = 0;
      bankerPlayer_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateAction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, bankerPlayer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateAction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, bankerPlayer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.CallBankerResponse_gzhbzp}
     *
     * <pre>
     *操作结果
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_CallBankerResponse_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_CallBankerResponse_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateAction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        callPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_CallBankerResponse_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateAction_ = opreateAction_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.callPlayer_ = callPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bankerPlayer_ = bankerPlayer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp.getDefaultInstance()) return this;
        if (other.hasOpreateAction()) {
          setOpreateAction(other.getOpreateAction());
        }
        if (other.hasCallPlayer()) {
          setCallPlayer(other.getCallPlayer());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.CallBankerResponse_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_action = 1;
      private int opreateAction_ ;
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public boolean hasOpreateAction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public int getOpreateAction() {
        return opreateAction_;
      }
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public Builder setOpreateAction(int value) {
        bitField0_ |= 0x00000001;
        opreateAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public Builder clearOpreateAction() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateAction_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_player = 2;
      private int callPlayer_ ;
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public boolean hasCallPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public int getCallPlayer() {
        return callPlayer_;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder setCallPlayer(int value) {
        bitField0_ |= 0x00000002;
        callPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder clearCallPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        callPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 3;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 3;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 banker_player = 3;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 3;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000004;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 3;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.CallBankerResponse_gzhbzp)
    }

    static {
      defaultInstance = new CallBankerResponse_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.CallBankerResponse_gzhbzp)
  }

  public interface RefreshMingPai_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 card_data = 1;
    /**
     * <code>optional int32 card_data = 1;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    boolean hasCardData();
    /**
     * <code>optional int32 card_data = 1;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    int getCardData();

    // optional int32 seat_index = 2;
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    int getSeatIndex();
  }
  /**
   * Protobuf type {@code gzhbzp.RefreshMingPai_gzhbzp}
   */
  public static final class RefreshMingPai_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements RefreshMingPai_gzhbzpOrBuilder {
    // Use RefreshMingPai_gzhbzp.newBuilder() to construct.
    private RefreshMingPai_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshMingPai_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshMingPai_gzhbzp defaultInstance;
    public static RefreshMingPai_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshMingPai_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshMingPai_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cardData_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              seatIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshMingPai_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshMingPai_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshMingPai_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<RefreshMingPai_gzhbzp>() {
      public RefreshMingPai_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshMingPai_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshMingPai_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 card_data = 1;
    public static final int CARD_DATA_FIELD_NUMBER = 1;
    private int cardData_;
    /**
     * <code>optional int32 card_data = 1;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public boolean hasCardData() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_data = 1;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public int getCardData() {
      return cardData_;
    }

    // optional int32 seat_index = 2;
    public static final int SEAT_INDEX_FIELD_NUMBER = 2;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    private void initFields() {
      cardData_ = 0;
      seatIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cardData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, seatIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cardData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, seatIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.RefreshMingPai_gzhbzp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshMingPai_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshMingPai_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_RefreshMingPai_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardData_ = cardData_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.seatIndex_ = seatIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp.getDefaultInstance()) return this;
        if (other.hasCardData()) {
          setCardData(other.getCardData());
        }
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.RefreshMingPai_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 card_data = 1;
      private int cardData_ ;
      /**
       * <code>optional int32 card_data = 1;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public boolean hasCardData() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 card_data = 1;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public int getCardData() {
        return cardData_;
      }
      /**
       * <code>optional int32 card_data = 1;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder setCardData(int value) {
        bitField0_ |= 0x00000001;
        cardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_data = 1;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder clearCardData() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cardData_ = 0;
        onChanged();
        return this;
      }

      // optional int32 seat_index = 2;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000002;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.RefreshMingPai_gzhbzp)
    }

    static {
      defaultInstance = new RefreshMingPai_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.RefreshMingPai_gzhbzp)
  }

  public interface Opreate_RequestWsk_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_type = 1;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：亮牌 2:叫庄 4:理牌排序 5:数量排序
     * </pre>
     */
    boolean hasOpreateType();
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：亮牌 2:叫庄 4:理牌排序 5:数量排序
     * </pre>
     */
    int getOpreateType();

    // optional int32 call_opreate = 2;
    /**
     * <code>optional int32 call_opreate = 2;</code>
     *
     * <pre>
     *0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    boolean hasCallOpreate();
    /**
     * <code>optional int32 call_opreate = 2;</code>
     *
     * <pre>
     *0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    int getCallOpreate();

    // optional int32 card_data = 3;
    /**
     * <code>optional int32 card_data = 3;</code>
     *
     * <pre>
     *亮牌牌值
     * </pre>
     */
    boolean hasCardData();
    /**
     * <code>optional int32 card_data = 3;</code>
     *
     * <pre>
     *亮牌牌值
     * </pre>
     */
    int getCardData();

    // repeated int32 sort_card = 4;
    /**
     * <code>repeated int32 sort_card = 4;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    java.util.List<java.lang.Integer> getSortCardList();
    /**
     * <code>repeated int32 sort_card = 4;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    int getSortCardCount();
    /**
     * <code>repeated int32 sort_card = 4;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    int getSortCard(int index);
  }
  /**
   * Protobuf type {@code gzhbzp.Opreate_RequestWsk_gzhbzp}
   *
   * <pre>
   *请求
   * </pre>
   */
  public static final class Opreate_RequestWsk_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements Opreate_RequestWsk_gzhbzpOrBuilder {
    // Use Opreate_RequestWsk_gzhbzp.newBuilder() to construct.
    private Opreate_RequestWsk_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Opreate_RequestWsk_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Opreate_RequestWsk_gzhbzp defaultInstance;
    public static Opreate_RequestWsk_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public Opreate_RequestWsk_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Opreate_RequestWsk_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              callOpreate_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              cardData_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                sortCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              sortCard_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                sortCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                sortCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          sortCard_ = java.util.Collections.unmodifiableList(sortCard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_Opreate_RequestWsk_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_Opreate_RequestWsk_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<Opreate_RequestWsk_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<Opreate_RequestWsk_gzhbzp>() {
      public Opreate_RequestWsk_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Opreate_RequestWsk_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Opreate_RequestWsk_gzhbzp> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_type = 1;
    public static final int OPREATE_TYPE_FIELD_NUMBER = 1;
    private int opreateType_;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：亮牌 2:叫庄 4:理牌排序 5:数量排序
     * </pre>
     */
    public boolean hasOpreateType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：亮牌 2:叫庄 4:理牌排序 5:数量排序
     * </pre>
     */
    public int getOpreateType() {
      return opreateType_;
    }

    // optional int32 call_opreate = 2;
    public static final int CALL_OPREATE_FIELD_NUMBER = 2;
    private int callOpreate_;
    /**
     * <code>optional int32 call_opreate = 2;</code>
     *
     * <pre>
     *0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    public boolean hasCallOpreate() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 call_opreate = 2;</code>
     *
     * <pre>
     *0:不包 1:包牌 2反包 3不反
     * </pre>
     */
    public int getCallOpreate() {
      return callOpreate_;
    }

    // optional int32 card_data = 3;
    public static final int CARD_DATA_FIELD_NUMBER = 3;
    private int cardData_;
    /**
     * <code>optional int32 card_data = 3;</code>
     *
     * <pre>
     *亮牌牌值
     * </pre>
     */
    public boolean hasCardData() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_data = 3;</code>
     *
     * <pre>
     *亮牌牌值
     * </pre>
     */
    public int getCardData() {
      return cardData_;
    }

    // repeated int32 sort_card = 4;
    public static final int SORT_CARD_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> sortCard_;
    /**
     * <code>repeated int32 sort_card = 4;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSortCardList() {
      return sortCard_;
    }
    /**
     * <code>repeated int32 sort_card = 4;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    public int getSortCardCount() {
      return sortCard_.size();
    }
    /**
     * <code>repeated int32 sort_card = 4;</code>
     *
     * <pre>
     *排序牌值
     * </pre>
     */
    public int getSortCard(int index) {
      return sortCard_.get(index);
    }

    private void initFields() {
      opreateType_ = 0;
      callOpreate_ = 0;
      cardData_ = 0;
      sortCard_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, callOpreate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, cardData_);
      }
      for (int i = 0; i < sortCard_.size(); i++) {
        output.writeInt32(4, sortCard_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, callOpreate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cardData_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sortCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(sortCard_.get(i));
        }
        size += dataSize;
        size += 1 * getSortCardList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.Opreate_RequestWsk_gzhbzp}
     *
     * <pre>
     *请求
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_Opreate_RequestWsk_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_Opreate_RequestWsk_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        callOpreate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cardData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        sortCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_Opreate_RequestWsk_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateType_ = opreateType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.callOpreate_ = callOpreate_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardData_ = cardData_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          sortCard_ = java.util.Collections.unmodifiableList(sortCard_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.sortCard_ = sortCard_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp.getDefaultInstance()) return this;
        if (other.hasOpreateType()) {
          setOpreateType(other.getOpreateType());
        }
        if (other.hasCallOpreate()) {
          setCallOpreate(other.getCallOpreate());
        }
        if (other.hasCardData()) {
          setCardData(other.getCardData());
        }
        if (!other.sortCard_.isEmpty()) {
          if (sortCard_.isEmpty()) {
            sortCard_ = other.sortCard_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureSortCardIsMutable();
            sortCard_.addAll(other.sortCard_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.Opreate_RequestWsk_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_type = 1;
      private int opreateType_ ;
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：亮牌 2:叫庄 4:理牌排序 5:数量排序
       * </pre>
       */
      public boolean hasOpreateType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：亮牌 2:叫庄 4:理牌排序 5:数量排序
       * </pre>
       */
      public int getOpreateType() {
        return opreateType_;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：亮牌 2:叫庄 4:理牌排序 5:数量排序
       * </pre>
       */
      public Builder setOpreateType(int value) {
        bitField0_ |= 0x00000001;
        opreateType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：亮牌 2:叫庄 4:理牌排序 5:数量排序
       * </pre>
       */
      public Builder clearOpreateType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_opreate = 2;
      private int callOpreate_ ;
      /**
       * <code>optional int32 call_opreate = 2;</code>
       *
       * <pre>
       *0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public boolean hasCallOpreate() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 call_opreate = 2;</code>
       *
       * <pre>
       *0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public int getCallOpreate() {
        return callOpreate_;
      }
      /**
       * <code>optional int32 call_opreate = 2;</code>
       *
       * <pre>
       *0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public Builder setCallOpreate(int value) {
        bitField0_ |= 0x00000002;
        callOpreate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_opreate = 2;</code>
       *
       * <pre>
       *0:不包 1:包牌 2反包 3不反
       * </pre>
       */
      public Builder clearCallOpreate() {
        bitField0_ = (bitField0_ & ~0x00000002);
        callOpreate_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_data = 3;
      private int cardData_ ;
      /**
       * <code>optional int32 card_data = 3;</code>
       *
       * <pre>
       *亮牌牌值
       * </pre>
       */
      public boolean hasCardData() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 card_data = 3;</code>
       *
       * <pre>
       *亮牌牌值
       * </pre>
       */
      public int getCardData() {
        return cardData_;
      }
      /**
       * <code>optional int32 card_data = 3;</code>
       *
       * <pre>
       *亮牌牌值
       * </pre>
       */
      public Builder setCardData(int value) {
        bitField0_ |= 0x00000004;
        cardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_data = 3;</code>
       *
       * <pre>
       *亮牌牌值
       * </pre>
       */
      public Builder clearCardData() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardData_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 sort_card = 4;
      private java.util.List<java.lang.Integer> sortCard_ = java.util.Collections.emptyList();
      private void ensureSortCardIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          sortCard_ = new java.util.ArrayList<java.lang.Integer>(sortCard_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 sort_card = 4;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSortCardList() {
        return java.util.Collections.unmodifiableList(sortCard_);
      }
      /**
       * <code>repeated int32 sort_card = 4;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public int getSortCardCount() {
        return sortCard_.size();
      }
      /**
       * <code>repeated int32 sort_card = 4;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public int getSortCard(int index) {
        return sortCard_.get(index);
      }
      /**
       * <code>repeated int32 sort_card = 4;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public Builder setSortCard(
          int index, int value) {
        ensureSortCardIsMutable();
        sortCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sort_card = 4;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public Builder addSortCard(int value) {
        ensureSortCardIsMutable();
        sortCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sort_card = 4;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public Builder addAllSortCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSortCardIsMutable();
        super.addAll(values, sortCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 sort_card = 4;</code>
       *
       * <pre>
       *排序牌值
       * </pre>
       */
      public Builder clearSortCard() {
        sortCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.Opreate_RequestWsk_gzhbzp)
    }

    static {
      defaultInstance = new Opreate_RequestWsk_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.Opreate_RequestWsk_gzhbzp)
  }

  public interface UserCardData_gzhbzpOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Int32ArrayResponse cards_data = 1;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code gzhbzp.UserCardData_gzhbzp}
   */
  public static final class UserCardData_gzhbzp extends
      com.google.protobuf.GeneratedMessage
      implements UserCardData_gzhbzpOrBuilder {
    // Use UserCardData_gzhbzp.newBuilder() to construct.
    private UserCardData_gzhbzp(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private UserCardData_gzhbzp(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final UserCardData_gzhbzp defaultInstance;
    public static UserCardData_gzhbzp getDefaultInstance() {
      return defaultInstance;
    }

    public UserCardData_gzhbzp getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private UserCardData_gzhbzp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_UserCardData_gzhbzp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_UserCardData_gzhbzp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp.Builder.class);
    }

    public static com.google.protobuf.Parser<UserCardData_gzhbzp> PARSER =
        new com.google.protobuf.AbstractParser<UserCardData_gzhbzp>() {
      public UserCardData_gzhbzp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserCardData_gzhbzp(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<UserCardData_gzhbzp> getParserForType() {
      return PARSER;
    }

    // repeated .Int32ArrayResponse cards_data = 1;
    public static final int CARDS_DATA_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    private void initFields() {
      cardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(1, cardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gzhbzp.UserCardData_gzhbzp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_UserCardData_gzhbzp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_UserCardData_gzhbzp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp.class, protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp.Builder.class);
      }

      // Construct using protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.internal_static_gzhbzp_UserCardData_gzhbzp_descriptor;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp getDefaultInstanceForType() {
        return protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp.getDefaultInstance();
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp build() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp buildPartial() {
        protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp result = new protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp(this);
        int from_bitField0_ = bitField0_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp) {
          return mergeFrom((protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp other) {
        if (other == protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp.getDefaultInstance()) return this;
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzhbzp.gzhbzpRsp.UserCardData_gzhbzp) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Int32ArrayResponse cards_data = 1;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gzhbzp.UserCardData_gzhbzp)
    }

    static {
      defaultInstance = new UserCardData_gzhbzp(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gzhbzp.UserCardData_gzhbzp)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_RefreshScore_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_RefreshScore_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_LiangPai_Begin_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_LiangPai_Begin_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_LiangPai_Result_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_LiangPai_Result_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_OutCardDataWsk_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_OutCardDataWsk_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_PaiFenData_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_PaiFenData_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_PukeGameEndWsk_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_PukeGameEndWsk_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_TableResponse_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_TableResponse_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_GameStart_Wsk_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_GameStart_Wsk_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_CallBankerOpreate_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_CallBankerOpreate_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_RefreshCardData_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_RefreshCardData_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_CallBankerResponse_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_CallBankerResponse_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_RefreshMingPai_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_RefreshMingPai_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_Opreate_RequestWsk_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_Opreate_RequestWsk_gzhbzp_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gzhbzp_UserCardData_gzhbzp_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gzhbzp_UserCardData_gzhbzp_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023wsk/gzhbzpWsk.proto\022\006gzhbzp\032\024basic/pro" +
      "tocol.proto\"[\n\023RefreshScore_gzhbzp\022\026\n\016us" +
      "er_get_score\030\001 \003(\005\022\023\n\013table_score\030\002 \001(\005\022" +
      "\027\n\017xian_qian_score\030\003 \003(\005\"+\n\025LiangPai_Beg" +
      "in_gzhbzp\022\022\n\ncur_player\030\001 \001(\005\"W\n\026LiangPa" +
      "i_Result_gzhbzp\022\026\n\016opreate_player\030\001 \001(\005\022" +
      "\021\n\tcard_data\030\002 \001(\005\022\022\n\nseat_index\030\003 \003(\005\"\277" +
      "\004\n\025OutCardDataWsk_gzhbzp\022\027\n\017out_card_pla" +
      "yer\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\031\n\021cards_c" +
      "hange_data\030\003 \003(\005\022\023\n\013cards_count\030\004 \001(\005\022\021\n",
      "\tcard_type\030\005 \001(\005\022\022\n\ncur_player\030\006 \001(\005\022\025\n\r" +
      "pr_cards_data\030\007 \003(\005\022\034\n\024pr_cards_change_d" +
      "ata\030\010 \003(\005\022\026\n\016pr_cards_count\030\t \001(\005\022\030\n\020pr_" +
      "out_card_type\030\n \001(\005\022\024\n\014is_first_out\030\013 \001(" +
      "\010\022\024\n\014display_time\030\014 \001(\005\022\031\n\021user_can_out_" +
      "data\030\r \003(\005\022\032\n\022user_can_out_count\030\016 \001(\005\022\026" +
      "\n\016user_get_count\030\017 \003(\005\022\027\n\017hand_card_coun" +
      "t\030\020 \003(\005\022,\n\017hand_cards_data\030\021 \003(\0132\023.Int32" +
      "ArrayResponse\022\021\n\twin_order\030\022 \003(\005\022\034\n\024is_c" +
      "urrent_first_out\030\023 \001(\005\022\030\n\020is_have_not_ca",
      "rd\030\024 \001(\005\022\023\n\013is_bao_jing\030\025 \001(\005\022\031\n\021friend_" +
      "seat_index\030\026 \001(\005\"c\n\021PaiFenData_gzhbzp\022\'\n" +
      "\ncards_data\030\001 \003(\0132\023.Int32ArrayResponse\022\023" +
      "\n\013cards_count\030\002 \003(\005\022\020\n\010yu_score\030\003 \001(\005\"\244\004" +
      "\n\025PukeGameEndWsk_gzhbzp\022\034\n\troom_info\030\001 \001" +
      "(\0132\t.RoomInfo\022\021\n\tcur_round\030\002 \001(\005\022\022\n\ngame" +
      "_round\030\003 \001(\005\022\022\n\ncard_count\030\004 \003(\005\022\'\n\ncard" +
      "s_data\030\005 \003(\0132\023.Int32ArrayResponse\022\021\n\tend" +
      "_score\030\006 \003(\005\022\022\n\nplayer_num\030\007 \001(\005\022\025\n\rbank" +
      "er_player\030\010 \001(\005\022\016\n\006reason\030\t \001(\005\022\021\n\twin_o",
      "rder\030\n \003(\005\022\020\n\010zhua_pai\030\013 \003(\005\022\021\n\taward_do" +
      "u\030\014 \003(\005\022\023\n\013award_plane\030\r \003(\005\022\020\n\010end_type" +
      "\030\016 \003(\005\022\023\n\013round_score\030\017 \003(\005\022$\n\007players\030\020" +
      " \003(\0132\023.RoomPlayerResponse\022\025\n\rall_end_sco" +
      "re\030\021 \003(\005\022\023\n\013award_score\030\022 \003(\005\022\026\n\016gun_lon" +
      "g_count\030\023 \003(\005\022\030\n\020all_single_count\030\024 \003(\005\022" +
      "\023\n\013team_number\030\025 \003(\005\022\025\n\ruser_cardtype\030\026 " +
      "\003(\005\022\027\n\017all_round_score\030\027 \003(\005\"\350\005\n\024TableRe" +
      "sponse_gzhbzp\022\025\n\rbanker_player\030\001 \001(\005\022\026\n\016" +
      "current_player\030\002 \001(\005\022\023\n\013prev_player\030\003 \001(",
      "\005\022\017\n\007trustee\030\004 \003(\010\022+\n\016out_cards_data\030\005 \003" +
      "(\0132\023.Int32ArrayResponse\022\027\n\017out_cards_cou" +
      "nt\030\006 \003(\005\022\023\n\013player_pass\030\007 \003(\005\022\021\n\tcard_ty" +
      "pe\030\010 \003(\005\022\032\n\022pr_out_card_player\030\t \001(\005\022\025\n\r" +
      "pr_cards_data\030\n \003(\005\022\034\n\024pr_cards_change_d" +
      "ata\030\013 \003(\005\022\026\n\016pr_cards_count\030\014 \001(\005\022\030\n\020pr_" +
      "out_card_type\030\r \001(\005\022\024\n\014is_first_out\030\016 \001(" +
      "\005\022\024\n\014display_time\030\017 \001(\005\022\022\n\ncard_count\030\020 " +
      "\003(\005\022\'\n\ncards_data\030\021 \003(\0132\023.Int32ArrayResp" +
      "onse\022\034\n\troom_info\030\022 \001(\0132\t.RoomInfo\022$\n\007pl",
      "ayers\030\023 \003(\0132\023.RoomPlayerResponse\022\031\n\021user" +
      "_can_out_data\030\024 \003(\005\022\032\n\022user_can_out_coun" +
      "t\030\025 \001(\005\022\026\n\016user_get_count\030\026 \003(\005\022\021\n\twin_o" +
      "rder\030\027 \003(\005\022\024\n\014is_yi_da_san\030\030 \001(\010\022\026\n\016jiao" +
      "_card_data\030\031 \001(\005\022\026\n\016is_call_banker\030\032 \003(\010" +
      "\022\032\n\022banker_friend_seat\030\033 \001(\005\022\031\n\021friend_s" +
      "eat_index\030\034 \001(\005\"\301\001\n\024GameStart_Wsk_gzhbzp" +
      "\022\034\n\troom_info\030\001 \001(\0132\t.RoomInfo\022$\n\007player" +
      "s\030\002 \003(\0132\023.RoomPlayerResponse\022\022\n\ncur_bank" +
      "er\030\003 \001(\005\022\022\n\ncard_count\030\004 \003(\005\022\'\n\ncards_da",
      "ta\030\005 \003(\0132\023.Int32ArrayResponse\022\024\n\014display" +
      "_time\030\006 \001(\005\"p\n\030CallBankerOpreate_gzhbzp\022" +
      "\022\n\ncur_player\030\001 \001(\005\022\016\n\006button\030\002 \003(\005\022\024\n\014d" +
      "isplay_time\030\003 \001(\005\022\032\n\022all_opreate_action\030" +
      "\004 \003(\005\"_\n\026RefreshCardData_gzhbzp\022\027\n\017hand_" +
      "card_count\030\001 \003(\005\022,\n\017hand_cards_data\030\002 \003(" +
      "\0132\023.Int32ArrayResponse\"_\n\031CallBankerResp" +
      "onse_gzhbzp\022\026\n\016opreate_action\030\001 \001(\005\022\023\n\013c" +
      "all_player\030\002 \001(\005\022\025\n\rbanker_player\030\003 \001(\005\"" +
      ">\n\025RefreshMingPai_gzhbzp\022\021\n\tcard_data\030\001 ",
      "\001(\005\022\022\n\nseat_index\030\002 \001(\005\"m\n\031Opreate_Reque" +
      "stWsk_gzhbzp\022\024\n\014opreate_type\030\001 \001(\005\022\024\n\014ca" +
      "ll_opreate\030\002 \001(\005\022\021\n\tcard_data\030\003 \001(\005\022\021\n\ts" +
      "ort_card\030\004 \003(\005\">\n\023UserCardData_gzhbzp\022\'\n" +
      "\ncards_data\030\001 \003(\0132\023.Int32ArrayResponseB\"" +
      "\n\025protobuf.clazz.gzhbzpB\tgzhbzpRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_gzhbzp_RefreshScore_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_gzhbzp_RefreshScore_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_RefreshScore_gzhbzp_descriptor,
              new java.lang.String[] { "UserGetScore", "TableScore", "XianQianScore", });
          internal_static_gzhbzp_LiangPai_Begin_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_gzhbzp_LiangPai_Begin_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_LiangPai_Begin_gzhbzp_descriptor,
              new java.lang.String[] { "CurPlayer", });
          internal_static_gzhbzp_LiangPai_Result_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_gzhbzp_LiangPai_Result_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_LiangPai_Result_gzhbzp_descriptor,
              new java.lang.String[] { "OpreatePlayer", "CardData", "SeatIndex", });
          internal_static_gzhbzp_OutCardDataWsk_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_gzhbzp_OutCardDataWsk_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_OutCardDataWsk_gzhbzp_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "CardsChangeData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrCardsChangeData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "UserCanOutData", "UserCanOutCount", "UserGetCount", "HandCardCount", "HandCardsData", "WinOrder", "IsCurrentFirstOut", "IsHaveNotCard", "IsBaoJing", "FriendSeatIndex", });
          internal_static_gzhbzp_PaiFenData_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_gzhbzp_PaiFenData_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_PaiFenData_gzhbzp_descriptor,
              new java.lang.String[] { "CardsData", "CardsCount", "YuScore", });
          internal_static_gzhbzp_PukeGameEndWsk_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_gzhbzp_PukeGameEndWsk_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_PukeGameEndWsk_gzhbzp_descriptor,
              new java.lang.String[] { "RoomInfo", "CurRound", "GameRound", "CardCount", "CardsData", "EndScore", "PlayerNum", "BankerPlayer", "Reason", "WinOrder", "ZhuaPai", "AwardDou", "AwardPlane", "EndType", "RoundScore", "Players", "AllEndScore", "AwardScore", "GunLongCount", "AllSingleCount", "TeamNumber", "UserCardtype", "AllRoundScore", });
          internal_static_gzhbzp_TableResponse_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_gzhbzp_TableResponse_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_TableResponse_gzhbzp_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "OutCardsCount", "PlayerPass", "CardType", "PrOutCardPlayer", "PrCardsData", "PrCardsChangeData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "UserCanOutData", "UserCanOutCount", "UserGetCount", "WinOrder", "IsYiDaSan", "JiaoCardData", "IsCallBanker", "BankerFriendSeat", "FriendSeatIndex", });
          internal_static_gzhbzp_GameStart_Wsk_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_gzhbzp_GameStart_Wsk_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_GameStart_Wsk_gzhbzp_descriptor,
              new java.lang.String[] { "RoomInfo", "Players", "CurBanker", "CardCount", "CardsData", "DisplayTime", });
          internal_static_gzhbzp_CallBankerOpreate_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_gzhbzp_CallBankerOpreate_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_CallBankerOpreate_gzhbzp_descriptor,
              new java.lang.String[] { "CurPlayer", "Button", "DisplayTime", "AllOpreateAction", });
          internal_static_gzhbzp_RefreshCardData_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_gzhbzp_RefreshCardData_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_RefreshCardData_gzhbzp_descriptor,
              new java.lang.String[] { "HandCardCount", "HandCardsData", });
          internal_static_gzhbzp_CallBankerResponse_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_gzhbzp_CallBankerResponse_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_CallBankerResponse_gzhbzp_descriptor,
              new java.lang.String[] { "OpreateAction", "CallPlayer", "BankerPlayer", });
          internal_static_gzhbzp_RefreshMingPai_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_gzhbzp_RefreshMingPai_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_RefreshMingPai_gzhbzp_descriptor,
              new java.lang.String[] { "CardData", "SeatIndex", });
          internal_static_gzhbzp_Opreate_RequestWsk_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_gzhbzp_Opreate_RequestWsk_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_Opreate_RequestWsk_gzhbzp_descriptor,
              new java.lang.String[] { "OpreateType", "CallOpreate", "CardData", "SortCard", });
          internal_static_gzhbzp_UserCardData_gzhbzp_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_gzhbzp_UserCardData_gzhbzp_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gzhbzp_UserCardData_gzhbzp_descriptor,
              new java.lang.String[] { "CardsData", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
