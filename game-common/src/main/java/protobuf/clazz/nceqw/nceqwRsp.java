// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sj/nceqw.proto

package protobuf.clazz.nceqw;

public final class nceqwRsp {
  private nceqwRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface OutCardDataNceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_count = 3;
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 4;
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 5;
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 6;
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 7;
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 8;
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 display_time = 9;
    /**
     * <code>optional int32 display_time = 9;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 9;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated .Int32ArrayResponse hand_card_data = 10;
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    int getHandCardDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
        int index);

    // repeated int32 hand_card_count = 11;
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    int getHandCardCount(int index);

    // optional int32 max_value_seat = 12;
    /**
     * <code>optional int32 max_value_seat = 12;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    boolean hasMaxValueSeat();
    /**
     * <code>optional int32 max_value_seat = 12;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    int getMaxValueSeat();

    // repeated int32 user_can_out_data = 13;
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 14;
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    int getUserCanOutCount();

    // optional int32 is_current_first_out = 15;
    /**
     * <code>optional int32 is_current_first_out = 15;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    boolean hasIsCurrentFirstOut();
    /**
     * <code>optional int32 is_current_first_out = 15;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    int getIsCurrentFirstOut();

    // optional int32 killing_seat = 16;
    /**
     * <code>optional int32 killing_seat = 16;</code>
     *
     * <pre>
     *毙了主动玩家
     * </pre>
     */
    boolean hasKillingSeat();
    /**
     * <code>optional int32 killing_seat = 16;</code>
     *
     * <pre>
     *毙了主动玩家
     * </pre>
     */
    int getKillingSeat();

    // optional int32 killed_seat = 17;
    /**
     * <code>optional int32 killed_seat = 17;</code>
     *
     * <pre>
     *毙了被动玩家
     * </pre>
     */
    boolean hasKilledSeat();
    /**
     * <code>optional int32 killed_seat = 17;</code>
     *
     * <pre>
     *毙了被动玩家
     * </pre>
     */
    int getKilledSeat();

    // optional bool isround = 18;
    /**
     * <code>optional bool isround = 18;</code>
     *
     * <pre>
     *一圈出完
     * </pre>
     */
    boolean hasIsround();
    /**
     * <code>optional bool isround = 18;</code>
     *
     * <pre>
     *一圈出完
     * </pre>
     */
    boolean getIsround();

    // repeated int32 card_data_failure = 19;
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardDataFailureList();
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    int getCardDataFailureCount();
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    int getCardDataFailure(int index);

    // repeated int32 turn_cards_data = 20;
    /**
     * <code>repeated int32 turn_cards_data = 20;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getTurnCardsDataList();
    /**
     * <code>repeated int32 turn_cards_data = 20;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    int getTurnCardsDataCount();
    /**
     * <code>repeated int32 turn_cards_data = 20;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    int getTurnCardsData(int index);

    // optional int32 turn_cards_count = 21;
    /**
     * <code>optional int32 turn_cards_count = 21;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    boolean hasTurnCardsCount();
    /**
     * <code>optional int32 turn_cards_count = 21;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    int getTurnCardsCount();

    // optional int32 turn_out_card_type = 22;
    /**
     * <code>optional int32 turn_out_card_type = 22;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    boolean hasTurnOutCardType();
    /**
     * <code>optional int32 turn_out_card_type = 22;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    int getTurnOutCardType();

    // optional int32 is_first_out = 23;
    /**
     * <code>optional int32 is_first_out = 23;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 23;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    int getIsFirstOut();
  }
  /**
   * Protobuf type {@code nceqw.OutCardDataNceqw}
   *
   * <pre>
   *用户出牌 1001
   * </pre>
   */
  public static final class OutCardDataNceqw extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataNceqwOrBuilder {
    // Use OutCardDataNceqw.newBuilder() to construct.
    private OutCardDataNceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataNceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataNceqw defaultInstance;
    public static OutCardDataNceqw getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataNceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataNceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              displayTime_ = input.readInt32();
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                handCardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000200;
              }
              handCardData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              maxValueSeat_ = input.readInt32();
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              bitField0_ |= 0x00000100;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000200;
              isCurrentFirstOut_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000400;
              killingSeat_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000800;
              killedSeat_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00001000;
              isround_ = input.readBool();
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                cardDataFailure_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              cardDataFailure_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                cardDataFailure_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardDataFailure_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                turnCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              turnCardsData_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                turnCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                turnCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              bitField0_ |= 0x00002000;
              turnCardsCount_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00004000;
              turnOutCardType_ = input.readInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00008000;
              isFirstOut_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          handCardData_ = java.util.Collections.unmodifiableList(handCardData_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          cardDataFailure_ = java.util.Collections.unmodifiableList(cardDataFailure_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          turnCardsData_ = java.util.Collections.unmodifiableList(turnCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_OutCardDataNceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_OutCardDataNceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw.class, protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataNceqw> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataNceqw>() {
      public OutCardDataNceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataNceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataNceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_count = 3;
    public static final int CARDS_COUNT_FIELD_NUMBER = 3;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 4;
    public static final int CARD_TYPE_FIELD_NUMBER = 4;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 5;
    public static final int CUR_PLAYER_FIELD_NUMBER = 5;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 6;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 7;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 7;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 8;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 8;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 display_time = 9;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 9;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 9;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 display_time = 9;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated .Int32ArrayResponse hand_card_data = 10;
    public static final int HAND_CARD_DATA_FIELD_NUMBER = 10;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardDataList() {
      return handCardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardDataOrBuilderList() {
      return handCardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    public int getHandCardDataCount() {
      return handCardData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index) {
      return handCardData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
     *
     * <pre>
     *手牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
        int index) {
      return handCardData_.get(index);
    }

    // repeated int32 hand_card_count = 11;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 11;</code>
     *
     * <pre>
     *手牌数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // optional int32 max_value_seat = 12;
    public static final int MAX_VALUE_SEAT_FIELD_NUMBER = 12;
    private int maxValueSeat_;
    /**
     * <code>optional int32 max_value_seat = 12;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    public boolean hasMaxValueSeat() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 max_value_seat = 12;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    public int getMaxValueSeat() {
      return maxValueSeat_;
    }

    // repeated int32 user_can_out_data = 13;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 14;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 14;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // optional int32 is_current_first_out = 15;
    public static final int IS_CURRENT_FIRST_OUT_FIELD_NUMBER = 15;
    private int isCurrentFirstOut_;
    /**
     * <code>optional int32 is_current_first_out = 15;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public boolean hasIsCurrentFirstOut() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 is_current_first_out = 15;</code>
     *
     * <pre>
     *是否首出
     * </pre>
     */
    public int getIsCurrentFirstOut() {
      return isCurrentFirstOut_;
    }

    // optional int32 killing_seat = 16;
    public static final int KILLING_SEAT_FIELD_NUMBER = 16;
    private int killingSeat_;
    /**
     * <code>optional int32 killing_seat = 16;</code>
     *
     * <pre>
     *毙了主动玩家
     * </pre>
     */
    public boolean hasKillingSeat() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 killing_seat = 16;</code>
     *
     * <pre>
     *毙了主动玩家
     * </pre>
     */
    public int getKillingSeat() {
      return killingSeat_;
    }

    // optional int32 killed_seat = 17;
    public static final int KILLED_SEAT_FIELD_NUMBER = 17;
    private int killedSeat_;
    /**
     * <code>optional int32 killed_seat = 17;</code>
     *
     * <pre>
     *毙了被动玩家
     * </pre>
     */
    public boolean hasKilledSeat() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 killed_seat = 17;</code>
     *
     * <pre>
     *毙了被动玩家
     * </pre>
     */
    public int getKilledSeat() {
      return killedSeat_;
    }

    // optional bool isround = 18;
    public static final int ISROUND_FIELD_NUMBER = 18;
    private boolean isround_;
    /**
     * <code>optional bool isround = 18;</code>
     *
     * <pre>
     *一圈出完
     * </pre>
     */
    public boolean hasIsround() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool isround = 18;</code>
     *
     * <pre>
     *一圈出完
     * </pre>
     */
    public boolean getIsround() {
      return isround_;
    }

    // repeated int32 card_data_failure = 19;
    public static final int CARD_DATA_FAILURE_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> cardDataFailure_;
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardDataFailureList() {
      return cardDataFailure_;
    }
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    public int getCardDataFailureCount() {
      return cardDataFailure_.size();
    }
    /**
     * <code>repeated int32 card_data_failure = 19;</code>
     *
     * <pre>
     *数据
     * </pre>
     */
    public int getCardDataFailure(int index) {
      return cardDataFailure_.get(index);
    }

    // repeated int32 turn_cards_data = 20;
    public static final int TURN_CARDS_DATA_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> turnCardsData_;
    /**
     * <code>repeated int32 turn_cards_data = 20;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTurnCardsDataList() {
      return turnCardsData_;
    }
    /**
     * <code>repeated int32 turn_cards_data = 20;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    public int getTurnCardsDataCount() {
      return turnCardsData_.size();
    }
    /**
     * <code>repeated int32 turn_cards_data = 20;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    public int getTurnCardsData(int index) {
      return turnCardsData_.get(index);
    }

    // optional int32 turn_cards_count = 21;
    public static final int TURN_CARDS_COUNT_FIELD_NUMBER = 21;
    private int turnCardsCount_;
    /**
     * <code>optional int32 turn_cards_count = 21;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    public boolean hasTurnCardsCount() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 turn_cards_count = 21;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    public int getTurnCardsCount() {
      return turnCardsCount_;
    }

    // optional int32 turn_out_card_type = 22;
    public static final int TURN_OUT_CARD_TYPE_FIELD_NUMBER = 22;
    private int turnOutCardType_;
    /**
     * <code>optional int32 turn_out_card_type = 22;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    public boolean hasTurnOutCardType() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 turn_out_card_type = 22;</code>
     *
     * <pre>
     *最大牌数据
     * </pre>
     */
    public int getTurnOutCardType() {
      return turnOutCardType_;
    }

    // optional int32 is_first_out = 23;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 23;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 23;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 is_first_out = 23;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      displayTime_ = 0;
      handCardData_ = java.util.Collections.emptyList();
      handCardCount_ = java.util.Collections.emptyList();
      maxValueSeat_ = 0;
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      isCurrentFirstOut_ = 0;
      killingSeat_ = 0;
      killedSeat_ = 0;
      isround_ = false;
      cardDataFailure_ = java.util.Collections.emptyList();
      turnCardsData_ = java.util.Collections.emptyList();
      turnCardsCount_ = 0;
      turnOutCardType_ = 0;
      isFirstOut_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(6, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(9, displayTime_);
      }
      for (int i = 0; i < handCardData_.size(); i++) {
        output.writeMessage(10, handCardData_.get(i));
      }
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(11, handCardCount_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, maxValueSeat_);
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(13, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(14, userCanOutCount_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(15, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(16, killingSeat_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(17, killedSeat_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(18, isround_);
      }
      for (int i = 0; i < cardDataFailure_.size(); i++) {
        output.writeInt32(19, cardDataFailure_.get(i));
      }
      for (int i = 0; i < turnCardsData_.size(); i++) {
        output.writeInt32(20, turnCardsData_.get(i));
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(21, turnCardsCount_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(22, turnOutCardType_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(23, isFirstOut_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, displayTime_);
      }
      for (int i = 0; i < handCardData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, handCardData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, maxValueSeat_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, userCanOutCount_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, killingSeat_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, killedSeat_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, isround_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardDataFailure_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardDataFailure_.get(i));
        }
        size += dataSize;
        size += 2 * getCardDataFailureList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < turnCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(turnCardsData_.get(i));
        }
        size += dataSize;
        size += 2 * getTurnCardsDataList().size();
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, turnCardsCount_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, turnOutCardType_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(23, isFirstOut_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.OutCardDataNceqw}
     *
     * <pre>
     *用户出牌 1001
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_OutCardDataNceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_OutCardDataNceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw.class, protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        if (handCardDataBuilder_ == null) {
          handCardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          handCardDataBuilder_.clear();
        }
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        maxValueSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        isCurrentFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        killingSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        killedSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        isround_ = false;
        bitField0_ = (bitField0_ & ~0x00020000);
        cardDataFailure_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        turnCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        turnCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        turnOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_OutCardDataNceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw result = new protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.displayTime_ = displayTime_;
        if (handCardDataBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            handCardData_ = java.util.Collections.unmodifiableList(handCardData_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.handCardData_ = handCardData_;
        } else {
          result.handCardData_ = handCardDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.handCardCount_ = handCardCount_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.maxValueSeat_ = maxValueSeat_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isCurrentFirstOut_ = isCurrentFirstOut_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.killingSeat_ = killingSeat_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.killedSeat_ = killedSeat_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.isround_ = isround_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          cardDataFailure_ = java.util.Collections.unmodifiableList(cardDataFailure_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.cardDataFailure_ = cardDataFailure_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          turnCardsData_ = java.util.Collections.unmodifiableList(turnCardsData_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.turnCardsData_ = turnCardsData_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.turnCardsCount_ = turnCardsCount_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.turnOutCardType_ = turnOutCardType_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.isFirstOut_ = isFirstOut_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (handCardDataBuilder_ == null) {
          if (!other.handCardData_.isEmpty()) {
            if (handCardData_.isEmpty()) {
              handCardData_ = other.handCardData_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureHandCardDataIsMutable();
              handCardData_.addAll(other.handCardData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardData_.isEmpty()) {
            if (handCardDataBuilder_.isEmpty()) {
              handCardDataBuilder_.dispose();
              handCardDataBuilder_ = null;
              handCardData_ = other.handCardData_;
              bitField0_ = (bitField0_ & ~0x00000200);
              handCardDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardDataFieldBuilder() : null;
            } else {
              handCardDataBuilder_.addAllMessages(other.handCardData_);
            }
          }
        }
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (other.hasMaxValueSeat()) {
          setMaxValueSeat(other.getMaxValueSeat());
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (other.hasIsCurrentFirstOut()) {
          setIsCurrentFirstOut(other.getIsCurrentFirstOut());
        }
        if (other.hasKillingSeat()) {
          setKillingSeat(other.getKillingSeat());
        }
        if (other.hasKilledSeat()) {
          setKilledSeat(other.getKilledSeat());
        }
        if (other.hasIsround()) {
          setIsround(other.getIsround());
        }
        if (!other.cardDataFailure_.isEmpty()) {
          if (cardDataFailure_.isEmpty()) {
            cardDataFailure_ = other.cardDataFailure_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureCardDataFailureIsMutable();
            cardDataFailure_.addAll(other.cardDataFailure_);
          }
          onChanged();
        }
        if (!other.turnCardsData_.isEmpty()) {
          if (turnCardsData_.isEmpty()) {
            turnCardsData_ = other.turnCardsData_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureTurnCardsDataIsMutable();
            turnCardsData_.addAll(other.turnCardsData_);
          }
          onChanged();
        }
        if (other.hasTurnCardsCount()) {
          setTurnCardsCount(other.getTurnCardsCount());
        }
        if (other.hasTurnOutCardType()) {
          setTurnOutCardType(other.getTurnOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.OutCardDataNceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 3;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000004;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 4;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000008;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 5;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000010;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 6;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 7;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000040;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 8;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000080;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 9;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 9;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 display_time = 9;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 9;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000100;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 9;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000100);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_card_data = 10;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardDataIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          handCardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardData_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardDataList() {
        if (handCardDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardData_);
        } else {
          return handCardDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public int getHandCardDataCount() {
        if (handCardDataBuilder_ == null) {
          return handCardData_.size();
        } else {
          return handCardDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index) {
        if (handCardDataBuilder_ == null) {
          return handCardData_.get(index);
        } else {
          return handCardDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder setHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.set(index, value);
          onChanged();
        } else {
          handCardDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder setHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder addHandCardData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.add(value);
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder addHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.add(index, value);
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder addHandCardData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder addHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder addAllHandCardData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          super.addAll(values, handCardData_);
          onChanged();
        } else {
          handCardDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder clearHandCardData() {
        if (handCardDataBuilder_ == null) {
          handCardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          handCardDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public Builder removeHandCardData(int index) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.remove(index);
          onChanged();
        } else {
          handCardDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardDataBuilder(
          int index) {
        return getHandCardDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
          int index) {
        if (handCardDataBuilder_ == null) {
          return handCardData_.get(index);  } else {
          return handCardDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardDataOrBuilderList() {
        if (handCardDataBuilder_ != null) {
          return handCardDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardDataBuilder() {
        return getHandCardDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardDataBuilder(
          int index) {
        return getHandCardDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 10;</code>
       *
       * <pre>
       *手牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardDataBuilderList() {
        return getHandCardDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardDataFieldBuilder() {
        if (handCardDataBuilder_ == null) {
          handCardDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardData_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          handCardData_ = null;
        }
        return handCardDataBuilder_;
      }

      // repeated int32 hand_card_count = 11;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 11;</code>
       *
       * <pre>
       *手牌数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // optional int32 max_value_seat = 12;
      private int maxValueSeat_ ;
      /**
       * <code>optional int32 max_value_seat = 12;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public boolean hasMaxValueSeat() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 max_value_seat = 12;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public int getMaxValueSeat() {
        return maxValueSeat_;
      }
      /**
       * <code>optional int32 max_value_seat = 12;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public Builder setMaxValueSeat(int value) {
        bitField0_ |= 0x00000800;
        maxValueSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_value_seat = 12;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public Builder clearMaxValueSeat() {
        bitField0_ = (bitField0_ & ~0x00000800);
        maxValueSeat_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_can_out_data = 13;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 14;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00002000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00002000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_current_first_out = 15;
      private int isCurrentFirstOut_ ;
      /**
       * <code>optional int32 is_current_first_out = 15;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public boolean hasIsCurrentFirstOut() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 is_current_first_out = 15;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public int getIsCurrentFirstOut() {
        return isCurrentFirstOut_;
      }
      /**
       * <code>optional int32 is_current_first_out = 15;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder setIsCurrentFirstOut(int value) {
        bitField0_ |= 0x00004000;
        isCurrentFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_current_first_out = 15;</code>
       *
       * <pre>
       *是否首出
       * </pre>
       */
      public Builder clearIsCurrentFirstOut() {
        bitField0_ = (bitField0_ & ~0x00004000);
        isCurrentFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 killing_seat = 16;
      private int killingSeat_ ;
      /**
       * <code>optional int32 killing_seat = 16;</code>
       *
       * <pre>
       *毙了主动玩家
       * </pre>
       */
      public boolean hasKillingSeat() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 killing_seat = 16;</code>
       *
       * <pre>
       *毙了主动玩家
       * </pre>
       */
      public int getKillingSeat() {
        return killingSeat_;
      }
      /**
       * <code>optional int32 killing_seat = 16;</code>
       *
       * <pre>
       *毙了主动玩家
       * </pre>
       */
      public Builder setKillingSeat(int value) {
        bitField0_ |= 0x00008000;
        killingSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 killing_seat = 16;</code>
       *
       * <pre>
       *毙了主动玩家
       * </pre>
       */
      public Builder clearKillingSeat() {
        bitField0_ = (bitField0_ & ~0x00008000);
        killingSeat_ = 0;
        onChanged();
        return this;
      }

      // optional int32 killed_seat = 17;
      private int killedSeat_ ;
      /**
       * <code>optional int32 killed_seat = 17;</code>
       *
       * <pre>
       *毙了被动玩家
       * </pre>
       */
      public boolean hasKilledSeat() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 killed_seat = 17;</code>
       *
       * <pre>
       *毙了被动玩家
       * </pre>
       */
      public int getKilledSeat() {
        return killedSeat_;
      }
      /**
       * <code>optional int32 killed_seat = 17;</code>
       *
       * <pre>
       *毙了被动玩家
       * </pre>
       */
      public Builder setKilledSeat(int value) {
        bitField0_ |= 0x00010000;
        killedSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 killed_seat = 17;</code>
       *
       * <pre>
       *毙了被动玩家
       * </pre>
       */
      public Builder clearKilledSeat() {
        bitField0_ = (bitField0_ & ~0x00010000);
        killedSeat_ = 0;
        onChanged();
        return this;
      }

      // optional bool isround = 18;
      private boolean isround_ ;
      /**
       * <code>optional bool isround = 18;</code>
       *
       * <pre>
       *一圈出完
       * </pre>
       */
      public boolean hasIsround() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional bool isround = 18;</code>
       *
       * <pre>
       *一圈出完
       * </pre>
       */
      public boolean getIsround() {
        return isround_;
      }
      /**
       * <code>optional bool isround = 18;</code>
       *
       * <pre>
       *一圈出完
       * </pre>
       */
      public Builder setIsround(boolean value) {
        bitField0_ |= 0x00020000;
        isround_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isround = 18;</code>
       *
       * <pre>
       *一圈出完
       * </pre>
       */
      public Builder clearIsround() {
        bitField0_ = (bitField0_ & ~0x00020000);
        isround_ = false;
        onChanged();
        return this;
      }

      // repeated int32 card_data_failure = 19;
      private java.util.List<java.lang.Integer> cardDataFailure_ = java.util.Collections.emptyList();
      private void ensureCardDataFailureIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          cardDataFailure_ = new java.util.ArrayList<java.lang.Integer>(cardDataFailure_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardDataFailureList() {
        return java.util.Collections.unmodifiableList(cardDataFailure_);
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public int getCardDataFailureCount() {
        return cardDataFailure_.size();
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public int getCardDataFailure(int index) {
        return cardDataFailure_.get(index);
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public Builder setCardDataFailure(
          int index, int value) {
        ensureCardDataFailureIsMutable();
        cardDataFailure_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public Builder addCardDataFailure(int value) {
        ensureCardDataFailureIsMutable();
        cardDataFailure_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public Builder addAllCardDataFailure(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardDataFailureIsMutable();
        super.addAll(values, cardDataFailure_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data_failure = 19;</code>
       *
       * <pre>
       *数据
       * </pre>
       */
      public Builder clearCardDataFailure() {
        cardDataFailure_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // repeated int32 turn_cards_data = 20;
      private java.util.List<java.lang.Integer> turnCardsData_ = java.util.Collections.emptyList();
      private void ensureTurnCardsDataIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          turnCardsData_ = new java.util.ArrayList<java.lang.Integer>(turnCardsData_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 turn_cards_data = 20;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTurnCardsDataList() {
        return java.util.Collections.unmodifiableList(turnCardsData_);
      }
      /**
       * <code>repeated int32 turn_cards_data = 20;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public int getTurnCardsDataCount() {
        return turnCardsData_.size();
      }
      /**
       * <code>repeated int32 turn_cards_data = 20;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public int getTurnCardsData(int index) {
        return turnCardsData_.get(index);
      }
      /**
       * <code>repeated int32 turn_cards_data = 20;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public Builder setTurnCardsData(
          int index, int value) {
        ensureTurnCardsDataIsMutable();
        turnCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 turn_cards_data = 20;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public Builder addTurnCardsData(int value) {
        ensureTurnCardsDataIsMutable();
        turnCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 turn_cards_data = 20;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public Builder addAllTurnCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTurnCardsDataIsMutable();
        super.addAll(values, turnCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 turn_cards_data = 20;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public Builder clearTurnCardsData() {
        turnCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // optional int32 turn_cards_count = 21;
      private int turnCardsCount_ ;
      /**
       * <code>optional int32 turn_cards_count = 21;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public boolean hasTurnCardsCount() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 turn_cards_count = 21;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public int getTurnCardsCount() {
        return turnCardsCount_;
      }
      /**
       * <code>optional int32 turn_cards_count = 21;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public Builder setTurnCardsCount(int value) {
        bitField0_ |= 0x00100000;
        turnCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 turn_cards_count = 21;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public Builder clearTurnCardsCount() {
        bitField0_ = (bitField0_ & ~0x00100000);
        turnCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 turn_out_card_type = 22;
      private int turnOutCardType_ ;
      /**
       * <code>optional int32 turn_out_card_type = 22;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public boolean hasTurnOutCardType() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 turn_out_card_type = 22;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public int getTurnOutCardType() {
        return turnOutCardType_;
      }
      /**
       * <code>optional int32 turn_out_card_type = 22;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public Builder setTurnOutCardType(int value) {
        bitField0_ |= 0x00200000;
        turnOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 turn_out_card_type = 22;</code>
       *
       * <pre>
       *最大牌数据
       * </pre>
       */
      public Builder clearTurnOutCardType() {
        bitField0_ = (bitField0_ & ~0x00200000);
        turnOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 23;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 23;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional int32 is_first_out = 23;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 23;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00400000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 23;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00400000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.OutCardDataNceqw)
    }

    static {
      defaultInstance = new OutCardDataNceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.OutCardDataNceqw)
  }

  public interface PukeGameEndNceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional int32 cur_round = 2;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getCurRound();

    // optional int32 game_round = 3;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    int getGameRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 player_num = 6;
    /**
     * <code>optional int32 player_num = 6;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 6;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 banker_player = 7;
    /**
     * <code>optional int32 banker_player = 7;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 7;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 reason = 8;
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 end_score = 9;
    /**
     * <code>repeated int32 end_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    int getEndScore(int index);

    // repeated int32 init_di_pai = 10;
    /**
     * <code>repeated int32 init_di_pai = 10;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getInitDiPaiList();
    /**
     * <code>repeated int32 init_di_pai = 10;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    int getInitDiPaiCount();
    /**
     * <code>repeated int32 init_di_pai = 10;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    int getInitDiPai(int index);

    // repeated int32 banker_mai_pai = 11;
    /**
     * <code>repeated int32 banker_mai_pai = 11;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getBankerMaiPaiList();
    /**
     * <code>repeated int32 banker_mai_pai = 11;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    int getBankerMaiPaiCount();
    /**
     * <code>repeated int32 banker_mai_pai = 11;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    int getBankerMaiPai(int index);

    // optional int32 get_score = 12;
    /**
     * <code>optional int32 get_score = 12;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    boolean hasGetScore();
    /**
     * <code>optional int32 get_score = 12;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getGetScore();

    // optional int32 di_fen = 13;
    /**
     * <code>optional int32 di_fen = 13;</code>
     *
     * <pre>
     *扣底分
     * </pre>
     */
    boolean hasDiFen();
    /**
     * <code>optional int32 di_fen = 13;</code>
     *
     * <pre>
     *扣底分
     * </pre>
     */
    int getDiFen();

    // optional int32 call_score = 14;
    /**
     * <code>optional int32 call_score = 14;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    boolean hasCallScore();
    /**
     * <code>optional int32 call_score = 14;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    int getCallScore();

    // optional int32 call_times = 15;
    /**
     * <code>optional int32 call_times = 15;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    boolean hasCallTimes();
    /**
     * <code>optional int32 call_times = 15;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    int getCallTimes();

    // optional int32 score_reason = 16;
    /**
     * <code>optional int32 score_reason = 16;</code>
     *
     * <pre>
     * //分数类型  1:清光 2：小光 3：过庄 4：投降 5：垮庄 6：小倒 7：大倒 8:级数
     * </pre>
     */
    boolean hasScoreReason();
    /**
     * <code>optional int32 score_reason = 16;</code>
     *
     * <pre>
     * //分数类型  1:清光 2：小光 3：过庄 4：投降 5：垮庄 6：小倒 7：大倒 8:级数
     * </pre>
     */
    int getScoreReason();

    // optional int32 di_times = 17;
    /**
     * <code>optional int32 di_times = 17;</code>
     *
     * <pre>
     *底分倍数
     * </pre>
     */
    boolean hasDiTimes();
    /**
     * <code>optional int32 di_times = 17;</code>
     *
     * <pre>
     *底分倍数
     * </pre>
     */
    int getDiTimes();

    // optional int32 zhu_type = 18;
    /**
     * <code>optional int32 zhu_type = 18;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    boolean hasZhuType();
    /**
     * <code>optional int32 zhu_type = 18;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    int getZhuType();

    // repeated int32 chong_guan_score = 19;
    /**
     * <code>repeated int32 chong_guan_score = 19;</code>
     *
     * <pre>
     *冲关分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getChongGuanScoreList();
    /**
     * <code>repeated int32 chong_guan_score = 19;</code>
     *
     * <pre>
     *冲关分数
     * </pre>
     */
    int getChongGuanScoreCount();
    /**
     * <code>repeated int32 chong_guan_score = 19;</code>
     *
     * <pre>
     *冲关分数
     * </pre>
     */
    int getChongGuanScore(int index);

    // repeated int32 bang_wang_score = 20;
    /**
     * <code>repeated int32 bang_wang_score = 20;</code>
     *
     * <pre>
     *傍王分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getBangWangScoreList();
    /**
     * <code>repeated int32 bang_wang_score = 20;</code>
     *
     * <pre>
     *傍王分数
     * </pre>
     */
    int getBangWangScoreCount();
    /**
     * <code>repeated int32 bang_wang_score = 20;</code>
     *
     * <pre>
     *傍王分数
     * </pre>
     */
    int getBangWangScore(int index);

    // repeated int32 win_lose_score = 21;
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinLoseScoreList();
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    int getWinLoseScoreCount();
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    int getWinLoseScore(int index);

    // optional int32 win_ji_num = 29;
    /**
     * <code>optional int32 win_ji_num = 29;</code>
     *
     * <pre>
     *级数
     * </pre>
     */
    boolean hasWinJiNum();
    /**
     * <code>optional int32 win_ji_num = 29;</code>
     *
     * <pre>
     *级数
     * </pre>
     */
    int getWinJiNum();

    // repeated .Int32ArrayResponse chong_guan_card = 30;
    /**
     * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
     *
     * <pre>
     *冲关牌
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getChongGuanCardList();
    /**
     * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
     *
     * <pre>
     *冲关牌
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getChongGuanCard(int index);
    /**
     * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
     *
     * <pre>
     *冲关牌
     * </pre>
     */
    int getChongGuanCardCount();
    /**
     * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
     *
     * <pre>
     *冲关牌
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChongGuanCardOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
     *
     * <pre>
     *冲关牌
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChongGuanCardOrBuilder(
        int index);

    // repeated int32 chong_guan_num = 31;
    /**
     * <code>repeated int32 chong_guan_num = 31;</code>
     *
     * <pre>
     *冲关数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getChongGuanNumList();
    /**
     * <code>repeated int32 chong_guan_num = 31;</code>
     *
     * <pre>
     *冲关数目
     * </pre>
     */
    int getChongGuanNumCount();
    /**
     * <code>repeated int32 chong_guan_num = 31;</code>
     *
     * <pre>
     *冲关数目
     * </pre>
     */
    int getChongGuanNum(int index);

    // repeated int32 all_end_score = 22;
    /**
     * <code>repeated int32 all_end_score = 22;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 22;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 22;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated .RoomPlayerResponse players = 23;
    /**
     * <code>repeated .RoomPlayerResponse players = 23;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 23;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 23;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 23;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 23;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 banker_times = 24;
    /**
     * <code>repeated int32 banker_times = 24;</code>
     *
     * <pre>
     *当庄次数
     * </pre>
     */
    java.util.List<java.lang.Integer> getBankerTimesList();
    /**
     * <code>repeated int32 banker_times = 24;</code>
     *
     * <pre>
     *当庄次数
     * </pre>
     */
    int getBankerTimesCount();
    /**
     * <code>repeated int32 banker_times = 24;</code>
     *
     * <pre>
     *当庄次数
     * </pre>
     */
    int getBankerTimes(int index);

    // repeated int32 win_times = 25;
    /**
     * <code>repeated int32 win_times = 25;</code>
     *
     * <pre>
     *赢次数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinTimesList();
    /**
     * <code>repeated int32 win_times = 25;</code>
     *
     * <pre>
     *赢次数
     * </pre>
     */
    int getWinTimesCount();
    /**
     * <code>repeated int32 win_times = 25;</code>
     *
     * <pre>
     *赢次数
     * </pre>
     */
    int getWinTimes(int index);

    // repeated int32 lose_times = 26;
    /**
     * <code>repeated int32 lose_times = 26;</code>
     *
     * <pre>
     *输次数
     * </pre>
     */
    java.util.List<java.lang.Integer> getLoseTimesList();
    /**
     * <code>repeated int32 lose_times = 26;</code>
     *
     * <pre>
     *输次数
     * </pre>
     */
    int getLoseTimesCount();
    /**
     * <code>repeated int32 lose_times = 26;</code>
     *
     * <pre>
     *输次数
     * </pre>
     */
    int getLoseTimes(int index);

    // repeated int32 chong_guan_score_max = 27;
    /**
     * <code>repeated int32 chong_guan_score_max = 27;</code>
     *
     * <pre>
     *最大冲关数
     * </pre>
     */
    java.util.List<java.lang.Integer> getChongGuanScoreMaxList();
    /**
     * <code>repeated int32 chong_guan_score_max = 27;</code>
     *
     * <pre>
     *最大冲关数
     * </pre>
     */
    int getChongGuanScoreMaxCount();
    /**
     * <code>repeated int32 chong_guan_score_max = 27;</code>
     *
     * <pre>
     *最大冲关数
     * </pre>
     */
    int getChongGuanScoreMax(int index);

    // repeated int32 bang_wang_score_max = 28;
    /**
     * <code>repeated int32 bang_wang_score_max = 28;</code>
     *
     * <pre>
     *最大傍王数
     * </pre>
     */
    java.util.List<java.lang.Integer> getBangWangScoreMaxList();
    /**
     * <code>repeated int32 bang_wang_score_max = 28;</code>
     *
     * <pre>
     *最大傍王数
     * </pre>
     */
    int getBangWangScoreMaxCount();
    /**
     * <code>repeated int32 bang_wang_score_max = 28;</code>
     *
     * <pre>
     *最大傍王数
     * </pre>
     */
    int getBangWangScoreMax(int index);
  }
  /**
   * Protobuf type {@code nceqw.PukeGameEndNceqw}
   *
   * <pre>
   *结算 1002
   * </pre>
   */
  public static final class PukeGameEndNceqw extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndNceqwOrBuilder {
    // Use PukeGameEndNceqw.newBuilder() to construct.
    private PukeGameEndNceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndNceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndNceqw defaultInstance;
    public static PukeGameEndNceqw getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndNceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndNceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              curRound_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameRound_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              playerNum_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              reason_ = input.readInt32();
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                initDiPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              initDiPai_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                initDiPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                initDiPai_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                bankerMaiPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              bankerMaiPai_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                bankerMaiPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                bankerMaiPai_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              bitField0_ |= 0x00000040;
              getScore_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000080;
              diFen_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000100;
              callScore_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000200;
              callTimes_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000400;
              scoreReason_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000800;
              diTimes_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00001000;
              zhuType_ = input.readInt32();
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                chongGuanScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              chongGuanScore_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                chongGuanScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                chongGuanScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                bangWangScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              bangWangScore_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                bangWangScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                bangWangScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                winLoseScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              winLoseScore_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                winLoseScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winLoseScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 186: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x02000000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
                bankerTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              bankerTimes_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000) && input.getBytesUntilLimit() > 0) {
                bankerTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                bankerTimes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 200: {
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
                winTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x08000000;
              }
              winTimes_.add(input.readInt32());
              break;
            }
            case 202: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x08000000) == 0x08000000) && input.getBytesUntilLimit() > 0) {
                winTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x08000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winTimes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 208: {
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
                loseTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x10000000;
              }
              loseTimes_.add(input.readInt32());
              break;
            }
            case 210: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000) && input.getBytesUntilLimit() > 0) {
                loseTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x10000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                loseTimes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 216: {
              if (!((mutable_bitField0_ & 0x20000000) == 0x20000000)) {
                chongGuanScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x20000000;
              }
              chongGuanScoreMax_.add(input.readInt32());
              break;
            }
            case 218: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x20000000) == 0x20000000) && input.getBytesUntilLimit() > 0) {
                chongGuanScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x20000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                chongGuanScoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 224: {
              if (!((mutable_bitField0_ & 0x40000000) == 0x40000000)) {
                bangWangScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x40000000;
              }
              bangWangScoreMax_.add(input.readInt32());
              break;
            }
            case 226: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x40000000) == 0x40000000) && input.getBytesUntilLimit() > 0) {
                bangWangScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x40000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                bangWangScoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 232: {
              bitField0_ |= 0x00002000;
              winJiNum_ = input.readInt32();
              break;
            }
            case 242: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                chongGuanCard_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00400000;
              }
              chongGuanCard_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 248: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                chongGuanNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              chongGuanNum_.add(input.readInt32());
              break;
            }
            case 250: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                chongGuanNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                chongGuanNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          initDiPai_ = java.util.Collections.unmodifiableList(initDiPai_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          bankerMaiPai_ = java.util.Collections.unmodifiableList(bankerMaiPai_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          chongGuanScore_ = java.util.Collections.unmodifiableList(chongGuanScore_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          bangWangScore_ = java.util.Collections.unmodifiableList(bangWangScore_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          winLoseScore_ = java.util.Collections.unmodifiableList(winLoseScore_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
          bankerTimes_ = java.util.Collections.unmodifiableList(bankerTimes_);
        }
        if (((mutable_bitField0_ & 0x08000000) == 0x08000000)) {
          winTimes_ = java.util.Collections.unmodifiableList(winTimes_);
        }
        if (((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
          loseTimes_ = java.util.Collections.unmodifiableList(loseTimes_);
        }
        if (((mutable_bitField0_ & 0x20000000) == 0x20000000)) {
          chongGuanScoreMax_ = java.util.Collections.unmodifiableList(chongGuanScoreMax_);
        }
        if (((mutable_bitField0_ & 0x40000000) == 0x40000000)) {
          bangWangScoreMax_ = java.util.Collections.unmodifiableList(bangWangScoreMax_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          chongGuanCard_ = java.util.Collections.unmodifiableList(chongGuanCard_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          chongGuanNum_ = java.util.Collections.unmodifiableList(chongGuanNum_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_PukeGameEndNceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_PukeGameEndNceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw.class, protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndNceqw> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndNceqw>() {
      public PukeGameEndNceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndNceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndNceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 cur_round = 2;
    public static final int CUR_ROUND_FIELD_NUMBER = 2;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_round = 3;
    public static final int GAME_ROUND_FIELD_NUMBER = 3;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 player_num = 6;
    public static final int PLAYER_NUM_FIELD_NUMBER = 6;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 6;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_num = 6;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 banker_player = 7;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 7;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 7;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 banker_player = 7;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 reason = 8;
    public static final int REASON_FIELD_NUMBER = 8;
    private int reason_;
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 end_score = 9;
    public static final int END_SCORE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 9;</code>
     *
     * <pre>
     *积分
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // repeated int32 init_di_pai = 10;
    public static final int INIT_DI_PAI_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> initDiPai_;
    /**
     * <code>repeated int32 init_di_pai = 10;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getInitDiPaiList() {
      return initDiPai_;
    }
    /**
     * <code>repeated int32 init_di_pai = 10;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    public int getInitDiPaiCount() {
      return initDiPai_.size();
    }
    /**
     * <code>repeated int32 init_di_pai = 10;</code>
     *
     * <pre>
     *初始底牌
     * </pre>
     */
    public int getInitDiPai(int index) {
      return initDiPai_.get(index);
    }

    // repeated int32 banker_mai_pai = 11;
    public static final int BANKER_MAI_PAI_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> bankerMaiPai_;
    /**
     * <code>repeated int32 banker_mai_pai = 11;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBankerMaiPaiList() {
      return bankerMaiPai_;
    }
    /**
     * <code>repeated int32 banker_mai_pai = 11;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    public int getBankerMaiPaiCount() {
      return bankerMaiPai_.size();
    }
    /**
     * <code>repeated int32 banker_mai_pai = 11;</code>
     *
     * <pre>
     *庄家埋牌
     * </pre>
     */
    public int getBankerMaiPai(int index) {
      return bankerMaiPai_.get(index);
    }

    // optional int32 get_score = 12;
    public static final int GET_SCORE_FIELD_NUMBER = 12;
    private int getScore_;
    /**
     * <code>optional int32 get_score = 12;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public boolean hasGetScore() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 get_score = 12;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getGetScore() {
      return getScore_;
    }

    // optional int32 di_fen = 13;
    public static final int DI_FEN_FIELD_NUMBER = 13;
    private int diFen_;
    /**
     * <code>optional int32 di_fen = 13;</code>
     *
     * <pre>
     *扣底分
     * </pre>
     */
    public boolean hasDiFen() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 di_fen = 13;</code>
     *
     * <pre>
     *扣底分
     * </pre>
     */
    public int getDiFen() {
      return diFen_;
    }

    // optional int32 call_score = 14;
    public static final int CALL_SCORE_FIELD_NUMBER = 14;
    private int callScore_;
    /**
     * <code>optional int32 call_score = 14;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    public boolean hasCallScore() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 call_score = 14;</code>
     *
     * <pre>
     *叫分
     * </pre>
     */
    public int getCallScore() {
      return callScore_;
    }

    // optional int32 call_times = 15;
    public static final int CALL_TIMES_FIELD_NUMBER = 15;
    private int callTimes_;
    /**
     * <code>optional int32 call_times = 15;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    public boolean hasCallTimes() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 call_times = 15;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    public int getCallTimes() {
      return callTimes_;
    }

    // optional int32 score_reason = 16;
    public static final int SCORE_REASON_FIELD_NUMBER = 16;
    private int scoreReason_;
    /**
     * <code>optional int32 score_reason = 16;</code>
     *
     * <pre>
     * //分数类型  1:清光 2：小光 3：过庄 4：投降 5：垮庄 6：小倒 7：大倒 8:级数
     * </pre>
     */
    public boolean hasScoreReason() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 score_reason = 16;</code>
     *
     * <pre>
     * //分数类型  1:清光 2：小光 3：过庄 4：投降 5：垮庄 6：小倒 7：大倒 8:级数
     * </pre>
     */
    public int getScoreReason() {
      return scoreReason_;
    }

    // optional int32 di_times = 17;
    public static final int DI_TIMES_FIELD_NUMBER = 17;
    private int diTimes_;
    /**
     * <code>optional int32 di_times = 17;</code>
     *
     * <pre>
     *底分倍数
     * </pre>
     */
    public boolean hasDiTimes() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 di_times = 17;</code>
     *
     * <pre>
     *底分倍数
     * </pre>
     */
    public int getDiTimes() {
      return diTimes_;
    }

    // optional int32 zhu_type = 18;
    public static final int ZHU_TYPE_FIELD_NUMBER = 18;
    private int zhuType_;
    /**
     * <code>optional int32 zhu_type = 18;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public boolean hasZhuType() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 zhu_type = 18;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public int getZhuType() {
      return zhuType_;
    }

    // repeated int32 chong_guan_score = 19;
    public static final int CHONG_GUAN_SCORE_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> chongGuanScore_;
    /**
     * <code>repeated int32 chong_guan_score = 19;</code>
     *
     * <pre>
     *冲关分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChongGuanScoreList() {
      return chongGuanScore_;
    }
    /**
     * <code>repeated int32 chong_guan_score = 19;</code>
     *
     * <pre>
     *冲关分数
     * </pre>
     */
    public int getChongGuanScoreCount() {
      return chongGuanScore_.size();
    }
    /**
     * <code>repeated int32 chong_guan_score = 19;</code>
     *
     * <pre>
     *冲关分数
     * </pre>
     */
    public int getChongGuanScore(int index) {
      return chongGuanScore_.get(index);
    }

    // repeated int32 bang_wang_score = 20;
    public static final int BANG_WANG_SCORE_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> bangWangScore_;
    /**
     * <code>repeated int32 bang_wang_score = 20;</code>
     *
     * <pre>
     *傍王分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBangWangScoreList() {
      return bangWangScore_;
    }
    /**
     * <code>repeated int32 bang_wang_score = 20;</code>
     *
     * <pre>
     *傍王分数
     * </pre>
     */
    public int getBangWangScoreCount() {
      return bangWangScore_.size();
    }
    /**
     * <code>repeated int32 bang_wang_score = 20;</code>
     *
     * <pre>
     *傍王分数
     * </pre>
     */
    public int getBangWangScore(int index) {
      return bangWangScore_.get(index);
    }

    // repeated int32 win_lose_score = 21;
    public static final int WIN_LOSE_SCORE_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> winLoseScore_;
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinLoseScoreList() {
      return winLoseScore_;
    }
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    public int getWinLoseScoreCount() {
      return winLoseScore_.size();
    }
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     *牌局分
     * </pre>
     */
    public int getWinLoseScore(int index) {
      return winLoseScore_.get(index);
    }

    // optional int32 win_ji_num = 29;
    public static final int WIN_JI_NUM_FIELD_NUMBER = 29;
    private int winJiNum_;
    /**
     * <code>optional int32 win_ji_num = 29;</code>
     *
     * <pre>
     *级数
     * </pre>
     */
    public boolean hasWinJiNum() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 win_ji_num = 29;</code>
     *
     * <pre>
     *级数
     * </pre>
     */
    public int getWinJiNum() {
      return winJiNum_;
    }

    // repeated .Int32ArrayResponse chong_guan_card = 30;
    public static final int CHONG_GUAN_CARD_FIELD_NUMBER = 30;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> chongGuanCard_;
    /**
     * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
     *
     * <pre>
     *冲关牌
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChongGuanCardList() {
      return chongGuanCard_;
    }
    /**
     * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
     *
     * <pre>
     *冲关牌
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChongGuanCardOrBuilderList() {
      return chongGuanCard_;
    }
    /**
     * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
     *
     * <pre>
     *冲关牌
     * </pre>
     */
    public int getChongGuanCardCount() {
      return chongGuanCard_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
     *
     * <pre>
     *冲关牌
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getChongGuanCard(int index) {
      return chongGuanCard_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
     *
     * <pre>
     *冲关牌
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChongGuanCardOrBuilder(
        int index) {
      return chongGuanCard_.get(index);
    }

    // repeated int32 chong_guan_num = 31;
    public static final int CHONG_GUAN_NUM_FIELD_NUMBER = 31;
    private java.util.List<java.lang.Integer> chongGuanNum_;
    /**
     * <code>repeated int32 chong_guan_num = 31;</code>
     *
     * <pre>
     *冲关数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChongGuanNumList() {
      return chongGuanNum_;
    }
    /**
     * <code>repeated int32 chong_guan_num = 31;</code>
     *
     * <pre>
     *冲关数目
     * </pre>
     */
    public int getChongGuanNumCount() {
      return chongGuanNum_.size();
    }
    /**
     * <code>repeated int32 chong_guan_num = 31;</code>
     *
     * <pre>
     *冲关数目
     * </pre>
     */
    public int getChongGuanNum(int index) {
      return chongGuanNum_.get(index);
    }

    // repeated int32 all_end_score = 22;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 22;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 22;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 22;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated .RoomPlayerResponse players = 23;
    public static final int PLAYERS_FIELD_NUMBER = 23;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 23;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 23;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 23;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 23;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 23;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 banker_times = 24;
    public static final int BANKER_TIMES_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> bankerTimes_;
    /**
     * <code>repeated int32 banker_times = 24;</code>
     *
     * <pre>
     *当庄次数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBankerTimesList() {
      return bankerTimes_;
    }
    /**
     * <code>repeated int32 banker_times = 24;</code>
     *
     * <pre>
     *当庄次数
     * </pre>
     */
    public int getBankerTimesCount() {
      return bankerTimes_.size();
    }
    /**
     * <code>repeated int32 banker_times = 24;</code>
     *
     * <pre>
     *当庄次数
     * </pre>
     */
    public int getBankerTimes(int index) {
      return bankerTimes_.get(index);
    }

    // repeated int32 win_times = 25;
    public static final int WIN_TIMES_FIELD_NUMBER = 25;
    private java.util.List<java.lang.Integer> winTimes_;
    /**
     * <code>repeated int32 win_times = 25;</code>
     *
     * <pre>
     *赢次数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinTimesList() {
      return winTimes_;
    }
    /**
     * <code>repeated int32 win_times = 25;</code>
     *
     * <pre>
     *赢次数
     * </pre>
     */
    public int getWinTimesCount() {
      return winTimes_.size();
    }
    /**
     * <code>repeated int32 win_times = 25;</code>
     *
     * <pre>
     *赢次数
     * </pre>
     */
    public int getWinTimes(int index) {
      return winTimes_.get(index);
    }

    // repeated int32 lose_times = 26;
    public static final int LOSE_TIMES_FIELD_NUMBER = 26;
    private java.util.List<java.lang.Integer> loseTimes_;
    /**
     * <code>repeated int32 lose_times = 26;</code>
     *
     * <pre>
     *输次数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLoseTimesList() {
      return loseTimes_;
    }
    /**
     * <code>repeated int32 lose_times = 26;</code>
     *
     * <pre>
     *输次数
     * </pre>
     */
    public int getLoseTimesCount() {
      return loseTimes_.size();
    }
    /**
     * <code>repeated int32 lose_times = 26;</code>
     *
     * <pre>
     *输次数
     * </pre>
     */
    public int getLoseTimes(int index) {
      return loseTimes_.get(index);
    }

    // repeated int32 chong_guan_score_max = 27;
    public static final int CHONG_GUAN_SCORE_MAX_FIELD_NUMBER = 27;
    private java.util.List<java.lang.Integer> chongGuanScoreMax_;
    /**
     * <code>repeated int32 chong_guan_score_max = 27;</code>
     *
     * <pre>
     *最大冲关数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChongGuanScoreMaxList() {
      return chongGuanScoreMax_;
    }
    /**
     * <code>repeated int32 chong_guan_score_max = 27;</code>
     *
     * <pre>
     *最大冲关数
     * </pre>
     */
    public int getChongGuanScoreMaxCount() {
      return chongGuanScoreMax_.size();
    }
    /**
     * <code>repeated int32 chong_guan_score_max = 27;</code>
     *
     * <pre>
     *最大冲关数
     * </pre>
     */
    public int getChongGuanScoreMax(int index) {
      return chongGuanScoreMax_.get(index);
    }

    // repeated int32 bang_wang_score_max = 28;
    public static final int BANG_WANG_SCORE_MAX_FIELD_NUMBER = 28;
    private java.util.List<java.lang.Integer> bangWangScoreMax_;
    /**
     * <code>repeated int32 bang_wang_score_max = 28;</code>
     *
     * <pre>
     *最大傍王数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBangWangScoreMaxList() {
      return bangWangScoreMax_;
    }
    /**
     * <code>repeated int32 bang_wang_score_max = 28;</code>
     *
     * <pre>
     *最大傍王数
     * </pre>
     */
    public int getBangWangScoreMaxCount() {
      return bangWangScoreMax_.size();
    }
    /**
     * <code>repeated int32 bang_wang_score_max = 28;</code>
     *
     * <pre>
     *最大傍王数
     * </pre>
     */
    public int getBangWangScoreMax(int index) {
      return bangWangScoreMax_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      curRound_ = 0;
      gameRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      bankerPlayer_ = 0;
      reason_ = 0;
      endScore_ = java.util.Collections.emptyList();
      initDiPai_ = java.util.Collections.emptyList();
      bankerMaiPai_ = java.util.Collections.emptyList();
      getScore_ = 0;
      diFen_ = 0;
      callScore_ = 0;
      callTimes_ = 0;
      scoreReason_ = 0;
      diTimes_ = 0;
      zhuType_ = 0;
      chongGuanScore_ = java.util.Collections.emptyList();
      bangWangScore_ = java.util.Collections.emptyList();
      winLoseScore_ = java.util.Collections.emptyList();
      winJiNum_ = 0;
      chongGuanCard_ = java.util.Collections.emptyList();
      chongGuanNum_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
      bankerTimes_ = java.util.Collections.emptyList();
      winTimes_ = java.util.Collections.emptyList();
      loseTimes_ = java.util.Collections.emptyList();
      chongGuanScoreMax_ = java.util.Collections.emptyList();
      bangWangScoreMax_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameRound_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, reason_);
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(9, endScore_.get(i));
      }
      for (int i = 0; i < initDiPai_.size(); i++) {
        output.writeInt32(10, initDiPai_.get(i));
      }
      for (int i = 0; i < bankerMaiPai_.size(); i++) {
        output.writeInt32(11, bankerMaiPai_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(12, getScore_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(13, diFen_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(14, callScore_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(15, callTimes_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(16, scoreReason_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(17, diTimes_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(18, zhuType_);
      }
      for (int i = 0; i < chongGuanScore_.size(); i++) {
        output.writeInt32(19, chongGuanScore_.get(i));
      }
      for (int i = 0; i < bangWangScore_.size(); i++) {
        output.writeInt32(20, bangWangScore_.get(i));
      }
      for (int i = 0; i < winLoseScore_.size(); i++) {
        output.writeInt32(21, winLoseScore_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(22, allEndScore_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(23, players_.get(i));
      }
      for (int i = 0; i < bankerTimes_.size(); i++) {
        output.writeInt32(24, bankerTimes_.get(i));
      }
      for (int i = 0; i < winTimes_.size(); i++) {
        output.writeInt32(25, winTimes_.get(i));
      }
      for (int i = 0; i < loseTimes_.size(); i++) {
        output.writeInt32(26, loseTimes_.get(i));
      }
      for (int i = 0; i < chongGuanScoreMax_.size(); i++) {
        output.writeInt32(27, chongGuanScoreMax_.get(i));
      }
      for (int i = 0; i < bangWangScoreMax_.size(); i++) {
        output.writeInt32(28, bangWangScoreMax_.get(i));
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(29, winJiNum_);
      }
      for (int i = 0; i < chongGuanCard_.size(); i++) {
        output.writeMessage(30, chongGuanCard_.get(i));
      }
      for (int i = 0; i < chongGuanNum_.size(); i++) {
        output.writeInt32(31, chongGuanNum_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < initDiPai_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(initDiPai_.get(i));
        }
        size += dataSize;
        size += 1 * getInitDiPaiList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bankerMaiPai_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bankerMaiPai_.get(i));
        }
        size += dataSize;
        size += 1 * getBankerMaiPaiList().size();
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, getScore_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, diFen_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, callScore_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, callTimes_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, scoreReason_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, diTimes_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, zhuType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chongGuanScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chongGuanScore_.get(i));
        }
        size += dataSize;
        size += 2 * getChongGuanScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bangWangScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bangWangScore_.get(i));
        }
        size += dataSize;
        size += 2 * getBangWangScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winLoseScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winLoseScore_.get(i));
        }
        size += dataSize;
        size += 2 * getWinLoseScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 2 * getAllEndScoreList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bankerTimes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bankerTimes_.get(i));
        }
        size += dataSize;
        size += 2 * getBankerTimesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winTimes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winTimes_.get(i));
        }
        size += dataSize;
        size += 2 * getWinTimesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < loseTimes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(loseTimes_.get(i));
        }
        size += dataSize;
        size += 2 * getLoseTimesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chongGuanScoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chongGuanScoreMax_.get(i));
        }
        size += dataSize;
        size += 2 * getChongGuanScoreMaxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bangWangScoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bangWangScoreMax_.get(i));
        }
        size += dataSize;
        size += 2 * getBangWangScoreMaxList().size();
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(29, winJiNum_);
      }
      for (int i = 0; i < chongGuanCard_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, chongGuanCard_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chongGuanNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chongGuanNum_.get(i));
        }
        size += dataSize;
        size += 2 * getChongGuanNumList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.PukeGameEndNceqw}
     *
     * <pre>
     *结算 1002
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_PukeGameEndNceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_PukeGameEndNceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw.class, protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getChongGuanCardFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        initDiPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        bankerMaiPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        getScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        diFen_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        callScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        callTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        scoreReason_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        diTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        zhuType_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        chongGuanScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        bangWangScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        winLoseScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        winJiNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        if (chongGuanCardBuilder_ == null) {
          chongGuanCard_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00400000);
        } else {
          chongGuanCardBuilder_.clear();
        }
        chongGuanNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x02000000);
        } else {
          playersBuilder_.clear();
        }
        bankerTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        winTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        loseTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        chongGuanScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x20000000);
        bangWangScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x40000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_PukeGameEndNceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw result = new protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRound_ = gameRound_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.endScore_ = endScore_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          initDiPai_ = java.util.Collections.unmodifiableList(initDiPai_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.initDiPai_ = initDiPai_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          bankerMaiPai_ = java.util.Collections.unmodifiableList(bankerMaiPai_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.bankerMaiPai_ = bankerMaiPai_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000040;
        }
        result.getScore_ = getScore_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.diFen_ = diFen_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.callScore_ = callScore_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.callTimes_ = callTimes_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.scoreReason_ = scoreReason_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.diTimes_ = diTimes_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.zhuType_ = zhuType_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          chongGuanScore_ = java.util.Collections.unmodifiableList(chongGuanScore_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.chongGuanScore_ = chongGuanScore_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          bangWangScore_ = java.util.Collections.unmodifiableList(bangWangScore_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.bangWangScore_ = bangWangScore_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          winLoseScore_ = java.util.Collections.unmodifiableList(winLoseScore_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.winLoseScore_ = winLoseScore_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.winJiNum_ = winJiNum_;
        if (chongGuanCardBuilder_ == null) {
          if (((bitField0_ & 0x00400000) == 0x00400000)) {
            chongGuanCard_ = java.util.Collections.unmodifiableList(chongGuanCard_);
            bitField0_ = (bitField0_ & ~0x00400000);
          }
          result.chongGuanCard_ = chongGuanCard_;
        } else {
          result.chongGuanCard_ = chongGuanCardBuilder_.build();
        }
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          chongGuanNum_ = java.util.Collections.unmodifiableList(chongGuanNum_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.chongGuanNum_ = chongGuanNum_;
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.allEndScore_ = allEndScore_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x02000000) == 0x02000000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x02000000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          bankerTimes_ = java.util.Collections.unmodifiableList(bankerTimes_);
          bitField0_ = (bitField0_ & ~0x04000000);
        }
        result.bankerTimes_ = bankerTimes_;
        if (((bitField0_ & 0x08000000) == 0x08000000)) {
          winTimes_ = java.util.Collections.unmodifiableList(winTimes_);
          bitField0_ = (bitField0_ & ~0x08000000);
        }
        result.winTimes_ = winTimes_;
        if (((bitField0_ & 0x10000000) == 0x10000000)) {
          loseTimes_ = java.util.Collections.unmodifiableList(loseTimes_);
          bitField0_ = (bitField0_ & ~0x10000000);
        }
        result.loseTimes_ = loseTimes_;
        if (((bitField0_ & 0x20000000) == 0x20000000)) {
          chongGuanScoreMax_ = java.util.Collections.unmodifiableList(chongGuanScoreMax_);
          bitField0_ = (bitField0_ & ~0x20000000);
        }
        result.chongGuanScoreMax_ = chongGuanScoreMax_;
        if (((bitField0_ & 0x40000000) == 0x40000000)) {
          bangWangScoreMax_ = java.util.Collections.unmodifiableList(bangWangScoreMax_);
          bitField0_ = (bitField0_ & ~0x40000000);
        }
        result.bangWangScoreMax_ = bangWangScoreMax_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (!other.initDiPai_.isEmpty()) {
          if (initDiPai_.isEmpty()) {
            initDiPai_ = other.initDiPai_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureInitDiPaiIsMutable();
            initDiPai_.addAll(other.initDiPai_);
          }
          onChanged();
        }
        if (!other.bankerMaiPai_.isEmpty()) {
          if (bankerMaiPai_.isEmpty()) {
            bankerMaiPai_ = other.bankerMaiPai_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureBankerMaiPaiIsMutable();
            bankerMaiPai_.addAll(other.bankerMaiPai_);
          }
          onChanged();
        }
        if (other.hasGetScore()) {
          setGetScore(other.getGetScore());
        }
        if (other.hasDiFen()) {
          setDiFen(other.getDiFen());
        }
        if (other.hasCallScore()) {
          setCallScore(other.getCallScore());
        }
        if (other.hasCallTimes()) {
          setCallTimes(other.getCallTimes());
        }
        if (other.hasScoreReason()) {
          setScoreReason(other.getScoreReason());
        }
        if (other.hasDiTimes()) {
          setDiTimes(other.getDiTimes());
        }
        if (other.hasZhuType()) {
          setZhuType(other.getZhuType());
        }
        if (!other.chongGuanScore_.isEmpty()) {
          if (chongGuanScore_.isEmpty()) {
            chongGuanScore_ = other.chongGuanScore_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureChongGuanScoreIsMutable();
            chongGuanScore_.addAll(other.chongGuanScore_);
          }
          onChanged();
        }
        if (!other.bangWangScore_.isEmpty()) {
          if (bangWangScore_.isEmpty()) {
            bangWangScore_ = other.bangWangScore_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureBangWangScoreIsMutable();
            bangWangScore_.addAll(other.bangWangScore_);
          }
          onChanged();
        }
        if (!other.winLoseScore_.isEmpty()) {
          if (winLoseScore_.isEmpty()) {
            winLoseScore_ = other.winLoseScore_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureWinLoseScoreIsMutable();
            winLoseScore_.addAll(other.winLoseScore_);
          }
          onChanged();
        }
        if (other.hasWinJiNum()) {
          setWinJiNum(other.getWinJiNum());
        }
        if (chongGuanCardBuilder_ == null) {
          if (!other.chongGuanCard_.isEmpty()) {
            if (chongGuanCard_.isEmpty()) {
              chongGuanCard_ = other.chongGuanCard_;
              bitField0_ = (bitField0_ & ~0x00400000);
            } else {
              ensureChongGuanCardIsMutable();
              chongGuanCard_.addAll(other.chongGuanCard_);
            }
            onChanged();
          }
        } else {
          if (!other.chongGuanCard_.isEmpty()) {
            if (chongGuanCardBuilder_.isEmpty()) {
              chongGuanCardBuilder_.dispose();
              chongGuanCardBuilder_ = null;
              chongGuanCard_ = other.chongGuanCard_;
              bitField0_ = (bitField0_ & ~0x00400000);
              chongGuanCardBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChongGuanCardFieldBuilder() : null;
            } else {
              chongGuanCardBuilder_.addAllMessages(other.chongGuanCard_);
            }
          }
        }
        if (!other.chongGuanNum_.isEmpty()) {
          if (chongGuanNum_.isEmpty()) {
            chongGuanNum_ = other.chongGuanNum_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureChongGuanNumIsMutable();
            chongGuanNum_.addAll(other.chongGuanNum_);
          }
          onChanged();
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x02000000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x02000000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.bankerTimes_.isEmpty()) {
          if (bankerTimes_.isEmpty()) {
            bankerTimes_ = other.bankerTimes_;
            bitField0_ = (bitField0_ & ~0x04000000);
          } else {
            ensureBankerTimesIsMutable();
            bankerTimes_.addAll(other.bankerTimes_);
          }
          onChanged();
        }
        if (!other.winTimes_.isEmpty()) {
          if (winTimes_.isEmpty()) {
            winTimes_ = other.winTimes_;
            bitField0_ = (bitField0_ & ~0x08000000);
          } else {
            ensureWinTimesIsMutable();
            winTimes_.addAll(other.winTimes_);
          }
          onChanged();
        }
        if (!other.loseTimes_.isEmpty()) {
          if (loseTimes_.isEmpty()) {
            loseTimes_ = other.loseTimes_;
            bitField0_ = (bitField0_ & ~0x10000000);
          } else {
            ensureLoseTimesIsMutable();
            loseTimes_.addAll(other.loseTimes_);
          }
          onChanged();
        }
        if (!other.chongGuanScoreMax_.isEmpty()) {
          if (chongGuanScoreMax_.isEmpty()) {
            chongGuanScoreMax_ = other.chongGuanScoreMax_;
            bitField0_ = (bitField0_ & ~0x20000000);
          } else {
            ensureChongGuanScoreMaxIsMutable();
            chongGuanScoreMax_.addAll(other.chongGuanScoreMax_);
          }
          onChanged();
        }
        if (!other.bangWangScoreMax_.isEmpty()) {
          if (bangWangScoreMax_.isEmpty()) {
            bangWangScoreMax_ = other.bangWangScoreMax_;
            bitField0_ = (bitField0_ & ~0x40000000);
          } else {
            ensureBangWangScoreMaxIsMutable();
            bangWangScoreMax_.addAll(other.bangWangScoreMax_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.PukeGameEndNceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 cur_round = 2;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000002;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 3;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000004;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 player_num = 6;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 6;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 player_num = 6;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 6;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000020;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 6;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000020);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 7;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 7;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 banker_player = 7;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 7;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000040;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 7;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000040);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 8;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000080;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000080);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 end_score = 9;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 end_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 9;</code>
       *
       * <pre>
       *积分
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated int32 init_di_pai = 10;
      private java.util.List<java.lang.Integer> initDiPai_ = java.util.Collections.emptyList();
      private void ensureInitDiPaiIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          initDiPai_ = new java.util.ArrayList<java.lang.Integer>(initDiPai_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 init_di_pai = 10;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getInitDiPaiList() {
        return java.util.Collections.unmodifiableList(initDiPai_);
      }
      /**
       * <code>repeated int32 init_di_pai = 10;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public int getInitDiPaiCount() {
        return initDiPai_.size();
      }
      /**
       * <code>repeated int32 init_di_pai = 10;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public int getInitDiPai(int index) {
        return initDiPai_.get(index);
      }
      /**
       * <code>repeated int32 init_di_pai = 10;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public Builder setInitDiPai(
          int index, int value) {
        ensureInitDiPaiIsMutable();
        initDiPai_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 init_di_pai = 10;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public Builder addInitDiPai(int value) {
        ensureInitDiPaiIsMutable();
        initDiPai_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 init_di_pai = 10;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public Builder addAllInitDiPai(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInitDiPaiIsMutable();
        super.addAll(values, initDiPai_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 init_di_pai = 10;</code>
       *
       * <pre>
       *初始底牌
       * </pre>
       */
      public Builder clearInitDiPai() {
        initDiPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 banker_mai_pai = 11;
      private java.util.List<java.lang.Integer> bankerMaiPai_ = java.util.Collections.emptyList();
      private void ensureBankerMaiPaiIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          bankerMaiPai_ = new java.util.ArrayList<java.lang.Integer>(bankerMaiPai_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 banker_mai_pai = 11;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBankerMaiPaiList() {
        return java.util.Collections.unmodifiableList(bankerMaiPai_);
      }
      /**
       * <code>repeated int32 banker_mai_pai = 11;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public int getBankerMaiPaiCount() {
        return bankerMaiPai_.size();
      }
      /**
       * <code>repeated int32 banker_mai_pai = 11;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public int getBankerMaiPai(int index) {
        return bankerMaiPai_.get(index);
      }
      /**
       * <code>repeated int32 banker_mai_pai = 11;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public Builder setBankerMaiPai(
          int index, int value) {
        ensureBankerMaiPaiIsMutable();
        bankerMaiPai_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 banker_mai_pai = 11;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public Builder addBankerMaiPai(int value) {
        ensureBankerMaiPaiIsMutable();
        bankerMaiPai_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 banker_mai_pai = 11;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public Builder addAllBankerMaiPai(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBankerMaiPaiIsMutable();
        super.addAll(values, bankerMaiPai_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 banker_mai_pai = 11;</code>
       *
       * <pre>
       *庄家埋牌
       * </pre>
       */
      public Builder clearBankerMaiPai() {
        bankerMaiPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // optional int32 get_score = 12;
      private int getScore_ ;
      /**
       * <code>optional int32 get_score = 12;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public boolean hasGetScore() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 get_score = 12;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getGetScore() {
        return getScore_;
      }
      /**
       * <code>optional int32 get_score = 12;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder setGetScore(int value) {
        bitField0_ |= 0x00000800;
        getScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 get_score = 12;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder clearGetScore() {
        bitField0_ = (bitField0_ & ~0x00000800);
        getScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 di_fen = 13;
      private int diFen_ ;
      /**
       * <code>optional int32 di_fen = 13;</code>
       *
       * <pre>
       *扣底分
       * </pre>
       */
      public boolean hasDiFen() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 di_fen = 13;</code>
       *
       * <pre>
       *扣底分
       * </pre>
       */
      public int getDiFen() {
        return diFen_;
      }
      /**
       * <code>optional int32 di_fen = 13;</code>
       *
       * <pre>
       *扣底分
       * </pre>
       */
      public Builder setDiFen(int value) {
        bitField0_ |= 0x00001000;
        diFen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_fen = 13;</code>
       *
       * <pre>
       *扣底分
       * </pre>
       */
      public Builder clearDiFen() {
        bitField0_ = (bitField0_ & ~0x00001000);
        diFen_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_score = 14;
      private int callScore_ ;
      /**
       * <code>optional int32 call_score = 14;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public boolean hasCallScore() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 call_score = 14;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public int getCallScore() {
        return callScore_;
      }
      /**
       * <code>optional int32 call_score = 14;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public Builder setCallScore(int value) {
        bitField0_ |= 0x00002000;
        callScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_score = 14;</code>
       *
       * <pre>
       *叫分
       * </pre>
       */
      public Builder clearCallScore() {
        bitField0_ = (bitField0_ & ~0x00002000);
        callScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_times = 15;
      private int callTimes_ ;
      /**
       * <code>optional int32 call_times = 15;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public boolean hasCallTimes() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 call_times = 15;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public int getCallTimes() {
        return callTimes_;
      }
      /**
       * <code>optional int32 call_times = 15;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public Builder setCallTimes(int value) {
        bitField0_ |= 0x00004000;
        callTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_times = 15;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public Builder clearCallTimes() {
        bitField0_ = (bitField0_ & ~0x00004000);
        callTimes_ = 0;
        onChanged();
        return this;
      }

      // optional int32 score_reason = 16;
      private int scoreReason_ ;
      /**
       * <code>optional int32 score_reason = 16;</code>
       *
       * <pre>
       * //分数类型  1:清光 2：小光 3：过庄 4：投降 5：垮庄 6：小倒 7：大倒 8:级数
       * </pre>
       */
      public boolean hasScoreReason() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 score_reason = 16;</code>
       *
       * <pre>
       * //分数类型  1:清光 2：小光 3：过庄 4：投降 5：垮庄 6：小倒 7：大倒 8:级数
       * </pre>
       */
      public int getScoreReason() {
        return scoreReason_;
      }
      /**
       * <code>optional int32 score_reason = 16;</code>
       *
       * <pre>
       * //分数类型  1:清光 2：小光 3：过庄 4：投降 5：垮庄 6：小倒 7：大倒 8:级数
       * </pre>
       */
      public Builder setScoreReason(int value) {
        bitField0_ |= 0x00008000;
        scoreReason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score_reason = 16;</code>
       *
       * <pre>
       * //分数类型  1:清光 2：小光 3：过庄 4：投降 5：垮庄 6：小倒 7：大倒 8:级数
       * </pre>
       */
      public Builder clearScoreReason() {
        bitField0_ = (bitField0_ & ~0x00008000);
        scoreReason_ = 0;
        onChanged();
        return this;
      }

      // optional int32 di_times = 17;
      private int diTimes_ ;
      /**
       * <code>optional int32 di_times = 17;</code>
       *
       * <pre>
       *底分倍数
       * </pre>
       */
      public boolean hasDiTimes() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 di_times = 17;</code>
       *
       * <pre>
       *底分倍数
       * </pre>
       */
      public int getDiTimes() {
        return diTimes_;
      }
      /**
       * <code>optional int32 di_times = 17;</code>
       *
       * <pre>
       *底分倍数
       * </pre>
       */
      public Builder setDiTimes(int value) {
        bitField0_ |= 0x00010000;
        diTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_times = 17;</code>
       *
       * <pre>
       *底分倍数
       * </pre>
       */
      public Builder clearDiTimes() {
        bitField0_ = (bitField0_ & ~0x00010000);
        diTimes_ = 0;
        onChanged();
        return this;
      }

      // optional int32 zhu_type = 18;
      private int zhuType_ ;
      /**
       * <code>optional int32 zhu_type = 18;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public boolean hasZhuType() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 zhu_type = 18;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public int getZhuType() {
        return zhuType_;
      }
      /**
       * <code>optional int32 zhu_type = 18;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder setZhuType(int value) {
        bitField0_ |= 0x00020000;
        zhuType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 zhu_type = 18;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder clearZhuType() {
        bitField0_ = (bitField0_ & ~0x00020000);
        zhuType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 chong_guan_score = 19;
      private java.util.List<java.lang.Integer> chongGuanScore_ = java.util.Collections.emptyList();
      private void ensureChongGuanScoreIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          chongGuanScore_ = new java.util.ArrayList<java.lang.Integer>(chongGuanScore_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 chong_guan_score = 19;</code>
       *
       * <pre>
       *冲关分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChongGuanScoreList() {
        return java.util.Collections.unmodifiableList(chongGuanScore_);
      }
      /**
       * <code>repeated int32 chong_guan_score = 19;</code>
       *
       * <pre>
       *冲关分数
       * </pre>
       */
      public int getChongGuanScoreCount() {
        return chongGuanScore_.size();
      }
      /**
       * <code>repeated int32 chong_guan_score = 19;</code>
       *
       * <pre>
       *冲关分数
       * </pre>
       */
      public int getChongGuanScore(int index) {
        return chongGuanScore_.get(index);
      }
      /**
       * <code>repeated int32 chong_guan_score = 19;</code>
       *
       * <pre>
       *冲关分数
       * </pre>
       */
      public Builder setChongGuanScore(
          int index, int value) {
        ensureChongGuanScoreIsMutable();
        chongGuanScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score = 19;</code>
       *
       * <pre>
       *冲关分数
       * </pre>
       */
      public Builder addChongGuanScore(int value) {
        ensureChongGuanScoreIsMutable();
        chongGuanScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score = 19;</code>
       *
       * <pre>
       *冲关分数
       * </pre>
       */
      public Builder addAllChongGuanScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChongGuanScoreIsMutable();
        super.addAll(values, chongGuanScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score = 19;</code>
       *
       * <pre>
       *冲关分数
       * </pre>
       */
      public Builder clearChongGuanScore() {
        chongGuanScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // repeated int32 bang_wang_score = 20;
      private java.util.List<java.lang.Integer> bangWangScore_ = java.util.Collections.emptyList();
      private void ensureBangWangScoreIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          bangWangScore_ = new java.util.ArrayList<java.lang.Integer>(bangWangScore_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 bang_wang_score = 20;</code>
       *
       * <pre>
       *傍王分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBangWangScoreList() {
        return java.util.Collections.unmodifiableList(bangWangScore_);
      }
      /**
       * <code>repeated int32 bang_wang_score = 20;</code>
       *
       * <pre>
       *傍王分数
       * </pre>
       */
      public int getBangWangScoreCount() {
        return bangWangScore_.size();
      }
      /**
       * <code>repeated int32 bang_wang_score = 20;</code>
       *
       * <pre>
       *傍王分数
       * </pre>
       */
      public int getBangWangScore(int index) {
        return bangWangScore_.get(index);
      }
      /**
       * <code>repeated int32 bang_wang_score = 20;</code>
       *
       * <pre>
       *傍王分数
       * </pre>
       */
      public Builder setBangWangScore(
          int index, int value) {
        ensureBangWangScoreIsMutable();
        bangWangScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 bang_wang_score = 20;</code>
       *
       * <pre>
       *傍王分数
       * </pre>
       */
      public Builder addBangWangScore(int value) {
        ensureBangWangScoreIsMutable();
        bangWangScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 bang_wang_score = 20;</code>
       *
       * <pre>
       *傍王分数
       * </pre>
       */
      public Builder addAllBangWangScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBangWangScoreIsMutable();
        super.addAll(values, bangWangScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 bang_wang_score = 20;</code>
       *
       * <pre>
       *傍王分数
       * </pre>
       */
      public Builder clearBangWangScore() {
        bangWangScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // repeated int32 win_lose_score = 21;
      private java.util.List<java.lang.Integer> winLoseScore_ = java.util.Collections.emptyList();
      private void ensureWinLoseScoreIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          winLoseScore_ = new java.util.ArrayList<java.lang.Integer>(winLoseScore_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinLoseScoreList() {
        return java.util.Collections.unmodifiableList(winLoseScore_);
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public int getWinLoseScoreCount() {
        return winLoseScore_.size();
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public int getWinLoseScore(int index) {
        return winLoseScore_.get(index);
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public Builder setWinLoseScore(
          int index, int value) {
        ensureWinLoseScoreIsMutable();
        winLoseScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public Builder addWinLoseScore(int value) {
        ensureWinLoseScoreIsMutable();
        winLoseScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public Builder addAllWinLoseScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinLoseScoreIsMutable();
        super.addAll(values, winLoseScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       *牌局分
       * </pre>
       */
      public Builder clearWinLoseScore() {
        winLoseScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // optional int32 win_ji_num = 29;
      private int winJiNum_ ;
      /**
       * <code>optional int32 win_ji_num = 29;</code>
       *
       * <pre>
       *级数
       * </pre>
       */
      public boolean hasWinJiNum() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 win_ji_num = 29;</code>
       *
       * <pre>
       *级数
       * </pre>
       */
      public int getWinJiNum() {
        return winJiNum_;
      }
      /**
       * <code>optional int32 win_ji_num = 29;</code>
       *
       * <pre>
       *级数
       * </pre>
       */
      public Builder setWinJiNum(int value) {
        bitField0_ |= 0x00200000;
        winJiNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 win_ji_num = 29;</code>
       *
       * <pre>
       *级数
       * </pre>
       */
      public Builder clearWinJiNum() {
        bitField0_ = (bitField0_ & ~0x00200000);
        winJiNum_ = 0;
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse chong_guan_card = 30;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> chongGuanCard_ =
        java.util.Collections.emptyList();
      private void ensureChongGuanCardIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          chongGuanCard_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(chongGuanCard_);
          bitField0_ |= 0x00400000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> chongGuanCardBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChongGuanCardList() {
        if (chongGuanCardBuilder_ == null) {
          return java.util.Collections.unmodifiableList(chongGuanCard_);
        } else {
          return chongGuanCardBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public int getChongGuanCardCount() {
        if (chongGuanCardBuilder_ == null) {
          return chongGuanCard_.size();
        } else {
          return chongGuanCardBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getChongGuanCard(int index) {
        if (chongGuanCardBuilder_ == null) {
          return chongGuanCard_.get(index);
        } else {
          return chongGuanCardBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public Builder setChongGuanCard(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (chongGuanCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChongGuanCardIsMutable();
          chongGuanCard_.set(index, value);
          onChanged();
        } else {
          chongGuanCardBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public Builder setChongGuanCard(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (chongGuanCardBuilder_ == null) {
          ensureChongGuanCardIsMutable();
          chongGuanCard_.set(index, builderForValue.build());
          onChanged();
        } else {
          chongGuanCardBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public Builder addChongGuanCard(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (chongGuanCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChongGuanCardIsMutable();
          chongGuanCard_.add(value);
          onChanged();
        } else {
          chongGuanCardBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public Builder addChongGuanCard(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (chongGuanCardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChongGuanCardIsMutable();
          chongGuanCard_.add(index, value);
          onChanged();
        } else {
          chongGuanCardBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public Builder addChongGuanCard(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (chongGuanCardBuilder_ == null) {
          ensureChongGuanCardIsMutable();
          chongGuanCard_.add(builderForValue.build());
          onChanged();
        } else {
          chongGuanCardBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public Builder addChongGuanCard(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (chongGuanCardBuilder_ == null) {
          ensureChongGuanCardIsMutable();
          chongGuanCard_.add(index, builderForValue.build());
          onChanged();
        } else {
          chongGuanCardBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public Builder addAllChongGuanCard(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (chongGuanCardBuilder_ == null) {
          ensureChongGuanCardIsMutable();
          super.addAll(values, chongGuanCard_);
          onChanged();
        } else {
          chongGuanCardBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public Builder clearChongGuanCard() {
        if (chongGuanCardBuilder_ == null) {
          chongGuanCard_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00400000);
          onChanged();
        } else {
          chongGuanCardBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public Builder removeChongGuanCard(int index) {
        if (chongGuanCardBuilder_ == null) {
          ensureChongGuanCardIsMutable();
          chongGuanCard_.remove(index);
          onChanged();
        } else {
          chongGuanCardBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getChongGuanCardBuilder(
          int index) {
        return getChongGuanCardFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChongGuanCardOrBuilder(
          int index) {
        if (chongGuanCardBuilder_ == null) {
          return chongGuanCard_.get(index);  } else {
          return chongGuanCardBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getChongGuanCardOrBuilderList() {
        if (chongGuanCardBuilder_ != null) {
          return chongGuanCardBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(chongGuanCard_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChongGuanCardBuilder() {
        return getChongGuanCardFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChongGuanCardBuilder(
          int index) {
        return getChongGuanCardFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse chong_guan_card = 30;</code>
       *
       * <pre>
       *冲关牌
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getChongGuanCardBuilderList() {
        return getChongGuanCardFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getChongGuanCardFieldBuilder() {
        if (chongGuanCardBuilder_ == null) {
          chongGuanCardBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  chongGuanCard_,
                  ((bitField0_ & 0x00400000) == 0x00400000),
                  getParentForChildren(),
                  isClean());
          chongGuanCard_ = null;
        }
        return chongGuanCardBuilder_;
      }

      // repeated int32 chong_guan_num = 31;
      private java.util.List<java.lang.Integer> chongGuanNum_ = java.util.Collections.emptyList();
      private void ensureChongGuanNumIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          chongGuanNum_ = new java.util.ArrayList<java.lang.Integer>(chongGuanNum_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated int32 chong_guan_num = 31;</code>
       *
       * <pre>
       *冲关数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChongGuanNumList() {
        return java.util.Collections.unmodifiableList(chongGuanNum_);
      }
      /**
       * <code>repeated int32 chong_guan_num = 31;</code>
       *
       * <pre>
       *冲关数目
       * </pre>
       */
      public int getChongGuanNumCount() {
        return chongGuanNum_.size();
      }
      /**
       * <code>repeated int32 chong_guan_num = 31;</code>
       *
       * <pre>
       *冲关数目
       * </pre>
       */
      public int getChongGuanNum(int index) {
        return chongGuanNum_.get(index);
      }
      /**
       * <code>repeated int32 chong_guan_num = 31;</code>
       *
       * <pre>
       *冲关数目
       * </pre>
       */
      public Builder setChongGuanNum(
          int index, int value) {
        ensureChongGuanNumIsMutable();
        chongGuanNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_num = 31;</code>
       *
       * <pre>
       *冲关数目
       * </pre>
       */
      public Builder addChongGuanNum(int value) {
        ensureChongGuanNumIsMutable();
        chongGuanNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_num = 31;</code>
       *
       * <pre>
       *冲关数目
       * </pre>
       */
      public Builder addAllChongGuanNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChongGuanNumIsMutable();
        super.addAll(values, chongGuanNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_num = 31;</code>
       *
       * <pre>
       *冲关数目
       * </pre>
       */
      public Builder clearChongGuanNum() {
        chongGuanNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      // repeated int32 all_end_score = 22;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 22;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 22;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 22;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 22;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 22;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 22;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 22;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 23;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x02000000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x02000000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 23;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x02000000) == 0x02000000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 banker_times = 24;
      private java.util.List<java.lang.Integer> bankerTimes_ = java.util.Collections.emptyList();
      private void ensureBankerTimesIsMutable() {
        if (!((bitField0_ & 0x04000000) == 0x04000000)) {
          bankerTimes_ = new java.util.ArrayList<java.lang.Integer>(bankerTimes_);
          bitField0_ |= 0x04000000;
         }
      }
      /**
       * <code>repeated int32 banker_times = 24;</code>
       *
       * <pre>
       *当庄次数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBankerTimesList() {
        return java.util.Collections.unmodifiableList(bankerTimes_);
      }
      /**
       * <code>repeated int32 banker_times = 24;</code>
       *
       * <pre>
       *当庄次数
       * </pre>
       */
      public int getBankerTimesCount() {
        return bankerTimes_.size();
      }
      /**
       * <code>repeated int32 banker_times = 24;</code>
       *
       * <pre>
       *当庄次数
       * </pre>
       */
      public int getBankerTimes(int index) {
        return bankerTimes_.get(index);
      }
      /**
       * <code>repeated int32 banker_times = 24;</code>
       *
       * <pre>
       *当庄次数
       * </pre>
       */
      public Builder setBankerTimes(
          int index, int value) {
        ensureBankerTimesIsMutable();
        bankerTimes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 banker_times = 24;</code>
       *
       * <pre>
       *当庄次数
       * </pre>
       */
      public Builder addBankerTimes(int value) {
        ensureBankerTimesIsMutable();
        bankerTimes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 banker_times = 24;</code>
       *
       * <pre>
       *当庄次数
       * </pre>
       */
      public Builder addAllBankerTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBankerTimesIsMutable();
        super.addAll(values, bankerTimes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 banker_times = 24;</code>
       *
       * <pre>
       *当庄次数
       * </pre>
       */
      public Builder clearBankerTimes() {
        bankerTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        onChanged();
        return this;
      }

      // repeated int32 win_times = 25;
      private java.util.List<java.lang.Integer> winTimes_ = java.util.Collections.emptyList();
      private void ensureWinTimesIsMutable() {
        if (!((bitField0_ & 0x08000000) == 0x08000000)) {
          winTimes_ = new java.util.ArrayList<java.lang.Integer>(winTimes_);
          bitField0_ |= 0x08000000;
         }
      }
      /**
       * <code>repeated int32 win_times = 25;</code>
       *
       * <pre>
       *赢次数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinTimesList() {
        return java.util.Collections.unmodifiableList(winTimes_);
      }
      /**
       * <code>repeated int32 win_times = 25;</code>
       *
       * <pre>
       *赢次数
       * </pre>
       */
      public int getWinTimesCount() {
        return winTimes_.size();
      }
      /**
       * <code>repeated int32 win_times = 25;</code>
       *
       * <pre>
       *赢次数
       * </pre>
       */
      public int getWinTimes(int index) {
        return winTimes_.get(index);
      }
      /**
       * <code>repeated int32 win_times = 25;</code>
       *
       * <pre>
       *赢次数
       * </pre>
       */
      public Builder setWinTimes(
          int index, int value) {
        ensureWinTimesIsMutable();
        winTimes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_times = 25;</code>
       *
       * <pre>
       *赢次数
       * </pre>
       */
      public Builder addWinTimes(int value) {
        ensureWinTimesIsMutable();
        winTimes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_times = 25;</code>
       *
       * <pre>
       *赢次数
       * </pre>
       */
      public Builder addAllWinTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinTimesIsMutable();
        super.addAll(values, winTimes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_times = 25;</code>
       *
       * <pre>
       *赢次数
       * </pre>
       */
      public Builder clearWinTimes() {
        winTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x08000000);
        onChanged();
        return this;
      }

      // repeated int32 lose_times = 26;
      private java.util.List<java.lang.Integer> loseTimes_ = java.util.Collections.emptyList();
      private void ensureLoseTimesIsMutable() {
        if (!((bitField0_ & 0x10000000) == 0x10000000)) {
          loseTimes_ = new java.util.ArrayList<java.lang.Integer>(loseTimes_);
          bitField0_ |= 0x10000000;
         }
      }
      /**
       * <code>repeated int32 lose_times = 26;</code>
       *
       * <pre>
       *输次数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLoseTimesList() {
        return java.util.Collections.unmodifiableList(loseTimes_);
      }
      /**
       * <code>repeated int32 lose_times = 26;</code>
       *
       * <pre>
       *输次数
       * </pre>
       */
      public int getLoseTimesCount() {
        return loseTimes_.size();
      }
      /**
       * <code>repeated int32 lose_times = 26;</code>
       *
       * <pre>
       *输次数
       * </pre>
       */
      public int getLoseTimes(int index) {
        return loseTimes_.get(index);
      }
      /**
       * <code>repeated int32 lose_times = 26;</code>
       *
       * <pre>
       *输次数
       * </pre>
       */
      public Builder setLoseTimes(
          int index, int value) {
        ensureLoseTimesIsMutable();
        loseTimes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_times = 26;</code>
       *
       * <pre>
       *输次数
       * </pre>
       */
      public Builder addLoseTimes(int value) {
        ensureLoseTimesIsMutable();
        loseTimes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_times = 26;</code>
       *
       * <pre>
       *输次数
       * </pre>
       */
      public Builder addAllLoseTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLoseTimesIsMutable();
        super.addAll(values, loseTimes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_times = 26;</code>
       *
       * <pre>
       *输次数
       * </pre>
       */
      public Builder clearLoseTimes() {
        loseTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        onChanged();
        return this;
      }

      // repeated int32 chong_guan_score_max = 27;
      private java.util.List<java.lang.Integer> chongGuanScoreMax_ = java.util.Collections.emptyList();
      private void ensureChongGuanScoreMaxIsMutable() {
        if (!((bitField0_ & 0x20000000) == 0x20000000)) {
          chongGuanScoreMax_ = new java.util.ArrayList<java.lang.Integer>(chongGuanScoreMax_);
          bitField0_ |= 0x20000000;
         }
      }
      /**
       * <code>repeated int32 chong_guan_score_max = 27;</code>
       *
       * <pre>
       *最大冲关数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChongGuanScoreMaxList() {
        return java.util.Collections.unmodifiableList(chongGuanScoreMax_);
      }
      /**
       * <code>repeated int32 chong_guan_score_max = 27;</code>
       *
       * <pre>
       *最大冲关数
       * </pre>
       */
      public int getChongGuanScoreMaxCount() {
        return chongGuanScoreMax_.size();
      }
      /**
       * <code>repeated int32 chong_guan_score_max = 27;</code>
       *
       * <pre>
       *最大冲关数
       * </pre>
       */
      public int getChongGuanScoreMax(int index) {
        return chongGuanScoreMax_.get(index);
      }
      /**
       * <code>repeated int32 chong_guan_score_max = 27;</code>
       *
       * <pre>
       *最大冲关数
       * </pre>
       */
      public Builder setChongGuanScoreMax(
          int index, int value) {
        ensureChongGuanScoreMaxIsMutable();
        chongGuanScoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score_max = 27;</code>
       *
       * <pre>
       *最大冲关数
       * </pre>
       */
      public Builder addChongGuanScoreMax(int value) {
        ensureChongGuanScoreMaxIsMutable();
        chongGuanScoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score_max = 27;</code>
       *
       * <pre>
       *最大冲关数
       * </pre>
       */
      public Builder addAllChongGuanScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChongGuanScoreMaxIsMutable();
        super.addAll(values, chongGuanScoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score_max = 27;</code>
       *
       * <pre>
       *最大冲关数
       * </pre>
       */
      public Builder clearChongGuanScoreMax() {
        chongGuanScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x20000000);
        onChanged();
        return this;
      }

      // repeated int32 bang_wang_score_max = 28;
      private java.util.List<java.lang.Integer> bangWangScoreMax_ = java.util.Collections.emptyList();
      private void ensureBangWangScoreMaxIsMutable() {
        if (!((bitField0_ & 0x40000000) == 0x40000000)) {
          bangWangScoreMax_ = new java.util.ArrayList<java.lang.Integer>(bangWangScoreMax_);
          bitField0_ |= 0x40000000;
         }
      }
      /**
       * <code>repeated int32 bang_wang_score_max = 28;</code>
       *
       * <pre>
       *最大傍王数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBangWangScoreMaxList() {
        return java.util.Collections.unmodifiableList(bangWangScoreMax_);
      }
      /**
       * <code>repeated int32 bang_wang_score_max = 28;</code>
       *
       * <pre>
       *最大傍王数
       * </pre>
       */
      public int getBangWangScoreMaxCount() {
        return bangWangScoreMax_.size();
      }
      /**
       * <code>repeated int32 bang_wang_score_max = 28;</code>
       *
       * <pre>
       *最大傍王数
       * </pre>
       */
      public int getBangWangScoreMax(int index) {
        return bangWangScoreMax_.get(index);
      }
      /**
       * <code>repeated int32 bang_wang_score_max = 28;</code>
       *
       * <pre>
       *最大傍王数
       * </pre>
       */
      public Builder setBangWangScoreMax(
          int index, int value) {
        ensureBangWangScoreMaxIsMutable();
        bangWangScoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 bang_wang_score_max = 28;</code>
       *
       * <pre>
       *最大傍王数
       * </pre>
       */
      public Builder addBangWangScoreMax(int value) {
        ensureBangWangScoreMaxIsMutable();
        bangWangScoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 bang_wang_score_max = 28;</code>
       *
       * <pre>
       *最大傍王数
       * </pre>
       */
      public Builder addAllBangWangScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBangWangScoreMaxIsMutable();
        super.addAll(values, bangWangScoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 bang_wang_score_max = 28;</code>
       *
       * <pre>
       *最大傍王数
       * </pre>
       */
      public Builder clearBangWangScoreMax() {
        bangWangScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x40000000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.PukeGameEndNceqw)
    }

    static {
      defaultInstance = new PukeGameEndNceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.PukeGameEndNceqw)
  }

  public interface TableResponse_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 6;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 out_cards_type = 7;
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsTypeList();
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    int getOutCardsTypeCount();
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    int getOutCardsType(int index);

    // repeated int32 card_type = 8;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 9;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_cards_data = 10;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 11;
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 12;
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 13;
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 14;
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 15;
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 16;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .RoomInfo room_info = 17;
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 18;
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 user_can_out_data = 19;
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 20;
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    int getUserCanOutCount();

    // optional int32 zhu_type = 21;
    /**
     * <code>optional int32 zhu_type = 21;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    boolean hasZhuType();
    /**
     * <code>optional int32 zhu_type = 21;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    int getZhuType();

    // optional int32 max_card_seat = 22;
    /**
     * <code>optional int32 max_card_seat = 22;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    boolean hasMaxCardSeat();
    /**
     * <code>optional int32 max_card_seat = 22;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    int getMaxCardSeat();

    // repeated int32 select_dang = 23;
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    java.util.List<java.lang.Integer> getSelectDangList();
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    int getSelectDangCount();
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    int getSelectDang(int index);

    // optional int32 call_dang = 24;
    /**
     * <code>optional int32 call_dang = 24;</code>
     *
     * <pre>
     *最终叫挡
     * </pre>
     */
    boolean hasCallDang();
    /**
     * <code>optional int32 call_dang = 24;</code>
     *
     * <pre>
     *最终叫挡
     * </pre>
     */
    int getCallDang();
  }
  /**
   * Protobuf type {@code nceqw.TableResponse_Nceqw}
   *
   * <pre>
   *1003
   * </pre>
   */
  public static final class TableResponse_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements TableResponse_NceqwOrBuilder {
    // Use TableResponse_Nceqw.newBuilder() to construct.
    private TableResponse_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponse_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponse_Nceqw defaultInstance;
    public static TableResponse_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponse_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponse_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                outCardsType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              outCardsType_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                outCardsType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00008000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 138: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 146: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00020000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              bitField0_ |= 0x00000200;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00000400;
              zhuType_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00000800;
              maxCardSeat_ = input.readInt32();
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                selectDang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              selectDang_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                selectDang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                selectDang_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              bitField0_ |= 0x00001000;
              callDang_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsType_ = java.util.Collections.unmodifiableList(outCardsType_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          selectDang_ = java.util.Collections.unmodifiableList(selectDang_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TableResponse_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TableResponse_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponse_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<TableResponse_Nceqw>() {
      public TableResponse_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponse_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponse_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 6;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 out_cards_type = 7;
    public static final int OUT_CARDS_TYPE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> outCardsType_;
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsTypeList() {
      return outCardsType_;
    }
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    public int getOutCardsTypeCount() {
      return outCardsType_.size();
    }
    /**
     * <code>repeated int32 out_cards_type = 7;</code>
     *
     * <pre>
     *本轮出牌类型
     * </pre>
     */
    public int getOutCardsType(int index) {
      return outCardsType_.get(index);
    }

    // repeated int32 card_type = 8;
    public static final int CARD_TYPE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 9;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 9;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_cards_data = 10;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 11;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 11;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 11;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 12;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 12;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 12;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 13;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 13;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 13;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 14;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 14;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 14;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 15;
    public static final int CARD_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 16;
    public static final int CARDS_DATA_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .RoomInfo room_info = 17;
    public static final int ROOM_INFO_FIELD_NUMBER = 17;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 18;
    public static final int PLAYERS_FIELD_NUMBER = 18;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 user_can_out_data = 19;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 19;</code>
     *
     * <pre>
     *可出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 20;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 20;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 user_can_out_count = 20;</code>
     *
     * <pre>
     *可出牌数目
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // optional int32 zhu_type = 21;
    public static final int ZHU_TYPE_FIELD_NUMBER = 21;
    private int zhuType_;
    /**
     * <code>optional int32 zhu_type = 21;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public boolean hasZhuType() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 zhu_type = 21;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public int getZhuType() {
      return zhuType_;
    }

    // optional int32 max_card_seat = 22;
    public static final int MAX_CARD_SEAT_FIELD_NUMBER = 22;
    private int maxCardSeat_;
    /**
     * <code>optional int32 max_card_seat = 22;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    public boolean hasMaxCardSeat() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 max_card_seat = 22;</code>
     *
     * <pre>
     *最大牌位置
     * </pre>
     */
    public int getMaxCardSeat() {
      return maxCardSeat_;
    }

    // repeated int32 select_dang = 23;
    public static final int SELECT_DANG_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> selectDang_;
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSelectDangList() {
      return selectDang_;
    }
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    public int getSelectDangCount() {
      return selectDang_.size();
    }
    /**
     * <code>repeated int32 select_dang = 23;</code>
     *
     * <pre>
     *玩家叫分
     * </pre>
     */
    public int getSelectDang(int index) {
      return selectDang_.get(index);
    }

    // optional int32 call_dang = 24;
    public static final int CALL_DANG_FIELD_NUMBER = 24;
    private int callDang_;
    /**
     * <code>optional int32 call_dang = 24;</code>
     *
     * <pre>
     *最终叫挡
     * </pre>
     */
    public boolean hasCallDang() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 call_dang = 24;</code>
     *
     * <pre>
     *最终叫挡
     * </pre>
     */
    public int getCallDang() {
      return callDang_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      outCardsType_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      zhuType_ = 0;
      maxCardSeat_ = 0;
      selectDang_ = java.util.Collections.emptyList();
      callDang_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(6, outCardsCount_.get(i));
      }
      for (int i = 0; i < outCardsType_.size(); i++) {
        output.writeInt32(7, outCardsType_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(8, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(9, prOutCardPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(10, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(11, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(12, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(13, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(14, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(15, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(16, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(17, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(18, players_.get(i));
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(19, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(20, userCanOutCount_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(21, zhuType_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(22, maxCardSeat_);
      }
      for (int i = 0; i < selectDang_.size(); i++) {
        output.writeInt32(23, selectDang_.get(i));
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(24, callDang_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsType_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsTypeList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 2 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, userCanOutCount_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, zhuType_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, maxCardSeat_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < selectDang_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(selectDang_.get(i));
        }
        size += dataSize;
        size += 2 * getSelectDangList().size();
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, callDang_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.TableResponse_Nceqw}
     *
     * <pre>
     *1003
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.TableResponse_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TableResponse_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TableResponse_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        outCardsType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          playersBuilder_.clear();
        }
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        zhuType_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        maxCardSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        selectDang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        callDang_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TableResponse_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsType_ = java.util.Collections.unmodifiableList(outCardsType_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.outCardsType_ = outCardsType_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.zhuType_ = zhuType_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.maxCardSeat_ = maxCardSeat_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          selectDang_ = java.util.Collections.unmodifiableList(selectDang_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.selectDang_ = selectDang_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.callDang_ = callDang_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.outCardsType_.isEmpty()) {
          if (outCardsType_.isEmpty()) {
            outCardsType_ = other.outCardsType_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureOutCardsTypeIsMutable();
            outCardsType_.addAll(other.outCardsType_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00020000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (other.hasZhuType()) {
          setZhuType(other.getZhuType());
        }
        if (other.hasMaxCardSeat()) {
          setMaxCardSeat(other.getMaxCardSeat());
        }
        if (!other.selectDang_.isEmpty()) {
          if (selectDang_.isEmpty()) {
            selectDang_ = other.selectDang_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureSelectDangIsMutable();
            selectDang_.addAll(other.selectDang_);
          }
          onChanged();
        }
        if (other.hasCallDang()) {
          setCallDang(other.getCallDang());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.TableResponse_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 6;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 out_cards_type = 7;
      private java.util.List<java.lang.Integer> outCardsType_ = java.util.Collections.emptyList();
      private void ensureOutCardsTypeIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsType_ = new java.util.ArrayList<java.lang.Integer>(outCardsType_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsTypeList() {
        return java.util.Collections.unmodifiableList(outCardsType_);
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public int getOutCardsTypeCount() {
        return outCardsType_.size();
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public int getOutCardsType(int index) {
        return outCardsType_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public Builder setOutCardsType(
          int index, int value) {
        ensureOutCardsTypeIsMutable();
        outCardsType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public Builder addOutCardsType(int value) {
        ensureOutCardsTypeIsMutable();
        outCardsType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public Builder addAllOutCardsType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsTypeIsMutable();
        super.addAll(values, outCardsType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_type = 7;</code>
       *
       * <pre>
       *本轮出牌类型
       * </pre>
       */
      public Builder clearOutCardsType() {
        outCardsType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 8;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 9;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000100;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 10;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 11;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000400;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 11;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 12;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000800;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 12;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000800);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 13;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00001000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 13;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00001000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 14;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00002000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 14;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00002000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 15;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 16;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .RoomInfo room_info = 17;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 18;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 18;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 user_can_out_data = 19;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 19;</code>
       *
       * <pre>
       *可出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 20;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00080000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 20;</code>
       *
       * <pre>
       *可出牌数目
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00080000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 zhu_type = 21;
      private int zhuType_ ;
      /**
       * <code>optional int32 zhu_type = 21;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public boolean hasZhuType() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 zhu_type = 21;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public int getZhuType() {
        return zhuType_;
      }
      /**
       * <code>optional int32 zhu_type = 21;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder setZhuType(int value) {
        bitField0_ |= 0x00100000;
        zhuType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 zhu_type = 21;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder clearZhuType() {
        bitField0_ = (bitField0_ & ~0x00100000);
        zhuType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 max_card_seat = 22;
      private int maxCardSeat_ ;
      /**
       * <code>optional int32 max_card_seat = 22;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public boolean hasMaxCardSeat() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 max_card_seat = 22;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public int getMaxCardSeat() {
        return maxCardSeat_;
      }
      /**
       * <code>optional int32 max_card_seat = 22;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public Builder setMaxCardSeat(int value) {
        bitField0_ |= 0x00200000;
        maxCardSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_card_seat = 22;</code>
       *
       * <pre>
       *最大牌位置
       * </pre>
       */
      public Builder clearMaxCardSeat() {
        bitField0_ = (bitField0_ & ~0x00200000);
        maxCardSeat_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 select_dang = 23;
      private java.util.List<java.lang.Integer> selectDang_ = java.util.Collections.emptyList();
      private void ensureSelectDangIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          selectDang_ = new java.util.ArrayList<java.lang.Integer>(selectDang_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSelectDangList() {
        return java.util.Collections.unmodifiableList(selectDang_);
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public int getSelectDangCount() {
        return selectDang_.size();
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public int getSelectDang(int index) {
        return selectDang_.get(index);
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public Builder setSelectDang(
          int index, int value) {
        ensureSelectDangIsMutable();
        selectDang_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public Builder addSelectDang(int value) {
        ensureSelectDangIsMutable();
        selectDang_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public Builder addAllSelectDang(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSelectDangIsMutable();
        super.addAll(values, selectDang_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 select_dang = 23;</code>
       *
       * <pre>
       *玩家叫分
       * </pre>
       */
      public Builder clearSelectDang() {
        selectDang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // optional int32 call_dang = 24;
      private int callDang_ ;
      /**
       * <code>optional int32 call_dang = 24;</code>
       *
       * <pre>
       *最终叫挡
       * </pre>
       */
      public boolean hasCallDang() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 call_dang = 24;</code>
       *
       * <pre>
       *最终叫挡
       * </pre>
       */
      public int getCallDang() {
        return callDang_;
      }
      /**
       * <code>optional int32 call_dang = 24;</code>
       *
       * <pre>
       *最终叫挡
       * </pre>
       */
      public Builder setCallDang(int value) {
        bitField0_ |= 0x00800000;
        callDang_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_dang = 24;</code>
       *
       * <pre>
       *最终叫挡
       * </pre>
       */
      public Builder clearCallDang() {
        bitField0_ = (bitField0_ & ~0x00800000);
        callDang_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.TableResponse_Nceqw)
    }

    static {
      defaultInstance = new TableResponse_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.TableResponse_Nceqw)
  }

  public interface GameStart_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 2;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 current_player = 3;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional string strDetail = 4;
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    boolean hasStrDetail();
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    java.lang.String getStrDetail();
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    com.google.protobuf.ByteString
        getStrDetailBytes();
  }
  /**
   * Protobuf type {@code nceqw.GameStart_Nceqw}
   *
   * <pre>
   *1004
   * </pre>
   */
  public static final class GameStart_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements GameStart_NceqwOrBuilder {
    // Use GameStart_Nceqw.newBuilder() to construct.
    private GameStart_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStart_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStart_Nceqw defaultInstance;
    public static GameStart_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public GameStart_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStart_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000004;
              strDetail_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_GameStart_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_GameStart_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStart_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<GameStart_Nceqw>() {
      public GameStart_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStart_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStart_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 2;
    public static final int PLAYERS_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 current_player = 3;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 3;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *切牌玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional string strDetail = 4;
    public static final int STRDETAIL_FIELD_NUMBER = 4;
    private java.lang.Object strDetail_;
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    public boolean hasStrDetail() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    public java.lang.String getStrDetail() {
      java.lang.Object ref = strDetail_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          strDetail_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string strDetail = 4;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStrDetailBytes() {
      java.lang.Object ref = strDetail_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        strDetail_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      currentPlayer_ = 0;
      strDetail_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(2, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(4, getStrDetailBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getStrDetailBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.GameStart_Nceqw}
     *
     * <pre>
     *1004
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.GameStart_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_GameStart_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_GameStart_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        strDetail_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_GameStart_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.strDetail_ = strDetail_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasStrDetail()) {
          bitField0_ |= 0x00000008;
          strDetail_ = other.strDetail_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.GameStart_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 2;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 current_player = 3;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000004;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *切牌玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional string strDetail = 4;
      private java.lang.Object strDetail_ = "";
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public boolean hasStrDetail() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public java.lang.String getStrDetail() {
        java.lang.Object ref = strDetail_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          strDetail_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStrDetailBytes() {
        java.lang.Object ref = strDetail_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          strDetail_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public Builder setStrDetail(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        strDetail_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public Builder clearStrDetail() {
        bitField0_ = (bitField0_ & ~0x00000008);
        strDetail_ = getDefaultInstance().getStrDetail();
        onChanged();
        return this;
      }
      /**
       * <code>optional string strDetail = 4;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public Builder setStrDetailBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        strDetail_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.GameStart_Nceqw)
    }

    static {
      defaultInstance = new GameStart_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.GameStart_Nceqw)
  }

  public interface SendCard_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_count = 1;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code nceqw.SendCard_Nceqw}
   *
   * <pre>
   *1005
   * </pre>
   */
  public static final class SendCard_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements SendCard_NceqwOrBuilder {
    // Use SendCard_Nceqw.newBuilder() to construct.
    private SendCard_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SendCard_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SendCard_Nceqw defaultInstance;
    public static SendCard_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public SendCard_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SendCard_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_SendCard_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_SendCard_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<SendCard_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<SendCard_Nceqw>() {
      public SendCard_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SendCard_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SendCard_Nceqw> getParserForType() {
      return PARSER;
    }

    // repeated int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    private void initFields() {
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(1, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(2, cardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.SendCard_Nceqw}
     *
     * <pre>
     *1005
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.SendCard_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_SendCard_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_SendCard_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_SendCard_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw.getDefaultInstance()) return this;
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.SendCard_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_count = 1;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.SendCard_Nceqw)
    }

    static {
      defaultInstance = new SendCard_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.SendCard_Nceqw)
  }

  public interface RefreshCardData_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 hand_card_count = 1;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code nceqw.RefreshCardData_Nceqw}
   *
   * <pre>
   *1006
   * </pre>
   */
  public static final class RefreshCardData_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements RefreshCardData_NceqwOrBuilder {
    // Use RefreshCardData_Nceqw.newBuilder() to construct.
    private RefreshCardData_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshCardData_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshCardData_Nceqw defaultInstance;
    public static RefreshCardData_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshCardData_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshCardData_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_RefreshCardData_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_RefreshCardData_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshCardData_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<RefreshCardData_Nceqw>() {
      public RefreshCardData_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshCardData_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshCardData_Nceqw> getParserForType() {
      return PARSER;
    }

    // repeated int32 hand_card_count = 1;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    private void initFields() {
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(1, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(2, handCardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, handCardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.RefreshCardData_Nceqw}
     *
     * <pre>
     *1006
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_RefreshCardData_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_RefreshCardData_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_RefreshCardData_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw.getDefaultInstance()) return this;
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.RefreshCardData_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 hand_card_count = 1;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.RefreshCardData_Nceqw)
    }

    static {
      defaultInstance = new RefreshCardData_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.RefreshCardData_Nceqw)
  }

  public interface CallBankerResponse_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 operete_dang_num = 1;
    /**
     * <code>optional int32 operete_dang_num = 1;</code>
     *
     * <pre>
     *叫挡数目
     * </pre>
     */
    boolean hasOpereteDangNum();
    /**
     * <code>optional int32 operete_dang_num = 1;</code>
     *
     * <pre>
     *叫挡数目
     * </pre>
     */
    int getOpereteDangNum();

    // optional int32 call_player = 2;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    boolean hasCallPlayer();
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    int getCallPlayer();

    // optional int32 current_player = 3;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 banker_player = 4;
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 display_time = 5;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 dang_min = 7;
    /**
     * <code>optional int32 dang_min = 7;</code>
     *
     * <pre>
     *最小挡
     * </pre>
     */
    boolean hasDangMin();
    /**
     * <code>optional int32 dang_min = 7;</code>
     *
     * <pre>
     *最小挡
     * </pre>
     */
    int getDangMin();

    // optional int32 dang_max = 8;
    /**
     * <code>optional int32 dang_max = 8;</code>
     *
     * <pre>
     *最大挡
     * </pre>
     */
    boolean hasDangMax();
    /**
     * <code>optional int32 dang_max = 8;</code>
     *
     * <pre>
     *最大挡
     * </pre>
     */
    int getDangMax();

    // optional .RoomInfo room_info = 9;
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional int32 score = 10;
    /**
     * <code>optional int32 score = 10;</code>
     */
    boolean hasScore();
    /**
     * <code>optional int32 score = 10;</code>
     */
    int getScore();
  }
  /**
   * Protobuf type {@code nceqw.CallBankerResponse_Nceqw}
   *
   * <pre>
   *叫庄结果 1007
   * </pre>
   */
  public static final class CallBankerResponse_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResponse_NceqwOrBuilder {
    // Use CallBankerResponse_Nceqw.newBuilder() to construct.
    private CallBankerResponse_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResponse_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResponse_Nceqw defaultInstance;
    public static CallBankerResponse_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResponse_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResponse_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opereteDangNum_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              callPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              displayTime_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              dangMin_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              dangMax_ = input.readInt32();
              break;
            }
            case 74: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              score_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_CallBankerResponse_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_CallBankerResponse_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResponse_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResponse_Nceqw>() {
      public CallBankerResponse_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResponse_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResponse_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 operete_dang_num = 1;
    public static final int OPERETE_DANG_NUM_FIELD_NUMBER = 1;
    private int opereteDangNum_;
    /**
     * <code>optional int32 operete_dang_num = 1;</code>
     *
     * <pre>
     *叫挡数目
     * </pre>
     */
    public boolean hasOpereteDangNum() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 operete_dang_num = 1;</code>
     *
     * <pre>
     *叫挡数目
     * </pre>
     */
    public int getOpereteDangNum() {
      return opereteDangNum_;
    }

    // optional int32 call_player = 2;
    public static final int CALL_PLAYER_FIELD_NUMBER = 2;
    private int callPlayer_;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    public boolean hasCallPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    public int getCallPlayer() {
      return callPlayer_;
    }

    // optional int32 current_player = 3;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 3;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 banker_player = 4;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 4;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 display_time = 5;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 5;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 dang_min = 7;
    public static final int DANG_MIN_FIELD_NUMBER = 7;
    private int dangMin_;
    /**
     * <code>optional int32 dang_min = 7;</code>
     *
     * <pre>
     *最小挡
     * </pre>
     */
    public boolean hasDangMin() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 dang_min = 7;</code>
     *
     * <pre>
     *最小挡
     * </pre>
     */
    public int getDangMin() {
      return dangMin_;
    }

    // optional int32 dang_max = 8;
    public static final int DANG_MAX_FIELD_NUMBER = 8;
    private int dangMax_;
    /**
     * <code>optional int32 dang_max = 8;</code>
     *
     * <pre>
     *最大挡
     * </pre>
     */
    public boolean hasDangMax() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 dang_max = 8;</code>
     *
     * <pre>
     *最大挡
     * </pre>
     */
    public int getDangMax() {
      return dangMax_;
    }

    // optional .RoomInfo room_info = 9;
    public static final int ROOM_INFO_FIELD_NUMBER = 9;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 9;</code>
     *
     * <pre>
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 score = 10;
    public static final int SCORE_FIELD_NUMBER = 10;
    private int score_;
    /**
     * <code>optional int32 score = 10;</code>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 score = 10;</code>
     */
    public int getScore() {
      return score_;
    }

    private void initFields() {
      opereteDangNum_ = 0;
      callPlayer_ = 0;
      currentPlayer_ = 0;
      bankerPlayer_ = 0;
      displayTime_ = 0;
      dangMin_ = 0;
      dangMax_ = 0;
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      score_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opereteDangNum_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, displayTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, dangMin_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(8, dangMax_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(9, roomInfo_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(10, score_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opereteDangNum_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, displayTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, dangMin_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, dangMax_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, roomInfo_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, score_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.CallBankerResponse_Nceqw}
     *
     * <pre>
     *叫庄结果 1007
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_CallBankerResponse_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_CallBankerResponse_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opereteDangNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        callPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        dangMin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        dangMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_CallBankerResponse_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opereteDangNum_ = opereteDangNum_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.callPlayer_ = callPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.dangMin_ = dangMin_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.dangMax_ = dangMax_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.score_ = score_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw.getDefaultInstance()) return this;
        if (other.hasOpereteDangNum()) {
          setOpereteDangNum(other.getOpereteDangNum());
        }
        if (other.hasCallPlayer()) {
          setCallPlayer(other.getCallPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasDangMin()) {
          setDangMin(other.getDangMin());
        }
        if (other.hasDangMax()) {
          setDangMax(other.getDangMax());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.CallBankerResponse_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 operete_dang_num = 1;
      private int opereteDangNum_ ;
      /**
       * <code>optional int32 operete_dang_num = 1;</code>
       *
       * <pre>
       *叫挡数目
       * </pre>
       */
      public boolean hasOpereteDangNum() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 operete_dang_num = 1;</code>
       *
       * <pre>
       *叫挡数目
       * </pre>
       */
      public int getOpereteDangNum() {
        return opereteDangNum_;
      }
      /**
       * <code>optional int32 operete_dang_num = 1;</code>
       *
       * <pre>
       *叫挡数目
       * </pre>
       */
      public Builder setOpereteDangNum(int value) {
        bitField0_ |= 0x00000001;
        opereteDangNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 operete_dang_num = 1;</code>
       *
       * <pre>
       *叫挡数目
       * </pre>
       */
      public Builder clearOpereteDangNum() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opereteDangNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_player = 2;
      private int callPlayer_ ;
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public boolean hasCallPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public int getCallPlayer() {
        return callPlayer_;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public Builder setCallPlayer(int value) {
        bitField0_ |= 0x00000002;
        callPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public Builder clearCallPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        callPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 3;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000004;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 4;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000008;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 5;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000010;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 dang_min = 7;
      private int dangMin_ ;
      /**
       * <code>optional int32 dang_min = 7;</code>
       *
       * <pre>
       *最小挡
       * </pre>
       */
      public boolean hasDangMin() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 dang_min = 7;</code>
       *
       * <pre>
       *最小挡
       * </pre>
       */
      public int getDangMin() {
        return dangMin_;
      }
      /**
       * <code>optional int32 dang_min = 7;</code>
       *
       * <pre>
       *最小挡
       * </pre>
       */
      public Builder setDangMin(int value) {
        bitField0_ |= 0x00000020;
        dangMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 dang_min = 7;</code>
       *
       * <pre>
       *最小挡
       * </pre>
       */
      public Builder clearDangMin() {
        bitField0_ = (bitField0_ & ~0x00000020);
        dangMin_ = 0;
        onChanged();
        return this;
      }

      // optional int32 dang_max = 8;
      private int dangMax_ ;
      /**
       * <code>optional int32 dang_max = 8;</code>
       *
       * <pre>
       *最大挡
       * </pre>
       */
      public boolean hasDangMax() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 dang_max = 8;</code>
       *
       * <pre>
       *最大挡
       * </pre>
       */
      public int getDangMax() {
        return dangMax_;
      }
      /**
       * <code>optional int32 dang_max = 8;</code>
       *
       * <pre>
       *最大挡
       * </pre>
       */
      public Builder setDangMax(int value) {
        bitField0_ |= 0x00000040;
        dangMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 dang_max = 8;</code>
       *
       * <pre>
       *最大挡
       * </pre>
       */
      public Builder clearDangMax() {
        bitField0_ = (bitField0_ & ~0x00000040);
        dangMax_ = 0;
        onChanged();
        return this;
      }

      // optional .RoomInfo room_info = 9;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 9;</code>
       *
       * <pre>
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 score = 10;
      private int score_ ;
      /**
       * <code>optional int32 score = 10;</code>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 score = 10;</code>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>optional int32 score = 10;</code>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000100;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score = 10;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000100);
        score_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.CallBankerResponse_Nceqw)
    }

    static {
      defaultInstance = new CallBankerResponse_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.CallBankerResponse_Nceqw)
  }

  public interface JiaoZhuBegin_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 seat_index = 1;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    int getSeatIndex();

    // repeated int32 count = 2;
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    java.util.List<java.lang.Integer> getCountList();
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    int getCountCount();
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    int getCount(int index);

    // optional int32 display_time = 3;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * </pre>
     */
    int getDisplayTime();

    // optional bool is_tou_xiang = 4;
    /**
     * <code>optional bool is_tou_xiang = 4;</code>
     */
    boolean hasIsTouXiang();
    /**
     * <code>optional bool is_tou_xiang = 4;</code>
     */
    boolean getIsTouXiang();
  }
  /**
   * Protobuf type {@code nceqw.JiaoZhuBegin_Nceqw}
   *
   * <pre>
   *1008
   * </pre>
   */
  public static final class JiaoZhuBegin_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements JiaoZhuBegin_NceqwOrBuilder {
    // Use JiaoZhuBegin_Nceqw.newBuilder() to construct.
    private JiaoZhuBegin_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JiaoZhuBegin_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final JiaoZhuBegin_Nceqw defaultInstance;
    public static JiaoZhuBegin_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public JiaoZhuBegin_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private JiaoZhuBegin_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seatIndex_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                count_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              count_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                count_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                count_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              isTouXiang_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          count_ = java.util.Collections.unmodifiableList(count_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_JiaoZhuBegin_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_JiaoZhuBegin_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<JiaoZhuBegin_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<JiaoZhuBegin_Nceqw>() {
      public JiaoZhuBegin_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new JiaoZhuBegin_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<JiaoZhuBegin_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 seat_index = 1;
    public static final int SEAT_INDEX_FIELD_NUMBER = 1;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // repeated int32 count = 2;
    public static final int COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> count_;
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCountList() {
      return count_;
    }
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    public int getCountCount() {
      return count_.size();
    }
    /**
     * <code>repeated int32 count = 2;</code>
     *
     * <pre>
     * </pre>
     */
    public int getCount(int index) {
      return count_.get(index);
    }

    // optional int32 display_time = 3;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 3;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional bool is_tou_xiang = 4;
    public static final int IS_TOU_XIANG_FIELD_NUMBER = 4;
    private boolean isTouXiang_;
    /**
     * <code>optional bool is_tou_xiang = 4;</code>
     */
    public boolean hasIsTouXiang() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool is_tou_xiang = 4;</code>
     */
    public boolean getIsTouXiang() {
      return isTouXiang_;
    }

    private void initFields() {
      seatIndex_ = 0;
      count_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      isTouXiang_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, seatIndex_);
      }
      for (int i = 0; i < count_.size(); i++) {
        output.writeInt32(2, count_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(4, isTouXiang_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, seatIndex_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < count_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(count_.get(i));
        }
        size += dataSize;
        size += 1 * getCountList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, isTouXiang_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.JiaoZhuBegin_Nceqw}
     *
     * <pre>
     *1008
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_JiaoZhuBegin_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_JiaoZhuBegin_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        count_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        isTouXiang_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_JiaoZhuBegin_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seatIndex_ = seatIndex_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          count_ = java.util.Collections.unmodifiableList(count_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.count_ = count_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isTouXiang_ = isTouXiang_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw.getDefaultInstance()) return this;
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (!other.count_.isEmpty()) {
          if (count_.isEmpty()) {
            count_ = other.count_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCountIsMutable();
            count_.addAll(other.count_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasIsTouXiang()) {
          setIsTouXiang(other.getIsTouXiang());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.JiaoZhuBegin_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 seat_index = 1;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 count = 2;
      private java.util.List<java.lang.Integer> count_ = java.util.Collections.emptyList();
      private void ensureCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          count_ = new java.util.ArrayList<java.lang.Integer>(count_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCountList() {
        return java.util.Collections.unmodifiableList(count_);
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public int getCountCount() {
        return count_.size();
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public int getCount(int index) {
        return count_.get(index);
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setCount(
          int index, int value) {
        ensureCountIsMutable();
        count_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder addCount(int value) {
        ensureCountIsMutable();
        count_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder addAllCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCountIsMutable();
        super.addAll(values, count_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 count = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearCount() {
        count_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 display_time = 3;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000004;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_tou_xiang = 4;
      private boolean isTouXiang_ ;
      /**
       * <code>optional bool is_tou_xiang = 4;</code>
       */
      public boolean hasIsTouXiang() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool is_tou_xiang = 4;</code>
       */
      public boolean getIsTouXiang() {
        return isTouXiang_;
      }
      /**
       * <code>optional bool is_tou_xiang = 4;</code>
       */
      public Builder setIsTouXiang(boolean value) {
        bitField0_ |= 0x00000008;
        isTouXiang_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_tou_xiang = 4;</code>
       */
      public Builder clearIsTouXiang() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isTouXiang_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.JiaoZhuBegin_Nceqw)
    }

    static {
      defaultInstance = new JiaoZhuBegin_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.JiaoZhuBegin_Nceqw)
  }

  public interface MaiDiBegin_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 seat_index = 1;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    int getSeatIndex();

    // optional int32 card_count = 2;
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount();

    // repeated int32 cards_data = 3;
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 display_time = 4;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code nceqw.MaiDiBegin_Nceqw}
   *
   * <pre>
   *1009
   * </pre>
   */
  public static final class MaiDiBegin_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements MaiDiBegin_NceqwOrBuilder {
    // Use MaiDiBegin_Nceqw.newBuilder() to construct.
    private MaiDiBegin_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MaiDiBegin_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MaiDiBegin_Nceqw defaultInstance;
    public static MaiDiBegin_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public MaiDiBegin_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MaiDiBegin_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seatIndex_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cardCount_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_MaiDiBegin_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_MaiDiBegin_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<MaiDiBegin_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<MaiDiBegin_Nceqw>() {
      public MaiDiBegin_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MaiDiBegin_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MaiDiBegin_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 seat_index = 1;
    public static final int SEAT_INDEX_FIELD_NUMBER = 1;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    // repeated int32 cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 display_time = 4;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 4;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      seatIndex_ = 0;
      cardCount_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, seatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, cardCount_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, seatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.MaiDiBegin_Nceqw}
     *
     * <pre>
     *1009
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_MaiDiBegin_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_MaiDiBegin_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_MaiDiBegin_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardCount_ = cardCount_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw.getDefaultInstance()) return this;
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.MaiDiBegin_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 seat_index = 1;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_count = 2;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000002;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 3;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 display_time = 4;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000008;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.MaiDiBegin_Nceqw)
    }

    static {
      defaultInstance = new MaiDiBegin_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.MaiDiBegin_Nceqw)
  }

  public interface TouXiangBegin_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 display_time = 1;
    /**
     * <code>optional int32 display_time = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    int getDisplayTime();

    // optional string deatil = 2;
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    boolean hasDeatil();
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    java.lang.String getDeatil();
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    com.google.protobuf.ByteString
        getDeatilBytes();
  }
  /**
   * Protobuf type {@code nceqw.TouXiangBegin_Nceqw}
   *
   * <pre>
   *投降开始 1010
   * </pre>
   */
  public static final class TouXiangBegin_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements TouXiangBegin_NceqwOrBuilder {
    // Use TouXiangBegin_Nceqw.newBuilder() to construct.
    private TouXiangBegin_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TouXiangBegin_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TouXiangBegin_Nceqw defaultInstance;
    public static TouXiangBegin_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public TouXiangBegin_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TouXiangBegin_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              displayTime_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              deatil_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TouXiangBegin_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TouXiangBegin_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<TouXiangBegin_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<TouXiangBegin_Nceqw>() {
      public TouXiangBegin_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TouXiangBegin_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TouXiangBegin_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 display_time = 1;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 1;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 display_time = 1;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional string deatil = 2;
    public static final int DEATIL_FIELD_NUMBER = 2;
    private java.lang.Object deatil_;
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    public boolean hasDeatil() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    public java.lang.String getDeatil() {
      java.lang.Object ref = deatil_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          deatil_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string deatil = 2;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDeatilBytes() {
      java.lang.Object ref = deatil_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deatil_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      displayTime_ = 0;
      deatil_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, displayTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getDeatilBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, displayTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getDeatilBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.TouXiangBegin_Nceqw}
     *
     * <pre>
     *投降开始 1010
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TouXiangBegin_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TouXiangBegin_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        deatil_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TouXiangBegin_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.deatil_ = deatil_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw.getDefaultInstance()) return this;
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasDeatil()) {
          bitField0_ |= 0x00000002;
          deatil_ = other.deatil_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.TouXiangBegin_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 display_time = 1;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 display_time = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000001;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 1;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional string deatil = 2;
      private java.lang.Object deatil_ = "";
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public boolean hasDeatil() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public java.lang.String getDeatil() {
        java.lang.Object ref = deatil_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          deatil_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDeatilBytes() {
        java.lang.Object ref = deatil_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deatil_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public Builder setDeatil(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        deatil_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public Builder clearDeatil() {
        bitField0_ = (bitField0_ & ~0x00000002);
        deatil_ = getDefaultInstance().getDeatil();
        onChanged();
        return this;
      }
      /**
       * <code>optional string deatil = 2;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public Builder setDeatilBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        deatil_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.TouXiangBegin_Nceqw)
    }

    static {
      defaultInstance = new TouXiangBegin_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.TouXiangBegin_Nceqw)
  }

  public interface TouXiangResult_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string deatil = 1;
    /**
     * <code>optional string deatil = 1;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    boolean hasDeatil();
    /**
     * <code>optional string deatil = 1;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    java.lang.String getDeatil();
    /**
     * <code>optional string deatil = 1;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    com.google.protobuf.ByteString
        getDeatilBytes();

    // repeated int32 is_agree = 2;
    /**
     * <code>repeated int32 is_agree = 2;</code>
     *
     * <pre>
     *是否同意
     * </pre>
     */
    java.util.List<java.lang.Integer> getIsAgreeList();
    /**
     * <code>repeated int32 is_agree = 2;</code>
     *
     * <pre>
     *是否同意
     * </pre>
     */
    int getIsAgreeCount();
    /**
     * <code>repeated int32 is_agree = 2;</code>
     *
     * <pre>
     *是否同意
     * </pre>
     */
    int getIsAgree(int index);

    // optional int32 display_time = 3;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 request_setat = 4;
    /**
     * <code>optional int32 request_setat = 4;</code>
     *
     * <pre>
     *请求玩家
     * </pre>
     */
    boolean hasRequestSetat();
    /**
     * <code>optional int32 request_setat = 4;</code>
     *
     * <pre>
     *请求玩家
     * </pre>
     */
    int getRequestSetat();
  }
  /**
   * Protobuf type {@code nceqw.TouXiangResult_Nceqw}
   *
   * <pre>
   *投降结果 1011
   * </pre>
   */
  public static final class TouXiangResult_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements TouXiangResult_NceqwOrBuilder {
    // Use TouXiangResult_Nceqw.newBuilder() to construct.
    private TouXiangResult_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TouXiangResult_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TouXiangResult_Nceqw defaultInstance;
    public static TouXiangResult_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public TouXiangResult_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TouXiangResult_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              deatil_ = input.readBytes();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                isAgree_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              isAgree_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                isAgree_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                isAgree_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              requestSetat_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          isAgree_ = java.util.Collections.unmodifiableList(isAgree_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TouXiangResult_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TouXiangResult_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<TouXiangResult_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<TouXiangResult_Nceqw>() {
      public TouXiangResult_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TouXiangResult_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TouXiangResult_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string deatil = 1;
    public static final int DEATIL_FIELD_NUMBER = 1;
    private java.lang.Object deatil_;
    /**
     * <code>optional string deatil = 1;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    public boolean hasDeatil() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string deatil = 1;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    public java.lang.String getDeatil() {
      java.lang.Object ref = deatil_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          deatil_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string deatil = 1;</code>
     *
     * <pre>
     * 描述
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDeatilBytes() {
      java.lang.Object ref = deatil_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deatil_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated int32 is_agree = 2;
    public static final int IS_AGREE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> isAgree_;
    /**
     * <code>repeated int32 is_agree = 2;</code>
     *
     * <pre>
     *是否同意
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getIsAgreeList() {
      return isAgree_;
    }
    /**
     * <code>repeated int32 is_agree = 2;</code>
     *
     * <pre>
     *是否同意
     * </pre>
     */
    public int getIsAgreeCount() {
      return isAgree_.size();
    }
    /**
     * <code>repeated int32 is_agree = 2;</code>
     *
     * <pre>
     *是否同意
     * </pre>
     */
    public int getIsAgree(int index) {
      return isAgree_.get(index);
    }

    // optional int32 display_time = 3;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 3;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 request_setat = 4;
    public static final int REQUEST_SETAT_FIELD_NUMBER = 4;
    private int requestSetat_;
    /**
     * <code>optional int32 request_setat = 4;</code>
     *
     * <pre>
     *请求玩家
     * </pre>
     */
    public boolean hasRequestSetat() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 request_setat = 4;</code>
     *
     * <pre>
     *请求玩家
     * </pre>
     */
    public int getRequestSetat() {
      return requestSetat_;
    }

    private void initFields() {
      deatil_ = "";
      isAgree_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      requestSetat_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getDeatilBytes());
      }
      for (int i = 0; i < isAgree_.size(); i++) {
        output.writeInt32(2, isAgree_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, requestSetat_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getDeatilBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < isAgree_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(isAgree_.get(i));
        }
        size += dataSize;
        size += 1 * getIsAgreeList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, requestSetat_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.TouXiangResult_Nceqw}
     *
     * <pre>
     *投降结果 1011
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TouXiangResult_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TouXiangResult_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        deatil_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        isAgree_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        requestSetat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TouXiangResult_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deatil_ = deatil_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          isAgree_ = java.util.Collections.unmodifiableList(isAgree_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.isAgree_ = isAgree_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.requestSetat_ = requestSetat_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw.getDefaultInstance()) return this;
        if (other.hasDeatil()) {
          bitField0_ |= 0x00000001;
          deatil_ = other.deatil_;
          onChanged();
        }
        if (!other.isAgree_.isEmpty()) {
          if (isAgree_.isEmpty()) {
            isAgree_ = other.isAgree_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureIsAgreeIsMutable();
            isAgree_.addAll(other.isAgree_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasRequestSetat()) {
          setRequestSetat(other.getRequestSetat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.TouXiangResult_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string deatil = 1;
      private java.lang.Object deatil_ = "";
      /**
       * <code>optional string deatil = 1;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public boolean hasDeatil() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string deatil = 1;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public java.lang.String getDeatil() {
        java.lang.Object ref = deatil_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          deatil_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string deatil = 1;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDeatilBytes() {
        java.lang.Object ref = deatil_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deatil_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string deatil = 1;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public Builder setDeatil(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        deatil_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string deatil = 1;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public Builder clearDeatil() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deatil_ = getDefaultInstance().getDeatil();
        onChanged();
        return this;
      }
      /**
       * <code>optional string deatil = 1;</code>
       *
       * <pre>
       * 描述
       * </pre>
       */
      public Builder setDeatilBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        deatil_ = value;
        onChanged();
        return this;
      }

      // repeated int32 is_agree = 2;
      private java.util.List<java.lang.Integer> isAgree_ = java.util.Collections.emptyList();
      private void ensureIsAgreeIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          isAgree_ = new java.util.ArrayList<java.lang.Integer>(isAgree_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 is_agree = 2;</code>
       *
       * <pre>
       *是否同意
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getIsAgreeList() {
        return java.util.Collections.unmodifiableList(isAgree_);
      }
      /**
       * <code>repeated int32 is_agree = 2;</code>
       *
       * <pre>
       *是否同意
       * </pre>
       */
      public int getIsAgreeCount() {
        return isAgree_.size();
      }
      /**
       * <code>repeated int32 is_agree = 2;</code>
       *
       * <pre>
       *是否同意
       * </pre>
       */
      public int getIsAgree(int index) {
        return isAgree_.get(index);
      }
      /**
       * <code>repeated int32 is_agree = 2;</code>
       *
       * <pre>
       *是否同意
       * </pre>
       */
      public Builder setIsAgree(
          int index, int value) {
        ensureIsAgreeIsMutable();
        isAgree_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_agree = 2;</code>
       *
       * <pre>
       *是否同意
       * </pre>
       */
      public Builder addIsAgree(int value) {
        ensureIsAgreeIsMutable();
        isAgree_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_agree = 2;</code>
       *
       * <pre>
       *是否同意
       * </pre>
       */
      public Builder addAllIsAgree(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIsAgreeIsMutable();
        super.addAll(values, isAgree_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_agree = 2;</code>
       *
       * <pre>
       *是否同意
       * </pre>
       */
      public Builder clearIsAgree() {
        isAgree_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 display_time = 3;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000004;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 request_setat = 4;
      private int requestSetat_ ;
      /**
       * <code>optional int32 request_setat = 4;</code>
       *
       * <pre>
       *请求玩家
       * </pre>
       */
      public boolean hasRequestSetat() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 request_setat = 4;</code>
       *
       * <pre>
       *请求玩家
       * </pre>
       */
      public int getRequestSetat() {
        return requestSetat_;
      }
      /**
       * <code>optional int32 request_setat = 4;</code>
       *
       * <pre>
       *请求玩家
       * </pre>
       */
      public Builder setRequestSetat(int value) {
        bitField0_ |= 0x00000008;
        requestSetat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 request_setat = 4;</code>
       *
       * <pre>
       *请求玩家
       * </pre>
       */
      public Builder clearRequestSetat() {
        bitField0_ = (bitField0_ & ~0x00000008);
        requestSetat_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.TouXiangResult_Nceqw)
    }

    static {
      defaultInstance = new TouXiangResult_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.TouXiangResult_Nceqw)
  }

  public interface Card_Arrary_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Int32ArrayResponse card_data = 1;
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardDataList();
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardData(int index);
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    int getCardDataCount();
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code nceqw.Card_Arrary_Nceqw}
   *
   * <pre>
   *二维数组
   * </pre>
   */
  public static final class Card_Arrary_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements Card_Arrary_NceqwOrBuilder {
    // Use Card_Arrary_Nceqw.newBuilder() to construct.
    private Card_Arrary_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Card_Arrary_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Card_Arrary_Nceqw defaultInstance;
    public static Card_Arrary_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public Card_Arrary_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Card_Arrary_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Card_Arrary_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Card_Arrary_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<Card_Arrary_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<Card_Arrary_Nceqw>() {
      public Card_Arrary_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Card_Arrary_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Card_Arrary_Nceqw> getParserForType() {
      return PARSER;
    }

    // repeated .Int32ArrayResponse card_data = 1;
    public static final int CARD_DATA_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardData_;
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardDataList() {
      return cardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardDataOrBuilderList() {
      return cardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    public int getCardDataCount() {
      return cardData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardData(int index) {
      return cardData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse card_data = 1;</code>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardDataOrBuilder(
        int index) {
      return cardData_.get(index);
    }

    private void initFields() {
      cardData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardData_.size(); i++) {
        output.writeMessage(1, cardData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < cardData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cardData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.Card_Arrary_Nceqw}
     *
     * <pre>
     *二维数组
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Card_Arrary_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Card_Arrary_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (cardDataBuilder_ == null) {
          cardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cardDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Card_Arrary_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw(this);
        int from_bitField0_ = bitField0_;
        if (cardDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            cardData_ = java.util.Collections.unmodifiableList(cardData_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cardData_ = cardData_;
        } else {
          result.cardData_ = cardDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.getDefaultInstance()) return this;
        if (cardDataBuilder_ == null) {
          if (!other.cardData_.isEmpty()) {
            if (cardData_.isEmpty()) {
              cardData_ = other.cardData_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCardDataIsMutable();
              cardData_.addAll(other.cardData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardData_.isEmpty()) {
            if (cardDataBuilder_.isEmpty()) {
              cardDataBuilder_.dispose();
              cardDataBuilder_ = null;
              cardData_ = other.cardData_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cardDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardDataFieldBuilder() : null;
            } else {
              cardDataBuilder_.addAllMessages(other.cardData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Int32ArrayResponse card_data = 1;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardData_ =
        java.util.Collections.emptyList();
      private void ensureCardDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardData_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardDataList() {
        if (cardDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardData_);
        } else {
          return cardDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public int getCardDataCount() {
        if (cardDataBuilder_ == null) {
          return cardData_.size();
        } else {
          return cardDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardData(int index) {
        if (cardDataBuilder_ == null) {
          return cardData_.get(index);
        } else {
          return cardDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder setCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.set(index, value);
          onChanged();
        } else {
          cardDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder setCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder addCardData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.add(value);
          onChanged();
        } else {
          cardDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder addCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.add(index, value);
          onChanged();
        } else {
          cardDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder addCardData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.add(builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder addCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder addAllCardData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          super.addAll(values, cardData_);
          onChanged();
        } else {
          cardDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder clearCardData() {
        if (cardDataBuilder_ == null) {
          cardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cardDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public Builder removeCardData(int index) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.remove(index);
          onChanged();
        } else {
          cardDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardDataBuilder(
          int index) {
        return getCardDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardDataOrBuilder(
          int index) {
        if (cardDataBuilder_ == null) {
          return cardData_.get(index);  } else {
          return cardDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardDataOrBuilderList() {
        if (cardDataBuilder_ != null) {
          return cardDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardDataBuilder() {
        return getCardDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardDataBuilder(
          int index) {
        return getCardDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse card_data = 1;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardDataBuilderList() {
        return getCardDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardDataFieldBuilder() {
        if (cardDataBuilder_ == null) {
          cardDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardData_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          cardData_ = null;
        }
        return cardDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.Card_Arrary_Nceqw)
    }

    static {
      defaultInstance = new Card_Arrary_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.Card_Arrary_Nceqw)
  }

  public interface DiPaiCard_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 card_data = 1;
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardDataList();
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    int getCardDataCount();
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    int getCardData(int index);

    // optional int32 is_begin = 2;
    /**
     * <code>optional int32 is_begin = 2;</code>
     *
     * <pre>
     *1:显示在中间 0:不显示
     * </pre>
     */
    boolean hasIsBegin();
    /**
     * <code>optional int32 is_begin = 2;</code>
     *
     * <pre>
     *1:显示在中间 0:不显示
     * </pre>
     */
    int getIsBegin();
  }
  /**
   * Protobuf type {@code nceqw.DiPaiCard_Nceqw}
   *
   * <pre>
   *1012
   * </pre>
   */
  public static final class DiPaiCard_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements DiPaiCard_NceqwOrBuilder {
    // Use DiPaiCard_Nceqw.newBuilder() to construct.
    private DiPaiCard_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiPaiCard_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiPaiCard_Nceqw defaultInstance;
    public static DiPaiCard_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public DiPaiCard_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiPaiCard_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardData_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              isBegin_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_DiPaiCard_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_DiPaiCard_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<DiPaiCard_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<DiPaiCard_Nceqw>() {
      public DiPaiCard_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiPaiCard_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiPaiCard_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 card_data = 1;
    public static final int CARD_DATA_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardData_;
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardDataList() {
      return cardData_;
    }
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    public int getCardDataCount() {
      return cardData_.size();
    }
    /**
     * <code>repeated int32 card_data = 1;</code>
     *
     * <pre>
     *底牌数据
     * </pre>
     */
    public int getCardData(int index) {
      return cardData_.get(index);
    }

    // optional int32 is_begin = 2;
    public static final int IS_BEGIN_FIELD_NUMBER = 2;
    private int isBegin_;
    /**
     * <code>optional int32 is_begin = 2;</code>
     *
     * <pre>
     *1:显示在中间 0:不显示
     * </pre>
     */
    public boolean hasIsBegin() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 is_begin = 2;</code>
     *
     * <pre>
     *1:显示在中间 0:不显示
     * </pre>
     */
    public int getIsBegin() {
      return isBegin_;
    }

    private void initFields() {
      cardData_ = java.util.Collections.emptyList();
      isBegin_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardData_.size(); i++) {
        output.writeInt32(1, cardData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, isBegin_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardDataList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, isBegin_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.DiPaiCard_Nceqw}
     *
     * <pre>
     *1012
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_DiPaiCard_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_DiPaiCard_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        isBegin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_DiPaiCard_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardData_ = cardData_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isBegin_ = isBegin_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw.getDefaultInstance()) return this;
        if (!other.cardData_.isEmpty()) {
          if (cardData_.isEmpty()) {
            cardData_ = other.cardData_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardDataIsMutable();
            cardData_.addAll(other.cardData_);
          }
          onChanged();
        }
        if (other.hasIsBegin()) {
          setIsBegin(other.getIsBegin());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.DiPaiCard_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 card_data = 1;
      private java.util.List<java.lang.Integer> cardData_ = java.util.Collections.emptyList();
      private void ensureCardDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = new java.util.ArrayList<java.lang.Integer>(cardData_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardDataList() {
        return java.util.Collections.unmodifiableList(cardData_);
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public int getCardDataCount() {
        return cardData_.size();
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public int getCardData(int index) {
        return cardData_.get(index);
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder setCardData(
          int index, int value) {
        ensureCardDataIsMutable();
        cardData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder addCardData(int value) {
        ensureCardDataIsMutable();
        cardData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder addAllCardData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardDataIsMutable();
        super.addAll(values, cardData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 1;</code>
       *
       * <pre>
       *底牌数据
       * </pre>
       */
      public Builder clearCardData() {
        cardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 is_begin = 2;
      private int isBegin_ ;
      /**
       * <code>optional int32 is_begin = 2;</code>
       *
       * <pre>
       *1:显示在中间 0:不显示
       * </pre>
       */
      public boolean hasIsBegin() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 is_begin = 2;</code>
       *
       * <pre>
       *1:显示在中间 0:不显示
       * </pre>
       */
      public int getIsBegin() {
        return isBegin_;
      }
      /**
       * <code>optional int32 is_begin = 2;</code>
       *
       * <pre>
       *1:显示在中间 0:不显示
       * </pre>
       */
      public Builder setIsBegin(int value) {
        bitField0_ |= 0x00000002;
        isBegin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_begin = 2;</code>
       *
       * <pre>
       *1:显示在中间 0:不显示
       * </pre>
       */
      public Builder clearIsBegin() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isBegin_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.DiPaiCard_Nceqw)
    }

    static {
      defaultInstance = new DiPaiCard_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.DiPaiCard_Nceqw)
  }

  public interface LiShiCard_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .nceqw.Card_Arrary_Nceqw card_data = 1;
    /**
     * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    java.util.List<protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw> 
        getCardDataList();
    /**
     * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw getCardData(int index);
    /**
     * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    int getCardDataCount();
    /**
     * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_NceqwOrBuilder> 
        getCardDataOrBuilderList();
    /**
     * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_NceqwOrBuilder getCardDataOrBuilder(
        int index);

    // optional int32 banker_player = 2;
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    int getBankerPlayer();
  }
  /**
   * Protobuf type {@code nceqw.LiShiCard_Nceqw}
   *
   * <pre>
   *历史牌 1013
   * </pre>
   */
  public static final class LiShiCard_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements LiShiCard_NceqwOrBuilder {
    // Use LiShiCard_Nceqw.newBuilder() to construct.
    private LiShiCard_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LiShiCard_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LiShiCard_Nceqw defaultInstance;
    public static LiShiCard_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public LiShiCard_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LiShiCard_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardData_ = new java.util.ArrayList<protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardData_.add(input.readMessage(protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_LiShiCard_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_LiShiCard_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<LiShiCard_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<LiShiCard_Nceqw>() {
      public LiShiCard_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LiShiCard_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LiShiCard_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .nceqw.Card_Arrary_Nceqw card_data = 1;
    public static final int CARD_DATA_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw> cardData_;
    /**
     * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw> getCardDataList() {
      return cardData_;
    }
    /**
     * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_NceqwOrBuilder> 
        getCardDataOrBuilderList() {
      return cardData_;
    }
    /**
     * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    public int getCardDataCount() {
      return cardData_.size();
    }
    /**
     * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    public protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw getCardData(int index) {
      return cardData_.get(index);
    }
    /**
     * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
     *
     * <pre>
     *历史数据
     * </pre>
     */
    public protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_NceqwOrBuilder getCardDataOrBuilder(
        int index) {
      return cardData_.get(index);
    }

    // optional int32 banker_player = 2;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 2;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家位置
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    private void initFields() {
      cardData_ = java.util.Collections.emptyList();
      bankerPlayer_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardData_.size(); i++) {
        output.writeMessage(1, cardData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, bankerPlayer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < cardData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cardData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, bankerPlayer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.LiShiCard_Nceqw}
     *
     * <pre>
     *历史牌 1013
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.LiShiCard_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_LiShiCard_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_LiShiCard_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (cardDataBuilder_ == null) {
          cardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cardDataBuilder_.clear();
        }
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_LiShiCard_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (cardDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            cardData_ = java.util.Collections.unmodifiableList(cardData_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cardData_ = cardData_;
        } else {
          result.cardData_ = cardDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw.getDefaultInstance()) return this;
        if (cardDataBuilder_ == null) {
          if (!other.cardData_.isEmpty()) {
            if (cardData_.isEmpty()) {
              cardData_ = other.cardData_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCardDataIsMutable();
              cardData_.addAll(other.cardData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardData_.isEmpty()) {
            if (cardDataBuilder_.isEmpty()) {
              cardDataBuilder_.dispose();
              cardDataBuilder_ = null;
              cardData_ = other.cardData_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cardDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardDataFieldBuilder() : null;
            } else {
              cardDataBuilder_.addAllMessages(other.cardData_);
            }
          }
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.LiShiCard_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .nceqw.Card_Arrary_Nceqw card_data = 1;
      private java.util.List<protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw> cardData_ =
        java.util.Collections.emptyList();
      private void ensureCardDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardData_ = new java.util.ArrayList<protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw>(cardData_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_NceqwOrBuilder> cardDataBuilder_;

      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw> getCardDataList() {
        if (cardDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardData_);
        } else {
          return cardDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public int getCardDataCount() {
        if (cardDataBuilder_ == null) {
          return cardData_.size();
        } else {
          return cardDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw getCardData(int index) {
        if (cardDataBuilder_ == null) {
          return cardData_.get(index);
        } else {
          return cardDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder setCardData(
          int index, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.set(index, value);
          onChanged();
        } else {
          cardDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder setCardData(
          int index, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder addCardData(protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.add(value);
          onChanged();
        } else {
          cardDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder addCardData(
          int index, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw value) {
        if (cardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardDataIsMutable();
          cardData_.add(index, value);
          onChanged();
        } else {
          cardDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder addCardData(
          protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.add(builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder addCardData(
          int index, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder builderForValue) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder addAllCardData(
          java.lang.Iterable<? extends protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw> values) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          super.addAll(values, cardData_);
          onChanged();
        } else {
          cardDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder clearCardData() {
        if (cardDataBuilder_ == null) {
          cardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cardDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public Builder removeCardData(int index) {
        if (cardDataBuilder_ == null) {
          ensureCardDataIsMutable();
          cardData_.remove(index);
          onChanged();
        } else {
          cardDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder getCardDataBuilder(
          int index) {
        return getCardDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_NceqwOrBuilder getCardDataOrBuilder(
          int index) {
        if (cardDataBuilder_ == null) {
          return cardData_.get(index);  } else {
          return cardDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_NceqwOrBuilder> 
           getCardDataOrBuilderList() {
        if (cardDataBuilder_ != null) {
          return cardDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardData_);
        }
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder addCardDataBuilder() {
        return getCardDataFieldBuilder().addBuilder(
            protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.getDefaultInstance());
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder addCardDataBuilder(
          int index) {
        return getCardDataFieldBuilder().addBuilder(
            index, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.getDefaultInstance());
      }
      /**
       * <code>repeated .nceqw.Card_Arrary_Nceqw card_data = 1;</code>
       *
       * <pre>
       *历史数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder> 
           getCardDataBuilderList() {
        return getCardDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_NceqwOrBuilder> 
          getCardDataFieldBuilder() {
        if (cardDataBuilder_ == null) {
          cardDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_Nceqw.Builder, protobuf.clazz.nceqw.nceqwRsp.Card_Arrary_NceqwOrBuilder>(
                  cardData_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          cardData_ = null;
        }
        return cardDataBuilder_;
      }

      // optional int32 banker_player = 2;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000002;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家位置
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.LiShiCard_Nceqw)
    }

    static {
      defaultInstance = new LiShiCard_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.LiShiCard_Nceqw)
  }

  public interface TableScore_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 get_score = 1;
    /**
     * <code>optional int32 get_score = 1;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    boolean hasGetScore();
    /**
     * <code>optional int32 get_score = 1;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    int getGetScore();

    // optional int32 banker_score = 2;
    /**
     * <code>optional int32 banker_score = 2;</code>
     *
     * <pre>
     *庄分
     * </pre>
     */
    boolean hasBankerScore();
    /**
     * <code>optional int32 banker_score = 2;</code>
     *
     * <pre>
     *庄分
     * </pre>
     */
    int getBankerScore();

    // optional int32 call_times = 3;
    /**
     * <code>optional int32 call_times = 3;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    boolean hasCallTimes();
    /**
     * <code>optional int32 call_times = 3;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    int getCallTimes();
  }
  /**
   * Protobuf type {@code nceqw.TableScore_Nceqw}
   *
   * <pre>
   *1014
   * </pre>
   */
  public static final class TableScore_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements TableScore_NceqwOrBuilder {
    // Use TableScore_Nceqw.newBuilder() to construct.
    private TableScore_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableScore_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableScore_Nceqw defaultInstance;
    public static TableScore_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public TableScore_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableScore_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              getScore_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              bankerScore_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              callTimes_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TableScore_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TableScore_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<TableScore_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<TableScore_Nceqw>() {
      public TableScore_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableScore_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableScore_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 get_score = 1;
    public static final int GET_SCORE_FIELD_NUMBER = 1;
    private int getScore_;
    /**
     * <code>optional int32 get_score = 1;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    public boolean hasGetScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 get_score = 1;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    public int getGetScore() {
      return getScore_;
    }

    // optional int32 banker_score = 2;
    public static final int BANKER_SCORE_FIELD_NUMBER = 2;
    private int bankerScore_;
    /**
     * <code>optional int32 banker_score = 2;</code>
     *
     * <pre>
     *庄分
     * </pre>
     */
    public boolean hasBankerScore() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 banker_score = 2;</code>
     *
     * <pre>
     *庄分
     * </pre>
     */
    public int getBankerScore() {
      return bankerScore_;
    }

    // optional int32 call_times = 3;
    public static final int CALL_TIMES_FIELD_NUMBER = 3;
    private int callTimes_;
    /**
     * <code>optional int32 call_times = 3;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    public boolean hasCallTimes() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 call_times = 3;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    public int getCallTimes() {
      return callTimes_;
    }

    private void initFields() {
      getScore_ = 0;
      bankerScore_ = 0;
      callTimes_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, getScore_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, bankerScore_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, callTimes_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getScore_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, bankerScore_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, callTimes_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.TableScore_Nceqw}
     *
     * <pre>
     *1014
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.TableScore_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TableScore_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TableScore_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        getScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        callTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_TableScore_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.getScore_ = getScore_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bankerScore_ = bankerScore_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.callTimes_ = callTimes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw.getDefaultInstance()) return this;
        if (other.hasGetScore()) {
          setGetScore(other.getGetScore());
        }
        if (other.hasBankerScore()) {
          setBankerScore(other.getBankerScore());
        }
        if (other.hasCallTimes()) {
          setCallTimes(other.getCallTimes());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.TableScore_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 get_score = 1;
      private int getScore_ ;
      /**
       * <code>optional int32 get_score = 1;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public boolean hasGetScore() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 get_score = 1;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public int getGetScore() {
        return getScore_;
      }
      /**
       * <code>optional int32 get_score = 1;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public Builder setGetScore(int value) {
        bitField0_ |= 0x00000001;
        getScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 get_score = 1;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public Builder clearGetScore() {
        bitField0_ = (bitField0_ & ~0x00000001);
        getScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_score = 2;
      private int bankerScore_ ;
      /**
       * <code>optional int32 banker_score = 2;</code>
       *
       * <pre>
       *庄分
       * </pre>
       */
      public boolean hasBankerScore() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 banker_score = 2;</code>
       *
       * <pre>
       *庄分
       * </pre>
       */
      public int getBankerScore() {
        return bankerScore_;
      }
      /**
       * <code>optional int32 banker_score = 2;</code>
       *
       * <pre>
       *庄分
       * </pre>
       */
      public Builder setBankerScore(int value) {
        bitField0_ |= 0x00000002;
        bankerScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_score = 2;</code>
       *
       * <pre>
       *庄分
       * </pre>
       */
      public Builder clearBankerScore() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bankerScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_times = 3;
      private int callTimes_ ;
      /**
       * <code>optional int32 call_times = 3;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public boolean hasCallTimes() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 call_times = 3;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public int getCallTimes() {
        return callTimes_;
      }
      /**
       * <code>optional int32 call_times = 3;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public Builder setCallTimes(int value) {
        bitField0_ |= 0x00000004;
        callTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_times = 3;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public Builder clearCallTimes() {
        bitField0_ = (bitField0_ & ~0x00000004);
        callTimes_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.TableScore_Nceqw)
    }

    static {
      defaultInstance = new TableScore_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.TableScore_Nceqw)
  }

  public interface Zhu_pai_type_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 zhu_type = 1;
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    boolean hasZhuType();
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    int getZhuType();

    // optional int32 type = 2;
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1需要动画 2：不需要动画
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1需要动画 2：不需要动画
     * </pre>
     */
    int getType();
  }
  /**
   * Protobuf type {@code nceqw.Zhu_pai_type_Nceqw}
   *
   * <pre>
   *1015
   * </pre>
   */
  public static final class Zhu_pai_type_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements Zhu_pai_type_NceqwOrBuilder {
    // Use Zhu_pai_type_Nceqw.newBuilder() to construct.
    private Zhu_pai_type_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Zhu_pai_type_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Zhu_pai_type_Nceqw defaultInstance;
    public static Zhu_pai_type_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public Zhu_pai_type_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Zhu_pai_type_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              zhuType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              type_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Zhu_pai_type_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Zhu_pai_type_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<Zhu_pai_type_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<Zhu_pai_type_Nceqw>() {
      public Zhu_pai_type_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Zhu_pai_type_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Zhu_pai_type_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 zhu_type = 1;
    public static final int ZHU_TYPE_FIELD_NUMBER = 1;
    private int zhuType_;
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public boolean hasZhuType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public int getZhuType() {
      return zhuType_;
    }

    // optional int32 type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1需要动画 2：不需要动画
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1需要动画 2：不需要动画
     * </pre>
     */
    public int getType() {
      return type_;
    }

    private void initFields() {
      zhuType_ = 0;
      type_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, zhuType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, type_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, zhuType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, type_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.Zhu_pai_type_Nceqw}
     *
     * <pre>
     *1015
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Zhu_pai_type_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Zhu_pai_type_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        zhuType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Zhu_pai_type_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.zhuType_ = zhuType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw.getDefaultInstance()) return this;
        if (other.hasZhuType()) {
          setZhuType(other.getZhuType());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.Zhu_pai_type_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 zhu_type = 1;
      private int zhuType_ ;
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public boolean hasZhuType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public int getZhuType() {
        return zhuType_;
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder setZhuType(int value) {
        bitField0_ |= 0x00000001;
        zhuType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder clearZhuType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        zhuType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 type = 2;
      private int type_ ;
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1需要动画 2：不需要动画
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1需要动画 2：不需要动画
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1需要动画 2：不需要动画
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1需要动画 2：不需要动画
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.Zhu_pai_type_Nceqw)
    }

    static {
      defaultInstance = new Zhu_pai_type_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.Zhu_pai_type_Nceqw)
  }

  public interface Zhu_Pai_Card_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 zhu_type = 1;
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    boolean hasZhuType();
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    int getZhuType();

    // repeated int32 zhu_card_count = 2;
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhuCardCountList();
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    int getZhuCardCountCount();
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    int getZhuCardCount(int index);

    // repeated int32 zhu_card_double_count = 3;
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhuCardDoubleCountList();
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    int getZhuCardDoubleCountCount();
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    int getZhuCardDoubleCount(int index);
  }
  /**
   * Protobuf type {@code nceqw.Zhu_Pai_Card_Nceqw}
   *
   * <pre>
   *1016
   * </pre>
   */
  public static final class Zhu_Pai_Card_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements Zhu_Pai_Card_NceqwOrBuilder {
    // Use Zhu_Pai_Card_Nceqw.newBuilder() to construct.
    private Zhu_Pai_Card_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Zhu_Pai_Card_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Zhu_Pai_Card_Nceqw defaultInstance;
    public static Zhu_Pai_Card_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public Zhu_Pai_Card_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Zhu_Pai_Card_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              zhuType_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                zhuCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              zhuCardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                zhuCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhuCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                zhuCardDoubleCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              zhuCardDoubleCount_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                zhuCardDoubleCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhuCardDoubleCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          zhuCardCount_ = java.util.Collections.unmodifiableList(zhuCardCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          zhuCardDoubleCount_ = java.util.Collections.unmodifiableList(zhuCardDoubleCount_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Zhu_Pai_Card_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Zhu_Pai_Card_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<Zhu_Pai_Card_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<Zhu_Pai_Card_Nceqw>() {
      public Zhu_Pai_Card_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Zhu_Pai_Card_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Zhu_Pai_Card_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 zhu_type = 1;
    public static final int ZHU_TYPE_FIELD_NUMBER = 1;
    private int zhuType_;
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public boolean hasZhuType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 zhu_type = 1;</code>
     *
     * <pre>
     *主牌类型
     * </pre>
     */
    public int getZhuType() {
      return zhuType_;
    }

    // repeated int32 zhu_card_count = 2;
    public static final int ZHU_CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> zhuCardCount_;
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhuCardCountList() {
      return zhuCardCount_;
    }
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    public int getZhuCardCountCount() {
      return zhuCardCount_.size();
    }
    /**
     * <code>repeated int32 zhu_card_count = 2;</code>
     *
     * <pre>
     *主牌数量
     * </pre>
     */
    public int getZhuCardCount(int index) {
      return zhuCardCount_.get(index);
    }

    // repeated int32 zhu_card_double_count = 3;
    public static final int ZHU_CARD_DOUBLE_COUNT_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> zhuCardDoubleCount_;
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhuCardDoubleCountList() {
      return zhuCardDoubleCount_;
    }
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    public int getZhuCardDoubleCountCount() {
      return zhuCardDoubleCount_.size();
    }
    /**
     * <code>repeated int32 zhu_card_double_count = 3;</code>
     *
     * <pre>
     *主牌对子数量
     * </pre>
     */
    public int getZhuCardDoubleCount(int index) {
      return zhuCardDoubleCount_.get(index);
    }

    private void initFields() {
      zhuType_ = 0;
      zhuCardCount_ = java.util.Collections.emptyList();
      zhuCardDoubleCount_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, zhuType_);
      }
      for (int i = 0; i < zhuCardCount_.size(); i++) {
        output.writeInt32(2, zhuCardCount_.get(i));
      }
      for (int i = 0; i < zhuCardDoubleCount_.size(); i++) {
        output.writeInt32(3, zhuCardDoubleCount_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, zhuType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < zhuCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhuCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getZhuCardCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < zhuCardDoubleCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhuCardDoubleCount_.get(i));
        }
        size += dataSize;
        size += 1 * getZhuCardDoubleCountList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.Zhu_Pai_Card_Nceqw}
     *
     * <pre>
     *1016
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Zhu_Pai_Card_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Zhu_Pai_Card_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        zhuType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        zhuCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        zhuCardDoubleCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Zhu_Pai_Card_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.zhuType_ = zhuType_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          zhuCardCount_ = java.util.Collections.unmodifiableList(zhuCardCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.zhuCardCount_ = zhuCardCount_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          zhuCardDoubleCount_ = java.util.Collections.unmodifiableList(zhuCardDoubleCount_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.zhuCardDoubleCount_ = zhuCardDoubleCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw.getDefaultInstance()) return this;
        if (other.hasZhuType()) {
          setZhuType(other.getZhuType());
        }
        if (!other.zhuCardCount_.isEmpty()) {
          if (zhuCardCount_.isEmpty()) {
            zhuCardCount_ = other.zhuCardCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureZhuCardCountIsMutable();
            zhuCardCount_.addAll(other.zhuCardCount_);
          }
          onChanged();
        }
        if (!other.zhuCardDoubleCount_.isEmpty()) {
          if (zhuCardDoubleCount_.isEmpty()) {
            zhuCardDoubleCount_ = other.zhuCardDoubleCount_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureZhuCardDoubleCountIsMutable();
            zhuCardDoubleCount_.addAll(other.zhuCardDoubleCount_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.Zhu_Pai_Card_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 zhu_type = 1;
      private int zhuType_ ;
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public boolean hasZhuType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public int getZhuType() {
        return zhuType_;
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder setZhuType(int value) {
        bitField0_ |= 0x00000001;
        zhuType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 zhu_type = 1;</code>
       *
       * <pre>
       *主牌类型
       * </pre>
       */
      public Builder clearZhuType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        zhuType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 zhu_card_count = 2;
      private java.util.List<java.lang.Integer> zhuCardCount_ = java.util.Collections.emptyList();
      private void ensureZhuCardCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          zhuCardCount_ = new java.util.ArrayList<java.lang.Integer>(zhuCardCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhuCardCountList() {
        return java.util.Collections.unmodifiableList(zhuCardCount_);
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public int getZhuCardCountCount() {
        return zhuCardCount_.size();
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public int getZhuCardCount(int index) {
        return zhuCardCount_.get(index);
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public Builder setZhuCardCount(
          int index, int value) {
        ensureZhuCardCountIsMutable();
        zhuCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public Builder addZhuCardCount(int value) {
        ensureZhuCardCountIsMutable();
        zhuCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public Builder addAllZhuCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhuCardCountIsMutable();
        super.addAll(values, zhuCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_count = 2;</code>
       *
       * <pre>
       *主牌数量
       * </pre>
       */
      public Builder clearZhuCardCount() {
        zhuCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 zhu_card_double_count = 3;
      private java.util.List<java.lang.Integer> zhuCardDoubleCount_ = java.util.Collections.emptyList();
      private void ensureZhuCardDoubleCountIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          zhuCardDoubleCount_ = new java.util.ArrayList<java.lang.Integer>(zhuCardDoubleCount_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhuCardDoubleCountList() {
        return java.util.Collections.unmodifiableList(zhuCardDoubleCount_);
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public int getZhuCardDoubleCountCount() {
        return zhuCardDoubleCount_.size();
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public int getZhuCardDoubleCount(int index) {
        return zhuCardDoubleCount_.get(index);
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public Builder setZhuCardDoubleCount(
          int index, int value) {
        ensureZhuCardDoubleCountIsMutable();
        zhuCardDoubleCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public Builder addZhuCardDoubleCount(int value) {
        ensureZhuCardDoubleCountIsMutable();
        zhuCardDoubleCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public Builder addAllZhuCardDoubleCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhuCardDoubleCountIsMutable();
        super.addAll(values, zhuCardDoubleCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_card_double_count = 3;</code>
       *
       * <pre>
       *主牌对子数量
       * </pre>
       */
      public Builder clearZhuCardDoubleCount() {
        zhuCardDoubleCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.Zhu_Pai_Card_Nceqw)
    }

    static {
      defaultInstance = new Zhu_Pai_Card_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.Zhu_Pai_Card_Nceqw)
  }

  public interface PaiFenData_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 cards_data = 1;
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_count = 2;
    /**
     * <code>optional int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    int getCardsCount();
  }
  /**
   * Protobuf type {@code nceqw.PaiFenData_Nceqw}
   *
   * <pre>
   *1018
   * </pre>
   */
  public static final class PaiFenData_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements PaiFenData_NceqwOrBuilder {
    // Use PaiFenData_Nceqw.newBuilder() to construct.
    private PaiFenData_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PaiFenData_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PaiFenData_Nceqw defaultInstance;
    public static PaiFenData_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public PaiFenData_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PaiFenData_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              cardsCount_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_PaiFenData_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_PaiFenData_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<PaiFenData_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<PaiFenData_Nceqw>() {
      public PaiFenData_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PaiFenData_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PaiFenData_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 cards_data = 1;
    public static final int CARDS_DATA_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_count = 2;
    public static final int CARDS_COUNT_FIELD_NUMBER = 2;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    private void initFields() {
      cardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(1, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, cardsCount_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardsCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.PaiFenData_Nceqw}
     *
     * <pre>
     *1018
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.PaiFenData_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_PaiFenData_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_PaiFenData_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_PaiFenData_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardsCount_ = cardsCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw.getDefaultInstance()) return this;
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.PaiFenData_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 cards_data = 1;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 2;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000002;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.PaiFenData_Nceqw)
    }

    static {
      defaultInstance = new PaiFenData_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.PaiFenData_Nceqw)
  }

  public interface Get_Score_Effect_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 card_data = 1;
    /**
     * <code>optional int32 card_data = 1;</code>
     */
    boolean hasCardData();
    /**
     * <code>optional int32 card_data = 1;</code>
     */
    int getCardData();

    // optional int32 get_score = 2;
    /**
     * <code>optional int32 get_score = 2;</code>
     *
     * <pre>
     *本次获取分数
     * </pre>
     */
    boolean hasGetScore();
    /**
     * <code>optional int32 get_score = 2;</code>
     *
     * <pre>
     *本次获取分数
     * </pre>
     */
    int getGetScore();

    // optional int32 all_get_score = 3;
    /**
     * <code>optional int32 all_get_score = 3;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    boolean hasAllGetScore();
    /**
     * <code>optional int32 all_get_score = 3;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    int getAllGetScore();

    // optional int32 banker_score = 4;
    /**
     * <code>optional int32 banker_score = 4;</code>
     *
     * <pre>
     *庄分
     * </pre>
     */
    boolean hasBankerScore();
    /**
     * <code>optional int32 banker_score = 4;</code>
     *
     * <pre>
     *庄分
     * </pre>
     */
    int getBankerScore();

    // optional int32 type = 5;
    /**
     * <code>optional int32 type = 5;</code>
     *
     * <pre>
     *是否动画 0否 1是
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 5;</code>
     *
     * <pre>
     *是否动画 0否 1是
     * </pre>
     */
    int getType();

    // optional int32 call_times = 6;
    /**
     * <code>optional int32 call_times = 6;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    boolean hasCallTimes();
    /**
     * <code>optional int32 call_times = 6;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    int getCallTimes();
  }
  /**
   * Protobuf type {@code nceqw.Get_Score_Effect_Nceqw}
   *
   * <pre>
   *1019
   * </pre>
   */
  public static final class Get_Score_Effect_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements Get_Score_Effect_NceqwOrBuilder {
    // Use Get_Score_Effect_Nceqw.newBuilder() to construct.
    private Get_Score_Effect_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Get_Score_Effect_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Get_Score_Effect_Nceqw defaultInstance;
    public static Get_Score_Effect_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public Get_Score_Effect_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Get_Score_Effect_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cardData_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              getScore_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              allGetScore_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              bankerScore_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              type_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              callTimes_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Get_Score_Effect_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Get_Score_Effect_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<Get_Score_Effect_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<Get_Score_Effect_Nceqw>() {
      public Get_Score_Effect_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Get_Score_Effect_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Get_Score_Effect_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 card_data = 1;
    public static final int CARD_DATA_FIELD_NUMBER = 1;
    private int cardData_;
    /**
     * <code>optional int32 card_data = 1;</code>
     */
    public boolean hasCardData() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_data = 1;</code>
     */
    public int getCardData() {
      return cardData_;
    }

    // optional int32 get_score = 2;
    public static final int GET_SCORE_FIELD_NUMBER = 2;
    private int getScore_;
    /**
     * <code>optional int32 get_score = 2;</code>
     *
     * <pre>
     *本次获取分数
     * </pre>
     */
    public boolean hasGetScore() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 get_score = 2;</code>
     *
     * <pre>
     *本次获取分数
     * </pre>
     */
    public int getGetScore() {
      return getScore_;
    }

    // optional int32 all_get_score = 3;
    public static final int ALL_GET_SCORE_FIELD_NUMBER = 3;
    private int allGetScore_;
    /**
     * <code>optional int32 all_get_score = 3;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    public boolean hasAllGetScore() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 all_get_score = 3;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    public int getAllGetScore() {
      return allGetScore_;
    }

    // optional int32 banker_score = 4;
    public static final int BANKER_SCORE_FIELD_NUMBER = 4;
    private int bankerScore_;
    /**
     * <code>optional int32 banker_score = 4;</code>
     *
     * <pre>
     *庄分
     * </pre>
     */
    public boolean hasBankerScore() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 banker_score = 4;</code>
     *
     * <pre>
     *庄分
     * </pre>
     */
    public int getBankerScore() {
      return bankerScore_;
    }

    // optional int32 type = 5;
    public static final int TYPE_FIELD_NUMBER = 5;
    private int type_;
    /**
     * <code>optional int32 type = 5;</code>
     *
     * <pre>
     *是否动画 0否 1是
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 type = 5;</code>
     *
     * <pre>
     *是否动画 0否 1是
     * </pre>
     */
    public int getType() {
      return type_;
    }

    // optional int32 call_times = 6;
    public static final int CALL_TIMES_FIELD_NUMBER = 6;
    private int callTimes_;
    /**
     * <code>optional int32 call_times = 6;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    public boolean hasCallTimes() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 call_times = 6;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    public int getCallTimes() {
      return callTimes_;
    }

    private void initFields() {
      cardData_ = 0;
      getScore_ = 0;
      allGetScore_ = 0;
      bankerScore_ = 0;
      type_ = 0;
      callTimes_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cardData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, getScore_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, allGetScore_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, bankerScore_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, type_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, callTimes_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cardData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getScore_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, allGetScore_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, bankerScore_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, type_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, callTimes_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.Get_Score_Effect_Nceqw}
     *
     * <pre>
     *1019
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Get_Score_Effect_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Get_Score_Effect_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        getScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        allGetScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        bankerScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        callTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Get_Score_Effect_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardData_ = cardData_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.getScore_ = getScore_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.allGetScore_ = allGetScore_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bankerScore_ = bankerScore_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.callTimes_ = callTimes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw.getDefaultInstance()) return this;
        if (other.hasCardData()) {
          setCardData(other.getCardData());
        }
        if (other.hasGetScore()) {
          setGetScore(other.getGetScore());
        }
        if (other.hasAllGetScore()) {
          setAllGetScore(other.getAllGetScore());
        }
        if (other.hasBankerScore()) {
          setBankerScore(other.getBankerScore());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasCallTimes()) {
          setCallTimes(other.getCallTimes());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.Get_Score_Effect_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 card_data = 1;
      private int cardData_ ;
      /**
       * <code>optional int32 card_data = 1;</code>
       */
      public boolean hasCardData() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 card_data = 1;</code>
       */
      public int getCardData() {
        return cardData_;
      }
      /**
       * <code>optional int32 card_data = 1;</code>
       */
      public Builder setCardData(int value) {
        bitField0_ |= 0x00000001;
        cardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_data = 1;</code>
       */
      public Builder clearCardData() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cardData_ = 0;
        onChanged();
        return this;
      }

      // optional int32 get_score = 2;
      private int getScore_ ;
      /**
       * <code>optional int32 get_score = 2;</code>
       *
       * <pre>
       *本次获取分数
       * </pre>
       */
      public boolean hasGetScore() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 get_score = 2;</code>
       *
       * <pre>
       *本次获取分数
       * </pre>
       */
      public int getGetScore() {
        return getScore_;
      }
      /**
       * <code>optional int32 get_score = 2;</code>
       *
       * <pre>
       *本次获取分数
       * </pre>
       */
      public Builder setGetScore(int value) {
        bitField0_ |= 0x00000002;
        getScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 get_score = 2;</code>
       *
       * <pre>
       *本次获取分数
       * </pre>
       */
      public Builder clearGetScore() {
        bitField0_ = (bitField0_ & ~0x00000002);
        getScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 all_get_score = 3;
      private int allGetScore_ ;
      /**
       * <code>optional int32 all_get_score = 3;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public boolean hasAllGetScore() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 all_get_score = 3;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public int getAllGetScore() {
        return allGetScore_;
      }
      /**
       * <code>optional int32 all_get_score = 3;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public Builder setAllGetScore(int value) {
        bitField0_ |= 0x00000004;
        allGetScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 all_get_score = 3;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public Builder clearAllGetScore() {
        bitField0_ = (bitField0_ & ~0x00000004);
        allGetScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_score = 4;
      private int bankerScore_ ;
      /**
       * <code>optional int32 banker_score = 4;</code>
       *
       * <pre>
       *庄分
       * </pre>
       */
      public boolean hasBankerScore() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 banker_score = 4;</code>
       *
       * <pre>
       *庄分
       * </pre>
       */
      public int getBankerScore() {
        return bankerScore_;
      }
      /**
       * <code>optional int32 banker_score = 4;</code>
       *
       * <pre>
       *庄分
       * </pre>
       */
      public Builder setBankerScore(int value) {
        bitField0_ |= 0x00000008;
        bankerScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_score = 4;</code>
       *
       * <pre>
       *庄分
       * </pre>
       */
      public Builder clearBankerScore() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bankerScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 type = 5;
      private int type_ ;
      /**
       * <code>optional int32 type = 5;</code>
       *
       * <pre>
       *是否动画 0否 1是
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 type = 5;</code>
       *
       * <pre>
       *是否动画 0否 1是
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 5;</code>
       *
       * <pre>
       *是否动画 0否 1是
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000010;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 5;</code>
       *
       * <pre>
       *是否动画 0否 1是
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        type_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_times = 6;
      private int callTimes_ ;
      /**
       * <code>optional int32 call_times = 6;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public boolean hasCallTimes() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 call_times = 6;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public int getCallTimes() {
        return callTimes_;
      }
      /**
       * <code>optional int32 call_times = 6;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public Builder setCallTimes(int value) {
        bitField0_ |= 0x00000020;
        callTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_times = 6;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public Builder clearCallTimes() {
        bitField0_ = (bitField0_ & ~0x00000020);
        callTimes_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.Get_Score_Effect_Nceqw)
    }

    static {
      defaultInstance = new Get_Score_Effect_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.Get_Score_Effect_Nceqw)
  }

  public interface Kou_Di_Score_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 cards_data = 1;
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_count = 2;
    /**
     * <code>optional int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    int getCardsCount();

    // repeated int32 kou_di_card_data = 3;
    /**
     * <code>repeated int32 kou_di_card_data = 3;</code>
     */
    java.util.List<java.lang.Integer> getKouDiCardDataList();
    /**
     * <code>repeated int32 kou_di_card_data = 3;</code>
     */
    int getKouDiCardDataCount();
    /**
     * <code>repeated int32 kou_di_card_data = 3;</code>
     */
    int getKouDiCardData(int index);

    // optional int32 get_score = 4;
    /**
     * <code>optional int32 get_score = 4;</code>
     */
    boolean hasGetScore();
    /**
     * <code>optional int32 get_score = 4;</code>
     */
    int getGetScore();

    // optional int32 all_get_score = 5;
    /**
     * <code>optional int32 all_get_score = 5;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    boolean hasAllGetScore();
    /**
     * <code>optional int32 all_get_score = 5;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    int getAllGetScore();

    // optional int32 banker_score = 6;
    /**
     * <code>optional int32 banker_score = 6;</code>
     */
    boolean hasBankerScore();
    /**
     * <code>optional int32 banker_score = 6;</code>
     */
    int getBankerScore();
  }
  /**
   * Protobuf type {@code nceqw.Kou_Di_Score_Nceqw}
   *
   * <pre>
   *1020
   * </pre>
   */
  public static final class Kou_Di_Score_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements Kou_Di_Score_NceqwOrBuilder {
    // Use Kou_Di_Score_Nceqw.newBuilder() to construct.
    private Kou_Di_Score_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Kou_Di_Score_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Kou_Di_Score_Nceqw defaultInstance;
    public static Kou_Di_Score_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public Kou_Di_Score_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Kou_Di_Score_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              cardsCount_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                kouDiCardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              kouDiCardData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                kouDiCardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                kouDiCardData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              getScore_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              allGetScore_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              bankerScore_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          kouDiCardData_ = java.util.Collections.unmodifiableList(kouDiCardData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Kou_Di_Score_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Kou_Di_Score_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<Kou_Di_Score_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<Kou_Di_Score_Nceqw>() {
      public Kou_Di_Score_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Kou_Di_Score_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Kou_Di_Score_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 cards_data = 1;
    public static final int CARDS_DATA_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_count = 2;
    public static final int CARDS_COUNT_FIELD_NUMBER = 2;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // repeated int32 kou_di_card_data = 3;
    public static final int KOU_DI_CARD_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> kouDiCardData_;
    /**
     * <code>repeated int32 kou_di_card_data = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getKouDiCardDataList() {
      return kouDiCardData_;
    }
    /**
     * <code>repeated int32 kou_di_card_data = 3;</code>
     */
    public int getKouDiCardDataCount() {
      return kouDiCardData_.size();
    }
    /**
     * <code>repeated int32 kou_di_card_data = 3;</code>
     */
    public int getKouDiCardData(int index) {
      return kouDiCardData_.get(index);
    }

    // optional int32 get_score = 4;
    public static final int GET_SCORE_FIELD_NUMBER = 4;
    private int getScore_;
    /**
     * <code>optional int32 get_score = 4;</code>
     */
    public boolean hasGetScore() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 get_score = 4;</code>
     */
    public int getGetScore() {
      return getScore_;
    }

    // optional int32 all_get_score = 5;
    public static final int ALL_GET_SCORE_FIELD_NUMBER = 5;
    private int allGetScore_;
    /**
     * <code>optional int32 all_get_score = 5;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    public boolean hasAllGetScore() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 all_get_score = 5;</code>
     *
     * <pre>
     *闲家总得分
     * </pre>
     */
    public int getAllGetScore() {
      return allGetScore_;
    }

    // optional int32 banker_score = 6;
    public static final int BANKER_SCORE_FIELD_NUMBER = 6;
    private int bankerScore_;
    /**
     * <code>optional int32 banker_score = 6;</code>
     */
    public boolean hasBankerScore() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 banker_score = 6;</code>
     */
    public int getBankerScore() {
      return bankerScore_;
    }

    private void initFields() {
      cardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      kouDiCardData_ = java.util.Collections.emptyList();
      getScore_ = 0;
      allGetScore_ = 0;
      bankerScore_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(1, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, cardsCount_);
      }
      for (int i = 0; i < kouDiCardData_.size(); i++) {
        output.writeInt32(3, kouDiCardData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, getScore_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, allGetScore_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, bankerScore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardsCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < kouDiCardData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(kouDiCardData_.get(i));
        }
        size += dataSize;
        size += 1 * getKouDiCardDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getScore_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, allGetScore_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, bankerScore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.Kou_Di_Score_Nceqw}
     *
     * <pre>
     *1020
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Kou_Di_Score_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Kou_Di_Score_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        kouDiCardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        getScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        allGetScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        bankerScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Kou_Di_Score_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardsCount_ = cardsCount_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          kouDiCardData_ = java.util.Collections.unmodifiableList(kouDiCardData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.kouDiCardData_ = kouDiCardData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.getScore_ = getScore_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.allGetScore_ = allGetScore_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bankerScore_ = bankerScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw.getDefaultInstance()) return this;
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (!other.kouDiCardData_.isEmpty()) {
          if (kouDiCardData_.isEmpty()) {
            kouDiCardData_ = other.kouDiCardData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureKouDiCardDataIsMutable();
            kouDiCardData_.addAll(other.kouDiCardData_);
          }
          onChanged();
        }
        if (other.hasGetScore()) {
          setGetScore(other.getGetScore());
        }
        if (other.hasAllGetScore()) {
          setAllGetScore(other.getAllGetScore());
        }
        if (other.hasBankerScore()) {
          setBankerScore(other.getBankerScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.Kou_Di_Score_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 cards_data = 1;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 2;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000002;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 kou_di_card_data = 3;
      private java.util.List<java.lang.Integer> kouDiCardData_ = java.util.Collections.emptyList();
      private void ensureKouDiCardDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          kouDiCardData_ = new java.util.ArrayList<java.lang.Integer>(kouDiCardData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 kou_di_card_data = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getKouDiCardDataList() {
        return java.util.Collections.unmodifiableList(kouDiCardData_);
      }
      /**
       * <code>repeated int32 kou_di_card_data = 3;</code>
       */
      public int getKouDiCardDataCount() {
        return kouDiCardData_.size();
      }
      /**
       * <code>repeated int32 kou_di_card_data = 3;</code>
       */
      public int getKouDiCardData(int index) {
        return kouDiCardData_.get(index);
      }
      /**
       * <code>repeated int32 kou_di_card_data = 3;</code>
       */
      public Builder setKouDiCardData(
          int index, int value) {
        ensureKouDiCardDataIsMutable();
        kouDiCardData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 kou_di_card_data = 3;</code>
       */
      public Builder addKouDiCardData(int value) {
        ensureKouDiCardDataIsMutable();
        kouDiCardData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 kou_di_card_data = 3;</code>
       */
      public Builder addAllKouDiCardData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureKouDiCardDataIsMutable();
        super.addAll(values, kouDiCardData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 kou_di_card_data = 3;</code>
       */
      public Builder clearKouDiCardData() {
        kouDiCardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 get_score = 4;
      private int getScore_ ;
      /**
       * <code>optional int32 get_score = 4;</code>
       */
      public boolean hasGetScore() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 get_score = 4;</code>
       */
      public int getGetScore() {
        return getScore_;
      }
      /**
       * <code>optional int32 get_score = 4;</code>
       */
      public Builder setGetScore(int value) {
        bitField0_ |= 0x00000008;
        getScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 get_score = 4;</code>
       */
      public Builder clearGetScore() {
        bitField0_ = (bitField0_ & ~0x00000008);
        getScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 all_get_score = 5;
      private int allGetScore_ ;
      /**
       * <code>optional int32 all_get_score = 5;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public boolean hasAllGetScore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 all_get_score = 5;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public int getAllGetScore() {
        return allGetScore_;
      }
      /**
       * <code>optional int32 all_get_score = 5;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public Builder setAllGetScore(int value) {
        bitField0_ |= 0x00000010;
        allGetScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 all_get_score = 5;</code>
       *
       * <pre>
       *闲家总得分
       * </pre>
       */
      public Builder clearAllGetScore() {
        bitField0_ = (bitField0_ & ~0x00000010);
        allGetScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_score = 6;
      private int bankerScore_ ;
      /**
       * <code>optional int32 banker_score = 6;</code>
       */
      public boolean hasBankerScore() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 banker_score = 6;</code>
       */
      public int getBankerScore() {
        return bankerScore_;
      }
      /**
       * <code>optional int32 banker_score = 6;</code>
       */
      public Builder setBankerScore(int value) {
        bitField0_ |= 0x00000020;
        bankerScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_score = 6;</code>
       */
      public Builder clearBankerScore() {
        bitField0_ = (bitField0_ & ~0x00000020);
        bankerScore_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.Kou_Di_Score_Nceqw)
    }

    static {
      defaultInstance = new Kou_Di_Score_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.Kou_Di_Score_Nceqw)
  }

  public interface effect_type_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 seat_index = 2;
    /**
     * <code>optional int32 seat_index = 2;</code>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 2;</code>
     */
    int getSeatIndex();

    // optional int32 type = 1;
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     * 1：盖毙 10:发牌十老主牌型 11：冲关牌型 12:确定十老主牌型
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     * 1：盖毙 10:发牌十老主牌型 11：冲关牌型 12:确定十老主牌型
     * </pre>
     */
    int getType();

    // optional int32 data = 3;
    /**
     * <code>optional int32 data = 3;</code>
     *
     * <pre>
     *被毙玩家
     * </pre>
     */
    boolean hasData();
    /**
     * <code>optional int32 data = 3;</code>
     *
     * <pre>
     *被毙玩家
     * </pre>
     */
    int getData();
  }
  /**
   * Protobuf type {@code nceqw.effect_type_Nceqw}
   *
   * <pre>
   *1022
   * </pre>
   */
  public static final class effect_type_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements effect_type_NceqwOrBuilder {
    // Use effect_type_Nceqw.newBuilder() to construct.
    private effect_type_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private effect_type_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final effect_type_Nceqw defaultInstance;
    public static effect_type_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public effect_type_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private effect_type_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000002;
              type_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              seatIndex_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              data_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_effect_type_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_effect_type_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<effect_type_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<effect_type_Nceqw>() {
      public effect_type_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new effect_type_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<effect_type_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 seat_index = 2;
    public static final int SEAT_INDEX_FIELD_NUMBER = 2;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 2;</code>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 seat_index = 2;</code>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional int32 type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     * 1：盖毙 10:发牌十老主牌型 11：冲关牌型 12:确定十老主牌型
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 type = 1;</code>
     *
     * <pre>
     * 1：盖毙 10:发牌十老主牌型 11：冲关牌型 12:确定十老主牌型
     * </pre>
     */
    public int getType() {
      return type_;
    }

    // optional int32 data = 3;
    public static final int DATA_FIELD_NUMBER = 3;
    private int data_;
    /**
     * <code>optional int32 data = 3;</code>
     *
     * <pre>
     *被毙玩家
     * </pre>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 data = 3;</code>
     *
     * <pre>
     *被毙玩家
     * </pre>
     */
    public int getData() {
      return data_;
    }

    private void initFields() {
      seatIndex_ = 0;
      type_ = 0;
      data_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(1, type_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, seatIndex_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, data_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, type_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, seatIndex_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, data_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.effect_type_Nceqw}
     *
     * <pre>
     *1022
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.effect_type_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_effect_type_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_effect_type_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_effect_type_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.data_ = data_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw.getDefaultInstance()) return this;
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.effect_type_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 seat_index = 2;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 2;</code>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 type = 1;
      private int type_ ;
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       * 1：盖毙 10:发牌十老主牌型 11：冲关牌型 12:确定十老主牌型
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       * 1：盖毙 10:发牌十老主牌型 11：冲关牌型 12:确定十老主牌型
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       * 1：盖毙 10:发牌十老主牌型 11：冲关牌型 12:确定十老主牌型
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       * 1：盖毙 10:发牌十老主牌型 11：冲关牌型 12:确定十老主牌型
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        onChanged();
        return this;
      }

      // optional int32 data = 3;
      private int data_ ;
      /**
       * <code>optional int32 data = 3;</code>
       *
       * <pre>
       *被毙玩家
       * </pre>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 data = 3;</code>
       *
       * <pre>
       *被毙玩家
       * </pre>
       */
      public int getData() {
        return data_;
      }
      /**
       * <code>optional int32 data = 3;</code>
       *
       * <pre>
       *被毙玩家
       * </pre>
       */
      public Builder setData(int value) {
        bitField0_ |= 0x00000004;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 data = 3;</code>
       *
       * <pre>
       *被毙玩家
       * </pre>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000004);
        data_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.effect_type_Nceqw)
    }

    static {
      defaultInstance = new effect_type_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.effect_type_Nceqw)
  }

  public interface Opreate_RequestWsk_NceqwOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_type = 1;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据 9：喊来分
     * </pre>
     */
    boolean hasOpreateType();
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据 9：喊来分
     * </pre>
     */
    int getOpreateType();

    // optional int32 select_dang = 2;
    /**
     * <code>optional int32 select_dang = 2;</code>
     *
     * <pre>
     *挡
     * </pre>
     */
    boolean hasSelectDang();
    /**
     * <code>optional int32 select_dang = 2;</code>
     *
     * <pre>
     *挡
     * </pre>
     */
    int getSelectDang();

    // optional int32 select_type = 3;
    /**
     * <code>optional int32 select_type = 3;</code>
     *
     * <pre>
     *1234:黑红梅方
     * </pre>
     */
    boolean hasSelectType();
    /**
     * <code>optional int32 select_type = 3;</code>
     *
     * <pre>
     *1234:黑红梅方
     * </pre>
     */
    int getSelectType();

    // repeated int32 cards_data = 4;
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 card_index = 5;
    /**
     * <code>optional int32 card_index = 5;</code>
     */
    boolean hasCardIndex();
    /**
     * <code>optional int32 card_index = 5;</code>
     */
    int getCardIndex();
  }
  /**
   * Protobuf type {@code nceqw.Opreate_RequestWsk_Nceqw}
   *
   * <pre>
   *请求 1085
   * </pre>
   */
  public static final class Opreate_RequestWsk_Nceqw extends
      com.google.protobuf.GeneratedMessage
      implements Opreate_RequestWsk_NceqwOrBuilder {
    // Use Opreate_RequestWsk_Nceqw.newBuilder() to construct.
    private Opreate_RequestWsk_Nceqw(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Opreate_RequestWsk_Nceqw(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Opreate_RequestWsk_Nceqw defaultInstance;
    public static Opreate_RequestWsk_Nceqw getDefaultInstance() {
      return defaultInstance;
    }

    public Opreate_RequestWsk_Nceqw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Opreate_RequestWsk_Nceqw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              selectDang_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              selectType_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              cardIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Opreate_RequestWsk_Nceqw_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Opreate_RequestWsk_Nceqw_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw.Builder.class);
    }

    public static com.google.protobuf.Parser<Opreate_RequestWsk_Nceqw> PARSER =
        new com.google.protobuf.AbstractParser<Opreate_RequestWsk_Nceqw>() {
      public Opreate_RequestWsk_Nceqw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Opreate_RequestWsk_Nceqw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Opreate_RequestWsk_Nceqw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_type = 1;
    public static final int OPREATE_TYPE_FIELD_NUMBER = 1;
    private int opreateType_;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据 9：喊来分
     * </pre>
     */
    public boolean hasOpreateType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据 9：喊来分
     * </pre>
     */
    public int getOpreateType() {
      return opreateType_;
    }

    // optional int32 select_dang = 2;
    public static final int SELECT_DANG_FIELD_NUMBER = 2;
    private int selectDang_;
    /**
     * <code>optional int32 select_dang = 2;</code>
     *
     * <pre>
     *挡
     * </pre>
     */
    public boolean hasSelectDang() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 select_dang = 2;</code>
     *
     * <pre>
     *挡
     * </pre>
     */
    public int getSelectDang() {
      return selectDang_;
    }

    // optional int32 select_type = 3;
    public static final int SELECT_TYPE_FIELD_NUMBER = 3;
    private int selectType_;
    /**
     * <code>optional int32 select_type = 3;</code>
     *
     * <pre>
     *1234:黑红梅方
     * </pre>
     */
    public boolean hasSelectType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 select_type = 3;</code>
     *
     * <pre>
     *1234:黑红梅方
     * </pre>
     */
    public int getSelectType() {
      return selectType_;
    }

    // repeated int32 cards_data = 4;
    public static final int CARDS_DATA_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 4;</code>
     *
     * <pre>
     *埋底扑克列表
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 card_index = 5;
    public static final int CARD_INDEX_FIELD_NUMBER = 5;
    private int cardIndex_;
    /**
     * <code>optional int32 card_index = 5;</code>
     */
    public boolean hasCardIndex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 card_index = 5;</code>
     */
    public int getCardIndex() {
      return cardIndex_;
    }

    private void initFields() {
      opreateType_ = 0;
      selectDang_ = 0;
      selectType_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, selectDang_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, selectType_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(4, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, cardIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, selectDang_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, selectType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nceqw.Opreate_RequestWsk_Nceqw}
     *
     * <pre>
     *请求 1085
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_NceqwOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Opreate_RequestWsk_Nceqw_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Opreate_RequestWsk_Nceqw_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw.class, protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw.Builder.class);
      }

      // Construct using protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        selectDang_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        selectType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        cardIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.nceqw.nceqwRsp.internal_static_nceqw_Opreate_RequestWsk_Nceqw_descriptor;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw getDefaultInstanceForType() {
        return protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw.getDefaultInstance();
      }

      public protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw build() {
        protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw buildPartial() {
        protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw result = new protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateType_ = opreateType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.selectDang_ = selectDang_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.selectType_ = selectType_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.cardIndex_ = cardIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw) {
          return mergeFrom((protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw other) {
        if (other == protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw.getDefaultInstance()) return this;
        if (other.hasOpreateType()) {
          setOpreateType(other.getOpreateType());
        }
        if (other.hasSelectDang()) {
          setSelectDang(other.getSelectDang());
        }
        if (other.hasSelectType()) {
          setSelectType(other.getSelectType());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardIndex()) {
          setCardIndex(other.getCardIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.nceqw.nceqwRsp.Opreate_RequestWsk_Nceqw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_type = 1;
      private int opreateType_ ;
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据 9：喊来分
       * </pre>
       */
      public boolean hasOpreateType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据 9：喊来分
       * </pre>
       */
      public int getOpreateType() {
        return opreateType_;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据 9：喊来分
       * </pre>
       */
      public Builder setOpreateType(int value) {
        bitField0_ |= 0x00000001;
        opreateType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1:叫挡 2：定主 3:埋底4:投降 5：同意 6：拒绝 7:底牌 8：历史数据 9：喊来分
       * </pre>
       */
      public Builder clearOpreateType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 select_dang = 2;
      private int selectDang_ ;
      /**
       * <code>optional int32 select_dang = 2;</code>
       *
       * <pre>
       *挡
       * </pre>
       */
      public boolean hasSelectDang() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 select_dang = 2;</code>
       *
       * <pre>
       *挡
       * </pre>
       */
      public int getSelectDang() {
        return selectDang_;
      }
      /**
       * <code>optional int32 select_dang = 2;</code>
       *
       * <pre>
       *挡
       * </pre>
       */
      public Builder setSelectDang(int value) {
        bitField0_ |= 0x00000002;
        selectDang_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 select_dang = 2;</code>
       *
       * <pre>
       *挡
       * </pre>
       */
      public Builder clearSelectDang() {
        bitField0_ = (bitField0_ & ~0x00000002);
        selectDang_ = 0;
        onChanged();
        return this;
      }

      // optional int32 select_type = 3;
      private int selectType_ ;
      /**
       * <code>optional int32 select_type = 3;</code>
       *
       * <pre>
       *1234:黑红梅方
       * </pre>
       */
      public boolean hasSelectType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 select_type = 3;</code>
       *
       * <pre>
       *1234:黑红梅方
       * </pre>
       */
      public int getSelectType() {
        return selectType_;
      }
      /**
       * <code>optional int32 select_type = 3;</code>
       *
       * <pre>
       *1234:黑红梅方
       * </pre>
       */
      public Builder setSelectType(int value) {
        bitField0_ |= 0x00000004;
        selectType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 select_type = 3;</code>
       *
       * <pre>
       *1234:黑红梅方
       * </pre>
       */
      public Builder clearSelectType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        selectType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 4;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 4;</code>
       *
       * <pre>
       *埋底扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional int32 card_index = 5;
      private int cardIndex_ ;
      /**
       * <code>optional int32 card_index = 5;</code>
       */
      public boolean hasCardIndex() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_index = 5;</code>
       */
      public int getCardIndex() {
        return cardIndex_;
      }
      /**
       * <code>optional int32 card_index = 5;</code>
       */
      public Builder setCardIndex(int value) {
        bitField0_ |= 0x00000010;
        cardIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_index = 5;</code>
       */
      public Builder clearCardIndex() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nceqw.Opreate_RequestWsk_Nceqw)
    }

    static {
      defaultInstance = new Opreate_RequestWsk_Nceqw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nceqw.Opreate_RequestWsk_Nceqw)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_OutCardDataNceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_OutCardDataNceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_PukeGameEndNceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_PukeGameEndNceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_TableResponse_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_TableResponse_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_GameStart_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_GameStart_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_SendCard_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_SendCard_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_RefreshCardData_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_RefreshCardData_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_CallBankerResponse_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_CallBankerResponse_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_JiaoZhuBegin_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_JiaoZhuBegin_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_MaiDiBegin_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_MaiDiBegin_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_TouXiangBegin_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_TouXiangBegin_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_TouXiangResult_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_TouXiangResult_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_Card_Arrary_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_Card_Arrary_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_DiPaiCard_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_DiPaiCard_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_LiShiCard_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_LiShiCard_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_TableScore_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_TableScore_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_Zhu_pai_type_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_Zhu_pai_type_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_Zhu_Pai_Card_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_Zhu_Pai_Card_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_PaiFenData_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_PaiFenData_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_Get_Score_Effect_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_Get_Score_Effect_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_Kou_Di_Score_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_Kou_Di_Score_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_effect_type_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_effect_type_Nceqw_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nceqw_Opreate_RequestWsk_Nceqw_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nceqw_Opreate_RequestWsk_Nceqw_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016sj/nceqw.proto\022\005nceqw\032\024basic/protocol." +
      "proto\"\311\004\n\020OutCardDataNceqw\022\027\n\017out_card_p" +
      "layer\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\023\n\013cards" +
      "_count\030\003 \001(\005\022\021\n\tcard_type\030\004 \001(\005\022\022\n\ncur_p" +
      "layer\030\005 \001(\005\022\025\n\rpr_cards_data\030\006 \003(\005\022\026\n\016pr" +
      "_cards_count\030\007 \001(\005\022\030\n\020pr_out_card_type\030\010" +
      " \001(\005\022\024\n\014display_time\030\t \001(\005\022+\n\016hand_card_" +
      "data\030\n \003(\0132\023.Int32ArrayResponse\022\027\n\017hand_" +
      "card_count\030\013 \003(\005\022\026\n\016max_value_seat\030\014 \001(\005" +
      "\022\031\n\021user_can_out_data\030\r \003(\005\022\032\n\022user_can_",
      "out_count\030\016 \001(\005\022\034\n\024is_current_first_out\030" +
      "\017 \001(\005\022\024\n\014killing_seat\030\020 \001(\005\022\023\n\013killed_se" +
      "at\030\021 \001(\005\022\017\n\007isround\030\022 \001(\010\022\031\n\021card_data_f" +
      "ailure\030\023 \003(\005\022\027\n\017turn_cards_data\030\024 \003(\005\022\030\n" +
      "\020turn_cards_count\030\025 \001(\005\022\032\n\022turn_out_card" +
      "_type\030\026 \001(\005\022\024\n\014is_first_out\030\027 \001(\005\"\356\005\n\020Pu" +
      "keGameEndNceqw\022\034\n\troom_info\030\001 \001(\0132\t.Room" +
      "Info\022\021\n\tcur_round\030\002 \001(\005\022\022\n\ngame_round\030\003 " +
      "\001(\005\022\022\n\ncard_count\030\004 \003(\005\022\'\n\ncards_data\030\005 " +
      "\003(\0132\023.Int32ArrayResponse\022\022\n\nplayer_num\030\006",
      " \001(\005\022\025\n\rbanker_player\030\007 \001(\005\022\016\n\006reason\030\010 " +
      "\001(\005\022\021\n\tend_score\030\t \003(\005\022\023\n\013init_di_pai\030\n " +
      "\003(\005\022\026\n\016banker_mai_pai\030\013 \003(\005\022\021\n\tget_score" +
      "\030\014 \001(\005\022\016\n\006di_fen\030\r \001(\005\022\022\n\ncall_score\030\016 \001" +
      "(\005\022\022\n\ncall_times\030\017 \001(\005\022\024\n\014score_reason\030\020" +
      " \001(\005\022\020\n\010di_times\030\021 \001(\005\022\020\n\010zhu_type\030\022 \001(\005" +
      "\022\030\n\020chong_guan_score\030\023 \003(\005\022\027\n\017bang_wang_" +
      "score\030\024 \003(\005\022\026\n\016win_lose_score\030\025 \003(\005\022\022\n\nw" +
      "in_ji_num\030\035 \001(\005\022,\n\017chong_guan_card\030\036 \003(\013" +
      "2\023.Int32ArrayResponse\022\026\n\016chong_guan_num\030",
      "\037 \003(\005\022\025\n\rall_end_score\030\026 \003(\005\022$\n\007players\030" +
      "\027 \003(\0132\023.RoomPlayerResponse\022\024\n\014banker_tim" +
      "es\030\030 \003(\005\022\021\n\twin_times\030\031 \003(\005\022\022\n\nlose_time" +
      "s\030\032 \003(\005\022\034\n\024chong_guan_score_max\030\033 \003(\005\022\033\n" +
      "\023bang_wang_score_max\030\034 \003(\005\"\365\004\n\023TableResp" +
      "onse_Nceqw\022\025\n\rbanker_player\030\001 \001(\005\022\026\n\016cur" +
      "rent_player\030\002 \001(\005\022\023\n\013prev_player\030\003 \001(\005\022\017" +
      "\n\007trustee\030\004 \003(\010\022+\n\016out_cards_data\030\005 \003(\0132" +
      "\023.Int32ArrayResponse\022\027\n\017out_cards_count\030" +
      "\006 \003(\005\022\026\n\016out_cards_type\030\007 \003(\005\022\021\n\tcard_ty",
      "pe\030\010 \003(\005\022\032\n\022pr_out_card_player\030\t \001(\005\022\025\n\r" +
      "pr_cards_data\030\n \003(\005\022\026\n\016pr_cards_count\030\013 " +
      "\001(\005\022\030\n\020pr_out_card_type\030\014 \001(\005\022\024\n\014is_firs" +
      "t_out\030\r \001(\005\022\024\n\014display_time\030\016 \001(\005\022\022\n\ncar" +
      "d_count\030\017 \003(\005\022\'\n\ncards_data\030\020 \003(\0132\023.Int3" +
      "2ArrayResponse\022\034\n\troom_info\030\021 \001(\0132\t.Room" +
      "Info\022$\n\007players\030\022 \003(\0132\023.RoomPlayerRespon" +
      "se\022\031\n\021user_can_out_data\030\023 \003(\005\022\032\n\022user_ca" +
      "n_out_count\030\024 \001(\005\022\020\n\010zhu_type\030\025 \001(\005\022\025\n\rm" +
      "ax_card_seat\030\026 \001(\005\022\023\n\013select_dang\030\027 \003(\005\022",
      "\021\n\tcall_dang\030\030 \001(\005\"\200\001\n\017GameStart_Nceqw\022\034" +
      "\n\troom_info\030\001 \001(\0132\t.RoomInfo\022$\n\007players\030" +
      "\002 \003(\0132\023.RoomPlayerResponse\022\026\n\016current_pl" +
      "ayer\030\003 \001(\005\022\021\n\tstrDetail\030\004 \001(\t\"M\n\016SendCar" +
      "d_Nceqw\022\022\n\ncard_count\030\001 \003(\005\022\'\n\ncards_dat" +
      "a\030\002 \003(\0132\023.Int32ArrayResponse\"^\n\025RefreshC" +
      "ardData_Nceqw\022\027\n\017hand_card_count\030\001 \003(\005\022," +
      "\n\017hand_cards_data\030\002 \003(\0132\023.Int32ArrayResp" +
      "onse\"\337\001\n\030CallBankerResponse_Nceqw\022\030\n\020ope" +
      "rete_dang_num\030\001 \001(\005\022\023\n\013call_player\030\002 \001(\005",
      "\022\026\n\016current_player\030\003 \001(\005\022\025\n\rbanker_playe" +
      "r\030\004 \001(\005\022\024\n\014display_time\030\005 \001(\005\022\020\n\010dang_mi" +
      "n\030\007 \001(\005\022\020\n\010dang_max\030\010 \001(\005\022\034\n\troom_info\030\t" +
      " \001(\0132\t.RoomInfo\022\r\n\005score\030\n \001(\005\"c\n\022JiaoZh" +
      "uBegin_Nceqw\022\022\n\nseat_index\030\001 \001(\005\022\r\n\005coun" +
      "t\030\002 \003(\005\022\024\n\014display_time\030\003 \001(\005\022\024\n\014is_tou_" +
      "xiang\030\004 \001(\010\"d\n\020MaiDiBegin_Nceqw\022\022\n\nseat_" +
      "index\030\001 \001(\005\022\022\n\ncard_count\030\002 \001(\005\022\022\n\ncards" +
      "_data\030\003 \003(\005\022\024\n\014display_time\030\004 \001(\005\";\n\023Tou" +
      "XiangBegin_Nceqw\022\024\n\014display_time\030\001 \001(\005\022\016",
      "\n\006deatil\030\002 \001(\t\"e\n\024TouXiangResult_Nceqw\022\016" +
      "\n\006deatil\030\001 \001(\t\022\020\n\010is_agree\030\002 \003(\005\022\024\n\014disp" +
      "lay_time\030\003 \001(\005\022\025\n\rrequest_setat\030\004 \001(\005\";\n" +
      "\021Card_Arrary_Nceqw\022&\n\tcard_data\030\001 \003(\0132\023." +
      "Int32ArrayResponse\"6\n\017DiPaiCard_Nceqw\022\021\n" +
      "\tcard_data\030\001 \003(\005\022\020\n\010is_begin\030\002 \001(\005\"U\n\017Li" +
      "ShiCard_Nceqw\022+\n\tcard_data\030\001 \003(\0132\030.nceqw" +
      ".Card_Arrary_Nceqw\022\025\n\rbanker_player\030\002 \001(" +
      "\005\"O\n\020TableScore_Nceqw\022\021\n\tget_score\030\001 \001(\005" +
      "\022\024\n\014banker_score\030\002 \001(\005\022\022\n\ncall_times\030\003 \001",
      "(\005\"4\n\022Zhu_pai_type_Nceqw\022\020\n\010zhu_type\030\001 \001" +
      "(\005\022\014\n\004type\030\002 \001(\005\"]\n\022Zhu_Pai_Card_Nceqw\022\020" +
      "\n\010zhu_type\030\001 \001(\005\022\026\n\016zhu_card_count\030\002 \003(\005" +
      "\022\035\n\025zhu_card_double_count\030\003 \003(\005\";\n\020PaiFe" +
      "nData_Nceqw\022\022\n\ncards_data\030\001 \003(\005\022\023\n\013cards" +
      "_count\030\002 \001(\005\"\215\001\n\026Get_Score_Effect_Nceqw\022" +
      "\021\n\tcard_data\030\001 \001(\005\022\021\n\tget_score\030\002 \001(\005\022\025\n" +
      "\rall_get_score\030\003 \001(\005\022\024\n\014banker_score\030\004 \001" +
      "(\005\022\014\n\004type\030\005 \001(\005\022\022\n\ncall_times\030\006 \001(\005\"\227\001\n" +
      "\022Kou_Di_Score_Nceqw\022\022\n\ncards_data\030\001 \003(\005\022",
      "\023\n\013cards_count\030\002 \001(\005\022\030\n\020kou_di_card_data" +
      "\030\003 \003(\005\022\021\n\tget_score\030\004 \001(\005\022\025\n\rall_get_sco" +
      "re\030\005 \001(\005\022\024\n\014banker_score\030\006 \001(\005\"C\n\021effect" +
      "_type_Nceqw\022\022\n\nseat_index\030\002 \001(\005\022\014\n\004type\030" +
      "\001 \001(\005\022\014\n\004data\030\003 \001(\005\"\202\001\n\030Opreate_RequestW" +
      "sk_Nceqw\022\024\n\014opreate_type\030\001 \001(\005\022\023\n\013select" +
      "_dang\030\002 \001(\005\022\023\n\013select_type\030\003 \001(\005\022\022\n\ncard" +
      "s_data\030\004 \003(\005\022\022\n\ncard_index\030\005 \001(\005B \n\024prot" +
      "obuf.clazz.nceqwB\010nceqwRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_nceqw_OutCardDataNceqw_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_nceqw_OutCardDataNceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_OutCardDataNceqw_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrCardsCount", "PrOutCardType", "DisplayTime", "HandCardData", "HandCardCount", "MaxValueSeat", "UserCanOutData", "UserCanOutCount", "IsCurrentFirstOut", "KillingSeat", "KilledSeat", "Isround", "CardDataFailure", "TurnCardsData", "TurnCardsCount", "TurnOutCardType", "IsFirstOut", });
          internal_static_nceqw_PukeGameEndNceqw_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_nceqw_PukeGameEndNceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_PukeGameEndNceqw_descriptor,
              new java.lang.String[] { "RoomInfo", "CurRound", "GameRound", "CardCount", "CardsData", "PlayerNum", "BankerPlayer", "Reason", "EndScore", "InitDiPai", "BankerMaiPai", "GetScore", "DiFen", "CallScore", "CallTimes", "ScoreReason", "DiTimes", "ZhuType", "ChongGuanScore", "BangWangScore", "WinLoseScore", "WinJiNum", "ChongGuanCard", "ChongGuanNum", "AllEndScore", "Players", "BankerTimes", "WinTimes", "LoseTimes", "ChongGuanScoreMax", "BangWangScoreMax", });
          internal_static_nceqw_TableResponse_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_nceqw_TableResponse_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_TableResponse_Nceqw_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "OutCardsCount", "OutCardsType", "CardType", "PrOutCardPlayer", "PrCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "UserCanOutData", "UserCanOutCount", "ZhuType", "MaxCardSeat", "SelectDang", "CallDang", });
          internal_static_nceqw_GameStart_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_nceqw_GameStart_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_GameStart_Nceqw_descriptor,
              new java.lang.String[] { "RoomInfo", "Players", "CurrentPlayer", "StrDetail", });
          internal_static_nceqw_SendCard_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_nceqw_SendCard_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_SendCard_Nceqw_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", });
          internal_static_nceqw_RefreshCardData_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_nceqw_RefreshCardData_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_RefreshCardData_Nceqw_descriptor,
              new java.lang.String[] { "HandCardCount", "HandCardsData", });
          internal_static_nceqw_CallBankerResponse_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_nceqw_CallBankerResponse_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_CallBankerResponse_Nceqw_descriptor,
              new java.lang.String[] { "OpereteDangNum", "CallPlayer", "CurrentPlayer", "BankerPlayer", "DisplayTime", "DangMin", "DangMax", "RoomInfo", "Score", });
          internal_static_nceqw_JiaoZhuBegin_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_nceqw_JiaoZhuBegin_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_JiaoZhuBegin_Nceqw_descriptor,
              new java.lang.String[] { "SeatIndex", "Count", "DisplayTime", "IsTouXiang", });
          internal_static_nceqw_MaiDiBegin_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_nceqw_MaiDiBegin_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_MaiDiBegin_Nceqw_descriptor,
              new java.lang.String[] { "SeatIndex", "CardCount", "CardsData", "DisplayTime", });
          internal_static_nceqw_TouXiangBegin_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_nceqw_TouXiangBegin_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_TouXiangBegin_Nceqw_descriptor,
              new java.lang.String[] { "DisplayTime", "Deatil", });
          internal_static_nceqw_TouXiangResult_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_nceqw_TouXiangResult_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_TouXiangResult_Nceqw_descriptor,
              new java.lang.String[] { "Deatil", "IsAgree", "DisplayTime", "RequestSetat", });
          internal_static_nceqw_Card_Arrary_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_nceqw_Card_Arrary_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_Card_Arrary_Nceqw_descriptor,
              new java.lang.String[] { "CardData", });
          internal_static_nceqw_DiPaiCard_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_nceqw_DiPaiCard_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_DiPaiCard_Nceqw_descriptor,
              new java.lang.String[] { "CardData", "IsBegin", });
          internal_static_nceqw_LiShiCard_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_nceqw_LiShiCard_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_LiShiCard_Nceqw_descriptor,
              new java.lang.String[] { "CardData", "BankerPlayer", });
          internal_static_nceqw_TableScore_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_nceqw_TableScore_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_TableScore_Nceqw_descriptor,
              new java.lang.String[] { "GetScore", "BankerScore", "CallTimes", });
          internal_static_nceqw_Zhu_pai_type_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_nceqw_Zhu_pai_type_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_Zhu_pai_type_Nceqw_descriptor,
              new java.lang.String[] { "ZhuType", "Type", });
          internal_static_nceqw_Zhu_Pai_Card_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_nceqw_Zhu_Pai_Card_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_Zhu_Pai_Card_Nceqw_descriptor,
              new java.lang.String[] { "ZhuType", "ZhuCardCount", "ZhuCardDoubleCount", });
          internal_static_nceqw_PaiFenData_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_nceqw_PaiFenData_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_PaiFenData_Nceqw_descriptor,
              new java.lang.String[] { "CardsData", "CardsCount", });
          internal_static_nceqw_Get_Score_Effect_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_nceqw_Get_Score_Effect_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_Get_Score_Effect_Nceqw_descriptor,
              new java.lang.String[] { "CardData", "GetScore", "AllGetScore", "BankerScore", "Type", "CallTimes", });
          internal_static_nceqw_Kou_Di_Score_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(19);
          internal_static_nceqw_Kou_Di_Score_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_Kou_Di_Score_Nceqw_descriptor,
              new java.lang.String[] { "CardsData", "CardsCount", "KouDiCardData", "GetScore", "AllGetScore", "BankerScore", });
          internal_static_nceqw_effect_type_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(20);
          internal_static_nceqw_effect_type_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_effect_type_Nceqw_descriptor,
              new java.lang.String[] { "SeatIndex", "Type", "Data", });
          internal_static_nceqw_Opreate_RequestWsk_Nceqw_descriptor =
            getDescriptor().getMessageTypes().get(21);
          internal_static_nceqw_Opreate_RequestWsk_Nceqw_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nceqw_Opreate_RequestWsk_Nceqw_descriptor,
              new java.lang.String[] { "OpreateType", "SelectDang", "SelectType", "CardsData", "CardIndex", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
