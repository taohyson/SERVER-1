// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddz/lpsddzProto.proto

package protobuf.clazz.lpsddz;

public final class lpsDdzRsp {
  private lpsDdzRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface OutCardData_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // repeated int32 change_cards_data = 3;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getChangeCardsDataList();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsData(int index);

    // optional int32 cards_count = 4;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 5;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 6;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // optional int32 cur_player_ya_pai = 7;
    /**
     * <code>optional int32 cur_player_ya_pai = 7;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    boolean hasCurPlayerYaPai();
    /**
     * <code>optional int32 cur_player_ya_pai = 7;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    int getCurPlayerYaPai();

    // repeated int32 pr_cards_data = 8;
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_change_cards_data = 9;
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // optional int32 pr_cards_count = 10;
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 11;
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 12;
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 13;
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated string difen_bomb_des = 14;
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.util.List<java.lang.String>
    getDifenBombDesList();
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    int getDifenBombDesCount();
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getDifenBombDes(int index);
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getDifenBombDesBytes(int index);

    // repeated int32 user_card_count = 15;
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCardCountList();
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCountCount();
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCount(int index);

    // repeated .Int32ArrayResponse user_cards_data = 16;
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getUserCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getUserCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code lpsddz.OutCardData_lps}
   *
   * <pre>
   *&#47;//测试
   *用户出牌
   * </pre>
   */
  public static final class OutCardData_lps extends
      com.google.protobuf.GeneratedMessage
      implements OutCardData_lpsOrBuilder {
    // Use OutCardData_lps.newBuilder() to construct.
    private OutCardData_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardData_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardData_lps defaultInstance;
    public static OutCardData_lps getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardData_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardData_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              changeCardsData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                changeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              curPlayerYaPai_ = input.readInt32();
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000100;
              displayTime_ = input.readInt32();
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                difenBombDes_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00002000;
              }
              difenBombDes_.add(input.readBytes());
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                userCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              userCardCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                userCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                userCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00008000;
              }
              userCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(difenBombDes_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          userCardCount_ = java.util.Collections.unmodifiableList(userCardCount_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_OutCardData_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_OutCardData_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardData_lps> PARSER =
        new com.google.protobuf.AbstractParser<OutCardData_lps>() {
      public OutCardData_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardData_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardData_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // repeated int32 change_cards_data = 3;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> changeCardsData_;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }

    // optional int32 cards_count = 4;
    public static final int CARDS_COUNT_FIELD_NUMBER = 4;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 5;
    public static final int CARD_TYPE_FIELD_NUMBER = 5;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 6;
    public static final int CUR_PLAYER_FIELD_NUMBER = 6;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // optional int32 cur_player_ya_pai = 7;
    public static final int CUR_PLAYER_YA_PAI_FIELD_NUMBER = 7;
    private int curPlayerYaPai_;
    /**
     * <code>optional int32 cur_player_ya_pai = 7;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    public boolean hasCurPlayerYaPai() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 cur_player_ya_pai = 7;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    public int getCurPlayerYaPai() {
      return curPlayerYaPai_;
    }

    // repeated int32 pr_cards_data = 8;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_change_cards_data = 9;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 10;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 10;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 11;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 11;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 12;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 12;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 13;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 13;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated string difen_bomb_des = 14;
    public static final int DIFEN_BOMB_DES_FIELD_NUMBER = 14;
    private com.google.protobuf.LazyStringList difenBombDes_;
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.util.List<java.lang.String>
        getDifenBombDesList() {
      return difenBombDes_;
    }
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public int getDifenBombDesCount() {
      return difenBombDes_.size();
    }
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getDifenBombDes(int index) {
      return difenBombDes_.get(index);
    }
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDifenBombDesBytes(int index) {
      return difenBombDes_.getByteString(index);
    }

    // repeated int32 user_card_count = 15;
    public static final int USER_CARD_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> userCardCount_;
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCardCountList() {
      return userCardCount_;
    }
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCountCount() {
      return userCardCount_.size();
    }
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCount(int index) {
      return userCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse user_cards_data = 16;
    public static final int USER_CARDS_DATA_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCardsDataList() {
      return userCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCardsDataOrBuilderList() {
      return userCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getUserCardsDataCount() {
      return userCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index) {
      return userCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
        int index) {
      return userCardsData_.get(index);
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      curPlayerYaPai_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      userCardCount_ = java.util.Collections.emptyList();
      userCardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeInt32(3, changeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, curPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, curPlayerYaPai_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(8, prCardsData_.get(i));
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(9, prChangeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, prCardsCount_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(11, prOutCardType_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, isFirstOut_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(13, displayTime_);
      }
      for (int i = 0; i < difenBombDes_.size(); i++) {
        output.writeBytes(14, difenBombDes_.getByteString(i));
      }
      for (int i = 0; i < userCardCount_.size(); i++) {
        output.writeInt32(15, userCardCount_.get(i));
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        output.writeMessage(16, userCardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < changeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(changeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, curPlayerYaPai_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prCardsCount_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, prOutCardType_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, isFirstOut_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < difenBombDes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(difenBombDes_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getDifenBombDesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCardCountList().size();
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, userCardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.OutCardData_lps}
     *
     * <pre>
     *&#47;//测试
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_OutCardData_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_OutCardData_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayerYaPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        userCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          userCardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_OutCardData_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.changeCardsData_ = changeCardsData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.curPlayerYaPai_ = curPlayerYaPai_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(
              difenBombDes_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.difenBombDes_ = difenBombDes_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          userCardCount_ = java.util.Collections.unmodifiableList(userCardCount_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.userCardCount_ = userCardCount_;
        if (userCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.userCardsData_ = userCardsData_;
        } else {
          result.userCardsData_ = userCardsDataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (!other.changeCardsData_.isEmpty()) {
          if (changeCardsData_.isEmpty()) {
            changeCardsData_ = other.changeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChangeCardsDataIsMutable();
            changeCardsData_.addAll(other.changeCardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (other.hasCurPlayerYaPai()) {
          setCurPlayerYaPai(other.getCurPlayerYaPai());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.difenBombDes_.isEmpty()) {
          if (difenBombDes_.isEmpty()) {
            difenBombDes_ = other.difenBombDes_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureDifenBombDesIsMutable();
            difenBombDes_.addAll(other.difenBombDes_);
          }
          onChanged();
        }
        if (!other.userCardCount_.isEmpty()) {
          if (userCardCount_.isEmpty()) {
            userCardCount_ = other.userCardCount_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureUserCardCountIsMutable();
            userCardCount_.addAll(other.userCardCount_);
          }
          onChanged();
        }
        if (userCardsDataBuilder_ == null) {
          if (!other.userCardsData_.isEmpty()) {
            if (userCardsData_.isEmpty()) {
              userCardsData_ = other.userCardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureUserCardsDataIsMutable();
              userCardsData_.addAll(other.userCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.userCardsData_.isEmpty()) {
            if (userCardsDataBuilder_.isEmpty()) {
              userCardsDataBuilder_.dispose();
              userCardsDataBuilder_ = null;
              userCardsData_ = other.userCardsData_;
              bitField0_ = (bitField0_ & ~0x00008000);
              userCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUserCardsDataFieldBuilder() : null;
            } else {
              userCardsDataBuilder_.addAllMessages(other.userCardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.OutCardData_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 change_cards_data = 3;
      private java.util.List<java.lang.Integer> changeCardsData_ = java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = new java.util.ArrayList<java.lang.Integer>(changeCardsData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(changeCardsData_);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        return changeCardsData_.size();
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsData(int index) {
        return changeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChangeCardsDataIsMutable();
        super.addAll(values, changeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 4;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000008;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 5;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 6;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000020;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player_ya_pai = 7;
      private int curPlayerYaPai_ ;
      /**
       * <code>optional int32 cur_player_ya_pai = 7;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public boolean hasCurPlayerYaPai() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 7;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public int getCurPlayerYaPai() {
        return curPlayerYaPai_;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 7;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public Builder setCurPlayerYaPai(int value) {
        bitField0_ |= 0x00000040;
        curPlayerYaPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 7;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public Builder clearCurPlayerYaPai() {
        bitField0_ = (bitField0_ & ~0x00000040);
        curPlayerYaPai_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 8;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 9;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 10;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000200;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 11;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000400;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000400);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 12;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00000800;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000800);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 13;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00001000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00001000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated string difen_bomb_des = 14;
      private com.google.protobuf.LazyStringList difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDifenBombDesIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          difenBombDes_ = new com.google.protobuf.LazyStringArrayList(difenBombDes_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.util.List<java.lang.String>
          getDifenBombDesList() {
        return java.util.Collections.unmodifiableList(difenBombDes_);
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public int getDifenBombDesCount() {
        return difenBombDes_.size();
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getDifenBombDes(int index) {
        return difenBombDes_.get(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDifenBombDesBytes(int index) {
        return difenBombDes_.getByteString(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setDifenBombDes(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addAllDifenBombDes(
          java.lang.Iterable<java.lang.String> values) {
        ensureDifenBombDesIsMutable();
        super.addAll(values, difenBombDes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearDifenBombDes() {
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }

      // repeated int32 user_card_count = 15;
      private java.util.List<java.lang.Integer> userCardCount_ = java.util.Collections.emptyList();
      private void ensureUserCardCountIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          userCardCount_ = new java.util.ArrayList<java.lang.Integer>(userCardCount_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCardCountList() {
        return java.util.Collections.unmodifiableList(userCardCount_);
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCountCount() {
        return userCardCount_.size();
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCount(int index) {
        return userCardCount_.get(index);
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setUserCardCount(
          int index, int value) {
        ensureUserCardCountIsMutable();
        userCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addUserCardCount(int value) {
        ensureUserCardCountIsMutable();
        userCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllUserCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCardCountIsMutable();
        super.addAll(values, userCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearUserCardCount() {
        userCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse user_cards_data = 16;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCardsData_ =
        java.util.Collections.emptyList();
      private void ensureUserCardsDataIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          userCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(userCardsData_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> userCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCardsDataList() {
        if (userCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(userCardsData_);
        } else {
          return userCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getUserCardsDataCount() {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.size();
        } else {
          return userCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index) {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.get(index);
        } else {
          return userCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.set(index, value);
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.add(value);
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.add(index, value);
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllUserCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          super.addAll(values, userCardsData_);
          onChanged();
        } else {
          userCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearUserCardsData() {
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          userCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeUserCardsData(int index) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.remove(index);
          onChanged();
        } else {
          userCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getUserCardsDataBuilder(
          int index) {
        return getUserCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
          int index) {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.get(index);  } else {
          return userCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getUserCardsDataOrBuilderList() {
        if (userCardsDataBuilder_ != null) {
          return userCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(userCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCardsDataBuilder() {
        return getUserCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCardsDataBuilder(
          int index) {
        return getUserCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getUserCardsDataBuilderList() {
        return getUserCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getUserCardsDataFieldBuilder() {
        if (userCardsDataBuilder_ == null) {
          userCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  userCardsData_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          userCardsData_ = null;
        }
        return userCardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.OutCardData_lps)
    }

    static {
      defaultInstance = new OutCardData_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.OutCardData_lps)
  }

  public interface PukeGameEndDdz_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional int32 cur_round = 2;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getCurRound();

    // optional int32 game_round = 3;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    int getGameRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 boom_card_num = 6;
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getBoomCardNumList();
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *数量
     * </pre>
     */
    int getBoomCardNumCount();
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *数量
     * </pre>
     */
    int getBoomCardNum(int index);

    // repeated int32 end_score = 7;
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    int getEndScore(int index);

    // optional int32 player_num = 8;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 banker_player = 9;
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 reason = 10;
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 chun_tian_player = 11;
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    java.util.List<java.lang.Integer> getChunTianPlayerList();
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    int getChunTianPlayerCount();
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    int getChunTianPlayer(int index);

    // repeated bool is_add_time = 20;
    /**
     * <code>repeated bool is_add_time = 20;</code>
     *
     * <pre>
     *是否加倍
     * </pre>
     */
    java.util.List<java.lang.Boolean> getIsAddTimeList();
    /**
     * <code>repeated bool is_add_time = 20;</code>
     *
     * <pre>
     *是否加倍
     * </pre>
     */
    int getIsAddTimeCount();
    /**
     * <code>repeated bool is_add_time = 20;</code>
     *
     * <pre>
     *是否加倍
     * </pre>
     */
    boolean getIsAddTime(int index);

    // optional int32 cell_score = 18;
    /**
     * <code>optional int32 cell_score = 18;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    boolean hasCellScore();
    /**
     * <code>optional int32 cell_score = 18;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    int getCellScore();

    // optional int32 times = 19;
    /**
     * <code>optional int32 times = 19;</code>
     *
     * <pre>
     *总倍数
     * </pre>
     */
    boolean hasTimes();
    /**
     * <code>optional int32 times = 19;</code>
     *
     * <pre>
     *总倍数
     * </pre>
     */
    int getTimes();

    // optional int32 boom_num = 21;
    /**
     * <code>optional int32 boom_num = 21;</code>
     *
     * <pre>
     *数
     * </pre>
     */
    boolean hasBoomNum();
    /**
     * <code>optional int32 boom_num = 21;</code>
     *
     * <pre>
     *数
     * </pre>
     */
    int getBoomNum();

    // optional int32 qiang_time = 22;
    /**
     * <code>optional int32 qiang_time = 22;</code>
     *
     * <pre>
     *抢地主倍数
     * </pre>
     */
    boolean hasQiangTime();
    /**
     * <code>optional int32 qiang_time = 22;</code>
     *
     * <pre>
     *抢地主倍数
     * </pre>
     */
    int getQiangTime();

    // optional int32 chuntian_time = 23;
    /**
     * <code>optional int32 chuntian_time = 23;</code>
     *
     * <pre>
     *春天倍数
     * </pre>
     */
    boolean hasChuntianTime();
    /**
     * <code>optional int32 chuntian_time = 23;</code>
     *
     * <pre>
     *春天倍数
     * </pre>
     */
    int getChuntianTime();

    // optional int32 dipai_time = 25;
    /**
     * <code>optional int32 dipai_time = 25;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    boolean hasDipaiTime();
    /**
     * <code>optional int32 dipai_time = 25;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    int getDipaiTime();

    // repeated int32 all_boom_card_num = 12;
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllBoomCardNumList();
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllBoomCardNumCount();
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllBoomCardNum(int index);

    // repeated int32 all_end_score = 13;
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated int32 end_score_max = 14;
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreMaxList();
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMaxCount();
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMax(int index);

    // repeated int32 win_num = 15;
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinNumList();
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNumCount();
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    int getWinNum(int index);

    // repeated int32 lose_num = 16;
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    java.util.List<java.lang.Integer> getLoseNumList();
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNumCount();
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    int getLoseNum(int index);

    // repeated .RoomPlayerResponse players = 17;
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 all_banker_num = 24;
    /**
     * <code>repeated int32 all_banker_num = 24;</code>
     *
     * <pre>
     *总叫地主数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllBankerNumList();
    /**
     * <code>repeated int32 all_banker_num = 24;</code>
     *
     * <pre>
     *总叫地主数量
     * </pre>
     */
    int getAllBankerNumCount();
    /**
     * <code>repeated int32 all_banker_num = 24;</code>
     *
     * <pre>
     *总叫地主数量
     * </pre>
     */
    int getAllBankerNum(int index);
  }
  /**
   * Protobuf type {@code lpsddz.PukeGameEndDdz_lps}
   *
   * <pre>
   *结算
   * </pre>
   */
  public static final class PukeGameEndDdz_lps extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndDdz_lpsOrBuilder {
    // Use PukeGameEndDdz_lps.newBuilder() to construct.
    private PukeGameEndDdz_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndDdz_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndDdz_lps defaultInstance;
    public static PukeGameEndDdz_lps getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndDdz_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndDdz_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              curRound_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameRound_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              boomCardNum_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                boomCardNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              playerNum_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              reason_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                chunTianPlayer_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              chunTianPlayer_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                chunTianPlayer_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                chunTianPlayer_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              allBoomCardNum_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allBoomCardNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              endScoreMax_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              winNum_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                winNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              loseNum_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                loseNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                loseNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00800000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 144: {
              bitField0_ |= 0x00000040;
              cellScore_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00000080;
              times_ = input.readInt32();
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                isAddTime_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000800;
              }
              isAddTime_.add(input.readBool());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                isAddTime_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                isAddTime_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              bitField0_ |= 0x00000100;
              boomNum_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00000200;
              qiangTime_ = input.readInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00000400;
              chuntianTime_ = input.readInt32();
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                allBankerNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              allBankerNum_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                allBankerNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allBankerNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 200: {
              bitField0_ |= 0x00000800;
              dipaiTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          chunTianPlayer_ = java.util.Collections.unmodifiableList(chunTianPlayer_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          allBoomCardNum_ = java.util.Collections.unmodifiableList(allBoomCardNum_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          isAddTime_ = java.util.Collections.unmodifiableList(isAddTime_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          allBankerNum_ = java.util.Collections.unmodifiableList(allBankerNum_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_PukeGameEndDdz_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_PukeGameEndDdz_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndDdz_lps> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndDdz_lps>() {
      public PukeGameEndDdz_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndDdz_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndDdz_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 cur_round = 2;
    public static final int CUR_ROUND_FIELD_NUMBER = 2;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_round = 3;
    public static final int GAME_ROUND_FIELD_NUMBER = 3;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 boom_card_num = 6;
    public static final int BOOM_CARD_NUM_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> boomCardNum_;
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBoomCardNumList() {
      return boomCardNum_;
    }
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *数量
     * </pre>
     */
    public int getBoomCardNumCount() {
      return boomCardNum_.size();
    }
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *数量
     * </pre>
     */
    public int getBoomCardNum(int index) {
      return boomCardNum_.get(index);
    }

    // repeated int32 end_score = 7;
    public static final int END_SCORE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // optional int32 player_num = 8;
    public static final int PLAYER_NUM_FIELD_NUMBER = 8;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 banker_player = 9;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 9;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 reason = 10;
    public static final int REASON_FIELD_NUMBER = 10;
    private int reason_;
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 chun_tian_player = 11;
    public static final int CHUN_TIAN_PLAYER_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> chunTianPlayer_;
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChunTianPlayerList() {
      return chunTianPlayer_;
    }
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    public int getChunTianPlayerCount() {
      return chunTianPlayer_.size();
    }
    /**
     * <code>repeated int32 chun_tian_player = 11;</code>
     *
     * <pre>
     *春天玩家
     * </pre>
     */
    public int getChunTianPlayer(int index) {
      return chunTianPlayer_.get(index);
    }

    // repeated bool is_add_time = 20;
    public static final int IS_ADD_TIME_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Boolean> isAddTime_;
    /**
     * <code>repeated bool is_add_time = 20;</code>
     *
     * <pre>
     *是否加倍
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getIsAddTimeList() {
      return isAddTime_;
    }
    /**
     * <code>repeated bool is_add_time = 20;</code>
     *
     * <pre>
     *是否加倍
     * </pre>
     */
    public int getIsAddTimeCount() {
      return isAddTime_.size();
    }
    /**
     * <code>repeated bool is_add_time = 20;</code>
     *
     * <pre>
     *是否加倍
     * </pre>
     */
    public boolean getIsAddTime(int index) {
      return isAddTime_.get(index);
    }

    // optional int32 cell_score = 18;
    public static final int CELL_SCORE_FIELD_NUMBER = 18;
    private int cellScore_;
    /**
     * <code>optional int32 cell_score = 18;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    public boolean hasCellScore() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 cell_score = 18;</code>
     *
     * <pre>
     *叫分倍数
     * </pre>
     */
    public int getCellScore() {
      return cellScore_;
    }

    // optional int32 times = 19;
    public static final int TIMES_FIELD_NUMBER = 19;
    private int times_;
    /**
     * <code>optional int32 times = 19;</code>
     *
     * <pre>
     *总倍数
     * </pre>
     */
    public boolean hasTimes() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 times = 19;</code>
     *
     * <pre>
     *总倍数
     * </pre>
     */
    public int getTimes() {
      return times_;
    }

    // optional int32 boom_num = 21;
    public static final int BOOM_NUM_FIELD_NUMBER = 21;
    private int boomNum_;
    /**
     * <code>optional int32 boom_num = 21;</code>
     *
     * <pre>
     *数
     * </pre>
     */
    public boolean hasBoomNum() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 boom_num = 21;</code>
     *
     * <pre>
     *数
     * </pre>
     */
    public int getBoomNum() {
      return boomNum_;
    }

    // optional int32 qiang_time = 22;
    public static final int QIANG_TIME_FIELD_NUMBER = 22;
    private int qiangTime_;
    /**
     * <code>optional int32 qiang_time = 22;</code>
     *
     * <pre>
     *抢地主倍数
     * </pre>
     */
    public boolean hasQiangTime() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 qiang_time = 22;</code>
     *
     * <pre>
     *抢地主倍数
     * </pre>
     */
    public int getQiangTime() {
      return qiangTime_;
    }

    // optional int32 chuntian_time = 23;
    public static final int CHUNTIAN_TIME_FIELD_NUMBER = 23;
    private int chuntianTime_;
    /**
     * <code>optional int32 chuntian_time = 23;</code>
     *
     * <pre>
     *春天倍数
     * </pre>
     */
    public boolean hasChuntianTime() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 chuntian_time = 23;</code>
     *
     * <pre>
     *春天倍数
     * </pre>
     */
    public int getChuntianTime() {
      return chuntianTime_;
    }

    // optional int32 dipai_time = 25;
    public static final int DIPAI_TIME_FIELD_NUMBER = 25;
    private int dipaiTime_;
    /**
     * <code>optional int32 dipai_time = 25;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    public boolean hasDipaiTime() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 dipai_time = 25;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    public int getDipaiTime() {
      return dipaiTime_;
    }

    // repeated int32 all_boom_card_num = 12;
    public static final int ALL_BOOM_CARD_NUM_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> allBoomCardNum_;
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllBoomCardNumList() {
      return allBoomCardNum_;
    }
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllBoomCardNumCount() {
      return allBoomCardNum_.size();
    }
    /**
     * <code>repeated int32 all_boom_card_num = 12;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllBoomCardNum(int index) {
      return allBoomCardNum_.get(index);
    }

    // repeated int32 all_end_score = 13;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 13;</code>
     *
     * <pre>
     *结算总积分
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 end_score_max = 14;
    public static final int END_SCORE_MAX_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> endScoreMax_;
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreMaxList() {
      return endScoreMax_;
    }
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMaxCount() {
      return endScoreMax_.size();
    }
    /**
     * <code>repeated int32 end_score_max = 14;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMax(int index) {
      return endScoreMax_.get(index);
    }

    // repeated int32 win_num = 15;
    public static final int WIN_NUM_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> winNum_;
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinNumList() {
      return winNum_;
    }
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNumCount() {
      return winNum_.size();
    }
    /**
     * <code>repeated int32 win_num = 15;</code>
     *
     * <pre>
     *赢句数
     * </pre>
     */
    public int getWinNum(int index) {
      return winNum_.get(index);
    }

    // repeated int32 lose_num = 16;
    public static final int LOSE_NUM_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> loseNum_;
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getLoseNumList() {
      return loseNum_;
    }
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNumCount() {
      return loseNum_.size();
    }
    /**
     * <code>repeated int32 lose_num = 16;</code>
     *
     * <pre>
     *输句数
     * </pre>
     */
    public int getLoseNum(int index) {
      return loseNum_.get(index);
    }

    // repeated .RoomPlayerResponse players = 17;
    public static final int PLAYERS_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 17;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 all_banker_num = 24;
    public static final int ALL_BANKER_NUM_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> allBankerNum_;
    /**
     * <code>repeated int32 all_banker_num = 24;</code>
     *
     * <pre>
     *总叫地主数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllBankerNumList() {
      return allBankerNum_;
    }
    /**
     * <code>repeated int32 all_banker_num = 24;</code>
     *
     * <pre>
     *总叫地主数量
     * </pre>
     */
    public int getAllBankerNumCount() {
      return allBankerNum_.size();
    }
    /**
     * <code>repeated int32 all_banker_num = 24;</code>
     *
     * <pre>
     *总叫地主数量
     * </pre>
     */
    public int getAllBankerNum(int index) {
      return allBankerNum_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      curRound_ = 0;
      gameRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      boomCardNum_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      bankerPlayer_ = 0;
      reason_ = 0;
      chunTianPlayer_ = java.util.Collections.emptyList();
      isAddTime_ = java.util.Collections.emptyList();
      cellScore_ = 0;
      times_ = 0;
      boomNum_ = 0;
      qiangTime_ = 0;
      chuntianTime_ = 0;
      dipaiTime_ = 0;
      allBoomCardNum_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      endScoreMax_ = java.util.Collections.emptyList();
      winNum_ = java.util.Collections.emptyList();
      loseNum_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
      allBankerNum_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameRound_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      for (int i = 0; i < boomCardNum_.size(); i++) {
        output.writeInt32(6, boomCardNum_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(7, endScore_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, reason_);
      }
      for (int i = 0; i < chunTianPlayer_.size(); i++) {
        output.writeInt32(11, chunTianPlayer_.get(i));
      }
      for (int i = 0; i < allBoomCardNum_.size(); i++) {
        output.writeInt32(12, allBoomCardNum_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(13, allEndScore_.get(i));
      }
      for (int i = 0; i < endScoreMax_.size(); i++) {
        output.writeInt32(14, endScoreMax_.get(i));
      }
      for (int i = 0; i < winNum_.size(); i++) {
        output.writeInt32(15, winNum_.get(i));
      }
      for (int i = 0; i < loseNum_.size(); i++) {
        output.writeInt32(16, loseNum_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(17, players_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(18, cellScore_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(19, times_);
      }
      for (int i = 0; i < isAddTime_.size(); i++) {
        output.writeBool(20, isAddTime_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(21, boomNum_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(22, qiangTime_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(23, chuntianTime_);
      }
      for (int i = 0; i < allBankerNum_.size(); i++) {
        output.writeInt32(24, allBankerNum_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(25, dipaiTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boomCardNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boomCardNum_.get(i));
        }
        size += dataSize;
        size += 1 * getBoomCardNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chunTianPlayer_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chunTianPlayer_.get(i));
        }
        size += dataSize;
        size += 1 * getChunTianPlayerList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allBoomCardNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allBoomCardNum_.get(i));
        }
        size += dataSize;
        size += 1 * getAllBoomCardNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScoreMax_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreMaxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winNum_.get(i));
        }
        size += dataSize;
        size += 1 * getWinNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < loseNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(loseNum_.get(i));
        }
        size += dataSize;
        size += 2 * getLoseNumList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, players_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, cellScore_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, times_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getIsAddTimeList().size();
        size += dataSize;
        size += 2 * getIsAddTimeList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, boomNum_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, qiangTime_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(23, chuntianTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allBankerNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allBankerNum_.get(i));
        }
        size += dataSize;
        size += 2 * getAllBankerNumList().size();
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, dipaiTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.PukeGameEndDdz_lps}
     *
     * <pre>
     *结算
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_PukeGameEndDdz_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_PukeGameEndDdz_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        chunTianPlayer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        isAddTime_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        cellScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        times_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        boomNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        qiangTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        chuntianTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        dipaiTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        allBoomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00800000);
        } else {
          playersBuilder_.clear();
        }
        allBankerNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_PukeGameEndDdz_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRound_ = gameRound_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.boomCardNum_ = boomCardNum_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.endScore_ = endScore_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          chunTianPlayer_ = java.util.Collections.unmodifiableList(chunTianPlayer_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.chunTianPlayer_ = chunTianPlayer_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          isAddTime_ = java.util.Collections.unmodifiableList(isAddTime_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.isAddTime_ = isAddTime_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cellScore_ = cellScore_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.times_ = times_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.boomNum_ = boomNum_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.qiangTime_ = qiangTime_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.chuntianTime_ = chuntianTime_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.dipaiTime_ = dipaiTime_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          allBoomCardNum_ = java.util.Collections.unmodifiableList(allBoomCardNum_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.allBoomCardNum_ = allBoomCardNum_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.endScoreMax_ = endScoreMax_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          winNum_ = java.util.Collections.unmodifiableList(winNum_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.winNum_ = winNum_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          loseNum_ = java.util.Collections.unmodifiableList(loseNum_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.loseNum_ = loseNum_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00800000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          allBankerNum_ = java.util.Collections.unmodifiableList(allBankerNum_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.allBankerNum_ = allBankerNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.boomCardNum_.isEmpty()) {
          if (boomCardNum_.isEmpty()) {
            boomCardNum_ = other.boomCardNum_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureBoomCardNumIsMutable();
            boomCardNum_.addAll(other.boomCardNum_);
          }
          onChanged();
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.chunTianPlayer_.isEmpty()) {
          if (chunTianPlayer_.isEmpty()) {
            chunTianPlayer_ = other.chunTianPlayer_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureChunTianPlayerIsMutable();
            chunTianPlayer_.addAll(other.chunTianPlayer_);
          }
          onChanged();
        }
        if (!other.isAddTime_.isEmpty()) {
          if (isAddTime_.isEmpty()) {
            isAddTime_ = other.isAddTime_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureIsAddTimeIsMutable();
            isAddTime_.addAll(other.isAddTime_);
          }
          onChanged();
        }
        if (other.hasCellScore()) {
          setCellScore(other.getCellScore());
        }
        if (other.hasTimes()) {
          setTimes(other.getTimes());
        }
        if (other.hasBoomNum()) {
          setBoomNum(other.getBoomNum());
        }
        if (other.hasQiangTime()) {
          setQiangTime(other.getQiangTime());
        }
        if (other.hasChuntianTime()) {
          setChuntianTime(other.getChuntianTime());
        }
        if (other.hasDipaiTime()) {
          setDipaiTime(other.getDipaiTime());
        }
        if (!other.allBoomCardNum_.isEmpty()) {
          if (allBoomCardNum_.isEmpty()) {
            allBoomCardNum_ = other.allBoomCardNum_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureAllBoomCardNumIsMutable();
            allBoomCardNum_.addAll(other.allBoomCardNum_);
          }
          onChanged();
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.endScoreMax_.isEmpty()) {
          if (endScoreMax_.isEmpty()) {
            endScoreMax_ = other.endScoreMax_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureEndScoreMaxIsMutable();
            endScoreMax_.addAll(other.endScoreMax_);
          }
          onChanged();
        }
        if (!other.winNum_.isEmpty()) {
          if (winNum_.isEmpty()) {
            winNum_ = other.winNum_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureWinNumIsMutable();
            winNum_.addAll(other.winNum_);
          }
          onChanged();
        }
        if (!other.loseNum_.isEmpty()) {
          if (loseNum_.isEmpty()) {
            loseNum_ = other.loseNum_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureLoseNumIsMutable();
            loseNum_.addAll(other.loseNum_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00800000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00800000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.allBankerNum_.isEmpty()) {
          if (allBankerNum_.isEmpty()) {
            allBankerNum_ = other.allBankerNum_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureAllBankerNumIsMutable();
            allBankerNum_.addAll(other.allBankerNum_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.PukeGameEndDdz_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 cur_round = 2;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000002;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 3;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000004;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 boom_card_num = 6;
      private java.util.List<java.lang.Integer> boomCardNum_ = java.util.Collections.emptyList();
      private void ensureBoomCardNumIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = new java.util.ArrayList<java.lang.Integer>(boomCardNum_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBoomCardNumList() {
        return java.util.Collections.unmodifiableList(boomCardNum_);
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public int getBoomCardNumCount() {
        return boomCardNum_.size();
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public int getBoomCardNum(int index) {
        return boomCardNum_.get(index);
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public Builder setBoomCardNum(
          int index, int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public Builder addBoomCardNum(int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public Builder addAllBoomCardNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoomCardNumIsMutable();
        super.addAll(values, boomCardNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *数量
       * </pre>
       */
      public Builder clearBoomCardNum() {
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 end_score = 7;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional int32 player_num = 8;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000080;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000080);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 9;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000100;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000100);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 10;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000200;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000200);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 chun_tian_player = 11;
      private java.util.List<java.lang.Integer> chunTianPlayer_ = java.util.Collections.emptyList();
      private void ensureChunTianPlayerIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          chunTianPlayer_ = new java.util.ArrayList<java.lang.Integer>(chunTianPlayer_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChunTianPlayerList() {
        return java.util.Collections.unmodifiableList(chunTianPlayer_);
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public int getChunTianPlayerCount() {
        return chunTianPlayer_.size();
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public int getChunTianPlayer(int index) {
        return chunTianPlayer_.get(index);
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder setChunTianPlayer(
          int index, int value) {
        ensureChunTianPlayerIsMutable();
        chunTianPlayer_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder addChunTianPlayer(int value) {
        ensureChunTianPlayerIsMutable();
        chunTianPlayer_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder addAllChunTianPlayer(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChunTianPlayerIsMutable();
        super.addAll(values, chunTianPlayer_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chun_tian_player = 11;</code>
       *
       * <pre>
       *春天玩家
       * </pre>
       */
      public Builder clearChunTianPlayer() {
        chunTianPlayer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated bool is_add_time = 20;
      private java.util.List<java.lang.Boolean> isAddTime_ = java.util.Collections.emptyList();
      private void ensureIsAddTimeIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          isAddTime_ = new java.util.ArrayList<java.lang.Boolean>(isAddTime_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated bool is_add_time = 20;</code>
       *
       * <pre>
       *是否加倍
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getIsAddTimeList() {
        return java.util.Collections.unmodifiableList(isAddTime_);
      }
      /**
       * <code>repeated bool is_add_time = 20;</code>
       *
       * <pre>
       *是否加倍
       * </pre>
       */
      public int getIsAddTimeCount() {
        return isAddTime_.size();
      }
      /**
       * <code>repeated bool is_add_time = 20;</code>
       *
       * <pre>
       *是否加倍
       * </pre>
       */
      public boolean getIsAddTime(int index) {
        return isAddTime_.get(index);
      }
      /**
       * <code>repeated bool is_add_time = 20;</code>
       *
       * <pre>
       *是否加倍
       * </pre>
       */
      public Builder setIsAddTime(
          int index, boolean value) {
        ensureIsAddTimeIsMutable();
        isAddTime_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_add_time = 20;</code>
       *
       * <pre>
       *是否加倍
       * </pre>
       */
      public Builder addIsAddTime(boolean value) {
        ensureIsAddTimeIsMutable();
        isAddTime_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_add_time = 20;</code>
       *
       * <pre>
       *是否加倍
       * </pre>
       */
      public Builder addAllIsAddTime(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureIsAddTimeIsMutable();
        super.addAll(values, isAddTime_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_add_time = 20;</code>
       *
       * <pre>
       *是否加倍
       * </pre>
       */
      public Builder clearIsAddTime() {
        isAddTime_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional int32 cell_score = 18;
      private int cellScore_ ;
      /**
       * <code>optional int32 cell_score = 18;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public boolean hasCellScore() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 cell_score = 18;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public int getCellScore() {
        return cellScore_;
      }
      /**
       * <code>optional int32 cell_score = 18;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public Builder setCellScore(int value) {
        bitField0_ |= 0x00001000;
        cellScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cell_score = 18;</code>
       *
       * <pre>
       *叫分倍数
       * </pre>
       */
      public Builder clearCellScore() {
        bitField0_ = (bitField0_ & ~0x00001000);
        cellScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 times = 19;
      private int times_ ;
      /**
       * <code>optional int32 times = 19;</code>
       *
       * <pre>
       *总倍数
       * </pre>
       */
      public boolean hasTimes() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 times = 19;</code>
       *
       * <pre>
       *总倍数
       * </pre>
       */
      public int getTimes() {
        return times_;
      }
      /**
       * <code>optional int32 times = 19;</code>
       *
       * <pre>
       *总倍数
       * </pre>
       */
      public Builder setTimes(int value) {
        bitField0_ |= 0x00002000;
        times_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 times = 19;</code>
       *
       * <pre>
       *总倍数
       * </pre>
       */
      public Builder clearTimes() {
        bitField0_ = (bitField0_ & ~0x00002000);
        times_ = 0;
        onChanged();
        return this;
      }

      // optional int32 boom_num = 21;
      private int boomNum_ ;
      /**
       * <code>optional int32 boom_num = 21;</code>
       *
       * <pre>
       *数
       * </pre>
       */
      public boolean hasBoomNum() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 boom_num = 21;</code>
       *
       * <pre>
       *数
       * </pre>
       */
      public int getBoomNum() {
        return boomNum_;
      }
      /**
       * <code>optional int32 boom_num = 21;</code>
       *
       * <pre>
       *数
       * </pre>
       */
      public Builder setBoomNum(int value) {
        bitField0_ |= 0x00004000;
        boomNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 boom_num = 21;</code>
       *
       * <pre>
       *数
       * </pre>
       */
      public Builder clearBoomNum() {
        bitField0_ = (bitField0_ & ~0x00004000);
        boomNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 qiang_time = 22;
      private int qiangTime_ ;
      /**
       * <code>optional int32 qiang_time = 22;</code>
       *
       * <pre>
       *抢地主倍数
       * </pre>
       */
      public boolean hasQiangTime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 qiang_time = 22;</code>
       *
       * <pre>
       *抢地主倍数
       * </pre>
       */
      public int getQiangTime() {
        return qiangTime_;
      }
      /**
       * <code>optional int32 qiang_time = 22;</code>
       *
       * <pre>
       *抢地主倍数
       * </pre>
       */
      public Builder setQiangTime(int value) {
        bitField0_ |= 0x00008000;
        qiangTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 qiang_time = 22;</code>
       *
       * <pre>
       *抢地主倍数
       * </pre>
       */
      public Builder clearQiangTime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        qiangTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 chuntian_time = 23;
      private int chuntianTime_ ;
      /**
       * <code>optional int32 chuntian_time = 23;</code>
       *
       * <pre>
       *春天倍数
       * </pre>
       */
      public boolean hasChuntianTime() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 chuntian_time = 23;</code>
       *
       * <pre>
       *春天倍数
       * </pre>
       */
      public int getChuntianTime() {
        return chuntianTime_;
      }
      /**
       * <code>optional int32 chuntian_time = 23;</code>
       *
       * <pre>
       *春天倍数
       * </pre>
       */
      public Builder setChuntianTime(int value) {
        bitField0_ |= 0x00010000;
        chuntianTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 chuntian_time = 23;</code>
       *
       * <pre>
       *春天倍数
       * </pre>
       */
      public Builder clearChuntianTime() {
        bitField0_ = (bitField0_ & ~0x00010000);
        chuntianTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 dipai_time = 25;
      private int dipaiTime_ ;
      /**
       * <code>optional int32 dipai_time = 25;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public boolean hasDipaiTime() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 dipai_time = 25;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public int getDipaiTime() {
        return dipaiTime_;
      }
      /**
       * <code>optional int32 dipai_time = 25;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public Builder setDipaiTime(int value) {
        bitField0_ |= 0x00020000;
        dipaiTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 dipai_time = 25;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public Builder clearDipaiTime() {
        bitField0_ = (bitField0_ & ~0x00020000);
        dipaiTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 all_boom_card_num = 12;
      private java.util.List<java.lang.Integer> allBoomCardNum_ = java.util.Collections.emptyList();
      private void ensureAllBoomCardNumIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          allBoomCardNum_ = new java.util.ArrayList<java.lang.Integer>(allBoomCardNum_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllBoomCardNumList() {
        return java.util.Collections.unmodifiableList(allBoomCardNum_);
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllBoomCardNumCount() {
        return allBoomCardNum_.size();
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllBoomCardNum(int index) {
        return allBoomCardNum_.get(index);
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllBoomCardNum(
          int index, int value) {
        ensureAllBoomCardNumIsMutable();
        allBoomCardNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllBoomCardNum(int value) {
        ensureAllBoomCardNumIsMutable();
        allBoomCardNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllBoomCardNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllBoomCardNumIsMutable();
        super.addAll(values, allBoomCardNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_boom_card_num = 12;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllBoomCardNum() {
        allBoomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // repeated int32 all_end_score = 13;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 13;</code>
       *
       * <pre>
       *结算总积分
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // repeated int32 end_score_max = 14;
      private java.util.List<java.lang.Integer> endScoreMax_ = java.util.Collections.emptyList();
      private void ensureEndScoreMaxIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          endScoreMax_ = new java.util.ArrayList<java.lang.Integer>(endScoreMax_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreMaxList() {
        return java.util.Collections.unmodifiableList(endScoreMax_);
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMaxCount() {
        return endScoreMax_.size();
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMax(int index) {
        return endScoreMax_.get(index);
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder setEndScoreMax(
          int index, int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addEndScoreMax(int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addAllEndScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreMaxIsMutable();
        super.addAll(values, endScoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 14;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder clearEndScoreMax() {
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated int32 win_num = 15;
      private java.util.List<java.lang.Integer> winNum_ = java.util.Collections.emptyList();
      private void ensureWinNumIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          winNum_ = new java.util.ArrayList<java.lang.Integer>(winNum_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinNumList() {
        return java.util.Collections.unmodifiableList(winNum_);
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNumCount() {
        return winNum_.size();
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public int getWinNum(int index) {
        return winNum_.get(index);
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder setWinNum(
          int index, int value) {
        ensureWinNumIsMutable();
        winNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addWinNum(int value) {
        ensureWinNumIsMutable();
        winNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder addAllWinNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinNumIsMutable();
        super.addAll(values, winNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_num = 15;</code>
       *
       * <pre>
       *赢句数
       * </pre>
       */
      public Builder clearWinNum() {
        winNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 lose_num = 16;
      private java.util.List<java.lang.Integer> loseNum_ = java.util.Collections.emptyList();
      private void ensureLoseNumIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          loseNum_ = new java.util.ArrayList<java.lang.Integer>(loseNum_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getLoseNumList() {
        return java.util.Collections.unmodifiableList(loseNum_);
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNumCount() {
        return loseNum_.size();
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public int getLoseNum(int index) {
        return loseNum_.get(index);
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder setLoseNum(
          int index, int value) {
        ensureLoseNumIsMutable();
        loseNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addLoseNum(int value) {
        ensureLoseNumIsMutable();
        loseNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder addAllLoseNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLoseNumIsMutable();
        super.addAll(values, loseNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 lose_num = 16;</code>
       *
       * <pre>
       *输句数
       * </pre>
       */
      public Builder clearLoseNum() {
        loseNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 17;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00800000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00800000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 17;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00800000) == 0x00800000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 all_banker_num = 24;
      private java.util.List<java.lang.Integer> allBankerNum_ = java.util.Collections.emptyList();
      private void ensureAllBankerNumIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          allBankerNum_ = new java.util.ArrayList<java.lang.Integer>(allBankerNum_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated int32 all_banker_num = 24;</code>
       *
       * <pre>
       *总叫地主数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllBankerNumList() {
        return java.util.Collections.unmodifiableList(allBankerNum_);
      }
      /**
       * <code>repeated int32 all_banker_num = 24;</code>
       *
       * <pre>
       *总叫地主数量
       * </pre>
       */
      public int getAllBankerNumCount() {
        return allBankerNum_.size();
      }
      /**
       * <code>repeated int32 all_banker_num = 24;</code>
       *
       * <pre>
       *总叫地主数量
       * </pre>
       */
      public int getAllBankerNum(int index) {
        return allBankerNum_.get(index);
      }
      /**
       * <code>repeated int32 all_banker_num = 24;</code>
       *
       * <pre>
       *总叫地主数量
       * </pre>
       */
      public Builder setAllBankerNum(
          int index, int value) {
        ensureAllBankerNumIsMutable();
        allBankerNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_banker_num = 24;</code>
       *
       * <pre>
       *总叫地主数量
       * </pre>
       */
      public Builder addAllBankerNum(int value) {
        ensureAllBankerNumIsMutable();
        allBankerNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_banker_num = 24;</code>
       *
       * <pre>
       *总叫地主数量
       * </pre>
       */
      public Builder addAllAllBankerNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllBankerNumIsMutable();
        super.addAll(values, allBankerNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_banker_num = 24;</code>
       *
       * <pre>
       *总叫地主数量
       * </pre>
       */
      public Builder clearAllBankerNum() {
        allBankerNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.PukeGameEndDdz_lps)
    }

    static {
      defaultInstance = new PukeGameEndDdz_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.PukeGameEndDdz_lps)
  }

  public interface TableResponseDDZ_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated .Int32ArrayResponse change_cards_data = 6;
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getChangeCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChangeCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 7;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_pass = 8;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // repeated int32 card_type = 9;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 10;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_change_cards_data = 11;
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // repeated int32 pr_cards_data = 12;
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 13;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 14;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 magic_card = 15;
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    boolean hasMagicCard();
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    int getMagicCard();

    // optional int32 is_first_out = 16;
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 17;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 18;
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 19;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .RoomInfo room_info = 20;
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 21;
    /**
     * <code>repeated .RoomPlayerResponse players = 21;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 21;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 21;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 21;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 21;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 qiang_banker = 22;
    /**
     * <code>repeated int32 qiang_banker = 22;</code>
     */
    java.util.List<java.lang.Integer> getQiangBankerList();
    /**
     * <code>repeated int32 qiang_banker = 22;</code>
     */
    int getQiangBankerCount();
    /**
     * <code>repeated int32 qiang_banker = 22;</code>
     */
    int getQiangBanker(int index);

    // repeated int32 call_banker = 23;
    /**
     * <code>repeated int32 call_banker = 23;</code>
     */
    java.util.List<java.lang.Integer> getCallBankerList();
    /**
     * <code>repeated int32 call_banker = 23;</code>
     */
    int getCallBankerCount();
    /**
     * <code>repeated int32 call_banker = 23;</code>
     */
    int getCallBanker(int index);

    // optional int32 call_type = 24;
    /**
     * <code>optional int32 call_type = 24;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    boolean hasCallType();
    /**
     * <code>optional int32 call_type = 24;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    int getCallType();

    // repeated int32 call_action = 25;
    /**
     * <code>repeated int32 call_action = 25;</code>
     */
    java.util.List<java.lang.Integer> getCallActionList();
    /**
     * <code>repeated int32 call_action = 25;</code>
     */
    int getCallActionCount();
    /**
     * <code>repeated int32 call_action = 25;</code>
     */
    int getCallAction(int index);

    // repeated int32 qiang_action = 26;
    /**
     * <code>repeated int32 qiang_action = 26;</code>
     */
    java.util.List<java.lang.Integer> getQiangActionList();
    /**
     * <code>repeated int32 qiang_action = 26;</code>
     */
    int getQiangActionCount();
    /**
     * <code>repeated int32 qiang_action = 26;</code>
     */
    int getQiangAction(int index);

    // repeated int32 add_times = 27;
    /**
     * <code>repeated int32 add_times = 27;</code>
     *
     * <pre>
     *0：不加倍，1：加倍,-1:还未进行操作
     * </pre>
     */
    java.util.List<java.lang.Integer> getAddTimesList();
    /**
     * <code>repeated int32 add_times = 27;</code>
     *
     * <pre>
     *0：不加倍，1：加倍,-1:还未进行操作
     * </pre>
     */
    int getAddTimesCount();
    /**
     * <code>repeated int32 add_times = 27;</code>
     *
     * <pre>
     *0：不加倍，1：加倍,-1:还未进行操作
     * </pre>
     */
    int getAddTimes(int index);

    // optional int32 di_card_count = 28;
    /**
     * <code>optional int32 di_card_count = 28;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    boolean hasDiCardCount();
    /**
     * <code>optional int32 di_card_count = 28;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    int getDiCardCount();

    // repeated int32 di_cards_data = 29;
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getDiCardsDataList();
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getDiCardsDataCount();
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getDiCardsData(int index);

    // optional int32 di_cards_type = 30;
    /**
     * <code>optional int32 di_cards_type = 30;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    boolean hasDiCardsType();
    /**
     * <code>optional int32 di_cards_type = 30;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    int getDiCardsType();

    // repeated string difen_bomb_des = 31;
    /**
     * <code>repeated string difen_bomb_des = 31;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.util.List<java.lang.String>
    getDifenBombDesList();
    /**
     * <code>repeated string difen_bomb_des = 31;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    int getDifenBombDesCount();
    /**
     * <code>repeated string difen_bomb_des = 31;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getDifenBombDes(int index);
    /**
     * <code>repeated string difen_bomb_des = 31;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getDifenBombDesBytes(int index);

    // optional int32 cur_player_ya_pai = 32;
    /**
     * <code>optional int32 cur_player_ya_pai = 32;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    boolean hasCurPlayerYaPai();
    /**
     * <code>optional int32 cur_player_ya_pai = 32;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    int getCurPlayerYaPai();

    // repeated int32 piao = 33;
    /**
     * <code>repeated int32 piao = 33;</code>
     *
     * <pre>
     *飘分
     * </pre>
     */
    java.util.List<java.lang.Integer> getPiaoList();
    /**
     * <code>repeated int32 piao = 33;</code>
     *
     * <pre>
     *飘分
     * </pre>
     */
    int getPiaoCount();
    /**
     * <code>repeated int32 piao = 33;</code>
     *
     * <pre>
     *飘分
     * </pre>
     */
    int getPiao(int index);

    // repeated int32 is_piao = 34;
    /**
     * <code>repeated int32 is_piao = 34;</code>
     *
     * <pre>
     *是否飘过 -1没飘  1飘过
     * </pre>
     */
    java.util.List<java.lang.Integer> getIsPiaoList();
    /**
     * <code>repeated int32 is_piao = 34;</code>
     *
     * <pre>
     *是否飘过 -1没飘  1飘过
     * </pre>
     */
    int getIsPiaoCount();
    /**
     * <code>repeated int32 is_piao = 34;</code>
     *
     * <pre>
     *是否飘过 -1没飘  1飘过
     * </pre>
     */
    int getIsPiao(int index);

    // repeated bool can_select = 35;
    /**
     * <code>repeated bool can_select = 35;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    java.util.List<java.lang.Boolean> getCanSelectList();
    /**
     * <code>repeated bool can_select = 35;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    int getCanSelectCount();
    /**
     * <code>repeated bool can_select = 35;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    boolean getCanSelect(int index);

    // repeated bool select_user = 36;
    /**
     * <code>repeated bool select_user = 36;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    java.util.List<java.lang.Boolean> getSelectUserList();
    /**
     * <code>repeated bool select_user = 36;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    int getSelectUserCount();
    /**
     * <code>repeated bool select_user = 36;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    boolean getSelectUser(int index);

    // optional int32 all_rang_pai = 37;
    /**
     * <code>optional int32 all_rang_pai = 37;</code>
     *
     * <pre>
     *让牌总数
     * </pre>
     */
    boolean hasAllRangPai();
    /**
     * <code>optional int32 all_rang_pai = 37;</code>
     *
     * <pre>
     *让牌总数
     * </pre>
     */
    int getAllRangPai();

    // optional int32 curr_add_player = 38;
    /**
     * <code>optional int32 curr_add_player = 38;</code>
     *
     * <pre>
     *当前加倍者，-1为自由加倍，非-1为当前加倍者
     * </pre>
     */
    boolean hasCurrAddPlayer();
    /**
     * <code>optional int32 curr_add_player = 38;</code>
     *
     * <pre>
     *当前加倍者，-1为自由加倍，非-1为当前加倍者
     * </pre>
     */
    int getCurrAddPlayer();
  }
  /**
   * Protobuf type {@code lpsddz.TableResponseDDZ_lps}
   */
  public static final class TableResponseDDZ_lps extends
      com.google.protobuf.GeneratedMessage
      implements TableResponseDDZ_lpsOrBuilder {
    // Use TableResponseDDZ_lps.newBuilder() to construct.
    private TableResponseDDZ_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponseDDZ_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponseDDZ_lps defaultInstance;
    public static TableResponseDDZ_lps getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponseDDZ_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponseDDZ_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                changeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000020;
              }
              changeCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000040;
              magicCard_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000080;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000100;
              displayTime_ = input.readInt32();
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00040000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 162: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 170: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00100000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                qiangBanker_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              qiangBanker_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                qiangBanker_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                qiangBanker_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                callBanker_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              callBanker_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                callBanker_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                callBanker_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              bitField0_ |= 0x00000400;
              callType_ = input.readInt32();
              break;
            }
            case 200: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                callAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              callAction_.add(input.readInt32());
              break;
            }
            case 202: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                callAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                callAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 208: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                qiangAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              qiangAction_.add(input.readInt32());
              break;
            }
            case 210: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                qiangAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                qiangAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 216: {
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
                addTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              addTimes_.add(input.readInt32());
              break;
            }
            case 218: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000) && input.getBytesUntilLimit() > 0) {
                addTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                addTimes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 224: {
              bitField0_ |= 0x00000800;
              diCardCount_ = input.readInt32();
              break;
            }
            case 232: {
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
                diCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x10000000;
              }
              diCardsData_.add(input.readInt32());
              break;
            }
            case 234: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000) && input.getBytesUntilLimit() > 0) {
                diCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x10000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                diCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 240: {
              bitField0_ |= 0x00001000;
              diCardsType_ = input.readInt32();
              break;
            }
            case 250: {
              if (!((mutable_bitField0_ & 0x40000000) == 0x40000000)) {
                difenBombDes_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x40000000;
              }
              difenBombDes_.add(input.readBytes());
              break;
            }
            case 256: {
              bitField0_ |= 0x00002000;
              curPlayerYaPai_ = input.readInt32();
              break;
            }
            case 264: {
              if (!((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
                piao_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000001;
              }
              piao_.add(input.readInt32());
              break;
            }
            case 266: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                piao_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                piao_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 272: {
              if (!((mutable_bitField1_ & 0x00000002) == 0x00000002)) {
                isPiao_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000002;
              }
              isPiao_.add(input.readInt32());
              break;
            }
            case 274: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                isPiao_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                isPiao_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 280: {
              if (!((mutable_bitField1_ & 0x00000004) == 0x00000004)) {
                canSelect_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField1_ |= 0x00000004;
              }
              canSelect_.add(input.readBool());
              break;
            }
            case 282: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                canSelect_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField1_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                canSelect_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 288: {
              if (!((mutable_bitField1_ & 0x00000008) == 0x00000008)) {
                selectUser_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField1_ |= 0x00000008;
              }
              selectUser_.add(input.readBool());
              break;
            }
            case 290: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                selectUser_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField1_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                selectUser_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 296: {
              bitField0_ |= 0x00004000;
              allRangPai_ = input.readInt32();
              break;
            }
            case 304: {
              bitField0_ |= 0x00008000;
              currAddPlayer_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          qiangBanker_ = java.util.Collections.unmodifiableList(qiangBanker_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          callBanker_ = java.util.Collections.unmodifiableList(callBanker_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          callAction_ = java.util.Collections.unmodifiableList(callAction_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          qiangAction_ = java.util.Collections.unmodifiableList(qiangAction_);
        }
        if (((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
          addTimes_ = java.util.Collections.unmodifiableList(addTimes_);
        }
        if (((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
          diCardsData_ = java.util.Collections.unmodifiableList(diCardsData_);
        }
        if (((mutable_bitField0_ & 0x40000000) == 0x40000000)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(difenBombDes_);
        }
        if (((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
          piao_ = java.util.Collections.unmodifiableList(piao_);
        }
        if (((mutable_bitField1_ & 0x00000002) == 0x00000002)) {
          isPiao_ = java.util.Collections.unmodifiableList(isPiao_);
        }
        if (((mutable_bitField1_ & 0x00000004) == 0x00000004)) {
          canSelect_ = java.util.Collections.unmodifiableList(canSelect_);
        }
        if (((mutable_bitField1_ & 0x00000008) == 0x00000008)) {
          selectUser_ = java.util.Collections.unmodifiableList(selectUser_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_TableResponseDDZ_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_TableResponseDDZ_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponseDDZ_lps> PARSER =
        new com.google.protobuf.AbstractParser<TableResponseDDZ_lps>() {
      public TableResponseDDZ_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponseDDZ_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponseDDZ_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated .Int32ArrayResponse change_cards_data = 6;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> changeCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChangeCardsDataOrBuilderList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
        int index) {
      return changeCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 7;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_pass = 8;
    public static final int PLAYER_PASS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 8;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // repeated int32 card_type = 9;
    public static final int CARD_TYPE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 10;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 10;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_change_cards_data = 11;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // repeated int32 pr_cards_data = 12;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 13;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 13;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 14;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 14;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 magic_card = 15;
    public static final int MAGIC_CARD_FIELD_NUMBER = 15;
    private int magicCard_;
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    public boolean hasMagicCard() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 magic_card = 15;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    public int getMagicCard() {
      return magicCard_;
    }

    // optional int32 is_first_out = 16;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 16;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 is_first_out = 16;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 17;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 17;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 18;
    public static final int CARD_COUNT_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 18;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 19;
    public static final int CARDS_DATA_FIELD_NUMBER = 19;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .RoomInfo room_info = 20;
    public static final int ROOM_INFO_FIELD_NUMBER = 20;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 20;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 21;
    public static final int PLAYERS_FIELD_NUMBER = 21;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 21;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 21;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 21;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 21;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 21;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 qiang_banker = 22;
    public static final int QIANG_BANKER_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> qiangBanker_;
    /**
     * <code>repeated int32 qiang_banker = 22;</code>
     */
    public java.util.List<java.lang.Integer>
        getQiangBankerList() {
      return qiangBanker_;
    }
    /**
     * <code>repeated int32 qiang_banker = 22;</code>
     */
    public int getQiangBankerCount() {
      return qiangBanker_.size();
    }
    /**
     * <code>repeated int32 qiang_banker = 22;</code>
     */
    public int getQiangBanker(int index) {
      return qiangBanker_.get(index);
    }

    // repeated int32 call_banker = 23;
    public static final int CALL_BANKER_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> callBanker_;
    /**
     * <code>repeated int32 call_banker = 23;</code>
     */
    public java.util.List<java.lang.Integer>
        getCallBankerList() {
      return callBanker_;
    }
    /**
     * <code>repeated int32 call_banker = 23;</code>
     */
    public int getCallBankerCount() {
      return callBanker_.size();
    }
    /**
     * <code>repeated int32 call_banker = 23;</code>
     */
    public int getCallBanker(int index) {
      return callBanker_.get(index);
    }

    // optional int32 call_type = 24;
    public static final int CALL_TYPE_FIELD_NUMBER = 24;
    private int callType_;
    /**
     * <code>optional int32 call_type = 24;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    public boolean hasCallType() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 call_type = 24;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    public int getCallType() {
      return callType_;
    }

    // repeated int32 call_action = 25;
    public static final int CALL_ACTION_FIELD_NUMBER = 25;
    private java.util.List<java.lang.Integer> callAction_;
    /**
     * <code>repeated int32 call_action = 25;</code>
     */
    public java.util.List<java.lang.Integer>
        getCallActionList() {
      return callAction_;
    }
    /**
     * <code>repeated int32 call_action = 25;</code>
     */
    public int getCallActionCount() {
      return callAction_.size();
    }
    /**
     * <code>repeated int32 call_action = 25;</code>
     */
    public int getCallAction(int index) {
      return callAction_.get(index);
    }

    // repeated int32 qiang_action = 26;
    public static final int QIANG_ACTION_FIELD_NUMBER = 26;
    private java.util.List<java.lang.Integer> qiangAction_;
    /**
     * <code>repeated int32 qiang_action = 26;</code>
     */
    public java.util.List<java.lang.Integer>
        getQiangActionList() {
      return qiangAction_;
    }
    /**
     * <code>repeated int32 qiang_action = 26;</code>
     */
    public int getQiangActionCount() {
      return qiangAction_.size();
    }
    /**
     * <code>repeated int32 qiang_action = 26;</code>
     */
    public int getQiangAction(int index) {
      return qiangAction_.get(index);
    }

    // repeated int32 add_times = 27;
    public static final int ADD_TIMES_FIELD_NUMBER = 27;
    private java.util.List<java.lang.Integer> addTimes_;
    /**
     * <code>repeated int32 add_times = 27;</code>
     *
     * <pre>
     *0：不加倍，1：加倍,-1:还未进行操作
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAddTimesList() {
      return addTimes_;
    }
    /**
     * <code>repeated int32 add_times = 27;</code>
     *
     * <pre>
     *0：不加倍，1：加倍,-1:还未进行操作
     * </pre>
     */
    public int getAddTimesCount() {
      return addTimes_.size();
    }
    /**
     * <code>repeated int32 add_times = 27;</code>
     *
     * <pre>
     *0：不加倍，1：加倍,-1:还未进行操作
     * </pre>
     */
    public int getAddTimes(int index) {
      return addTimes_.get(index);
    }

    // optional int32 di_card_count = 28;
    public static final int DI_CARD_COUNT_FIELD_NUMBER = 28;
    private int diCardCount_;
    /**
     * <code>optional int32 di_card_count = 28;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public boolean hasDiCardCount() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 di_card_count = 28;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public int getDiCardCount() {
      return diCardCount_;
    }

    // repeated int32 di_cards_data = 29;
    public static final int DI_CARDS_DATA_FIELD_NUMBER = 29;
    private java.util.List<java.lang.Integer> diCardsData_;
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDiCardsDataList() {
      return diCardsData_;
    }
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getDiCardsDataCount() {
      return diCardsData_.size();
    }
    /**
     * <code>repeated int32 di_cards_data = 29;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getDiCardsData(int index) {
      return diCardsData_.get(index);
    }

    // optional int32 di_cards_type = 30;
    public static final int DI_CARDS_TYPE_FIELD_NUMBER = 30;
    private int diCardsType_;
    /**
     * <code>optional int32 di_cards_type = 30;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    public boolean hasDiCardsType() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 di_cards_type = 30;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    public int getDiCardsType() {
      return diCardsType_;
    }

    // repeated string difen_bomb_des = 31;
    public static final int DIFEN_BOMB_DES_FIELD_NUMBER = 31;
    private com.google.protobuf.LazyStringList difenBombDes_;
    /**
     * <code>repeated string difen_bomb_des = 31;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.util.List<java.lang.String>
        getDifenBombDesList() {
      return difenBombDes_;
    }
    /**
     * <code>repeated string difen_bomb_des = 31;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public int getDifenBombDesCount() {
      return difenBombDes_.size();
    }
    /**
     * <code>repeated string difen_bomb_des = 31;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getDifenBombDes(int index) {
      return difenBombDes_.get(index);
    }
    /**
     * <code>repeated string difen_bomb_des = 31;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDifenBombDesBytes(int index) {
      return difenBombDes_.getByteString(index);
    }

    // optional int32 cur_player_ya_pai = 32;
    public static final int CUR_PLAYER_YA_PAI_FIELD_NUMBER = 32;
    private int curPlayerYaPai_;
    /**
     * <code>optional int32 cur_player_ya_pai = 32;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    public boolean hasCurPlayerYaPai() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 cur_player_ya_pai = 32;</code>
     *
     * <pre>
     *0不能压牌，1能压牌
     * </pre>
     */
    public int getCurPlayerYaPai() {
      return curPlayerYaPai_;
    }

    // repeated int32 piao = 33;
    public static final int PIAO_FIELD_NUMBER = 33;
    private java.util.List<java.lang.Integer> piao_;
    /**
     * <code>repeated int32 piao = 33;</code>
     *
     * <pre>
     *飘分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPiaoList() {
      return piao_;
    }
    /**
     * <code>repeated int32 piao = 33;</code>
     *
     * <pre>
     *飘分
     * </pre>
     */
    public int getPiaoCount() {
      return piao_.size();
    }
    /**
     * <code>repeated int32 piao = 33;</code>
     *
     * <pre>
     *飘分
     * </pre>
     */
    public int getPiao(int index) {
      return piao_.get(index);
    }

    // repeated int32 is_piao = 34;
    public static final int IS_PIAO_FIELD_NUMBER = 34;
    private java.util.List<java.lang.Integer> isPiao_;
    /**
     * <code>repeated int32 is_piao = 34;</code>
     *
     * <pre>
     *是否飘过 -1没飘  1飘过
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getIsPiaoList() {
      return isPiao_;
    }
    /**
     * <code>repeated int32 is_piao = 34;</code>
     *
     * <pre>
     *是否飘过 -1没飘  1飘过
     * </pre>
     */
    public int getIsPiaoCount() {
      return isPiao_.size();
    }
    /**
     * <code>repeated int32 is_piao = 34;</code>
     *
     * <pre>
     *是否飘过 -1没飘  1飘过
     * </pre>
     */
    public int getIsPiao(int index) {
      return isPiao_.get(index);
    }

    // repeated bool can_select = 35;
    public static final int CAN_SELECT_FIELD_NUMBER = 35;
    private java.util.List<java.lang.Boolean> canSelect_;
    /**
     * <code>repeated bool can_select = 35;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getCanSelectList() {
      return canSelect_;
    }
    /**
     * <code>repeated bool can_select = 35;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    public int getCanSelectCount() {
      return canSelect_.size();
    }
    /**
     * <code>repeated bool can_select = 35;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    public boolean getCanSelect(int index) {
      return canSelect_.get(index);
    }

    // repeated bool select_user = 36;
    public static final int SELECT_USER_FIELD_NUMBER = 36;
    private java.util.List<java.lang.Boolean> selectUser_;
    /**
     * <code>repeated bool select_user = 36;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getSelectUserList() {
      return selectUser_;
    }
    /**
     * <code>repeated bool select_user = 36;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    public int getSelectUserCount() {
      return selectUser_.size();
    }
    /**
     * <code>repeated bool select_user = 36;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    public boolean getSelectUser(int index) {
      return selectUser_.get(index);
    }

    // optional int32 all_rang_pai = 37;
    public static final int ALL_RANG_PAI_FIELD_NUMBER = 37;
    private int allRangPai_;
    /**
     * <code>optional int32 all_rang_pai = 37;</code>
     *
     * <pre>
     *让牌总数
     * </pre>
     */
    public boolean hasAllRangPai() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 all_rang_pai = 37;</code>
     *
     * <pre>
     *让牌总数
     * </pre>
     */
    public int getAllRangPai() {
      return allRangPai_;
    }

    // optional int32 curr_add_player = 38;
    public static final int CURR_ADD_PLAYER_FIELD_NUMBER = 38;
    private int currAddPlayer_;
    /**
     * <code>optional int32 curr_add_player = 38;</code>
     *
     * <pre>
     *当前加倍者，-1为自由加倍，非-1为当前加倍者
     * </pre>
     */
    public boolean hasCurrAddPlayer() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 curr_add_player = 38;</code>
     *
     * <pre>
     *当前加倍者，-1为自由加倍，非-1为当前加倍者
     * </pre>
     */
    public int getCurrAddPlayer() {
      return currAddPlayer_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerPass_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      magicCard_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      qiangBanker_ = java.util.Collections.emptyList();
      callBanker_ = java.util.Collections.emptyList();
      callType_ = 0;
      callAction_ = java.util.Collections.emptyList();
      qiangAction_ = java.util.Collections.emptyList();
      addTimes_ = java.util.Collections.emptyList();
      diCardCount_ = 0;
      diCardsData_ = java.util.Collections.emptyList();
      diCardsType_ = 0;
      difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      curPlayerYaPai_ = 0;
      piao_ = java.util.Collections.emptyList();
      isPiao_ = java.util.Collections.emptyList();
      canSelect_ = java.util.Collections.emptyList();
      selectUser_ = java.util.Collections.emptyList();
      allRangPai_ = 0;
      currAddPlayer_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeMessage(6, changeCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(7, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(8, playerPass_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(9, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(10, prOutCardPlayer_);
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(11, prChangeCardsData_.get(i));
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(12, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(15, magicCard_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(16, isFirstOut_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(17, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(18, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(19, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(20, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(21, players_.get(i));
      }
      for (int i = 0; i < qiangBanker_.size(); i++) {
        output.writeInt32(22, qiangBanker_.get(i));
      }
      for (int i = 0; i < callBanker_.size(); i++) {
        output.writeInt32(23, callBanker_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(24, callType_);
      }
      for (int i = 0; i < callAction_.size(); i++) {
        output.writeInt32(25, callAction_.get(i));
      }
      for (int i = 0; i < qiangAction_.size(); i++) {
        output.writeInt32(26, qiangAction_.get(i));
      }
      for (int i = 0; i < addTimes_.size(); i++) {
        output.writeInt32(27, addTimes_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(28, diCardCount_);
      }
      for (int i = 0; i < diCardsData_.size(); i++) {
        output.writeInt32(29, diCardsData_.get(i));
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(30, diCardsType_);
      }
      for (int i = 0; i < difenBombDes_.size(); i++) {
        output.writeBytes(31, difenBombDes_.getByteString(i));
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(32, curPlayerYaPai_);
      }
      for (int i = 0; i < piao_.size(); i++) {
        output.writeInt32(33, piao_.get(i));
      }
      for (int i = 0; i < isPiao_.size(); i++) {
        output.writeInt32(34, isPiao_.get(i));
      }
      for (int i = 0; i < canSelect_.size(); i++) {
        output.writeBool(35, canSelect_.get(i));
      }
      for (int i = 0; i < selectUser_.size(); i++) {
        output.writeBool(36, selectUser_.get(i));
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(37, allRangPai_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(38, currAddPlayer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, changeCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerPassList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, magicCard_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, isFirstOut_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < qiangBanker_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(qiangBanker_.get(i));
        }
        size += dataSize;
        size += 2 * getQiangBankerList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < callBanker_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callBanker_.get(i));
        }
        size += dataSize;
        size += 2 * getCallBankerList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, callType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < callAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callAction_.get(i));
        }
        size += dataSize;
        size += 2 * getCallActionList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < qiangAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(qiangAction_.get(i));
        }
        size += dataSize;
        size += 2 * getQiangActionList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < addTimes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(addTimes_.get(i));
        }
        size += dataSize;
        size += 2 * getAddTimesList().size();
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, diCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < diCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(diCardsData_.get(i));
        }
        size += dataSize;
        size += 2 * getDiCardsDataList().size();
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, diCardsType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < difenBombDes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(difenBombDes_.getByteString(i));
        }
        size += dataSize;
        size += 2 * getDifenBombDesList().size();
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(32, curPlayerYaPai_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < piao_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(piao_.get(i));
        }
        size += dataSize;
        size += 2 * getPiaoList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < isPiao_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(isPiao_.get(i));
        }
        size += dataSize;
        size += 2 * getIsPiaoList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getCanSelectList().size();
        size += dataSize;
        size += 2 * getCanSelectList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getSelectUserList().size();
        size += dataSize;
        size += 2 * getSelectUserList().size();
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(37, allRangPai_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(38, currAddPlayer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.TableResponseDDZ_lps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_TableResponseDDZ_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_TableResponseDDZ_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getChangeCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        if (changeCardsDataBuilder_ == null) {
          changeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          changeCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        magicCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
        } else {
          playersBuilder_.clear();
        }
        qiangBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        callBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        callType_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        callAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        qiangAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        addTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        diCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        diCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        diCardsType_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x40000000);
        curPlayerYaPai_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        piao_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000001);
        isPiao_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000002);
        canSelect_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000004);
        selectUser_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000008);
        allRangPai_ = 0;
        bitField1_ = (bitField1_ & ~0x00000010);
        currAddPlayer_ = 0;
        bitField1_ = (bitField1_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_TableResponseDDZ_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (changeCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.changeCardsData_ = changeCardsData_;
        } else {
          result.changeCardsData_ = changeCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.playerPass_ = playerPass_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.magicCard_ = magicCard_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000200;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00100000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          qiangBanker_ = java.util.Collections.unmodifiableList(qiangBanker_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.qiangBanker_ = qiangBanker_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          callBanker_ = java.util.Collections.unmodifiableList(callBanker_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.callBanker_ = callBanker_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.callType_ = callType_;
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          callAction_ = java.util.Collections.unmodifiableList(callAction_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.callAction_ = callAction_;
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          qiangAction_ = java.util.Collections.unmodifiableList(qiangAction_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.qiangAction_ = qiangAction_;
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          addTimes_ = java.util.Collections.unmodifiableList(addTimes_);
          bitField0_ = (bitField0_ & ~0x04000000);
        }
        result.addTimes_ = addTimes_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.diCardCount_ = diCardCount_;
        if (((bitField0_ & 0x10000000) == 0x10000000)) {
          diCardsData_ = java.util.Collections.unmodifiableList(diCardsData_);
          bitField0_ = (bitField0_ & ~0x10000000);
        }
        result.diCardsData_ = diCardsData_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.diCardsType_ = diCardsType_;
        if (((bitField0_ & 0x40000000) == 0x40000000)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(
              difenBombDes_);
          bitField0_ = (bitField0_ & ~0x40000000);
        }
        result.difenBombDes_ = difenBombDes_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.curPlayerYaPai_ = curPlayerYaPai_;
        if (((bitField1_ & 0x00000001) == 0x00000001)) {
          piao_ = java.util.Collections.unmodifiableList(piao_);
          bitField1_ = (bitField1_ & ~0x00000001);
        }
        result.piao_ = piao_;
        if (((bitField1_ & 0x00000002) == 0x00000002)) {
          isPiao_ = java.util.Collections.unmodifiableList(isPiao_);
          bitField1_ = (bitField1_ & ~0x00000002);
        }
        result.isPiao_ = isPiao_;
        if (((bitField1_ & 0x00000004) == 0x00000004)) {
          canSelect_ = java.util.Collections.unmodifiableList(canSelect_);
          bitField1_ = (bitField1_ & ~0x00000004);
        }
        result.canSelect_ = canSelect_;
        if (((bitField1_ & 0x00000008) == 0x00000008)) {
          selectUser_ = java.util.Collections.unmodifiableList(selectUser_);
          bitField1_ = (bitField1_ & ~0x00000008);
        }
        result.selectUser_ = selectUser_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00004000;
        }
        result.allRangPai_ = allRangPai_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00008000;
        }
        result.currAddPlayer_ = currAddPlayer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (changeCardsDataBuilder_ == null) {
          if (!other.changeCardsData_.isEmpty()) {
            if (changeCardsData_.isEmpty()) {
              changeCardsData_ = other.changeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureChangeCardsDataIsMutable();
              changeCardsData_.addAll(other.changeCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.changeCardsData_.isEmpty()) {
            if (changeCardsDataBuilder_.isEmpty()) {
              changeCardsDataBuilder_.dispose();
              changeCardsDataBuilder_ = null;
              changeCardsData_ = other.changeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
              changeCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChangeCardsDataFieldBuilder() : null;
            } else {
              changeCardsDataBuilder_.addAllMessages(other.changeCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasMagicCard()) {
          setMagicCard(other.getMagicCard());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00040000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00100000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00100000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.qiangBanker_.isEmpty()) {
          if (qiangBanker_.isEmpty()) {
            qiangBanker_ = other.qiangBanker_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureQiangBankerIsMutable();
            qiangBanker_.addAll(other.qiangBanker_);
          }
          onChanged();
        }
        if (!other.callBanker_.isEmpty()) {
          if (callBanker_.isEmpty()) {
            callBanker_ = other.callBanker_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureCallBankerIsMutable();
            callBanker_.addAll(other.callBanker_);
          }
          onChanged();
        }
        if (other.hasCallType()) {
          setCallType(other.getCallType());
        }
        if (!other.callAction_.isEmpty()) {
          if (callAction_.isEmpty()) {
            callAction_ = other.callAction_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureCallActionIsMutable();
            callAction_.addAll(other.callAction_);
          }
          onChanged();
        }
        if (!other.qiangAction_.isEmpty()) {
          if (qiangAction_.isEmpty()) {
            qiangAction_ = other.qiangAction_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureQiangActionIsMutable();
            qiangAction_.addAll(other.qiangAction_);
          }
          onChanged();
        }
        if (!other.addTimes_.isEmpty()) {
          if (addTimes_.isEmpty()) {
            addTimes_ = other.addTimes_;
            bitField0_ = (bitField0_ & ~0x04000000);
          } else {
            ensureAddTimesIsMutable();
            addTimes_.addAll(other.addTimes_);
          }
          onChanged();
        }
        if (other.hasDiCardCount()) {
          setDiCardCount(other.getDiCardCount());
        }
        if (!other.diCardsData_.isEmpty()) {
          if (diCardsData_.isEmpty()) {
            diCardsData_ = other.diCardsData_;
            bitField0_ = (bitField0_ & ~0x10000000);
          } else {
            ensureDiCardsDataIsMutable();
            diCardsData_.addAll(other.diCardsData_);
          }
          onChanged();
        }
        if (other.hasDiCardsType()) {
          setDiCardsType(other.getDiCardsType());
        }
        if (!other.difenBombDes_.isEmpty()) {
          if (difenBombDes_.isEmpty()) {
            difenBombDes_ = other.difenBombDes_;
            bitField0_ = (bitField0_ & ~0x40000000);
          } else {
            ensureDifenBombDesIsMutable();
            difenBombDes_.addAll(other.difenBombDes_);
          }
          onChanged();
        }
        if (other.hasCurPlayerYaPai()) {
          setCurPlayerYaPai(other.getCurPlayerYaPai());
        }
        if (!other.piao_.isEmpty()) {
          if (piao_.isEmpty()) {
            piao_ = other.piao_;
            bitField1_ = (bitField1_ & ~0x00000001);
          } else {
            ensurePiaoIsMutable();
            piao_.addAll(other.piao_);
          }
          onChanged();
        }
        if (!other.isPiao_.isEmpty()) {
          if (isPiao_.isEmpty()) {
            isPiao_ = other.isPiao_;
            bitField1_ = (bitField1_ & ~0x00000002);
          } else {
            ensureIsPiaoIsMutable();
            isPiao_.addAll(other.isPiao_);
          }
          onChanged();
        }
        if (!other.canSelect_.isEmpty()) {
          if (canSelect_.isEmpty()) {
            canSelect_ = other.canSelect_;
            bitField1_ = (bitField1_ & ~0x00000004);
          } else {
            ensureCanSelectIsMutable();
            canSelect_.addAll(other.canSelect_);
          }
          onChanged();
        }
        if (!other.selectUser_.isEmpty()) {
          if (selectUser_.isEmpty()) {
            selectUser_ = other.selectUser_;
            bitField1_ = (bitField1_ & ~0x00000008);
          } else {
            ensureSelectUserIsMutable();
            selectUser_.addAll(other.selectUser_);
          }
          onChanged();
        }
        if (other.hasAllRangPai()) {
          setAllRangPai(other.getAllRangPai());
        }
        if (other.hasCurrAddPlayer()) {
          setCurrAddPlayer(other.getCurrAddPlayer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.TableResponseDDZ_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated .Int32ArrayResponse change_cards_data = 6;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> changeCardsData_ =
        java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          changeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(changeCardsData_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> changeCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChangeCardsDataList() {
        if (changeCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(changeCardsData_);
        } else {
          return changeCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.size();
        } else {
          return changeCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index) {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.get(index);
        } else {
          return changeCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.set(index, value);
          onChanged();
        } else {
          changeCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(value);
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(index, value);
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          super.addAll(values, changeCardsData_);
          onChanged();
        } else {
          changeCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        if (changeCardsDataBuilder_ == null) {
          changeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          changeCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder removeChangeCardsData(int index) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.remove(index);
          onChanged();
        } else {
          changeCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getChangeCardsDataBuilder(
          int index) {
        return getChangeCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
          int index) {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.get(index);  } else {
          return changeCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getChangeCardsDataOrBuilderList() {
        if (changeCardsDataBuilder_ != null) {
          return changeCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(changeCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChangeCardsDataBuilder() {
        return getChangeCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChangeCardsDataBuilder(
          int index) {
        return getChangeCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getChangeCardsDataBuilderList() {
        return getChangeCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getChangeCardsDataFieldBuilder() {
        if (changeCardsDataBuilder_ == null) {
          changeCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  changeCardsData_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          changeCardsData_ = null;
        }
        return changeCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 7;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 8;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 8;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 9;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 10;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000200;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 11;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 12;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 13;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00001000;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00001000);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 14;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00002000;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00002000);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 magic_card = 15;
      private int magicCard_ ;
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public boolean hasMagicCard() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public int getMagicCard() {
        return magicCard_;
      }
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public Builder setMagicCard(int value) {
        bitField0_ |= 0x00004000;
        magicCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 magic_card = 15;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public Builder clearMagicCard() {
        bitField0_ = (bitField0_ & ~0x00004000);
        magicCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 16;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00008000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 16;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00008000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 17;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00010000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00010000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 18;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 18;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 19;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00040000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 19;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00040000) == 0x00040000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .RoomInfo room_info = 20;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 21;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00100000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 21;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00100000) == 0x00100000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 qiang_banker = 22;
      private java.util.List<java.lang.Integer> qiangBanker_ = java.util.Collections.emptyList();
      private void ensureQiangBankerIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          qiangBanker_ = new java.util.ArrayList<java.lang.Integer>(qiangBanker_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 qiang_banker = 22;</code>
       */
      public java.util.List<java.lang.Integer>
          getQiangBankerList() {
        return java.util.Collections.unmodifiableList(qiangBanker_);
      }
      /**
       * <code>repeated int32 qiang_banker = 22;</code>
       */
      public int getQiangBankerCount() {
        return qiangBanker_.size();
      }
      /**
       * <code>repeated int32 qiang_banker = 22;</code>
       */
      public int getQiangBanker(int index) {
        return qiangBanker_.get(index);
      }
      /**
       * <code>repeated int32 qiang_banker = 22;</code>
       */
      public Builder setQiangBanker(
          int index, int value) {
        ensureQiangBankerIsMutable();
        qiangBanker_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qiang_banker = 22;</code>
       */
      public Builder addQiangBanker(int value) {
        ensureQiangBankerIsMutable();
        qiangBanker_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qiang_banker = 22;</code>
       */
      public Builder addAllQiangBanker(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureQiangBankerIsMutable();
        super.addAll(values, qiangBanker_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qiang_banker = 22;</code>
       */
      public Builder clearQiangBanker() {
        qiangBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 call_banker = 23;
      private java.util.List<java.lang.Integer> callBanker_ = java.util.Collections.emptyList();
      private void ensureCallBankerIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          callBanker_ = new java.util.ArrayList<java.lang.Integer>(callBanker_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 call_banker = 23;</code>
       */
      public java.util.List<java.lang.Integer>
          getCallBankerList() {
        return java.util.Collections.unmodifiableList(callBanker_);
      }
      /**
       * <code>repeated int32 call_banker = 23;</code>
       */
      public int getCallBankerCount() {
        return callBanker_.size();
      }
      /**
       * <code>repeated int32 call_banker = 23;</code>
       */
      public int getCallBanker(int index) {
        return callBanker_.get(index);
      }
      /**
       * <code>repeated int32 call_banker = 23;</code>
       */
      public Builder setCallBanker(
          int index, int value) {
        ensureCallBankerIsMutable();
        callBanker_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker = 23;</code>
       */
      public Builder addCallBanker(int value) {
        ensureCallBankerIsMutable();
        callBanker_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker = 23;</code>
       */
      public Builder addAllCallBanker(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallBankerIsMutable();
        super.addAll(values, callBanker_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker = 23;</code>
       */
      public Builder clearCallBanker() {
        callBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // optional int32 call_type = 24;
      private int callType_ ;
      /**
       * <code>optional int32 call_type = 24;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public boolean hasCallType() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 call_type = 24;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public int getCallType() {
        return callType_;
      }
      /**
       * <code>optional int32 call_type = 24;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public Builder setCallType(int value) {
        bitField0_ |= 0x00800000;
        callType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_type = 24;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public Builder clearCallType() {
        bitField0_ = (bitField0_ & ~0x00800000);
        callType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 call_action = 25;
      private java.util.List<java.lang.Integer> callAction_ = java.util.Collections.emptyList();
      private void ensureCallActionIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          callAction_ = new java.util.ArrayList<java.lang.Integer>(callAction_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated int32 call_action = 25;</code>
       */
      public java.util.List<java.lang.Integer>
          getCallActionList() {
        return java.util.Collections.unmodifiableList(callAction_);
      }
      /**
       * <code>repeated int32 call_action = 25;</code>
       */
      public int getCallActionCount() {
        return callAction_.size();
      }
      /**
       * <code>repeated int32 call_action = 25;</code>
       */
      public int getCallAction(int index) {
        return callAction_.get(index);
      }
      /**
       * <code>repeated int32 call_action = 25;</code>
       */
      public Builder setCallAction(
          int index, int value) {
        ensureCallActionIsMutable();
        callAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_action = 25;</code>
       */
      public Builder addCallAction(int value) {
        ensureCallActionIsMutable();
        callAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_action = 25;</code>
       */
      public Builder addAllCallAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallActionIsMutable();
        super.addAll(values, callAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_action = 25;</code>
       */
      public Builder clearCallAction() {
        callAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      // repeated int32 qiang_action = 26;
      private java.util.List<java.lang.Integer> qiangAction_ = java.util.Collections.emptyList();
      private void ensureQiangActionIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          qiangAction_ = new java.util.ArrayList<java.lang.Integer>(qiangAction_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated int32 qiang_action = 26;</code>
       */
      public java.util.List<java.lang.Integer>
          getQiangActionList() {
        return java.util.Collections.unmodifiableList(qiangAction_);
      }
      /**
       * <code>repeated int32 qiang_action = 26;</code>
       */
      public int getQiangActionCount() {
        return qiangAction_.size();
      }
      /**
       * <code>repeated int32 qiang_action = 26;</code>
       */
      public int getQiangAction(int index) {
        return qiangAction_.get(index);
      }
      /**
       * <code>repeated int32 qiang_action = 26;</code>
       */
      public Builder setQiangAction(
          int index, int value) {
        ensureQiangActionIsMutable();
        qiangAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qiang_action = 26;</code>
       */
      public Builder addQiangAction(int value) {
        ensureQiangActionIsMutable();
        qiangAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qiang_action = 26;</code>
       */
      public Builder addAllQiangAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureQiangActionIsMutable();
        super.addAll(values, qiangAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qiang_action = 26;</code>
       */
      public Builder clearQiangAction() {
        qiangAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      // repeated int32 add_times = 27;
      private java.util.List<java.lang.Integer> addTimes_ = java.util.Collections.emptyList();
      private void ensureAddTimesIsMutable() {
        if (!((bitField0_ & 0x04000000) == 0x04000000)) {
          addTimes_ = new java.util.ArrayList<java.lang.Integer>(addTimes_);
          bitField0_ |= 0x04000000;
         }
      }
      /**
       * <code>repeated int32 add_times = 27;</code>
       *
       * <pre>
       *0：不加倍，1：加倍,-1:还未进行操作
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAddTimesList() {
        return java.util.Collections.unmodifiableList(addTimes_);
      }
      /**
       * <code>repeated int32 add_times = 27;</code>
       *
       * <pre>
       *0：不加倍，1：加倍,-1:还未进行操作
       * </pre>
       */
      public int getAddTimesCount() {
        return addTimes_.size();
      }
      /**
       * <code>repeated int32 add_times = 27;</code>
       *
       * <pre>
       *0：不加倍，1：加倍,-1:还未进行操作
       * </pre>
       */
      public int getAddTimes(int index) {
        return addTimes_.get(index);
      }
      /**
       * <code>repeated int32 add_times = 27;</code>
       *
       * <pre>
       *0：不加倍，1：加倍,-1:还未进行操作
       * </pre>
       */
      public Builder setAddTimes(
          int index, int value) {
        ensureAddTimesIsMutable();
        addTimes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 add_times = 27;</code>
       *
       * <pre>
       *0：不加倍，1：加倍,-1:还未进行操作
       * </pre>
       */
      public Builder addAddTimes(int value) {
        ensureAddTimesIsMutable();
        addTimes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 add_times = 27;</code>
       *
       * <pre>
       *0：不加倍，1：加倍,-1:还未进行操作
       * </pre>
       */
      public Builder addAllAddTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddTimesIsMutable();
        super.addAll(values, addTimes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 add_times = 27;</code>
       *
       * <pre>
       *0：不加倍，1：加倍,-1:还未进行操作
       * </pre>
       */
      public Builder clearAddTimes() {
        addTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        onChanged();
        return this;
      }

      // optional int32 di_card_count = 28;
      private int diCardCount_ ;
      /**
       * <code>optional int32 di_card_count = 28;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public boolean hasDiCardCount() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 di_card_count = 28;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public int getDiCardCount() {
        return diCardCount_;
      }
      /**
       * <code>optional int32 di_card_count = 28;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder setDiCardCount(int value) {
        bitField0_ |= 0x08000000;
        diCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_card_count = 28;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder clearDiCardCount() {
        bitField0_ = (bitField0_ & ~0x08000000);
        diCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 di_cards_data = 29;
      private java.util.List<java.lang.Integer> diCardsData_ = java.util.Collections.emptyList();
      private void ensureDiCardsDataIsMutable() {
        if (!((bitField0_ & 0x10000000) == 0x10000000)) {
          diCardsData_ = new java.util.ArrayList<java.lang.Integer>(diCardsData_);
          bitField0_ |= 0x10000000;
         }
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDiCardsDataList() {
        return java.util.Collections.unmodifiableList(diCardsData_);
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getDiCardsDataCount() {
        return diCardsData_.size();
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getDiCardsData(int index) {
        return diCardsData_.get(index);
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder setDiCardsData(
          int index, int value) {
        ensureDiCardsDataIsMutable();
        diCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addDiCardsData(int value) {
        ensureDiCardsDataIsMutable();
        diCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addAllDiCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiCardsDataIsMutable();
        super.addAll(values, diCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 29;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder clearDiCardsData() {
        diCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        onChanged();
        return this;
      }

      // optional int32 di_cards_type = 30;
      private int diCardsType_ ;
      /**
       * <code>optional int32 di_cards_type = 30;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public boolean hasDiCardsType() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional int32 di_cards_type = 30;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public int getDiCardsType() {
        return diCardsType_;
      }
      /**
       * <code>optional int32 di_cards_type = 30;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public Builder setDiCardsType(int value) {
        bitField0_ |= 0x20000000;
        diCardsType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_cards_type = 30;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public Builder clearDiCardsType() {
        bitField0_ = (bitField0_ & ~0x20000000);
        diCardsType_ = 0;
        onChanged();
        return this;
      }

      // repeated string difen_bomb_des = 31;
      private com.google.protobuf.LazyStringList difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDifenBombDesIsMutable() {
        if (!((bitField0_ & 0x40000000) == 0x40000000)) {
          difenBombDes_ = new com.google.protobuf.LazyStringArrayList(difenBombDes_);
          bitField0_ |= 0x40000000;
         }
      }
      /**
       * <code>repeated string difen_bomb_des = 31;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.util.List<java.lang.String>
          getDifenBombDesList() {
        return java.util.Collections.unmodifiableList(difenBombDes_);
      }
      /**
       * <code>repeated string difen_bomb_des = 31;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public int getDifenBombDesCount() {
        return difenBombDes_.size();
      }
      /**
       * <code>repeated string difen_bomb_des = 31;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getDifenBombDes(int index) {
        return difenBombDes_.get(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 31;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDifenBombDesBytes(int index) {
        return difenBombDes_.getByteString(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 31;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setDifenBombDes(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 31;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 31;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addAllDifenBombDes(
          java.lang.Iterable<java.lang.String> values) {
        ensureDifenBombDesIsMutable();
        super.addAll(values, difenBombDes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 31;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearDifenBombDes() {
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x40000000);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 31;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }

      // optional int32 cur_player_ya_pai = 32;
      private int curPlayerYaPai_ ;
      /**
       * <code>optional int32 cur_player_ya_pai = 32;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public boolean hasCurPlayerYaPai() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 32;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public int getCurPlayerYaPai() {
        return curPlayerYaPai_;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 32;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public Builder setCurPlayerYaPai(int value) {
        bitField0_ |= 0x80000000;
        curPlayerYaPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player_ya_pai = 32;</code>
       *
       * <pre>
       *0不能压牌，1能压牌
       * </pre>
       */
      public Builder clearCurPlayerYaPai() {
        bitField0_ = (bitField0_ & ~0x80000000);
        curPlayerYaPai_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 piao = 33;
      private java.util.List<java.lang.Integer> piao_ = java.util.Collections.emptyList();
      private void ensurePiaoIsMutable() {
        if (!((bitField1_ & 0x00000001) == 0x00000001)) {
          piao_ = new java.util.ArrayList<java.lang.Integer>(piao_);
          bitField1_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 piao = 33;</code>
       *
       * <pre>
       *飘分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPiaoList() {
        return java.util.Collections.unmodifiableList(piao_);
      }
      /**
       * <code>repeated int32 piao = 33;</code>
       *
       * <pre>
       *飘分
       * </pre>
       */
      public int getPiaoCount() {
        return piao_.size();
      }
      /**
       * <code>repeated int32 piao = 33;</code>
       *
       * <pre>
       *飘分
       * </pre>
       */
      public int getPiao(int index) {
        return piao_.get(index);
      }
      /**
       * <code>repeated int32 piao = 33;</code>
       *
       * <pre>
       *飘分
       * </pre>
       */
      public Builder setPiao(
          int index, int value) {
        ensurePiaoIsMutable();
        piao_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 piao = 33;</code>
       *
       * <pre>
       *飘分
       * </pre>
       */
      public Builder addPiao(int value) {
        ensurePiaoIsMutable();
        piao_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 piao = 33;</code>
       *
       * <pre>
       *飘分
       * </pre>
       */
      public Builder addAllPiao(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePiaoIsMutable();
        super.addAll(values, piao_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 piao = 33;</code>
       *
       * <pre>
       *飘分
       * </pre>
       */
      public Builder clearPiao() {
        piao_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated int32 is_piao = 34;
      private java.util.List<java.lang.Integer> isPiao_ = java.util.Collections.emptyList();
      private void ensureIsPiaoIsMutable() {
        if (!((bitField1_ & 0x00000002) == 0x00000002)) {
          isPiao_ = new java.util.ArrayList<java.lang.Integer>(isPiao_);
          bitField1_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 is_piao = 34;</code>
       *
       * <pre>
       *是否飘过 -1没飘  1飘过
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getIsPiaoList() {
        return java.util.Collections.unmodifiableList(isPiao_);
      }
      /**
       * <code>repeated int32 is_piao = 34;</code>
       *
       * <pre>
       *是否飘过 -1没飘  1飘过
       * </pre>
       */
      public int getIsPiaoCount() {
        return isPiao_.size();
      }
      /**
       * <code>repeated int32 is_piao = 34;</code>
       *
       * <pre>
       *是否飘过 -1没飘  1飘过
       * </pre>
       */
      public int getIsPiao(int index) {
        return isPiao_.get(index);
      }
      /**
       * <code>repeated int32 is_piao = 34;</code>
       *
       * <pre>
       *是否飘过 -1没飘  1飘过
       * </pre>
       */
      public Builder setIsPiao(
          int index, int value) {
        ensureIsPiaoIsMutable();
        isPiao_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_piao = 34;</code>
       *
       * <pre>
       *是否飘过 -1没飘  1飘过
       * </pre>
       */
      public Builder addIsPiao(int value) {
        ensureIsPiaoIsMutable();
        isPiao_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_piao = 34;</code>
       *
       * <pre>
       *是否飘过 -1没飘  1飘过
       * </pre>
       */
      public Builder addAllIsPiao(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIsPiaoIsMutable();
        super.addAll(values, isPiao_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 is_piao = 34;</code>
       *
       * <pre>
       *是否飘过 -1没飘  1飘过
       * </pre>
       */
      public Builder clearIsPiao() {
        isPiao_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated bool can_select = 35;
      private java.util.List<java.lang.Boolean> canSelect_ = java.util.Collections.emptyList();
      private void ensureCanSelectIsMutable() {
        if (!((bitField1_ & 0x00000004) == 0x00000004)) {
          canSelect_ = new java.util.ArrayList<java.lang.Boolean>(canSelect_);
          bitField1_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated bool can_select = 35;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getCanSelectList() {
        return java.util.Collections.unmodifiableList(canSelect_);
      }
      /**
       * <code>repeated bool can_select = 35;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public int getCanSelectCount() {
        return canSelect_.size();
      }
      /**
       * <code>repeated bool can_select = 35;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public boolean getCanSelect(int index) {
        return canSelect_.get(index);
      }
      /**
       * <code>repeated bool can_select = 35;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public Builder setCanSelect(
          int index, boolean value) {
        ensureCanSelectIsMutable();
        canSelect_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool can_select = 35;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public Builder addCanSelect(boolean value) {
        ensureCanSelectIsMutable();
        canSelect_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool can_select = 35;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public Builder addAllCanSelect(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureCanSelectIsMutable();
        super.addAll(values, canSelect_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool can_select = 35;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public Builder clearCanSelect() {
        canSelect_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated bool select_user = 36;
      private java.util.List<java.lang.Boolean> selectUser_ = java.util.Collections.emptyList();
      private void ensureSelectUserIsMutable() {
        if (!((bitField1_ & 0x00000008) == 0x00000008)) {
          selectUser_ = new java.util.ArrayList<java.lang.Boolean>(selectUser_);
          bitField1_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool select_user = 36;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getSelectUserList() {
        return java.util.Collections.unmodifiableList(selectUser_);
      }
      /**
       * <code>repeated bool select_user = 36;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public int getSelectUserCount() {
        return selectUser_.size();
      }
      /**
       * <code>repeated bool select_user = 36;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public boolean getSelectUser(int index) {
        return selectUser_.get(index);
      }
      /**
       * <code>repeated bool select_user = 36;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public Builder setSelectUser(
          int index, boolean value) {
        ensureSelectUserIsMutable();
        selectUser_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool select_user = 36;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public Builder addSelectUser(boolean value) {
        ensureSelectUserIsMutable();
        selectUser_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool select_user = 36;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public Builder addAllSelectUser(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureSelectUserIsMutable();
        super.addAll(values, selectUser_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool select_user = 36;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public Builder clearSelectUser() {
        selectUser_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional int32 all_rang_pai = 37;
      private int allRangPai_ ;
      /**
       * <code>optional int32 all_rang_pai = 37;</code>
       *
       * <pre>
       *让牌总数
       * </pre>
       */
      public boolean hasAllRangPai() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 all_rang_pai = 37;</code>
       *
       * <pre>
       *让牌总数
       * </pre>
       */
      public int getAllRangPai() {
        return allRangPai_;
      }
      /**
       * <code>optional int32 all_rang_pai = 37;</code>
       *
       * <pre>
       *让牌总数
       * </pre>
       */
      public Builder setAllRangPai(int value) {
        bitField1_ |= 0x00000010;
        allRangPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 all_rang_pai = 37;</code>
       *
       * <pre>
       *让牌总数
       * </pre>
       */
      public Builder clearAllRangPai() {
        bitField1_ = (bitField1_ & ~0x00000010);
        allRangPai_ = 0;
        onChanged();
        return this;
      }

      // optional int32 curr_add_player = 38;
      private int currAddPlayer_ ;
      /**
       * <code>optional int32 curr_add_player = 38;</code>
       *
       * <pre>
       *当前加倍者，-1为自由加倍，非-1为当前加倍者
       * </pre>
       */
      public boolean hasCurrAddPlayer() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 curr_add_player = 38;</code>
       *
       * <pre>
       *当前加倍者，-1为自由加倍，非-1为当前加倍者
       * </pre>
       */
      public int getCurrAddPlayer() {
        return currAddPlayer_;
      }
      /**
       * <code>optional int32 curr_add_player = 38;</code>
       *
       * <pre>
       *当前加倍者，-1为自由加倍，非-1为当前加倍者
       * </pre>
       */
      public Builder setCurrAddPlayer(int value) {
        bitField1_ |= 0x00000020;
        currAddPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 curr_add_player = 38;</code>
       *
       * <pre>
       *当前加倍者，-1为自由加倍，非-1为当前加倍者
       * </pre>
       */
      public Builder clearCurrAddPlayer() {
        bitField1_ = (bitField1_ & ~0x00000020);
        currAddPlayer_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.TableResponseDDZ_lps)
    }

    static {
      defaultInstance = new TableResponseDDZ_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.TableResponseDDZ_lps)
  }

  public interface GameStartDDZ_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated int32 card_count = 2;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 3;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated string difen_bomb_des = 4;
    /**
     * <code>repeated string difen_bomb_des = 4;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.util.List<java.lang.String>
    getDifenBombDesList();
    /**
     * <code>repeated string difen_bomb_des = 4;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    int getDifenBombDesCount();
    /**
     * <code>repeated string difen_bomb_des = 4;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getDifenBombDes(int index);
    /**
     * <code>repeated string difen_bomb_des = 4;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getDifenBombDesBytes(int index);

    // repeated .RoomPlayerResponse players = 5;
    /**
     * <code>repeated .RoomPlayerResponse players = 5;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 5;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 5;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 5;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 5;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 di_pai_card_count = 6;
    /**
     * <code>optional int32 di_pai_card_count = 6;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    boolean hasDiPaiCardCount();
    /**
     * <code>optional int32 di_pai_card_count = 6;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    int getDiPaiCardCount();

    // optional int32 magic_card = 7;
    /**
     * <code>optional int32 magic_card = 7;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    boolean hasMagicCard();
    /**
     * <code>optional int32 magic_card = 7;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    int getMagicCard();
  }
  /**
   * Protobuf type {@code lpsddz.GameStartDDZ_lps}
   */
  public static final class GameStartDDZ_lps extends
      com.google.protobuf.GeneratedMessage
      implements GameStartDDZ_lpsOrBuilder {
    // Use GameStartDDZ_lps.newBuilder() to construct.
    private GameStartDDZ_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStartDDZ_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStartDDZ_lps defaultInstance;
    public static GameStartDDZ_lps getDefaultInstance() {
      return defaultInstance;
    }

    public GameStartDDZ_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStartDDZ_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                difenBombDes_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              difenBombDes_.add(input.readBytes());
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000002;
              diPaiCardCount_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000004;
              magicCard_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(difenBombDes_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_GameStartDDZ_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_GameStartDDZ_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStartDDZ_lps> PARSER =
        new com.google.protobuf.AbstractParser<GameStartDDZ_lps>() {
      public GameStartDDZ_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStartDDZ_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStartDDZ_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated string difen_bomb_des = 4;
    public static final int DIFEN_BOMB_DES_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList difenBombDes_;
    /**
     * <code>repeated string difen_bomb_des = 4;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.util.List<java.lang.String>
        getDifenBombDesList() {
      return difenBombDes_;
    }
    /**
     * <code>repeated string difen_bomb_des = 4;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public int getDifenBombDesCount() {
      return difenBombDes_.size();
    }
    /**
     * <code>repeated string difen_bomb_des = 4;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getDifenBombDes(int index) {
      return difenBombDes_.get(index);
    }
    /**
     * <code>repeated string difen_bomb_des = 4;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDifenBombDesBytes(int index) {
      return difenBombDes_.getByteString(index);
    }

    // repeated .RoomPlayerResponse players = 5;
    public static final int PLAYERS_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 5;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 5;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 5;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 5;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 5;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 di_pai_card_count = 6;
    public static final int DI_PAI_CARD_COUNT_FIELD_NUMBER = 6;
    private int diPaiCardCount_;
    /**
     * <code>optional int32 di_pai_card_count = 6;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public boolean hasDiPaiCardCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 di_pai_card_count = 6;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public int getDiPaiCardCount() {
      return diPaiCardCount_;
    }

    // optional int32 magic_card = 7;
    public static final int MAGIC_CARD_FIELD_NUMBER = 7;
    private int magicCard_;
    /**
     * <code>optional int32 magic_card = 7;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    public boolean hasMagicCard() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 magic_card = 7;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    public int getMagicCard() {
      return magicCard_;
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      players_ = java.util.Collections.emptyList();
      diPaiCardCount_ = 0;
      magicCard_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(2, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(3, cardsData_.get(i));
      }
      for (int i = 0; i < difenBombDes_.size(); i++) {
        output.writeBytes(4, difenBombDes_.getByteString(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(5, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(6, diPaiCardCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(7, magicCard_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < difenBombDes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(difenBombDes_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getDifenBombDesList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, diPaiCardCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, magicCard_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.GameStartDDZ_lps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_GameStartDDZ_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_GameStartDDZ_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          cardsDataBuilder_.clear();
        }
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          playersBuilder_.clear();
        }
        diPaiCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        magicCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_GameStartDDZ_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(
              difenBombDes_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.difenBombDes_ = difenBombDes_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000002;
        }
        result.diPaiCardCount_ = diPaiCardCount_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000004;
        }
        result.magicCard_ = magicCard_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.difenBombDes_.isEmpty()) {
          if (difenBombDes_.isEmpty()) {
            difenBombDes_ = other.difenBombDes_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureDifenBombDesIsMutable();
            difenBombDes_.addAll(other.difenBombDes_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000010);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasDiPaiCardCount()) {
          setDiPaiCardCount(other.getDiPaiCardCount());
        }
        if (other.hasMagicCard()) {
          setMagicCard(other.getMagicCard());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.GameStartDDZ_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated int32 card_count = 2;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated string difen_bomb_des = 4;
      private com.google.protobuf.LazyStringList difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDifenBombDesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          difenBombDes_ = new com.google.protobuf.LazyStringArrayList(difenBombDes_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated string difen_bomb_des = 4;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.util.List<java.lang.String>
          getDifenBombDesList() {
        return java.util.Collections.unmodifiableList(difenBombDes_);
      }
      /**
       * <code>repeated string difen_bomb_des = 4;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public int getDifenBombDesCount() {
        return difenBombDes_.size();
      }
      /**
       * <code>repeated string difen_bomb_des = 4;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getDifenBombDes(int index) {
        return difenBombDes_.get(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 4;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDifenBombDesBytes(int index) {
        return difenBombDes_.getByteString(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 4;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setDifenBombDes(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 4;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 4;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addAllDifenBombDes(
          java.lang.Iterable<java.lang.String> values) {
        ensureDifenBombDesIsMutable();
        super.addAll(values, difenBombDes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 4;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearDifenBombDes() {
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 4;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 5;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 5;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 di_pai_card_count = 6;
      private int diPaiCardCount_ ;
      /**
       * <code>optional int32 di_pai_card_count = 6;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public boolean hasDiPaiCardCount() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 di_pai_card_count = 6;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public int getDiPaiCardCount() {
        return diPaiCardCount_;
      }
      /**
       * <code>optional int32 di_pai_card_count = 6;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder setDiPaiCardCount(int value) {
        bitField0_ |= 0x00000020;
        diPaiCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_pai_card_count = 6;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder clearDiPaiCardCount() {
        bitField0_ = (bitField0_ & ~0x00000020);
        diPaiCardCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 magic_card = 7;
      private int magicCard_ ;
      /**
       * <code>optional int32 magic_card = 7;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public boolean hasMagicCard() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 magic_card = 7;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public int getMagicCard() {
        return magicCard_;
      }
      /**
       * <code>optional int32 magic_card = 7;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public Builder setMagicCard(int value) {
        bitField0_ |= 0x00000040;
        magicCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 magic_card = 7;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public Builder clearMagicCard() {
        bitField0_ = (bitField0_ & ~0x00000040);
        magicCard_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.GameStartDDZ_lps)
    }

    static {
      defaultInstance = new GameStartDDZ_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.GameStartDDZ_lps)
  }

  public interface ReDispath_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 send_card_type = 1;
    /**
     * <code>optional int32 send_card_type = 1;</code>
     *
     * <pre>
     *发牌类型
     * </pre>
     */
    boolean hasSendCardType();
    /**
     * <code>optional int32 send_card_type = 1;</code>
     *
     * <pre>
     *发牌类型
     * </pre>
     */
    int getSendCardType();

    // repeated int32 card_count = 2;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 3;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 magic_card = 4;
    /**
     * <code>optional int32 magic_card = 4;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    boolean hasMagicCard();
    /**
     * <code>optional int32 magic_card = 4;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    int getMagicCard();

    // repeated int32 send_cards = 5;
    /**
     * <code>repeated int32 send_cards = 5;</code>
     *
     * <pre>
     *2人模式下的所有牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getSendCardsList();
    /**
     * <code>repeated int32 send_cards = 5;</code>
     *
     * <pre>
     *2人模式下的所有牌
     * </pre>
     */
    int getSendCardsCount();
    /**
     * <code>repeated int32 send_cards = 5;</code>
     *
     * <pre>
     *2人模式下的所有牌
     * </pre>
     */
    int getSendCards(int index);

    // optional int32 first_sendchair = 6;
    /**
     * <code>optional int32 first_sendchair = 6;</code>
     *
     * <pre>
     *2人模式下 从谁开始先发
     * </pre>
     */
    boolean hasFirstSendchair();
    /**
     * <code>optional int32 first_sendchair = 6;</code>
     *
     * <pre>
     *2人模式下 从谁开始先发
     * </pre>
     */
    int getFirstSendchair();

    // optional int32 ming_card = 7;
    /**
     * <code>optional int32 ming_card = 7;</code>
     *
     * <pre>
     *2人模式下 发牌时亮着的牌
     * </pre>
     */
    boolean hasMingCard();
    /**
     * <code>optional int32 ming_card = 7;</code>
     *
     * <pre>
     *2人模式下 发牌时亮着的牌
     * </pre>
     */
    int getMingCard();
  }
  /**
   * Protobuf type {@code lpsddz.ReDispath_lps}
   */
  public static final class ReDispath_lps extends
      com.google.protobuf.GeneratedMessage
      implements ReDispath_lpsOrBuilder {
    // Use ReDispath_lps.newBuilder() to construct.
    private ReDispath_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ReDispath_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ReDispath_lps defaultInstance;
    public static ReDispath_lps getDefaultInstance() {
      return defaultInstance;
    }

    public ReDispath_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ReDispath_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              sendCardType_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              magicCard_ = input.readInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                sendCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              sendCards_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                sendCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                sendCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              firstSendchair_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              mingCard_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          sendCards_ = java.util.Collections.unmodifiableList(sendCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_ReDispath_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_ReDispath_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<ReDispath_lps> PARSER =
        new com.google.protobuf.AbstractParser<ReDispath_lps>() {
      public ReDispath_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReDispath_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ReDispath_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 send_card_type = 1;
    public static final int SEND_CARD_TYPE_FIELD_NUMBER = 1;
    private int sendCardType_;
    /**
     * <code>optional int32 send_card_type = 1;</code>
     *
     * <pre>
     *发牌类型
     * </pre>
     */
    public boolean hasSendCardType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 send_card_type = 1;</code>
     *
     * <pre>
     *发牌类型
     * </pre>
     */
    public int getSendCardType() {
      return sendCardType_;
    }

    // repeated int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 magic_card = 4;
    public static final int MAGIC_CARD_FIELD_NUMBER = 4;
    private int magicCard_;
    /**
     * <code>optional int32 magic_card = 4;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    public boolean hasMagicCard() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 magic_card = 4;</code>
     *
     * <pre>
     *癞子牌
     * </pre>
     */
    public int getMagicCard() {
      return magicCard_;
    }

    // repeated int32 send_cards = 5;
    public static final int SEND_CARDS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> sendCards_;
    /**
     * <code>repeated int32 send_cards = 5;</code>
     *
     * <pre>
     *2人模式下的所有牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSendCardsList() {
      return sendCards_;
    }
    /**
     * <code>repeated int32 send_cards = 5;</code>
     *
     * <pre>
     *2人模式下的所有牌
     * </pre>
     */
    public int getSendCardsCount() {
      return sendCards_.size();
    }
    /**
     * <code>repeated int32 send_cards = 5;</code>
     *
     * <pre>
     *2人模式下的所有牌
     * </pre>
     */
    public int getSendCards(int index) {
      return sendCards_.get(index);
    }

    // optional int32 first_sendchair = 6;
    public static final int FIRST_SENDCHAIR_FIELD_NUMBER = 6;
    private int firstSendchair_;
    /**
     * <code>optional int32 first_sendchair = 6;</code>
     *
     * <pre>
     *2人模式下 从谁开始先发
     * </pre>
     */
    public boolean hasFirstSendchair() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 first_sendchair = 6;</code>
     *
     * <pre>
     *2人模式下 从谁开始先发
     * </pre>
     */
    public int getFirstSendchair() {
      return firstSendchair_;
    }

    // optional int32 ming_card = 7;
    public static final int MING_CARD_FIELD_NUMBER = 7;
    private int mingCard_;
    /**
     * <code>optional int32 ming_card = 7;</code>
     *
     * <pre>
     *2人模式下 发牌时亮着的牌
     * </pre>
     */
    public boolean hasMingCard() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 ming_card = 7;</code>
     *
     * <pre>
     *2人模式下 发牌时亮着的牌
     * </pre>
     */
    public int getMingCard() {
      return mingCard_;
    }

    private void initFields() {
      sendCardType_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      magicCard_ = 0;
      sendCards_ = java.util.Collections.emptyList();
      firstSendchair_ = 0;
      mingCard_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, sendCardType_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(2, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, magicCard_);
      }
      for (int i = 0; i < sendCards_.size(); i++) {
        output.writeInt32(5, sendCards_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(6, firstSendchair_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(7, mingCard_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, sendCardType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, magicCard_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sendCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(sendCards_.get(i));
        }
        size += dataSize;
        size += 1 * getSendCardsList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, firstSendchair_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, mingCard_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.ReDispath_lps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_ReDispath_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_ReDispath_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sendCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          cardsDataBuilder_.clear();
        }
        magicCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        sendCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        firstSendchair_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        mingCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_ReDispath_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sendCardType_ = sendCardType_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.magicCard_ = magicCard_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          sendCards_ = java.util.Collections.unmodifiableList(sendCards_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.sendCards_ = sendCards_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.firstSendchair_ = firstSendchair_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mingCard_ = mingCard_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps.getDefaultInstance()) return this;
        if (other.hasSendCardType()) {
          setSendCardType(other.getSendCardType());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasMagicCard()) {
          setMagicCard(other.getMagicCard());
        }
        if (!other.sendCards_.isEmpty()) {
          if (sendCards_.isEmpty()) {
            sendCards_ = other.sendCards_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureSendCardsIsMutable();
            sendCards_.addAll(other.sendCards_);
          }
          onChanged();
        }
        if (other.hasFirstSendchair()) {
          setFirstSendchair(other.getFirstSendchair());
        }
        if (other.hasMingCard()) {
          setMingCard(other.getMingCard());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.ReDispath_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 send_card_type = 1;
      private int sendCardType_ ;
      /**
       * <code>optional int32 send_card_type = 1;</code>
       *
       * <pre>
       *发牌类型
       * </pre>
       */
      public boolean hasSendCardType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 send_card_type = 1;</code>
       *
       * <pre>
       *发牌类型
       * </pre>
       */
      public int getSendCardType() {
        return sendCardType_;
      }
      /**
       * <code>optional int32 send_card_type = 1;</code>
       *
       * <pre>
       *发牌类型
       * </pre>
       */
      public Builder setSendCardType(int value) {
        bitField0_ |= 0x00000001;
        sendCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 send_card_type = 1;</code>
       *
       * <pre>
       *发牌类型
       * </pre>
       */
      public Builder clearSendCardType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sendCardType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 2;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 magic_card = 4;
      private int magicCard_ ;
      /**
       * <code>optional int32 magic_card = 4;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public boolean hasMagicCard() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 magic_card = 4;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public int getMagicCard() {
        return magicCard_;
      }
      /**
       * <code>optional int32 magic_card = 4;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public Builder setMagicCard(int value) {
        bitField0_ |= 0x00000008;
        magicCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 magic_card = 4;</code>
       *
       * <pre>
       *癞子牌
       * </pre>
       */
      public Builder clearMagicCard() {
        bitField0_ = (bitField0_ & ~0x00000008);
        magicCard_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 send_cards = 5;
      private java.util.List<java.lang.Integer> sendCards_ = java.util.Collections.emptyList();
      private void ensureSendCardsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          sendCards_ = new java.util.ArrayList<java.lang.Integer>(sendCards_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 send_cards = 5;</code>
       *
       * <pre>
       *2人模式下的所有牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSendCardsList() {
        return java.util.Collections.unmodifiableList(sendCards_);
      }
      /**
       * <code>repeated int32 send_cards = 5;</code>
       *
       * <pre>
       *2人模式下的所有牌
       * </pre>
       */
      public int getSendCardsCount() {
        return sendCards_.size();
      }
      /**
       * <code>repeated int32 send_cards = 5;</code>
       *
       * <pre>
       *2人模式下的所有牌
       * </pre>
       */
      public int getSendCards(int index) {
        return sendCards_.get(index);
      }
      /**
       * <code>repeated int32 send_cards = 5;</code>
       *
       * <pre>
       *2人模式下的所有牌
       * </pre>
       */
      public Builder setSendCards(
          int index, int value) {
        ensureSendCardsIsMutable();
        sendCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 send_cards = 5;</code>
       *
       * <pre>
       *2人模式下的所有牌
       * </pre>
       */
      public Builder addSendCards(int value) {
        ensureSendCardsIsMutable();
        sendCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 send_cards = 5;</code>
       *
       * <pre>
       *2人模式下的所有牌
       * </pre>
       */
      public Builder addAllSendCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSendCardsIsMutable();
        super.addAll(values, sendCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 send_cards = 5;</code>
       *
       * <pre>
       *2人模式下的所有牌
       * </pre>
       */
      public Builder clearSendCards() {
        sendCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // optional int32 first_sendchair = 6;
      private int firstSendchair_ ;
      /**
       * <code>optional int32 first_sendchair = 6;</code>
       *
       * <pre>
       *2人模式下 从谁开始先发
       * </pre>
       */
      public boolean hasFirstSendchair() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 first_sendchair = 6;</code>
       *
       * <pre>
       *2人模式下 从谁开始先发
       * </pre>
       */
      public int getFirstSendchair() {
        return firstSendchair_;
      }
      /**
       * <code>optional int32 first_sendchair = 6;</code>
       *
       * <pre>
       *2人模式下 从谁开始先发
       * </pre>
       */
      public Builder setFirstSendchair(int value) {
        bitField0_ |= 0x00000020;
        firstSendchair_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 first_sendchair = 6;</code>
       *
       * <pre>
       *2人模式下 从谁开始先发
       * </pre>
       */
      public Builder clearFirstSendchair() {
        bitField0_ = (bitField0_ & ~0x00000020);
        firstSendchair_ = 0;
        onChanged();
        return this;
      }

      // optional int32 ming_card = 7;
      private int mingCard_ ;
      /**
       * <code>optional int32 ming_card = 7;</code>
       *
       * <pre>
       *2人模式下 发牌时亮着的牌
       * </pre>
       */
      public boolean hasMingCard() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 ming_card = 7;</code>
       *
       * <pre>
       *2人模式下 发牌时亮着的牌
       * </pre>
       */
      public int getMingCard() {
        return mingCard_;
      }
      /**
       * <code>optional int32 ming_card = 7;</code>
       *
       * <pre>
       *2人模式下 发牌时亮着的牌
       * </pre>
       */
      public Builder setMingCard(int value) {
        bitField0_ |= 0x00000040;
        mingCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ming_card = 7;</code>
       *
       * <pre>
       *2人模式下 发牌时亮着的牌
       * </pre>
       */
      public Builder clearMingCard() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mingCard_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.ReDispath_lps)
    }

    static {
      defaultInstance = new ReDispath_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.ReDispath_lps)
  }

  public interface CallBankerResult_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 qiang_player = 1;
    /**
     * <code>optional int32 qiang_player = 1;</code>
     *
     * <pre>
     *抢地主的用户
     * </pre>
     */
    boolean hasQiangPlayer();
    /**
     * <code>optional int32 qiang_player = 1;</code>
     *
     * <pre>
     *抢地主的用户
     * </pre>
     */
    int getQiangPlayer();

    // optional int32 call_player = 2;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *叫地主用户 叫地主和叫分玩家
     * </pre>
     */
    boolean hasCallPlayer();
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *叫地主用户 叫地主和叫分玩家
     * </pre>
     */
    int getCallPlayer();

    // optional int32 qiang_action = 3;
    /**
     * <code>optional int32 qiang_action = 3;</code>
     *
     * <pre>
     *操作动作 0:不抢 1：抢
     * </pre>
     */
    boolean hasQiangAction();
    /**
     * <code>optional int32 qiang_action = 3;</code>
     *
     * <pre>
     *操作动作 0:不抢 1：抢
     * </pre>
     */
    int getQiangAction();

    // optional int32 call_action = 4;
    /**
     * <code>optional int32 call_action = 4;</code>
     *
     * <pre>
     *操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
     * </pre>
     */
    boolean hasCallAction();
    /**
     * <code>optional int32 call_action = 4;</code>
     *
     * <pre>
     *操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
     * </pre>
     */
    int getCallAction();

    // repeated string difen_bomb_des = 5;
    /**
     * <code>repeated string difen_bomb_des = 5;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.util.List<java.lang.String>
    getDifenBombDesList();
    /**
     * <code>repeated string difen_bomb_des = 5;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    int getDifenBombDesCount();
    /**
     * <code>repeated string difen_bomb_des = 5;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getDifenBombDes(int index);
    /**
     * <code>repeated string difen_bomb_des = 5;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getDifenBombDesBytes(int index);

    // optional int32 banker_player = 6;
    /**
     * <code>optional int32 banker_player = 6;</code>
     *
     * <pre>
     *地主
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 6;</code>
     *
     * <pre>
     *地主
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 card_count = 7;
    /**
     * <code>optional int32 card_count = 7;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 7;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    int getCardCount();

    // repeated int32 cards_data = 8;
    /**
     * <code>repeated int32 cards_data = 8;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 8;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 8;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_type = 9;
    /**
     * <code>optional int32 cards_type = 9;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    boolean hasCardsType();
    /**
     * <code>optional int32 cards_type = 9;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    int getCardsType();

    // repeated int32 user_card_count = 10;
    /**
     * <code>repeated int32 user_card_count = 10;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCardCountList();
    /**
     * <code>repeated int32 user_card_count = 10;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCountCount();
    /**
     * <code>repeated int32 user_card_count = 10;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCount(int index);

    // repeated .Int32ArrayResponse user_cards_data = 11;
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getUserCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getUserCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
        int index);

    // optional int32 all_rang_pai = 12;
    /**
     * <code>optional int32 all_rang_pai = 12;</code>
     *
     * <pre>
     *让牌总数 = 12
     * </pre>
     */
    boolean hasAllRangPai();
    /**
     * <code>optional int32 all_rang_pai = 12;</code>
     *
     * <pre>
     *让牌总数 = 12
     * </pre>
     */
    int getAllRangPai();

    // optional int32 call_type = 13;
    /**
     * <code>optional int32 call_type = 13;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    boolean hasCallType();
    /**
     * <code>optional int32 call_type = 13;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    int getCallType();
  }
  /**
   * Protobuf type {@code lpsddz.CallBankerResult_lps}
   *
   * <pre>
   *叫庄结果
   * </pre>
   */
  public static final class CallBankerResult_lps extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResult_lpsOrBuilder {
    // Use CallBankerResult_lps.newBuilder() to construct.
    private CallBankerResult_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResult_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResult_lps defaultInstance;
    public static CallBankerResult_lps getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResult_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResult_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              qiangPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              callPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              qiangAction_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              callAction_ = input.readInt32();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                difenBombDes_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              difenBombDes_.add(input.readBytes());
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              cardCount_ = input.readInt32();
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              cardsType_ = input.readInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                userCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              userCardCount_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                userCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                userCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000400;
              }
              userCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              allRangPai_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000100;
              callType_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(difenBombDes_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          userCardCount_ = java.util.Collections.unmodifiableList(userCardCount_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_CallBankerResult_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_CallBankerResult_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResult_lps> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResult_lps>() {
      public CallBankerResult_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResult_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResult_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 qiang_player = 1;
    public static final int QIANG_PLAYER_FIELD_NUMBER = 1;
    private int qiangPlayer_;
    /**
     * <code>optional int32 qiang_player = 1;</code>
     *
     * <pre>
     *抢地主的用户
     * </pre>
     */
    public boolean hasQiangPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 qiang_player = 1;</code>
     *
     * <pre>
     *抢地主的用户
     * </pre>
     */
    public int getQiangPlayer() {
      return qiangPlayer_;
    }

    // optional int32 call_player = 2;
    public static final int CALL_PLAYER_FIELD_NUMBER = 2;
    private int callPlayer_;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *叫地主用户 叫地主和叫分玩家
     * </pre>
     */
    public boolean hasCallPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *叫地主用户 叫地主和叫分玩家
     * </pre>
     */
    public int getCallPlayer() {
      return callPlayer_;
    }

    // optional int32 qiang_action = 3;
    public static final int QIANG_ACTION_FIELD_NUMBER = 3;
    private int qiangAction_;
    /**
     * <code>optional int32 qiang_action = 3;</code>
     *
     * <pre>
     *操作动作 0:不抢 1：抢
     * </pre>
     */
    public boolean hasQiangAction() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 qiang_action = 3;</code>
     *
     * <pre>
     *操作动作 0:不抢 1：抢
     * </pre>
     */
    public int getQiangAction() {
      return qiangAction_;
    }

    // optional int32 call_action = 4;
    public static final int CALL_ACTION_FIELD_NUMBER = 4;
    private int callAction_;
    /**
     * <code>optional int32 call_action = 4;</code>
     *
     * <pre>
     *操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
     * </pre>
     */
    public boolean hasCallAction() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 call_action = 4;</code>
     *
     * <pre>
     *操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
     * </pre>
     */
    public int getCallAction() {
      return callAction_;
    }

    // repeated string difen_bomb_des = 5;
    public static final int DIFEN_BOMB_DES_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList difenBombDes_;
    /**
     * <code>repeated string difen_bomb_des = 5;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.util.List<java.lang.String>
        getDifenBombDesList() {
      return difenBombDes_;
    }
    /**
     * <code>repeated string difen_bomb_des = 5;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public int getDifenBombDesCount() {
      return difenBombDes_.size();
    }
    /**
     * <code>repeated string difen_bomb_des = 5;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getDifenBombDes(int index) {
      return difenBombDes_.get(index);
    }
    /**
     * <code>repeated string difen_bomb_des = 5;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDifenBombDesBytes(int index) {
      return difenBombDes_.getByteString(index);
    }

    // optional int32 banker_player = 6;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 6;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 6;</code>
     *
     * <pre>
     *地主
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 banker_player = 6;</code>
     *
     * <pre>
     *地主
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 card_count = 7;
    public static final int CARD_COUNT_FIELD_NUMBER = 7;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 7;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 card_count = 7;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    // repeated int32 cards_data = 8;
    public static final int CARDS_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 8;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 8;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 8;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_type = 9;
    public static final int CARDS_TYPE_FIELD_NUMBER = 9;
    private int cardsType_;
    /**
     * <code>optional int32 cards_type = 9;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    public boolean hasCardsType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 cards_type = 9;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    public int getCardsType() {
      return cardsType_;
    }

    // repeated int32 user_card_count = 10;
    public static final int USER_CARD_COUNT_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> userCardCount_;
    /**
     * <code>repeated int32 user_card_count = 10;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCardCountList() {
      return userCardCount_;
    }
    /**
     * <code>repeated int32 user_card_count = 10;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCountCount() {
      return userCardCount_.size();
    }
    /**
     * <code>repeated int32 user_card_count = 10;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCount(int index) {
      return userCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse user_cards_data = 11;
    public static final int USER_CARDS_DATA_FIELD_NUMBER = 11;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCardsDataList() {
      return userCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCardsDataOrBuilderList() {
      return userCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getUserCardsDataCount() {
      return userCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index) {
      return userCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
        int index) {
      return userCardsData_.get(index);
    }

    // optional int32 all_rang_pai = 12;
    public static final int ALL_RANG_PAI_FIELD_NUMBER = 12;
    private int allRangPai_;
    /**
     * <code>optional int32 all_rang_pai = 12;</code>
     *
     * <pre>
     *让牌总数 = 12
     * </pre>
     */
    public boolean hasAllRangPai() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 all_rang_pai = 12;</code>
     *
     * <pre>
     *让牌总数 = 12
     * </pre>
     */
    public int getAllRangPai() {
      return allRangPai_;
    }

    // optional int32 call_type = 13;
    public static final int CALL_TYPE_FIELD_NUMBER = 13;
    private int callType_;
    /**
     * <code>optional int32 call_type = 13;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    public boolean hasCallType() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 call_type = 13;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    public int getCallType() {
      return callType_;
    }

    private void initFields() {
      qiangPlayer_ = 0;
      callPlayer_ = 0;
      qiangAction_ = 0;
      callAction_ = 0;
      difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bankerPlayer_ = 0;
      cardCount_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsType_ = 0;
      userCardCount_ = java.util.Collections.emptyList();
      userCardsData_ = java.util.Collections.emptyList();
      allRangPai_ = 0;
      callType_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, qiangPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, qiangAction_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, callAction_);
      }
      for (int i = 0; i < difenBombDes_.size(); i++) {
        output.writeBytes(5, difenBombDes_.getByteString(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, cardCount_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(8, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(9, cardsType_);
      }
      for (int i = 0; i < userCardCount_.size(); i++) {
        output.writeInt32(10, userCardCount_.get(i));
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        output.writeMessage(11, userCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, allRangPai_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(13, callType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, qiangPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, qiangAction_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, callAction_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < difenBombDes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(difenBombDes_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getDifenBombDesList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, cardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, cardsType_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCardCountList().size();
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, userCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, allRangPai_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, callType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.CallBankerResult_lps}
     *
     * <pre>
     *叫庄结果
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_CallBankerResult_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_CallBankerResult_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        qiangPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        callPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        qiangAction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        callAction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardsType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        userCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          userCardsDataBuilder_.clear();
        }
        allRangPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        callType_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_CallBankerResult_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.qiangPlayer_ = qiangPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.callPlayer_ = callPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.qiangAction_ = qiangAction_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.callAction_ = callAction_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(
              difenBombDes_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.difenBombDes_ = difenBombDes_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.cardCount_ = cardCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cardsType_ = cardsType_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          userCardCount_ = java.util.Collections.unmodifiableList(userCardCount_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.userCardCount_ = userCardCount_;
        if (userCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.userCardsData_ = userCardsData_;
        } else {
          result.userCardsData_ = userCardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.allRangPai_ = allRangPai_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.callType_ = callType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps.getDefaultInstance()) return this;
        if (other.hasQiangPlayer()) {
          setQiangPlayer(other.getQiangPlayer());
        }
        if (other.hasCallPlayer()) {
          setCallPlayer(other.getCallPlayer());
        }
        if (other.hasQiangAction()) {
          setQiangAction(other.getQiangAction());
        }
        if (other.hasCallAction()) {
          setCallAction(other.getCallAction());
        }
        if (!other.difenBombDes_.isEmpty()) {
          if (difenBombDes_.isEmpty()) {
            difenBombDes_ = other.difenBombDes_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureDifenBombDesIsMutable();
            difenBombDes_.addAll(other.difenBombDes_);
          }
          onChanged();
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsType()) {
          setCardsType(other.getCardsType());
        }
        if (!other.userCardCount_.isEmpty()) {
          if (userCardCount_.isEmpty()) {
            userCardCount_ = other.userCardCount_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureUserCardCountIsMutable();
            userCardCount_.addAll(other.userCardCount_);
          }
          onChanged();
        }
        if (userCardsDataBuilder_ == null) {
          if (!other.userCardsData_.isEmpty()) {
            if (userCardsData_.isEmpty()) {
              userCardsData_ = other.userCardsData_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureUserCardsDataIsMutable();
              userCardsData_.addAll(other.userCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.userCardsData_.isEmpty()) {
            if (userCardsDataBuilder_.isEmpty()) {
              userCardsDataBuilder_.dispose();
              userCardsDataBuilder_ = null;
              userCardsData_ = other.userCardsData_;
              bitField0_ = (bitField0_ & ~0x00000400);
              userCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUserCardsDataFieldBuilder() : null;
            } else {
              userCardsDataBuilder_.addAllMessages(other.userCardsData_);
            }
          }
        }
        if (other.hasAllRangPai()) {
          setAllRangPai(other.getAllRangPai());
        }
        if (other.hasCallType()) {
          setCallType(other.getCallType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerResult_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 qiang_player = 1;
      private int qiangPlayer_ ;
      /**
       * <code>optional int32 qiang_player = 1;</code>
       *
       * <pre>
       *抢地主的用户
       * </pre>
       */
      public boolean hasQiangPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 qiang_player = 1;</code>
       *
       * <pre>
       *抢地主的用户
       * </pre>
       */
      public int getQiangPlayer() {
        return qiangPlayer_;
      }
      /**
       * <code>optional int32 qiang_player = 1;</code>
       *
       * <pre>
       *抢地主的用户
       * </pre>
       */
      public Builder setQiangPlayer(int value) {
        bitField0_ |= 0x00000001;
        qiangPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 qiang_player = 1;</code>
       *
       * <pre>
       *抢地主的用户
       * </pre>
       */
      public Builder clearQiangPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        qiangPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_player = 2;
      private int callPlayer_ ;
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *叫地主用户 叫地主和叫分玩家
       * </pre>
       */
      public boolean hasCallPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *叫地主用户 叫地主和叫分玩家
       * </pre>
       */
      public int getCallPlayer() {
        return callPlayer_;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *叫地主用户 叫地主和叫分玩家
       * </pre>
       */
      public Builder setCallPlayer(int value) {
        bitField0_ |= 0x00000002;
        callPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *叫地主用户 叫地主和叫分玩家
       * </pre>
       */
      public Builder clearCallPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        callPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 qiang_action = 3;
      private int qiangAction_ ;
      /**
       * <code>optional int32 qiang_action = 3;</code>
       *
       * <pre>
       *操作动作 0:不抢 1：抢
       * </pre>
       */
      public boolean hasQiangAction() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 qiang_action = 3;</code>
       *
       * <pre>
       *操作动作 0:不抢 1：抢
       * </pre>
       */
      public int getQiangAction() {
        return qiangAction_;
      }
      /**
       * <code>optional int32 qiang_action = 3;</code>
       *
       * <pre>
       *操作动作 0:不抢 1：抢
       * </pre>
       */
      public Builder setQiangAction(int value) {
        bitField0_ |= 0x00000004;
        qiangAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 qiang_action = 3;</code>
       *
       * <pre>
       *操作动作 0:不抢 1：抢
       * </pre>
       */
      public Builder clearQiangAction() {
        bitField0_ = (bitField0_ & ~0x00000004);
        qiangAction_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_action = 4;
      private int callAction_ ;
      /**
       * <code>optional int32 call_action = 4;</code>
       *
       * <pre>
       *操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public boolean hasCallAction() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 call_action = 4;</code>
       *
       * <pre>
       *操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public int getCallAction() {
        return callAction_;
      }
      /**
       * <code>optional int32 call_action = 4;</code>
       *
       * <pre>
       *操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public Builder setCallAction(int value) {
        bitField0_ |= 0x00000008;
        callAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_action = 4;</code>
       *
       * <pre>
       *操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public Builder clearCallAction() {
        bitField0_ = (bitField0_ & ~0x00000008);
        callAction_ = 0;
        onChanged();
        return this;
      }

      // repeated string difen_bomb_des = 5;
      private com.google.protobuf.LazyStringList difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDifenBombDesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          difenBombDes_ = new com.google.protobuf.LazyStringArrayList(difenBombDes_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated string difen_bomb_des = 5;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.util.List<java.lang.String>
          getDifenBombDesList() {
        return java.util.Collections.unmodifiableList(difenBombDes_);
      }
      /**
       * <code>repeated string difen_bomb_des = 5;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public int getDifenBombDesCount() {
        return difenBombDes_.size();
      }
      /**
       * <code>repeated string difen_bomb_des = 5;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getDifenBombDes(int index) {
        return difenBombDes_.get(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 5;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDifenBombDesBytes(int index) {
        return difenBombDes_.getByteString(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 5;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setDifenBombDes(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 5;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 5;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addAllDifenBombDes(
          java.lang.Iterable<java.lang.String> values) {
        ensureDifenBombDesIsMutable();
        super.addAll(values, difenBombDes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 5;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearDifenBombDes() {
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 5;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }

      // optional int32 banker_player = 6;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 6;</code>
       *
       * <pre>
       *地主
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 banker_player = 6;</code>
       *
       * <pre>
       *地主
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 6;</code>
       *
       * <pre>
       *地主
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000020;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 6;</code>
       *
       * <pre>
       *地主
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_count = 7;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 7;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 card_count = 7;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 7;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000040;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 7;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 8;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 cards_data = 8;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 8;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 8;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 8;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 8;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 8;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 8;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 cards_type = 9;
      private int cardsType_ ;
      /**
       * <code>optional int32 cards_type = 9;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public boolean hasCardsType() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 cards_type = 9;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public int getCardsType() {
        return cardsType_;
      }
      /**
       * <code>optional int32 cards_type = 9;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public Builder setCardsType(int value) {
        bitField0_ |= 0x00000100;
        cardsType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_type = 9;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public Builder clearCardsType() {
        bitField0_ = (bitField0_ & ~0x00000100);
        cardsType_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_card_count = 10;
      private java.util.List<java.lang.Integer> userCardCount_ = java.util.Collections.emptyList();
      private void ensureUserCardCountIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          userCardCount_ = new java.util.ArrayList<java.lang.Integer>(userCardCount_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 user_card_count = 10;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCardCountList() {
        return java.util.Collections.unmodifiableList(userCardCount_);
      }
      /**
       * <code>repeated int32 user_card_count = 10;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCountCount() {
        return userCardCount_.size();
      }
      /**
       * <code>repeated int32 user_card_count = 10;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCount(int index) {
        return userCardCount_.get(index);
      }
      /**
       * <code>repeated int32 user_card_count = 10;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setUserCardCount(
          int index, int value) {
        ensureUserCardCountIsMutable();
        userCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 10;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addUserCardCount(int value) {
        ensureUserCardCountIsMutable();
        userCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 10;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllUserCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCardCountIsMutable();
        super.addAll(values, userCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 10;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearUserCardCount() {
        userCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse user_cards_data = 11;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCardsData_ =
        java.util.Collections.emptyList();
      private void ensureUserCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          userCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(userCardsData_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> userCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCardsDataList() {
        if (userCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(userCardsData_);
        } else {
          return userCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getUserCardsDataCount() {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.size();
        } else {
          return userCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index) {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.get(index);
        } else {
          return userCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.set(index, value);
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.add(value);
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.add(index, value);
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllUserCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          super.addAll(values, userCardsData_);
          onChanged();
        } else {
          userCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearUserCardsData() {
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          userCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeUserCardsData(int index) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.remove(index);
          onChanged();
        } else {
          userCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getUserCardsDataBuilder(
          int index) {
        return getUserCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
          int index) {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.get(index);  } else {
          return userCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getUserCardsDataOrBuilderList() {
        if (userCardsDataBuilder_ != null) {
          return userCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(userCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCardsDataBuilder() {
        return getUserCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCardsDataBuilder(
          int index) {
        return getUserCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 11;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getUserCardsDataBuilderList() {
        return getUserCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getUserCardsDataFieldBuilder() {
        if (userCardsDataBuilder_ == null) {
          userCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  userCardsData_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          userCardsData_ = null;
        }
        return userCardsDataBuilder_;
      }

      // optional int32 all_rang_pai = 12;
      private int allRangPai_ ;
      /**
       * <code>optional int32 all_rang_pai = 12;</code>
       *
       * <pre>
       *让牌总数 = 12
       * </pre>
       */
      public boolean hasAllRangPai() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 all_rang_pai = 12;</code>
       *
       * <pre>
       *让牌总数 = 12
       * </pre>
       */
      public int getAllRangPai() {
        return allRangPai_;
      }
      /**
       * <code>optional int32 all_rang_pai = 12;</code>
       *
       * <pre>
       *让牌总数 = 12
       * </pre>
       */
      public Builder setAllRangPai(int value) {
        bitField0_ |= 0x00000800;
        allRangPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 all_rang_pai = 12;</code>
       *
       * <pre>
       *让牌总数 = 12
       * </pre>
       */
      public Builder clearAllRangPai() {
        bitField0_ = (bitField0_ & ~0x00000800);
        allRangPai_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_type = 13;
      private int callType_ ;
      /**
       * <code>optional int32 call_type = 13;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public boolean hasCallType() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 call_type = 13;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public int getCallType() {
        return callType_;
      }
      /**
       * <code>optional int32 call_type = 13;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public Builder setCallType(int value) {
        bitField0_ |= 0x00001000;
        callType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_type = 13;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public Builder clearCallType() {
        bitField0_ = (bitField0_ & ~0x00001000);
        callType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.CallBankerResult_lps)
    }

    static {
      defaultInstance = new CallBankerResult_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.CallBankerResult_lps)
  }

  public interface CallBankerDDZ_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 qiang_current_player = 1;
    /**
     * <code>optional int32 qiang_current_player = 1;</code>
     *
     * <pre>
     *抢地主的用户
     * </pre>
     */
    boolean hasQiangCurrentPlayer();
    /**
     * <code>optional int32 qiang_current_player = 1;</code>
     *
     * <pre>
     *抢地主的用户
     * </pre>
     */
    int getQiangCurrentPlayer();

    // optional int32 call_current_player = 2;
    /**
     * <code>optional int32 call_current_player = 2;</code>
     *
     * <pre>
     *叫地主用户
     * </pre>
     */
    boolean hasCallCurrentPlayer();
    /**
     * <code>optional int32 call_current_player = 2;</code>
     *
     * <pre>
     *叫地主用户
     * </pre>
     */
    int getCallCurrentPlayer();

    // repeated int32 qiang_current_action = 3;
    /**
     * <code>repeated int32 qiang_current_action = 3;</code>
     *
     * <pre>
     *当前操作用户操作动作 0:不抢 1：抢
     * </pre>
     */
    java.util.List<java.lang.Integer> getQiangCurrentActionList();
    /**
     * <code>repeated int32 qiang_current_action = 3;</code>
     *
     * <pre>
     *当前操作用户操作动作 0:不抢 1：抢
     * </pre>
     */
    int getQiangCurrentActionCount();
    /**
     * <code>repeated int32 qiang_current_action = 3;</code>
     *
     * <pre>
     *当前操作用户操作动作 0:不抢 1：抢
     * </pre>
     */
    int getQiangCurrentAction(int index);

    // repeated int32 call_current_action = 4;
    /**
     * <code>repeated int32 call_current_action = 4;</code>
     *
     * <pre>
     *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
     * </pre>
     */
    java.util.List<java.lang.Integer> getCallCurrentActionList();
    /**
     * <code>repeated int32 call_current_action = 4;</code>
     *
     * <pre>
     *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
     * </pre>
     */
    int getCallCurrentActionCount();
    /**
     * <code>repeated int32 call_current_action = 4;</code>
     *
     * <pre>
     *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
     * </pre>
     */
    int getCallCurrentAction(int index);

    // optional int32 call_type = 5;
    /**
     * <code>optional int32 call_type = 5;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    boolean hasCallType();
    /**
     * <code>optional int32 call_type = 5;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    int getCallType();

    // optional int32 display_time = 6;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 fei_pai_card = 7;
    /**
     * <code>optional int32 fei_pai_card = 7;</code>
     *
     * <pre>
     *飞牌
     * </pre>
     */
    boolean hasFeiPaiCard();
    /**
     * <code>optional int32 fei_pai_card = 7;</code>
     *
     * <pre>
     *飞牌
     * </pre>
     */
    int getFeiPaiCard();
  }
  /**
   * Protobuf type {@code lpsddz.CallBankerDDZ_lps}
   *
   * <pre>
   *用户叫庄
   * </pre>
   */
  public static final class CallBankerDDZ_lps extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerDDZ_lpsOrBuilder {
    // Use CallBankerDDZ_lps.newBuilder() to construct.
    private CallBankerDDZ_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerDDZ_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerDDZ_lps defaultInstance;
    public static CallBankerDDZ_lps getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerDDZ_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerDDZ_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              qiangCurrentPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              callCurrentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                qiangCurrentAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              qiangCurrentAction_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                qiangCurrentAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                qiangCurrentAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                callCurrentAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              callCurrentAction_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                callCurrentAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                callCurrentAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              callType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              displayTime_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              feiPaiCard_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          qiangCurrentAction_ = java.util.Collections.unmodifiableList(qiangCurrentAction_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          callCurrentAction_ = java.util.Collections.unmodifiableList(callCurrentAction_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_CallBankerDDZ_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_CallBankerDDZ_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerDDZ_lps> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerDDZ_lps>() {
      public CallBankerDDZ_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerDDZ_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerDDZ_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 qiang_current_player = 1;
    public static final int QIANG_CURRENT_PLAYER_FIELD_NUMBER = 1;
    private int qiangCurrentPlayer_;
    /**
     * <code>optional int32 qiang_current_player = 1;</code>
     *
     * <pre>
     *抢地主的用户
     * </pre>
     */
    public boolean hasQiangCurrentPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 qiang_current_player = 1;</code>
     *
     * <pre>
     *抢地主的用户
     * </pre>
     */
    public int getQiangCurrentPlayer() {
      return qiangCurrentPlayer_;
    }

    // optional int32 call_current_player = 2;
    public static final int CALL_CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int callCurrentPlayer_;
    /**
     * <code>optional int32 call_current_player = 2;</code>
     *
     * <pre>
     *叫地主用户
     * </pre>
     */
    public boolean hasCallCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 call_current_player = 2;</code>
     *
     * <pre>
     *叫地主用户
     * </pre>
     */
    public int getCallCurrentPlayer() {
      return callCurrentPlayer_;
    }

    // repeated int32 qiang_current_action = 3;
    public static final int QIANG_CURRENT_ACTION_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> qiangCurrentAction_;
    /**
     * <code>repeated int32 qiang_current_action = 3;</code>
     *
     * <pre>
     *当前操作用户操作动作 0:不抢 1：抢
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getQiangCurrentActionList() {
      return qiangCurrentAction_;
    }
    /**
     * <code>repeated int32 qiang_current_action = 3;</code>
     *
     * <pre>
     *当前操作用户操作动作 0:不抢 1：抢
     * </pre>
     */
    public int getQiangCurrentActionCount() {
      return qiangCurrentAction_.size();
    }
    /**
     * <code>repeated int32 qiang_current_action = 3;</code>
     *
     * <pre>
     *当前操作用户操作动作 0:不抢 1：抢
     * </pre>
     */
    public int getQiangCurrentAction(int index) {
      return qiangCurrentAction_.get(index);
    }

    // repeated int32 call_current_action = 4;
    public static final int CALL_CURRENT_ACTION_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> callCurrentAction_;
    /**
     * <code>repeated int32 call_current_action = 4;</code>
     *
     * <pre>
     *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCallCurrentActionList() {
      return callCurrentAction_;
    }
    /**
     * <code>repeated int32 call_current_action = 4;</code>
     *
     * <pre>
     *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
     * </pre>
     */
    public int getCallCurrentActionCount() {
      return callCurrentAction_.size();
    }
    /**
     * <code>repeated int32 call_current_action = 4;</code>
     *
     * <pre>
     *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
     * </pre>
     */
    public int getCallCurrentAction(int index) {
      return callCurrentAction_.get(index);
    }

    // optional int32 call_type = 5;
    public static final int CALL_TYPE_FIELD_NUMBER = 5;
    private int callType_;
    /**
     * <code>optional int32 call_type = 5;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    public boolean hasCallType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 call_type = 5;</code>
     *
     * <pre>
     *叫庄类型:1:叫地主 2：叫分 3：抢地主
     * </pre>
     */
    public int getCallType() {
      return callType_;
    }

    // optional int32 display_time = 6;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 6;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 fei_pai_card = 7;
    public static final int FEI_PAI_CARD_FIELD_NUMBER = 7;
    private int feiPaiCard_;
    /**
     * <code>optional int32 fei_pai_card = 7;</code>
     *
     * <pre>
     *飞牌
     * </pre>
     */
    public boolean hasFeiPaiCard() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 fei_pai_card = 7;</code>
     *
     * <pre>
     *飞牌
     * </pre>
     */
    public int getFeiPaiCard() {
      return feiPaiCard_;
    }

    private void initFields() {
      qiangCurrentPlayer_ = 0;
      callCurrentPlayer_ = 0;
      qiangCurrentAction_ = java.util.Collections.emptyList();
      callCurrentAction_ = java.util.Collections.emptyList();
      callType_ = 0;
      displayTime_ = 0;
      feiPaiCard_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, qiangCurrentPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, callCurrentPlayer_);
      }
      for (int i = 0; i < qiangCurrentAction_.size(); i++) {
        output.writeInt32(3, qiangCurrentAction_.get(i));
      }
      for (int i = 0; i < callCurrentAction_.size(); i++) {
        output.writeInt32(4, callCurrentAction_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, callType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, displayTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, feiPaiCard_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, qiangCurrentPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, callCurrentPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < qiangCurrentAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(qiangCurrentAction_.get(i));
        }
        size += dataSize;
        size += 1 * getQiangCurrentActionList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < callCurrentAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callCurrentAction_.get(i));
        }
        size += dataSize;
        size += 1 * getCallCurrentActionList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, callType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, displayTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, feiPaiCard_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.CallBankerDDZ_lps}
     *
     * <pre>
     *用户叫庄
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_CallBankerDDZ_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_CallBankerDDZ_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        qiangCurrentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        callCurrentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        qiangCurrentAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        callCurrentAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        callType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        feiPaiCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_CallBankerDDZ_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.qiangCurrentPlayer_ = qiangCurrentPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.callCurrentPlayer_ = callCurrentPlayer_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          qiangCurrentAction_ = java.util.Collections.unmodifiableList(qiangCurrentAction_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.qiangCurrentAction_ = qiangCurrentAction_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          callCurrentAction_ = java.util.Collections.unmodifiableList(callCurrentAction_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.callCurrentAction_ = callCurrentAction_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.callType_ = callType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.feiPaiCard_ = feiPaiCard_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps.getDefaultInstance()) return this;
        if (other.hasQiangCurrentPlayer()) {
          setQiangCurrentPlayer(other.getQiangCurrentPlayer());
        }
        if (other.hasCallCurrentPlayer()) {
          setCallCurrentPlayer(other.getCallCurrentPlayer());
        }
        if (!other.qiangCurrentAction_.isEmpty()) {
          if (qiangCurrentAction_.isEmpty()) {
            qiangCurrentAction_ = other.qiangCurrentAction_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureQiangCurrentActionIsMutable();
            qiangCurrentAction_.addAll(other.qiangCurrentAction_);
          }
          onChanged();
        }
        if (!other.callCurrentAction_.isEmpty()) {
          if (callCurrentAction_.isEmpty()) {
            callCurrentAction_ = other.callCurrentAction_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCallCurrentActionIsMutable();
            callCurrentAction_.addAll(other.callCurrentAction_);
          }
          onChanged();
        }
        if (other.hasCallType()) {
          setCallType(other.getCallType());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasFeiPaiCard()) {
          setFeiPaiCard(other.getFeiPaiCard());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.CallBankerDDZ_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 qiang_current_player = 1;
      private int qiangCurrentPlayer_ ;
      /**
       * <code>optional int32 qiang_current_player = 1;</code>
       *
       * <pre>
       *抢地主的用户
       * </pre>
       */
      public boolean hasQiangCurrentPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 qiang_current_player = 1;</code>
       *
       * <pre>
       *抢地主的用户
       * </pre>
       */
      public int getQiangCurrentPlayer() {
        return qiangCurrentPlayer_;
      }
      /**
       * <code>optional int32 qiang_current_player = 1;</code>
       *
       * <pre>
       *抢地主的用户
       * </pre>
       */
      public Builder setQiangCurrentPlayer(int value) {
        bitField0_ |= 0x00000001;
        qiangCurrentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 qiang_current_player = 1;</code>
       *
       * <pre>
       *抢地主的用户
       * </pre>
       */
      public Builder clearQiangCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        qiangCurrentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_current_player = 2;
      private int callCurrentPlayer_ ;
      /**
       * <code>optional int32 call_current_player = 2;</code>
       *
       * <pre>
       *叫地主用户
       * </pre>
       */
      public boolean hasCallCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 call_current_player = 2;</code>
       *
       * <pre>
       *叫地主用户
       * </pre>
       */
      public int getCallCurrentPlayer() {
        return callCurrentPlayer_;
      }
      /**
       * <code>optional int32 call_current_player = 2;</code>
       *
       * <pre>
       *叫地主用户
       * </pre>
       */
      public Builder setCallCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        callCurrentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_current_player = 2;</code>
       *
       * <pre>
       *叫地主用户
       * </pre>
       */
      public Builder clearCallCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        callCurrentPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 qiang_current_action = 3;
      private java.util.List<java.lang.Integer> qiangCurrentAction_ = java.util.Collections.emptyList();
      private void ensureQiangCurrentActionIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          qiangCurrentAction_ = new java.util.ArrayList<java.lang.Integer>(qiangCurrentAction_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 qiang_current_action = 3;</code>
       *
       * <pre>
       *当前操作用户操作动作 0:不抢 1：抢
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getQiangCurrentActionList() {
        return java.util.Collections.unmodifiableList(qiangCurrentAction_);
      }
      /**
       * <code>repeated int32 qiang_current_action = 3;</code>
       *
       * <pre>
       *当前操作用户操作动作 0:不抢 1：抢
       * </pre>
       */
      public int getQiangCurrentActionCount() {
        return qiangCurrentAction_.size();
      }
      /**
       * <code>repeated int32 qiang_current_action = 3;</code>
       *
       * <pre>
       *当前操作用户操作动作 0:不抢 1：抢
       * </pre>
       */
      public int getQiangCurrentAction(int index) {
        return qiangCurrentAction_.get(index);
      }
      /**
       * <code>repeated int32 qiang_current_action = 3;</code>
       *
       * <pre>
       *当前操作用户操作动作 0:不抢 1：抢
       * </pre>
       */
      public Builder setQiangCurrentAction(
          int index, int value) {
        ensureQiangCurrentActionIsMutable();
        qiangCurrentAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qiang_current_action = 3;</code>
       *
       * <pre>
       *当前操作用户操作动作 0:不抢 1：抢
       * </pre>
       */
      public Builder addQiangCurrentAction(int value) {
        ensureQiangCurrentActionIsMutable();
        qiangCurrentAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qiang_current_action = 3;</code>
       *
       * <pre>
       *当前操作用户操作动作 0:不抢 1：抢
       * </pre>
       */
      public Builder addAllQiangCurrentAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureQiangCurrentActionIsMutable();
        super.addAll(values, qiangCurrentAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qiang_current_action = 3;</code>
       *
       * <pre>
       *当前操作用户操作动作 0:不抢 1：抢
       * </pre>
       */
      public Builder clearQiangCurrentAction() {
        qiangCurrentAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated int32 call_current_action = 4;
      private java.util.List<java.lang.Integer> callCurrentAction_ = java.util.Collections.emptyList();
      private void ensureCallCurrentActionIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          callCurrentAction_ = new java.util.ArrayList<java.lang.Integer>(callCurrentAction_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 call_current_action = 4;</code>
       *
       * <pre>
       *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCallCurrentActionList() {
        return java.util.Collections.unmodifiableList(callCurrentAction_);
      }
      /**
       * <code>repeated int32 call_current_action = 4;</code>
       *
       * <pre>
       *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public int getCallCurrentActionCount() {
        return callCurrentAction_.size();
      }
      /**
       * <code>repeated int32 call_current_action = 4;</code>
       *
       * <pre>
       *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public int getCallCurrentAction(int index) {
        return callCurrentAction_.get(index);
      }
      /**
       * <code>repeated int32 call_current_action = 4;</code>
       *
       * <pre>
       *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public Builder setCallCurrentAction(
          int index, int value) {
        ensureCallCurrentActionIsMutable();
        callCurrentAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_current_action = 4;</code>
       *
       * <pre>
       *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public Builder addCallCurrentAction(int value) {
        ensureCallCurrentActionIsMutable();
        callCurrentAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_current_action = 4;</code>
       *
       * <pre>
       *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public Builder addAllCallCurrentAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallCurrentActionIsMutable();
        super.addAll(values, callCurrentAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_current_action = 4;</code>
       *
       * <pre>
       *当前操作用户操作动作 叫地主：0：不叫，1：叫 叫分：0不叫，1：一分，2二分，3：3分
       * </pre>
       */
      public Builder clearCallCurrentAction() {
        callCurrentAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional int32 call_type = 5;
      private int callType_ ;
      /**
       * <code>optional int32 call_type = 5;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public boolean hasCallType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 call_type = 5;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public int getCallType() {
        return callType_;
      }
      /**
       * <code>optional int32 call_type = 5;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public Builder setCallType(int value) {
        bitField0_ |= 0x00000010;
        callType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_type = 5;</code>
       *
       * <pre>
       *叫庄类型:1:叫地主 2：叫分 3：抢地主
       * </pre>
       */
      public Builder clearCallType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        callType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 6;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000020;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 fei_pai_card = 7;
      private int feiPaiCard_ ;
      /**
       * <code>optional int32 fei_pai_card = 7;</code>
       *
       * <pre>
       *飞牌
       * </pre>
       */
      public boolean hasFeiPaiCard() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 fei_pai_card = 7;</code>
       *
       * <pre>
       *飞牌
       * </pre>
       */
      public int getFeiPaiCard() {
        return feiPaiCard_;
      }
      /**
       * <code>optional int32 fei_pai_card = 7;</code>
       *
       * <pre>
       *飞牌
       * </pre>
       */
      public Builder setFeiPaiCard(int value) {
        bitField0_ |= 0x00000040;
        feiPaiCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 fei_pai_card = 7;</code>
       *
       * <pre>
       *飞牌
       * </pre>
       */
      public Builder clearFeiPaiCard() {
        bitField0_ = (bitField0_ & ~0x00000040);
        feiPaiCard_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.CallBankerDDZ_lps)
    }

    static {
      defaultInstance = new CallBankerDDZ_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.CallBankerDDZ_lps)
  }

  public interface AddTimesDDZ_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 addtimesaction = 1;
    /**
     * <code>repeated int32 addtimesaction = 1;</code>
     *
     * <pre>
     *0不加， 1：加倍
     * </pre>
     */
    java.util.List<java.lang.Integer> getAddtimesactionList();
    /**
     * <code>repeated int32 addtimesaction = 1;</code>
     *
     * <pre>
     *0不加， 1：加倍
     * </pre>
     */
    int getAddtimesactionCount();
    /**
     * <code>repeated int32 addtimesaction = 1;</code>
     *
     * <pre>
     *0不加， 1：加倍
     * </pre>
     */
    int getAddtimesaction(int index);

    // optional int32 display_time = 6;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional int32 current_player = 7;
    /**
     * <code>optional int32 current_player = 7;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 7;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();
  }
  /**
   * Protobuf type {@code lpsddz.AddTimesDDZ_lps}
   */
  public static final class AddTimesDDZ_lps extends
      com.google.protobuf.GeneratedMessage
      implements AddTimesDDZ_lpsOrBuilder {
    // Use AddTimesDDZ_lps.newBuilder() to construct.
    private AddTimesDDZ_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AddTimesDDZ_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AddTimesDDZ_lps defaultInstance;
    public static AddTimesDDZ_lps getDefaultInstance() {
      return defaultInstance;
    }

    public AddTimesDDZ_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AddTimesDDZ_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                addtimesaction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              addtimesaction_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                addtimesaction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                addtimesaction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000001;
              displayTime_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          addtimesaction_ = java.util.Collections.unmodifiableList(addtimesaction_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_AddTimesDDZ_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_AddTimesDDZ_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<AddTimesDDZ_lps> PARSER =
        new com.google.protobuf.AbstractParser<AddTimesDDZ_lps>() {
      public AddTimesDDZ_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AddTimesDDZ_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AddTimesDDZ_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 addtimesaction = 1;
    public static final int ADDTIMESACTION_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> addtimesaction_;
    /**
     * <code>repeated int32 addtimesaction = 1;</code>
     *
     * <pre>
     *0不加， 1：加倍
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAddtimesactionList() {
      return addtimesaction_;
    }
    /**
     * <code>repeated int32 addtimesaction = 1;</code>
     *
     * <pre>
     *0不加， 1：加倍
     * </pre>
     */
    public int getAddtimesactionCount() {
      return addtimesaction_.size();
    }
    /**
     * <code>repeated int32 addtimesaction = 1;</code>
     *
     * <pre>
     *0不加， 1：加倍
     * </pre>
     */
    public int getAddtimesaction(int index) {
      return addtimesaction_.get(index);
    }

    // optional int32 display_time = 6;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 6;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 current_player = 7;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 7;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 7;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 7;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    private void initFields() {
      addtimesaction_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      currentPlayer_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < addtimesaction_.size(); i++) {
        output.writeInt32(1, addtimesaction_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(6, displayTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(7, currentPlayer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < addtimesaction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(addtimesaction_.get(i));
        }
        size += dataSize;
        size += 1 * getAddtimesactionList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, displayTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, currentPlayer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.AddTimesDDZ_lps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_AddTimesDDZ_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_AddTimesDDZ_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        addtimesaction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_AddTimesDDZ_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          addtimesaction_ = java.util.Collections.unmodifiableList(addtimesaction_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.addtimesaction_ = addtimesaction_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps.getDefaultInstance()) return this;
        if (!other.addtimesaction_.isEmpty()) {
          if (addtimesaction_.isEmpty()) {
            addtimesaction_ = other.addtimesaction_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAddtimesactionIsMutable();
            addtimesaction_.addAll(other.addtimesaction_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZ_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 addtimesaction = 1;
      private java.util.List<java.lang.Integer> addtimesaction_ = java.util.Collections.emptyList();
      private void ensureAddtimesactionIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          addtimesaction_ = new java.util.ArrayList<java.lang.Integer>(addtimesaction_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAddtimesactionList() {
        return java.util.Collections.unmodifiableList(addtimesaction_);
      }
      /**
       * <code>repeated int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public int getAddtimesactionCount() {
        return addtimesaction_.size();
      }
      /**
       * <code>repeated int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public int getAddtimesaction(int index) {
        return addtimesaction_.get(index);
      }
      /**
       * <code>repeated int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public Builder setAddtimesaction(
          int index, int value) {
        ensureAddtimesactionIsMutable();
        addtimesaction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public Builder addAddtimesaction(int value) {
        ensureAddtimesactionIsMutable();
        addtimesaction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public Builder addAllAddtimesaction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAddtimesactionIsMutable();
        super.addAll(values, addtimesaction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public Builder clearAddtimesaction() {
        addtimesaction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 display_time = 6;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000002;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 7;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 7;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 current_player = 7;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 7;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000004;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 7;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.AddTimesDDZ_lps)
    }

    static {
      defaultInstance = new AddTimesDDZ_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.AddTimesDDZ_lps)
  }

  public interface AddTimesDDZResult_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 addtimesaction = 1;
    /**
     * <code>optional int32 addtimesaction = 1;</code>
     *
     * <pre>
     *0不加， 1：加倍
     * </pre>
     */
    boolean hasAddtimesaction();
    /**
     * <code>optional int32 addtimesaction = 1;</code>
     *
     * <pre>
     *0不加， 1：加倍
     * </pre>
     */
    int getAddtimesaction();

    // optional int32 opreate_player = 2;
    /**
     * <code>optional int32 opreate_player = 2;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    boolean hasOpreatePlayer();
    /**
     * <code>optional int32 opreate_player = 2;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    int getOpreatePlayer();

    // repeated string difen_bomb_des = 3;
    /**
     * <code>repeated string difen_bomb_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.util.List<java.lang.String>
    getDifenBombDesList();
    /**
     * <code>repeated string difen_bomb_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    int getDifenBombDesCount();
    /**
     * <code>repeated string difen_bomb_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getDifenBombDes(int index);
    /**
     * <code>repeated string difen_bomb_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getDifenBombDesBytes(int index);
  }
  /**
   * Protobuf type {@code lpsddz.AddTimesDDZResult_lps}
   */
  public static final class AddTimesDDZResult_lps extends
      com.google.protobuf.GeneratedMessage
      implements AddTimesDDZResult_lpsOrBuilder {
    // Use AddTimesDDZResult_lps.newBuilder() to construct.
    private AddTimesDDZResult_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AddTimesDDZResult_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AddTimesDDZResult_lps defaultInstance;
    public static AddTimesDDZResult_lps getDefaultInstance() {
      return defaultInstance;
    }

    public AddTimesDDZResult_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AddTimesDDZResult_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              addtimesaction_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              opreatePlayer_ = input.readInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                difenBombDes_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              difenBombDes_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(difenBombDes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_AddTimesDDZResult_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_AddTimesDDZResult_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<AddTimesDDZResult_lps> PARSER =
        new com.google.protobuf.AbstractParser<AddTimesDDZResult_lps>() {
      public AddTimesDDZResult_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AddTimesDDZResult_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AddTimesDDZResult_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 addtimesaction = 1;
    public static final int ADDTIMESACTION_FIELD_NUMBER = 1;
    private int addtimesaction_;
    /**
     * <code>optional int32 addtimesaction = 1;</code>
     *
     * <pre>
     *0不加， 1：加倍
     * </pre>
     */
    public boolean hasAddtimesaction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 addtimesaction = 1;</code>
     *
     * <pre>
     *0不加， 1：加倍
     * </pre>
     */
    public int getAddtimesaction() {
      return addtimesaction_;
    }

    // optional int32 opreate_player = 2;
    public static final int OPREATE_PLAYER_FIELD_NUMBER = 2;
    private int opreatePlayer_;
    /**
     * <code>optional int32 opreate_player = 2;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public boolean hasOpreatePlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 opreate_player = 2;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public int getOpreatePlayer() {
      return opreatePlayer_;
    }

    // repeated string difen_bomb_des = 3;
    public static final int DIFEN_BOMB_DES_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList difenBombDes_;
    /**
     * <code>repeated string difen_bomb_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.util.List<java.lang.String>
        getDifenBombDesList() {
      return difenBombDes_;
    }
    /**
     * <code>repeated string difen_bomb_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public int getDifenBombDesCount() {
      return difenBombDes_.size();
    }
    /**
     * <code>repeated string difen_bomb_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getDifenBombDes(int index) {
      return difenBombDes_.get(index);
    }
    /**
     * <code>repeated string difen_bomb_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDifenBombDesBytes(int index) {
      return difenBombDes_.getByteString(index);
    }

    private void initFields() {
      addtimesaction_ = 0;
      opreatePlayer_ = 0;
      difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, addtimesaction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, opreatePlayer_);
      }
      for (int i = 0; i < difenBombDes_.size(); i++) {
        output.writeBytes(3, difenBombDes_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, addtimesaction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, opreatePlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < difenBombDes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(difenBombDes_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getDifenBombDesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.AddTimesDDZResult_lps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_AddTimesDDZResult_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_AddTimesDDZResult_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        addtimesaction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        opreatePlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_AddTimesDDZResult_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.addtimesaction_ = addtimesaction_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.opreatePlayer_ = opreatePlayer_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(
              difenBombDes_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.difenBombDes_ = difenBombDes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps.getDefaultInstance()) return this;
        if (other.hasAddtimesaction()) {
          setAddtimesaction(other.getAddtimesaction());
        }
        if (other.hasOpreatePlayer()) {
          setOpreatePlayer(other.getOpreatePlayer());
        }
        if (!other.difenBombDes_.isEmpty()) {
          if (difenBombDes_.isEmpty()) {
            difenBombDes_ = other.difenBombDes_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDifenBombDesIsMutable();
            difenBombDes_.addAll(other.difenBombDes_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.AddTimesDDZResult_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 addtimesaction = 1;
      private int addtimesaction_ ;
      /**
       * <code>optional int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public boolean hasAddtimesaction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public int getAddtimesaction() {
        return addtimesaction_;
      }
      /**
       * <code>optional int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public Builder setAddtimesaction(int value) {
        bitField0_ |= 0x00000001;
        addtimesaction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 addtimesaction = 1;</code>
       *
       * <pre>
       *0不加， 1：加倍
       * </pre>
       */
      public Builder clearAddtimesaction() {
        bitField0_ = (bitField0_ & ~0x00000001);
        addtimesaction_ = 0;
        onChanged();
        return this;
      }

      // optional int32 opreate_player = 2;
      private int opreatePlayer_ ;
      /**
       * <code>optional int32 opreate_player = 2;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public boolean hasOpreatePlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 opreate_player = 2;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public int getOpreatePlayer() {
        return opreatePlayer_;
      }
      /**
       * <code>optional int32 opreate_player = 2;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder setOpreatePlayer(int value) {
        bitField0_ |= 0x00000002;
        opreatePlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_player = 2;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder clearOpreatePlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        opreatePlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated string difen_bomb_des = 3;
      private com.google.protobuf.LazyStringList difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDifenBombDesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          difenBombDes_ = new com.google.protobuf.LazyStringArrayList(difenBombDes_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string difen_bomb_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.util.List<java.lang.String>
          getDifenBombDesList() {
        return java.util.Collections.unmodifiableList(difenBombDes_);
      }
      /**
       * <code>repeated string difen_bomb_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public int getDifenBombDesCount() {
        return difenBombDes_.size();
      }
      /**
       * <code>repeated string difen_bomb_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getDifenBombDes(int index) {
        return difenBombDes_.get(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDifenBombDesBytes(int index) {
        return difenBombDes_.getByteString(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setDifenBombDes(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addAllDifenBombDes(
          java.lang.Iterable<java.lang.String> values) {
        ensureDifenBombDesIsMutable();
        super.addAll(values, difenBombDes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearDifenBombDes() {
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.AddTimesDDZResult_lps)
    }

    static {
      defaultInstance = new AddTimesDDZResult_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.AddTimesDDZResult_lps)
  }

  public interface Effect_Action_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 smile_status = 1;
    /**
     * <code>repeated int32 smile_status = 1;</code>
     *
     * <pre>
     *笑状态
     * </pre>
     */
    java.util.List<java.lang.Integer> getSmileStatusList();
    /**
     * <code>repeated int32 smile_status = 1;</code>
     *
     * <pre>
     *笑状态
     * </pre>
     */
    int getSmileStatusCount();
    /**
     * <code>repeated int32 smile_status = 1;</code>
     *
     * <pre>
     *笑状态
     * </pre>
     */
    int getSmileStatus(int index);

    // repeated int32 cry_status = 2;
    /**
     * <code>repeated int32 cry_status = 2;</code>
     *
     * <pre>
     *哭状态
     * </pre>
     */
    java.util.List<java.lang.Integer> getCryStatusList();
    /**
     * <code>repeated int32 cry_status = 2;</code>
     *
     * <pre>
     *哭状态
     * </pre>
     */
    int getCryStatusCount();
    /**
     * <code>repeated int32 cry_status = 2;</code>
     *
     * <pre>
     *哭状态
     * </pre>
     */
    int getCryStatus(int index);
  }
  /**
   * Protobuf type {@code lpsddz.Effect_Action_lps}
   */
  public static final class Effect_Action_lps extends
      com.google.protobuf.GeneratedMessage
      implements Effect_Action_lpsOrBuilder {
    // Use Effect_Action_lps.newBuilder() to construct.
    private Effect_Action_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Effect_Action_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Effect_Action_lps defaultInstance;
    public static Effect_Action_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Effect_Action_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Effect_Action_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                smileStatus_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              smileStatus_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                smileStatus_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                smileStatus_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cryStatus_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cryStatus_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cryStatus_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cryStatus_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          smileStatus_ = java.util.Collections.unmodifiableList(smileStatus_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cryStatus_ = java.util.Collections.unmodifiableList(cryStatus_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Effect_Action_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Effect_Action_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Effect_Action_lps> PARSER =
        new com.google.protobuf.AbstractParser<Effect_Action_lps>() {
      public Effect_Action_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Effect_Action_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Effect_Action_lps> getParserForType() {
      return PARSER;
    }

    // repeated int32 smile_status = 1;
    public static final int SMILE_STATUS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> smileStatus_;
    /**
     * <code>repeated int32 smile_status = 1;</code>
     *
     * <pre>
     *笑状态
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSmileStatusList() {
      return smileStatus_;
    }
    /**
     * <code>repeated int32 smile_status = 1;</code>
     *
     * <pre>
     *笑状态
     * </pre>
     */
    public int getSmileStatusCount() {
      return smileStatus_.size();
    }
    /**
     * <code>repeated int32 smile_status = 1;</code>
     *
     * <pre>
     *笑状态
     * </pre>
     */
    public int getSmileStatus(int index) {
      return smileStatus_.get(index);
    }

    // repeated int32 cry_status = 2;
    public static final int CRY_STATUS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cryStatus_;
    /**
     * <code>repeated int32 cry_status = 2;</code>
     *
     * <pre>
     *哭状态
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCryStatusList() {
      return cryStatus_;
    }
    /**
     * <code>repeated int32 cry_status = 2;</code>
     *
     * <pre>
     *哭状态
     * </pre>
     */
    public int getCryStatusCount() {
      return cryStatus_.size();
    }
    /**
     * <code>repeated int32 cry_status = 2;</code>
     *
     * <pre>
     *哭状态
     * </pre>
     */
    public int getCryStatus(int index) {
      return cryStatus_.get(index);
    }

    private void initFields() {
      smileStatus_ = java.util.Collections.emptyList();
      cryStatus_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < smileStatus_.size(); i++) {
        output.writeInt32(1, smileStatus_.get(i));
      }
      for (int i = 0; i < cryStatus_.size(); i++) {
        output.writeInt32(2, cryStatus_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < smileStatus_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(smileStatus_.get(i));
        }
        size += dataSize;
        size += 1 * getSmileStatusList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cryStatus_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cryStatus_.get(i));
        }
        size += dataSize;
        size += 1 * getCryStatusList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Effect_Action_lps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Effect_Action_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Effect_Action_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        smileStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        cryStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Effect_Action_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          smileStatus_ = java.util.Collections.unmodifiableList(smileStatus_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.smileStatus_ = smileStatus_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cryStatus_ = java.util.Collections.unmodifiableList(cryStatus_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cryStatus_ = cryStatus_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps.getDefaultInstance()) return this;
        if (!other.smileStatus_.isEmpty()) {
          if (smileStatus_.isEmpty()) {
            smileStatus_ = other.smileStatus_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSmileStatusIsMutable();
            smileStatus_.addAll(other.smileStatus_);
          }
          onChanged();
        }
        if (!other.cryStatus_.isEmpty()) {
          if (cryStatus_.isEmpty()) {
            cryStatus_ = other.cryStatus_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCryStatusIsMutable();
            cryStatus_.addAll(other.cryStatus_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Effect_Action_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 smile_status = 1;
      private java.util.List<java.lang.Integer> smileStatus_ = java.util.Collections.emptyList();
      private void ensureSmileStatusIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          smileStatus_ = new java.util.ArrayList<java.lang.Integer>(smileStatus_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 smile_status = 1;</code>
       *
       * <pre>
       *笑状态
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSmileStatusList() {
        return java.util.Collections.unmodifiableList(smileStatus_);
      }
      /**
       * <code>repeated int32 smile_status = 1;</code>
       *
       * <pre>
       *笑状态
       * </pre>
       */
      public int getSmileStatusCount() {
        return smileStatus_.size();
      }
      /**
       * <code>repeated int32 smile_status = 1;</code>
       *
       * <pre>
       *笑状态
       * </pre>
       */
      public int getSmileStatus(int index) {
        return smileStatus_.get(index);
      }
      /**
       * <code>repeated int32 smile_status = 1;</code>
       *
       * <pre>
       *笑状态
       * </pre>
       */
      public Builder setSmileStatus(
          int index, int value) {
        ensureSmileStatusIsMutable();
        smileStatus_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 smile_status = 1;</code>
       *
       * <pre>
       *笑状态
       * </pre>
       */
      public Builder addSmileStatus(int value) {
        ensureSmileStatusIsMutable();
        smileStatus_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 smile_status = 1;</code>
       *
       * <pre>
       *笑状态
       * </pre>
       */
      public Builder addAllSmileStatus(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSmileStatusIsMutable();
        super.addAll(values, smileStatus_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 smile_status = 1;</code>
       *
       * <pre>
       *笑状态
       * </pre>
       */
      public Builder clearSmileStatus() {
        smileStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated int32 cry_status = 2;
      private java.util.List<java.lang.Integer> cryStatus_ = java.util.Collections.emptyList();
      private void ensureCryStatusIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cryStatus_ = new java.util.ArrayList<java.lang.Integer>(cryStatus_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cry_status = 2;</code>
       *
       * <pre>
       *哭状态
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCryStatusList() {
        return java.util.Collections.unmodifiableList(cryStatus_);
      }
      /**
       * <code>repeated int32 cry_status = 2;</code>
       *
       * <pre>
       *哭状态
       * </pre>
       */
      public int getCryStatusCount() {
        return cryStatus_.size();
      }
      /**
       * <code>repeated int32 cry_status = 2;</code>
       *
       * <pre>
       *哭状态
       * </pre>
       */
      public int getCryStatus(int index) {
        return cryStatus_.get(index);
      }
      /**
       * <code>repeated int32 cry_status = 2;</code>
       *
       * <pre>
       *哭状态
       * </pre>
       */
      public Builder setCryStatus(
          int index, int value) {
        ensureCryStatusIsMutable();
        cryStatus_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cry_status = 2;</code>
       *
       * <pre>
       *哭状态
       * </pre>
       */
      public Builder addCryStatus(int value) {
        ensureCryStatusIsMutable();
        cryStatus_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cry_status = 2;</code>
       *
       * <pre>
       *哭状态
       * </pre>
       */
      public Builder addAllCryStatus(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCryStatusIsMutable();
        super.addAll(values, cryStatus_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cry_status = 2;</code>
       *
       * <pre>
       *哭状态
       * </pre>
       */
      public Builder clearCryStatus() {
        cryStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Effect_Action_lps)
    }

    static {
      defaultInstance = new Effect_Action_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Effect_Action_lps)
  }

  public interface Call_Banker_Request_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 select_call_banker = 1;
    /**
     * <code>optional int32 select_call_banker = 1;</code>
     */
    boolean hasSelectCallBanker();
    /**
     * <code>optional int32 select_call_banker = 1;</code>
     */
    int getSelectCallBanker();

    // optional int32 select_qiang_banker = 2;
    /**
     * <code>optional int32 select_qiang_banker = 2;</code>
     *
     * <pre>
     *抢地主
     * </pre>
     */
    boolean hasSelectQiangBanker();
    /**
     * <code>optional int32 select_qiang_banker = 2;</code>
     *
     * <pre>
     *抢地主
     * </pre>
     */
    int getSelectQiangBanker();
  }
  /**
   * Protobuf type {@code lpsddz.Call_Banker_Request_lps}
   */
  public static final class Call_Banker_Request_lps extends
      com.google.protobuf.GeneratedMessage
      implements Call_Banker_Request_lpsOrBuilder {
    // Use Call_Banker_Request_lps.newBuilder() to construct.
    private Call_Banker_Request_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Call_Banker_Request_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Call_Banker_Request_lps defaultInstance;
    public static Call_Banker_Request_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Call_Banker_Request_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Call_Banker_Request_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              selectCallBanker_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              selectQiangBanker_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Call_Banker_Request_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Call_Banker_Request_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Call_Banker_Request_lps> PARSER =
        new com.google.protobuf.AbstractParser<Call_Banker_Request_lps>() {
      public Call_Banker_Request_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Call_Banker_Request_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Call_Banker_Request_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 select_call_banker = 1;
    public static final int SELECT_CALL_BANKER_FIELD_NUMBER = 1;
    private int selectCallBanker_;
    /**
     * <code>optional int32 select_call_banker = 1;</code>
     */
    public boolean hasSelectCallBanker() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 select_call_banker = 1;</code>
     */
    public int getSelectCallBanker() {
      return selectCallBanker_;
    }

    // optional int32 select_qiang_banker = 2;
    public static final int SELECT_QIANG_BANKER_FIELD_NUMBER = 2;
    private int selectQiangBanker_;
    /**
     * <code>optional int32 select_qiang_banker = 2;</code>
     *
     * <pre>
     *抢地主
     * </pre>
     */
    public boolean hasSelectQiangBanker() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 select_qiang_banker = 2;</code>
     *
     * <pre>
     *抢地主
     * </pre>
     */
    public int getSelectQiangBanker() {
      return selectQiangBanker_;
    }

    private void initFields() {
      selectCallBanker_ = 0;
      selectQiangBanker_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, selectCallBanker_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, selectQiangBanker_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, selectCallBanker_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, selectQiangBanker_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Call_Banker_Request_lps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Call_Banker_Request_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Call_Banker_Request_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        selectCallBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        selectQiangBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Call_Banker_Request_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.selectCallBanker_ = selectCallBanker_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.selectQiangBanker_ = selectQiangBanker_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps.getDefaultInstance()) return this;
        if (other.hasSelectCallBanker()) {
          setSelectCallBanker(other.getSelectCallBanker());
        }
        if (other.hasSelectQiangBanker()) {
          setSelectQiangBanker(other.getSelectQiangBanker());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Call_Banker_Request_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 select_call_banker = 1;
      private int selectCallBanker_ ;
      /**
       * <code>optional int32 select_call_banker = 1;</code>
       */
      public boolean hasSelectCallBanker() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 select_call_banker = 1;</code>
       */
      public int getSelectCallBanker() {
        return selectCallBanker_;
      }
      /**
       * <code>optional int32 select_call_banker = 1;</code>
       */
      public Builder setSelectCallBanker(int value) {
        bitField0_ |= 0x00000001;
        selectCallBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 select_call_banker = 1;</code>
       */
      public Builder clearSelectCallBanker() {
        bitField0_ = (bitField0_ & ~0x00000001);
        selectCallBanker_ = 0;
        onChanged();
        return this;
      }

      // optional int32 select_qiang_banker = 2;
      private int selectQiangBanker_ ;
      /**
       * <code>optional int32 select_qiang_banker = 2;</code>
       *
       * <pre>
       *抢地主
       * </pre>
       */
      public boolean hasSelectQiangBanker() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 select_qiang_banker = 2;</code>
       *
       * <pre>
       *抢地主
       * </pre>
       */
      public int getSelectQiangBanker() {
        return selectQiangBanker_;
      }
      /**
       * <code>optional int32 select_qiang_banker = 2;</code>
       *
       * <pre>
       *抢地主
       * </pre>
       */
      public Builder setSelectQiangBanker(int value) {
        bitField0_ |= 0x00000002;
        selectQiangBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 select_qiang_banker = 2;</code>
       *
       * <pre>
       *抢地主
       * </pre>
       */
      public Builder clearSelectQiangBanker() {
        bitField0_ = (bitField0_ & ~0x00000002);
        selectQiangBanker_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Call_Banker_Request_lps)
    }

    static {
      defaultInstance = new Call_Banker_Request_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Call_Banker_Request_lps)
  }

  public interface Add_Times_Request_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 add_times = 1;
    /**
     * <code>optional int32 add_times = 1;</code>
     *
     * <pre>
     *0：不加倍，1：加倍
     * </pre>
     */
    boolean hasAddTimes();
    /**
     * <code>optional int32 add_times = 1;</code>
     *
     * <pre>
     *0：不加倍，1：加倍
     * </pre>
     */
    int getAddTimes();
  }
  /**
   * Protobuf type {@code lpsddz.Add_Times_Request_lps}
   */
  public static final class Add_Times_Request_lps extends
      com.google.protobuf.GeneratedMessage
      implements Add_Times_Request_lpsOrBuilder {
    // Use Add_Times_Request_lps.newBuilder() to construct.
    private Add_Times_Request_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Add_Times_Request_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Add_Times_Request_lps defaultInstance;
    public static Add_Times_Request_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Add_Times_Request_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Add_Times_Request_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              addTimes_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Add_Times_Request_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Add_Times_Request_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Add_Times_Request_lps> PARSER =
        new com.google.protobuf.AbstractParser<Add_Times_Request_lps>() {
      public Add_Times_Request_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Add_Times_Request_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Add_Times_Request_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 add_times = 1;
    public static final int ADD_TIMES_FIELD_NUMBER = 1;
    private int addTimes_;
    /**
     * <code>optional int32 add_times = 1;</code>
     *
     * <pre>
     *0：不加倍，1：加倍
     * </pre>
     */
    public boolean hasAddTimes() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 add_times = 1;</code>
     *
     * <pre>
     *0：不加倍，1：加倍
     * </pre>
     */
    public int getAddTimes() {
      return addTimes_;
    }

    private void initFields() {
      addTimes_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, addTimes_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, addTimes_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Add_Times_Request_lps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Add_Times_Request_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Add_Times_Request_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        addTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Add_Times_Request_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.addTimes_ = addTimes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps.getDefaultInstance()) return this;
        if (other.hasAddTimes()) {
          setAddTimes(other.getAddTimes());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Add_Times_Request_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 add_times = 1;
      private int addTimes_ ;
      /**
       * <code>optional int32 add_times = 1;</code>
       *
       * <pre>
       *0：不加倍，1：加倍
       * </pre>
       */
      public boolean hasAddTimes() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 add_times = 1;</code>
       *
       * <pre>
       *0：不加倍，1：加倍
       * </pre>
       */
      public int getAddTimes() {
        return addTimes_;
      }
      /**
       * <code>optional int32 add_times = 1;</code>
       *
       * <pre>
       *0：不加倍，1：加倍
       * </pre>
       */
      public Builder setAddTimes(int value) {
        bitField0_ |= 0x00000001;
        addTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 add_times = 1;</code>
       *
       * <pre>
       *0：不加倍，1：加倍
       * </pre>
       */
      public Builder clearAddTimes() {
        bitField0_ = (bitField0_ & ~0x00000001);
        addTimes_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Add_Times_Request_lps)
    }

    static {
      defaultInstance = new Add_Times_Request_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Add_Times_Request_lps)
  }

  public interface Fen_Luo_Send_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_player = 1;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前分摞的玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前分摞的玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated bool can_select = 2;
    /**
     * <code>repeated bool can_select = 2;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    java.util.List<java.lang.Boolean> getCanSelectList();
    /**
     * <code>repeated bool can_select = 2;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    int getCanSelectCount();
    /**
     * <code>repeated bool can_select = 2;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    boolean getCanSelect(int index);

    // repeated bool select_user = 3;
    /**
     * <code>repeated bool select_user = 3;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    java.util.List<java.lang.Boolean> getSelectUserList();
    /**
     * <code>repeated bool select_user = 3;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    int getSelectUserCount();
    /**
     * <code>repeated bool select_user = 3;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    boolean getSelectUser(int index);

    // optional int32 display_time = 4;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *操作时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *操作时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code lpsddz.Fen_Luo_Send_lps}
   *
   * <pre>
   *分摞s2c
   * </pre>
   */
  public static final class Fen_Luo_Send_lps extends
      com.google.protobuf.GeneratedMessage
      implements Fen_Luo_Send_lpsOrBuilder {
    // Use Fen_Luo_Send_lps.newBuilder() to construct.
    private Fen_Luo_Send_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Fen_Luo_Send_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Fen_Luo_Send_lps defaultInstance;
    public static Fen_Luo_Send_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Fen_Luo_Send_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Fen_Luo_Send_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                canSelect_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000002;
              }
              canSelect_.add(input.readBool());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                canSelect_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                canSelect_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                selectUser_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000004;
              }
              selectUser_.add(input.readBool());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                selectUser_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                selectUser_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          canSelect_ = java.util.Collections.unmodifiableList(canSelect_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          selectUser_ = java.util.Collections.unmodifiableList(selectUser_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Send_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Send_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Fen_Luo_Send_lps> PARSER =
        new com.google.protobuf.AbstractParser<Fen_Luo_Send_lps>() {
      public Fen_Luo_Send_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Fen_Luo_Send_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Fen_Luo_Send_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_player = 1;
    public static final int CUR_PLAYER_FIELD_NUMBER = 1;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前分摞的玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前分摞的玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated bool can_select = 2;
    public static final int CAN_SELECT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Boolean> canSelect_;
    /**
     * <code>repeated bool can_select = 2;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getCanSelectList() {
      return canSelect_;
    }
    /**
     * <code>repeated bool can_select = 2;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    public int getCanSelectCount() {
      return canSelect_.size();
    }
    /**
     * <code>repeated bool can_select = 2;</code>
     *
     * <pre>
     *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
     * </pre>
     */
    public boolean getCanSelect(int index) {
      return canSelect_.get(index);
    }

    // repeated bool select_user = 3;
    public static final int SELECT_USER_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Boolean> selectUser_;
    /**
     * <code>repeated bool select_user = 3;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getSelectUserList() {
      return selectUser_;
    }
    /**
     * <code>repeated bool select_user = 3;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    public int getSelectUserCount() {
      return selectUser_.size();
    }
    /**
     * <code>repeated bool select_user = 3;</code>
     *
     * <pre>
     *已经选过的玩家为true，没有选的玩家为false
     * </pre>
     */
    public boolean getSelectUser(int index) {
      return selectUser_.get(index);
    }

    // optional int32 display_time = 4;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 4;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *操作时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *操作时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      curPlayer_ = 0;
      canSelect_ = java.util.Collections.emptyList();
      selectUser_ = java.util.Collections.emptyList();
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curPlayer_);
      }
      for (int i = 0; i < canSelect_.size(); i++) {
        output.writeBool(2, canSelect_.get(i));
      }
      for (int i = 0; i < selectUser_.size(); i++) {
        output.writeBool(3, selectUser_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getCanSelectList().size();
        size += dataSize;
        size += 1 * getCanSelectList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getSelectUserList().size();
        size += dataSize;
        size += 1 * getSelectUserList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Fen_Luo_Send_lps}
     *
     * <pre>
     *分摞s2c
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Send_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Send_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        canSelect_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        selectUser_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Send_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          canSelect_ = java.util.Collections.unmodifiableList(canSelect_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.canSelect_ = canSelect_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          selectUser_ = java.util.Collections.unmodifiableList(selectUser_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.selectUser_ = selectUser_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps.getDefaultInstance()) return this;
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.canSelect_.isEmpty()) {
          if (canSelect_.isEmpty()) {
            canSelect_ = other.canSelect_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCanSelectIsMutable();
            canSelect_.addAll(other.canSelect_);
          }
          onChanged();
        }
        if (!other.selectUser_.isEmpty()) {
          if (selectUser_.isEmpty()) {
            selectUser_ = other.selectUser_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureSelectUserIsMutable();
            selectUser_.addAll(other.selectUser_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Send_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_player = 1;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前分摞的玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前分摞的玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前分摞的玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000001;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前分摞的玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool can_select = 2;
      private java.util.List<java.lang.Boolean> canSelect_ = java.util.Collections.emptyList();
      private void ensureCanSelectIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          canSelect_ = new java.util.ArrayList<java.lang.Boolean>(canSelect_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated bool can_select = 2;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getCanSelectList() {
        return java.util.Collections.unmodifiableList(canSelect_);
      }
      /**
       * <code>repeated bool can_select = 2;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public int getCanSelectCount() {
        return canSelect_.size();
      }
      /**
       * <code>repeated bool can_select = 2;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public boolean getCanSelect(int index) {
        return canSelect_.get(index);
      }
      /**
       * <code>repeated bool can_select = 2;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public Builder setCanSelect(
          int index, boolean value) {
        ensureCanSelectIsMutable();
        canSelect_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool can_select = 2;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public Builder addCanSelect(boolean value) {
        ensureCanSelectIsMutable();
        canSelect_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool can_select = 2;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public Builder addAllCanSelect(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureCanSelectIsMutable();
        super.addAll(values, canSelect_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool can_select = 2;</code>
       *
       * <pre>
       *当前还可以选择的堆true为该位置已经被选了，不能再选，false为可选位置
       * </pre>
       */
      public Builder clearCanSelect() {
        canSelect_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated bool select_user = 3;
      private java.util.List<java.lang.Boolean> selectUser_ = java.util.Collections.emptyList();
      private void ensureSelectUserIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          selectUser_ = new java.util.ArrayList<java.lang.Boolean>(selectUser_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated bool select_user = 3;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getSelectUserList() {
        return java.util.Collections.unmodifiableList(selectUser_);
      }
      /**
       * <code>repeated bool select_user = 3;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public int getSelectUserCount() {
        return selectUser_.size();
      }
      /**
       * <code>repeated bool select_user = 3;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public boolean getSelectUser(int index) {
        return selectUser_.get(index);
      }
      /**
       * <code>repeated bool select_user = 3;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public Builder setSelectUser(
          int index, boolean value) {
        ensureSelectUserIsMutable();
        selectUser_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool select_user = 3;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public Builder addSelectUser(boolean value) {
        ensureSelectUserIsMutable();
        selectUser_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool select_user = 3;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public Builder addAllSelectUser(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureSelectUserIsMutable();
        super.addAll(values, selectUser_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool select_user = 3;</code>
       *
       * <pre>
       *已经选过的玩家为true，没有选的玩家为false
       * </pre>
       */
      public Builder clearSelectUser() {
        selectUser_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 display_time = 4;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *操作时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *操作时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *操作时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000008;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *操作时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Fen_Luo_Send_lps)
    }

    static {
      defaultInstance = new Fen_Luo_Send_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Fen_Luo_Send_lps)
  }

  public interface Fen_Luo_Request_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 luo_index = 1;
    /**
     * <code>optional int32 luo_index = 1;</code>
     *
     * <pre>
     *选的是第几摞
     * </pre>
     */
    boolean hasLuoIndex();
    /**
     * <code>optional int32 luo_index = 1;</code>
     *
     * <pre>
     *选的是第几摞
     * </pre>
     */
    int getLuoIndex();
  }
  /**
   * Protobuf type {@code lpsddz.Fen_Luo_Request_lps}
   *
   * <pre>
   *分摞请求c2s
   * </pre>
   */
  public static final class Fen_Luo_Request_lps extends
      com.google.protobuf.GeneratedMessage
      implements Fen_Luo_Request_lpsOrBuilder {
    // Use Fen_Luo_Request_lps.newBuilder() to construct.
    private Fen_Luo_Request_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Fen_Luo_Request_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Fen_Luo_Request_lps defaultInstance;
    public static Fen_Luo_Request_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Fen_Luo_Request_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Fen_Luo_Request_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              luoIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Request_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Request_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Fen_Luo_Request_lps> PARSER =
        new com.google.protobuf.AbstractParser<Fen_Luo_Request_lps>() {
      public Fen_Luo_Request_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Fen_Luo_Request_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Fen_Luo_Request_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 luo_index = 1;
    public static final int LUO_INDEX_FIELD_NUMBER = 1;
    private int luoIndex_;
    /**
     * <code>optional int32 luo_index = 1;</code>
     *
     * <pre>
     *选的是第几摞
     * </pre>
     */
    public boolean hasLuoIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 luo_index = 1;</code>
     *
     * <pre>
     *选的是第几摞
     * </pre>
     */
    public int getLuoIndex() {
      return luoIndex_;
    }

    private void initFields() {
      luoIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, luoIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, luoIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Fen_Luo_Request_lps}
     *
     * <pre>
     *分摞请求c2s
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Request_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Request_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        luoIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Request_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.luoIndex_ = luoIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps.getDefaultInstance()) return this;
        if (other.hasLuoIndex()) {
          setLuoIndex(other.getLuoIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Request_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 luo_index = 1;
      private int luoIndex_ ;
      /**
       * <code>optional int32 luo_index = 1;</code>
       *
       * <pre>
       *选的是第几摞
       * </pre>
       */
      public boolean hasLuoIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 luo_index = 1;</code>
       *
       * <pre>
       *选的是第几摞
       * </pre>
       */
      public int getLuoIndex() {
        return luoIndex_;
      }
      /**
       * <code>optional int32 luo_index = 1;</code>
       *
       * <pre>
       *选的是第几摞
       * </pre>
       */
      public Builder setLuoIndex(int value) {
        bitField0_ |= 0x00000001;
        luoIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 luo_index = 1;</code>
       *
       * <pre>
       *选的是第几摞
       * </pre>
       */
      public Builder clearLuoIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        luoIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Fen_Luo_Request_lps)
    }

    static {
      defaultInstance = new Fen_Luo_Request_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Fen_Luo_Request_lps)
  }

  public interface Fen_Luo_Result_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 control_player = 1;
    /**
     * <code>optional int32 control_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    boolean hasControlPlayer();
    /**
     * <code>optional int32 control_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    int getControlPlayer();

    // optional int32 user_card_count = 2;
    /**
     * <code>optional int32 user_card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    boolean hasUserCardCount();
    /**
     * <code>optional int32 user_card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCount();

    // optional .Int32ArrayResponse user_cards_data = 3;
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    boolean hasUserCardsData();
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData();
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder();

    // optional bool choose_isfinish = 4;
    /**
     * <code>optional bool choose_isfinish = 4;</code>
     *
     * <pre>
     *所有玩家是不是都操作完
     * </pre>
     */
    boolean hasChooseIsfinish();
    /**
     * <code>optional bool choose_isfinish = 4;</code>
     *
     * <pre>
     *所有玩家是不是都操作完
     * </pre>
     */
    boolean getChooseIsfinish();

    // optional int32 luo_index = 5;
    /**
     * <code>optional int32 luo_index = 5;</code>
     *
     * <pre>
     *选的是第几摞
     * </pre>
     */
    boolean hasLuoIndex();
    /**
     * <code>optional int32 luo_index = 5;</code>
     *
     * <pre>
     *选的是第几摞
     * </pre>
     */
    int getLuoIndex();
  }
  /**
   * Protobuf type {@code lpsddz.Fen_Luo_Result_lps}
   *
   * <pre>
   *分摞结果s2c
   * </pre>
   */
  public static final class Fen_Luo_Result_lps extends
      com.google.protobuf.GeneratedMessage
      implements Fen_Luo_Result_lpsOrBuilder {
    // Use Fen_Luo_Result_lps.newBuilder() to construct.
    private Fen_Luo_Result_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Fen_Luo_Result_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Fen_Luo_Result_lps defaultInstance;
    public static Fen_Luo_Result_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Fen_Luo_Result_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Fen_Luo_Result_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              controlPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              userCardCount_ = input.readInt32();
              break;
            }
            case 26: {
              protobuf.clazz.Protocol.Int32ArrayResponse.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = userCardsData_.toBuilder();
              }
              userCardsData_ = input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userCardsData_);
                userCardsData_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              chooseIsfinish_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              luoIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Result_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Result_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Fen_Luo_Result_lps> PARSER =
        new com.google.protobuf.AbstractParser<Fen_Luo_Result_lps>() {
      public Fen_Luo_Result_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Fen_Luo_Result_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Fen_Luo_Result_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 control_player = 1;
    public static final int CONTROL_PLAYER_FIELD_NUMBER = 1;
    private int controlPlayer_;
    /**
     * <code>optional int32 control_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    public boolean hasControlPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 control_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    public int getControlPlayer() {
      return controlPlayer_;
    }

    // optional int32 user_card_count = 2;
    public static final int USER_CARD_COUNT_FIELD_NUMBER = 2;
    private int userCardCount_;
    /**
     * <code>optional int32 user_card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public boolean hasUserCardCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 user_card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCount() {
      return userCardCount_;
    }

    // optional .Int32ArrayResponse user_cards_data = 3;
    public static final int USER_CARDS_DATA_FIELD_NUMBER = 3;
    private protobuf.clazz.Protocol.Int32ArrayResponse userCardsData_;
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public boolean hasUserCardsData() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData() {
      return userCardsData_;
    }
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder() {
      return userCardsData_;
    }

    // optional bool choose_isfinish = 4;
    public static final int CHOOSE_ISFINISH_FIELD_NUMBER = 4;
    private boolean chooseIsfinish_;
    /**
     * <code>optional bool choose_isfinish = 4;</code>
     *
     * <pre>
     *所有玩家是不是都操作完
     * </pre>
     */
    public boolean hasChooseIsfinish() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool choose_isfinish = 4;</code>
     *
     * <pre>
     *所有玩家是不是都操作完
     * </pre>
     */
    public boolean getChooseIsfinish() {
      return chooseIsfinish_;
    }

    // optional int32 luo_index = 5;
    public static final int LUO_INDEX_FIELD_NUMBER = 5;
    private int luoIndex_;
    /**
     * <code>optional int32 luo_index = 5;</code>
     *
     * <pre>
     *选的是第几摞
     * </pre>
     */
    public boolean hasLuoIndex() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 luo_index = 5;</code>
     *
     * <pre>
     *选的是第几摞
     * </pre>
     */
    public int getLuoIndex() {
      return luoIndex_;
    }

    private void initFields() {
      controlPlayer_ = 0;
      userCardCount_ = 0;
      userCardsData_ = protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance();
      chooseIsfinish_ = false;
      luoIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, controlPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, userCardCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, userCardsData_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, chooseIsfinish_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, luoIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, controlPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, userCardCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, userCardsData_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, chooseIsfinish_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, luoIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Fen_Luo_Result_lps}
     *
     * <pre>
     *分摞结果s2c
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Result_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Result_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        controlPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        userCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance();
        } else {
          userCardsDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        chooseIsfinish_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        luoIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Fen_Luo_Result_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.controlPlayer_ = controlPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.userCardCount_ = userCardCount_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (userCardsDataBuilder_ == null) {
          result.userCardsData_ = userCardsData_;
        } else {
          result.userCardsData_ = userCardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.chooseIsfinish_ = chooseIsfinish_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.luoIndex_ = luoIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps.getDefaultInstance()) return this;
        if (other.hasControlPlayer()) {
          setControlPlayer(other.getControlPlayer());
        }
        if (other.hasUserCardCount()) {
          setUserCardCount(other.getUserCardCount());
        }
        if (other.hasUserCardsData()) {
          mergeUserCardsData(other.getUserCardsData());
        }
        if (other.hasChooseIsfinish()) {
          setChooseIsfinish(other.getChooseIsfinish());
        }
        if (other.hasLuoIndex()) {
          setLuoIndex(other.getLuoIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Fen_Luo_Result_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 control_player = 1;
      private int controlPlayer_ ;
      /**
       * <code>optional int32 control_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public boolean hasControlPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 control_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public int getControlPlayer() {
        return controlPlayer_;
      }
      /**
       * <code>optional int32 control_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public Builder setControlPlayer(int value) {
        bitField0_ |= 0x00000001;
        controlPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 control_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public Builder clearControlPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        controlPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 user_card_count = 2;
      private int userCardCount_ ;
      /**
       * <code>optional int32 user_card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public boolean hasUserCardCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 user_card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCount() {
        return userCardCount_;
      }
      /**
       * <code>optional int32 user_card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setUserCardCount(int value) {
        bitField0_ |= 0x00000002;
        userCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearUserCardCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        userCardCount_ = 0;
        onChanged();
        return this;
      }

      // optional .Int32ArrayResponse user_cards_data = 3;
      private protobuf.clazz.Protocol.Int32ArrayResponse userCardsData_ = protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> userCardsDataBuilder_;
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public boolean hasUserCardsData() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData() {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_;
        } else {
          return userCardsDataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userCardsData_ = value;
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = builderForValue.build();
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder mergeUserCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              userCardsData_ != protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance()) {
            userCardsData_ =
              protobuf.clazz.Protocol.Int32ArrayResponse.newBuilder(userCardsData_).mergeFrom(value).buildPartial();
          } else {
            userCardsData_ = value;
          }
          onChanged();
        } else {
          userCardsDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearUserCardsData() {
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance();
          onChanged();
        } else {
          userCardsDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getUserCardsDataBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getUserCardsDataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder() {
        if (userCardsDataBuilder_ != null) {
          return userCardsDataBuilder_.getMessageOrBuilder();
        } else {
          return userCardsData_;
        }
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getUserCardsDataFieldBuilder() {
        if (userCardsDataBuilder_ == null) {
          userCardsDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  userCardsData_,
                  getParentForChildren(),
                  isClean());
          userCardsData_ = null;
        }
        return userCardsDataBuilder_;
      }

      // optional bool choose_isfinish = 4;
      private boolean chooseIsfinish_ ;
      /**
       * <code>optional bool choose_isfinish = 4;</code>
       *
       * <pre>
       *所有玩家是不是都操作完
       * </pre>
       */
      public boolean hasChooseIsfinish() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool choose_isfinish = 4;</code>
       *
       * <pre>
       *所有玩家是不是都操作完
       * </pre>
       */
      public boolean getChooseIsfinish() {
        return chooseIsfinish_;
      }
      /**
       * <code>optional bool choose_isfinish = 4;</code>
       *
       * <pre>
       *所有玩家是不是都操作完
       * </pre>
       */
      public Builder setChooseIsfinish(boolean value) {
        bitField0_ |= 0x00000008;
        chooseIsfinish_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool choose_isfinish = 4;</code>
       *
       * <pre>
       *所有玩家是不是都操作完
       * </pre>
       */
      public Builder clearChooseIsfinish() {
        bitField0_ = (bitField0_ & ~0x00000008);
        chooseIsfinish_ = false;
        onChanged();
        return this;
      }

      // optional int32 luo_index = 5;
      private int luoIndex_ ;
      /**
       * <code>optional int32 luo_index = 5;</code>
       *
       * <pre>
       *选的是第几摞
       * </pre>
       */
      public boolean hasLuoIndex() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 luo_index = 5;</code>
       *
       * <pre>
       *选的是第几摞
       * </pre>
       */
      public int getLuoIndex() {
        return luoIndex_;
      }
      /**
       * <code>optional int32 luo_index = 5;</code>
       *
       * <pre>
       *选的是第几摞
       * </pre>
       */
      public Builder setLuoIndex(int value) {
        bitField0_ |= 0x00000010;
        luoIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 luo_index = 5;</code>
       *
       * <pre>
       *选的是第几摞
       * </pre>
       */
      public Builder clearLuoIndex() {
        bitField0_ = (bitField0_ & ~0x00000010);
        luoIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Fen_Luo_Result_lps)
    }

    static {
      defaultInstance = new Fen_Luo_Result_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Fen_Luo_Result_lps)
  }

  public interface Swap_Card_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated bool swap_state = 1;
    /**
     * <code>repeated bool swap_state = 1;</code>
     *
     * <pre>
     *true已经选好，false没有选好
     * </pre>
     */
    java.util.List<java.lang.Boolean> getSwapStateList();
    /**
     * <code>repeated bool swap_state = 1;</code>
     *
     * <pre>
     *true已经选好，false没有选好
     * </pre>
     */
    int getSwapStateCount();
    /**
     * <code>repeated bool swap_state = 1;</code>
     *
     * <pre>
     *true已经选好，false没有选好
     * </pre>
     */
    boolean getSwapState(int index);
  }
  /**
   * Protobuf type {@code lpsddz.Swap_Card_lps}
   *
   * <pre>
   *换三张s2c
   * </pre>
   */
  public static final class Swap_Card_lps extends
      com.google.protobuf.GeneratedMessage
      implements Swap_Card_lpsOrBuilder {
    // Use Swap_Card_lps.newBuilder() to construct.
    private Swap_Card_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Swap_Card_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Swap_Card_lps defaultInstance;
    public static Swap_Card_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Swap_Card_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Swap_Card_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                swapState_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000001;
              }
              swapState_.add(input.readBool());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                swapState_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                swapState_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          swapState_ = java.util.Collections.unmodifiableList(swapState_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Swap_Card_lps> PARSER =
        new com.google.protobuf.AbstractParser<Swap_Card_lps>() {
      public Swap_Card_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Swap_Card_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Swap_Card_lps> getParserForType() {
      return PARSER;
    }

    // repeated bool swap_state = 1;
    public static final int SWAP_STATE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Boolean> swapState_;
    /**
     * <code>repeated bool swap_state = 1;</code>
     *
     * <pre>
     *true已经选好，false没有选好
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getSwapStateList() {
      return swapState_;
    }
    /**
     * <code>repeated bool swap_state = 1;</code>
     *
     * <pre>
     *true已经选好，false没有选好
     * </pre>
     */
    public int getSwapStateCount() {
      return swapState_.size();
    }
    /**
     * <code>repeated bool swap_state = 1;</code>
     *
     * <pre>
     *true已经选好，false没有选好
     * </pre>
     */
    public boolean getSwapState(int index) {
      return swapState_.get(index);
    }

    private void initFields() {
      swapState_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < swapState_.size(); i++) {
        output.writeBool(1, swapState_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 1 * getSwapStateList().size();
        size += dataSize;
        size += 1 * getSwapStateList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Swap_Card_lps}
     *
     * <pre>
     *换三张s2c
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        swapState_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          swapState_ = java.util.Collections.unmodifiableList(swapState_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.swapState_ = swapState_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps.getDefaultInstance()) return this;
        if (!other.swapState_.isEmpty()) {
          if (swapState_.isEmpty()) {
            swapState_ = other.swapState_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSwapStateIsMutable();
            swapState_.addAll(other.swapState_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated bool swap_state = 1;
      private java.util.List<java.lang.Boolean> swapState_ = java.util.Collections.emptyList();
      private void ensureSwapStateIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          swapState_ = new java.util.ArrayList<java.lang.Boolean>(swapState_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated bool swap_state = 1;</code>
       *
       * <pre>
       *true已经选好，false没有选好
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getSwapStateList() {
        return java.util.Collections.unmodifiableList(swapState_);
      }
      /**
       * <code>repeated bool swap_state = 1;</code>
       *
       * <pre>
       *true已经选好，false没有选好
       * </pre>
       */
      public int getSwapStateCount() {
        return swapState_.size();
      }
      /**
       * <code>repeated bool swap_state = 1;</code>
       *
       * <pre>
       *true已经选好，false没有选好
       * </pre>
       */
      public boolean getSwapState(int index) {
        return swapState_.get(index);
      }
      /**
       * <code>repeated bool swap_state = 1;</code>
       *
       * <pre>
       *true已经选好，false没有选好
       * </pre>
       */
      public Builder setSwapState(
          int index, boolean value) {
        ensureSwapStateIsMutable();
        swapState_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool swap_state = 1;</code>
       *
       * <pre>
       *true已经选好，false没有选好
       * </pre>
       */
      public Builder addSwapState(boolean value) {
        ensureSwapStateIsMutable();
        swapState_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool swap_state = 1;</code>
       *
       * <pre>
       *true已经选好，false没有选好
       * </pre>
       */
      public Builder addAllSwapState(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureSwapStateIsMutable();
        super.addAll(values, swapState_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool swap_state = 1;</code>
       *
       * <pre>
       *true已经选好，false没有选好
       * </pre>
       */
      public Builder clearSwapState() {
        swapState_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Swap_Card_lps)
    }

    static {
      defaultInstance = new Swap_Card_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Swap_Card_lps)
  }

  public interface Swap_Card_Request_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 swap_card = 1;
    /**
     * <code>repeated int32 swap_card = 1;</code>
     *
     * <pre>
     *选出来要换的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getSwapCardList();
    /**
     * <code>repeated int32 swap_card = 1;</code>
     *
     * <pre>
     *选出来要换的牌
     * </pre>
     */
    int getSwapCardCount();
    /**
     * <code>repeated int32 swap_card = 1;</code>
     *
     * <pre>
     *选出来要换的牌
     * </pre>
     */
    int getSwapCard(int index);
  }
  /**
   * Protobuf type {@code lpsddz.Swap_Card_Request_lps}
   *
   * <pre>
   *换三张请求c2s
   * </pre>
   */
  public static final class Swap_Card_Request_lps extends
      com.google.protobuf.GeneratedMessage
      implements Swap_Card_Request_lpsOrBuilder {
    // Use Swap_Card_Request_lps.newBuilder() to construct.
    private Swap_Card_Request_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Swap_Card_Request_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Swap_Card_Request_lps defaultInstance;
    public static Swap_Card_Request_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Swap_Card_Request_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Swap_Card_Request_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                swapCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              swapCard_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                swapCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                swapCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          swapCard_ = java.util.Collections.unmodifiableList(swapCard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_Request_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_Request_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Swap_Card_Request_lps> PARSER =
        new com.google.protobuf.AbstractParser<Swap_Card_Request_lps>() {
      public Swap_Card_Request_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Swap_Card_Request_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Swap_Card_Request_lps> getParserForType() {
      return PARSER;
    }

    // repeated int32 swap_card = 1;
    public static final int SWAP_CARD_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> swapCard_;
    /**
     * <code>repeated int32 swap_card = 1;</code>
     *
     * <pre>
     *选出来要换的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSwapCardList() {
      return swapCard_;
    }
    /**
     * <code>repeated int32 swap_card = 1;</code>
     *
     * <pre>
     *选出来要换的牌
     * </pre>
     */
    public int getSwapCardCount() {
      return swapCard_.size();
    }
    /**
     * <code>repeated int32 swap_card = 1;</code>
     *
     * <pre>
     *选出来要换的牌
     * </pre>
     */
    public int getSwapCard(int index) {
      return swapCard_.get(index);
    }

    private void initFields() {
      swapCard_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < swapCard_.size(); i++) {
        output.writeInt32(1, swapCard_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < swapCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(swapCard_.get(i));
        }
        size += dataSize;
        size += 1 * getSwapCardList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Swap_Card_Request_lps}
     *
     * <pre>
     *换三张请求c2s
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_Request_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_Request_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        swapCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_Request_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          swapCard_ = java.util.Collections.unmodifiableList(swapCard_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.swapCard_ = swapCard_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps.getDefaultInstance()) return this;
        if (!other.swapCard_.isEmpty()) {
          if (swapCard_.isEmpty()) {
            swapCard_ = other.swapCard_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSwapCardIsMutable();
            swapCard_.addAll(other.swapCard_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Request_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 swap_card = 1;
      private java.util.List<java.lang.Integer> swapCard_ = java.util.Collections.emptyList();
      private void ensureSwapCardIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          swapCard_ = new java.util.ArrayList<java.lang.Integer>(swapCard_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 swap_card = 1;</code>
       *
       * <pre>
       *选出来要换的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSwapCardList() {
        return java.util.Collections.unmodifiableList(swapCard_);
      }
      /**
       * <code>repeated int32 swap_card = 1;</code>
       *
       * <pre>
       *选出来要换的牌
       * </pre>
       */
      public int getSwapCardCount() {
        return swapCard_.size();
      }
      /**
       * <code>repeated int32 swap_card = 1;</code>
       *
       * <pre>
       *选出来要换的牌
       * </pre>
       */
      public int getSwapCard(int index) {
        return swapCard_.get(index);
      }
      /**
       * <code>repeated int32 swap_card = 1;</code>
       *
       * <pre>
       *选出来要换的牌
       * </pre>
       */
      public Builder setSwapCard(
          int index, int value) {
        ensureSwapCardIsMutable();
        swapCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 swap_card = 1;</code>
       *
       * <pre>
       *选出来要换的牌
       * </pre>
       */
      public Builder addSwapCard(int value) {
        ensureSwapCardIsMutable();
        swapCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 swap_card = 1;</code>
       *
       * <pre>
       *选出来要换的牌
       * </pre>
       */
      public Builder addAllSwapCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSwapCardIsMutable();
        super.addAll(values, swapCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 swap_card = 1;</code>
       *
       * <pre>
       *选出来要换的牌
       * </pre>
       */
      public Builder clearSwapCard() {
        swapCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Swap_Card_Request_lps)
    }

    static {
      defaultInstance = new Swap_Card_Request_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Swap_Card_Request_lps)
  }

  public interface Swap_Card_Result_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_player = 1;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    int getCurPlayer();

    // optional bool swap_isfinish = 2;
    /**
     * <code>optional bool swap_isfinish = 2;</code>
     *
     * <pre>
     *所有玩家是不是都操作完
     * </pre>
     */
    boolean hasSwapIsfinish();
    /**
     * <code>optional bool swap_isfinish = 2;</code>
     *
     * <pre>
     *所有玩家是不是都操作完
     * </pre>
     */
    boolean getSwapIsfinish();

    // optional int32 swap_seq = 3;
    /**
     * <code>optional int32 swap_seq = 3;</code>
     *
     * <pre>
     *交换顺序
     * </pre>
     */
    boolean hasSwapSeq();
    /**
     * <code>optional int32 swap_seq = 3;</code>
     *
     * <pre>
     *交换顺序
     * </pre>
     */
    int getSwapSeq();

    // repeated .Int32ArrayResponse swap_cards = 4;
    /**
     * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
     *
     * <pre>
     *交换后的牌
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getSwapCardsList();
    /**
     * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
     *
     * <pre>
     *交换后的牌
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getSwapCards(int index);
    /**
     * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
     *
     * <pre>
     *交换后的牌
     * </pre>
     */
    int getSwapCardsCount();
    /**
     * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
     *
     * <pre>
     *交换后的牌
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getSwapCardsOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
     *
     * <pre>
     *交换后的牌
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getSwapCardsOrBuilder(
        int index);

    // optional int32 user_card_count = 5;
    /**
     * <code>optional int32 user_card_count = 5;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    boolean hasUserCardCount();
    /**
     * <code>optional int32 user_card_count = 5;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCount();

    // optional .Int32ArrayResponse user_cards_data = 6;
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    boolean hasUserCardsData();
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData();
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder();

    // repeated int32 change_outCard = 7;
    /**
     * <code>repeated int32 change_outCard = 7;</code>
     *
     * <pre>
     *换出去的牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getChangeOutCardList();
    /**
     * <code>repeated int32 change_outCard = 7;</code>
     *
     * <pre>
     *换出去的牌
     * </pre>
     */
    int getChangeOutCardCount();
    /**
     * <code>repeated int32 change_outCard = 7;</code>
     *
     * <pre>
     *换出去的牌
     * </pre>
     */
    int getChangeOutCard(int index);
  }
  /**
   * Protobuf type {@code lpsddz.Swap_Card_Result_lps}
   *
   * <pre>
   *换三张结果s2c
   * </pre>
   */
  public static final class Swap_Card_Result_lps extends
      com.google.protobuf.GeneratedMessage
      implements Swap_Card_Result_lpsOrBuilder {
    // Use Swap_Card_Result_lps.newBuilder() to construct.
    private Swap_Card_Result_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Swap_Card_Result_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Swap_Card_Result_lps defaultInstance;
    public static Swap_Card_Result_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Swap_Card_Result_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Swap_Card_Result_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              swapIsfinish_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              swapSeq_ = input.readInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                swapCards_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000008;
              }
              swapCards_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              userCardCount_ = input.readInt32();
              break;
            }
            case 50: {
              protobuf.clazz.Protocol.Int32ArrayResponse.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = userCardsData_.toBuilder();
              }
              userCardsData_ = input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userCardsData_);
                userCardsData_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                changeOutCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              changeOutCard_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                changeOutCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                changeOutCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          swapCards_ = java.util.Collections.unmodifiableList(swapCards_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          changeOutCard_ = java.util.Collections.unmodifiableList(changeOutCard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_Result_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_Result_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Swap_Card_Result_lps> PARSER =
        new com.google.protobuf.AbstractParser<Swap_Card_Result_lps>() {
      public Swap_Card_Result_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Swap_Card_Result_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Swap_Card_Result_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_player = 1;
    public static final int CUR_PLAYER_FIELD_NUMBER = 1;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // optional bool swap_isfinish = 2;
    public static final int SWAP_ISFINISH_FIELD_NUMBER = 2;
    private boolean swapIsfinish_;
    /**
     * <code>optional bool swap_isfinish = 2;</code>
     *
     * <pre>
     *所有玩家是不是都操作完
     * </pre>
     */
    public boolean hasSwapIsfinish() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool swap_isfinish = 2;</code>
     *
     * <pre>
     *所有玩家是不是都操作完
     * </pre>
     */
    public boolean getSwapIsfinish() {
      return swapIsfinish_;
    }

    // optional int32 swap_seq = 3;
    public static final int SWAP_SEQ_FIELD_NUMBER = 3;
    private int swapSeq_;
    /**
     * <code>optional int32 swap_seq = 3;</code>
     *
     * <pre>
     *交换顺序
     * </pre>
     */
    public boolean hasSwapSeq() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 swap_seq = 3;</code>
     *
     * <pre>
     *交换顺序
     * </pre>
     */
    public int getSwapSeq() {
      return swapSeq_;
    }

    // repeated .Int32ArrayResponse swap_cards = 4;
    public static final int SWAP_CARDS_FIELD_NUMBER = 4;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> swapCards_;
    /**
     * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
     *
     * <pre>
     *交换后的牌
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getSwapCardsList() {
      return swapCards_;
    }
    /**
     * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
     *
     * <pre>
     *交换后的牌
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getSwapCardsOrBuilderList() {
      return swapCards_;
    }
    /**
     * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
     *
     * <pre>
     *交换后的牌
     * </pre>
     */
    public int getSwapCardsCount() {
      return swapCards_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
     *
     * <pre>
     *交换后的牌
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getSwapCards(int index) {
      return swapCards_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
     *
     * <pre>
     *交换后的牌
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getSwapCardsOrBuilder(
        int index) {
      return swapCards_.get(index);
    }

    // optional int32 user_card_count = 5;
    public static final int USER_CARD_COUNT_FIELD_NUMBER = 5;
    private int userCardCount_;
    /**
     * <code>optional int32 user_card_count = 5;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public boolean hasUserCardCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 user_card_count = 5;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCount() {
      return userCardCount_;
    }

    // optional .Int32ArrayResponse user_cards_data = 6;
    public static final int USER_CARDS_DATA_FIELD_NUMBER = 6;
    private protobuf.clazz.Protocol.Int32ArrayResponse userCardsData_;
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public boolean hasUserCardsData() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData() {
      return userCardsData_;
    }
    /**
     * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder() {
      return userCardsData_;
    }

    // repeated int32 change_outCard = 7;
    public static final int CHANGE_OUTCARD_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> changeOutCard_;
    /**
     * <code>repeated int32 change_outCard = 7;</code>
     *
     * <pre>
     *换出去的牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChangeOutCardList() {
      return changeOutCard_;
    }
    /**
     * <code>repeated int32 change_outCard = 7;</code>
     *
     * <pre>
     *换出去的牌
     * </pre>
     */
    public int getChangeOutCardCount() {
      return changeOutCard_.size();
    }
    /**
     * <code>repeated int32 change_outCard = 7;</code>
     *
     * <pre>
     *换出去的牌
     * </pre>
     */
    public int getChangeOutCard(int index) {
      return changeOutCard_.get(index);
    }

    private void initFields() {
      curPlayer_ = 0;
      swapIsfinish_ = false;
      swapSeq_ = 0;
      swapCards_ = java.util.Collections.emptyList();
      userCardCount_ = 0;
      userCardsData_ = protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance();
      changeOutCard_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, swapIsfinish_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, swapSeq_);
      }
      for (int i = 0; i < swapCards_.size(); i++) {
        output.writeMessage(4, swapCards_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, userCardCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(6, userCardsData_);
      }
      for (int i = 0; i < changeOutCard_.size(); i++) {
        output.writeInt32(7, changeOutCard_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, swapIsfinish_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, swapSeq_);
      }
      for (int i = 0; i < swapCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, swapCards_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, userCardCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, userCardsData_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < changeOutCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(changeOutCard_.get(i));
        }
        size += dataSize;
        size += 1 * getChangeOutCardList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Swap_Card_Result_lps}
     *
     * <pre>
     *换三张结果s2c
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_Result_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_Result_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSwapCardsFieldBuilder();
          getUserCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        swapIsfinish_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        swapSeq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (swapCardsBuilder_ == null) {
          swapCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          swapCardsBuilder_.clear();
        }
        userCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance();
        } else {
          userCardsDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        changeOutCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Swap_Card_Result_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curPlayer_ = curPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.swapIsfinish_ = swapIsfinish_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.swapSeq_ = swapSeq_;
        if (swapCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            swapCards_ = java.util.Collections.unmodifiableList(swapCards_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.swapCards_ = swapCards_;
        } else {
          result.swapCards_ = swapCardsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.userCardCount_ = userCardCount_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        if (userCardsDataBuilder_ == null) {
          result.userCardsData_ = userCardsData_;
        } else {
          result.userCardsData_ = userCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          changeOutCard_ = java.util.Collections.unmodifiableList(changeOutCard_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.changeOutCard_ = changeOutCard_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps.getDefaultInstance()) return this;
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (other.hasSwapIsfinish()) {
          setSwapIsfinish(other.getSwapIsfinish());
        }
        if (other.hasSwapSeq()) {
          setSwapSeq(other.getSwapSeq());
        }
        if (swapCardsBuilder_ == null) {
          if (!other.swapCards_.isEmpty()) {
            if (swapCards_.isEmpty()) {
              swapCards_ = other.swapCards_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureSwapCardsIsMutable();
              swapCards_.addAll(other.swapCards_);
            }
            onChanged();
          }
        } else {
          if (!other.swapCards_.isEmpty()) {
            if (swapCardsBuilder_.isEmpty()) {
              swapCardsBuilder_.dispose();
              swapCardsBuilder_ = null;
              swapCards_ = other.swapCards_;
              bitField0_ = (bitField0_ & ~0x00000008);
              swapCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSwapCardsFieldBuilder() : null;
            } else {
              swapCardsBuilder_.addAllMessages(other.swapCards_);
            }
          }
        }
        if (other.hasUserCardCount()) {
          setUserCardCount(other.getUserCardCount());
        }
        if (other.hasUserCardsData()) {
          mergeUserCardsData(other.getUserCardsData());
        }
        if (!other.changeOutCard_.isEmpty()) {
          if (changeOutCard_.isEmpty()) {
            changeOutCard_ = other.changeOutCard_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureChangeOutCardIsMutable();
            changeOutCard_.addAll(other.changeOutCard_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Swap_Card_Result_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_player = 1;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000001;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional bool swap_isfinish = 2;
      private boolean swapIsfinish_ ;
      /**
       * <code>optional bool swap_isfinish = 2;</code>
       *
       * <pre>
       *所有玩家是不是都操作完
       * </pre>
       */
      public boolean hasSwapIsfinish() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool swap_isfinish = 2;</code>
       *
       * <pre>
       *所有玩家是不是都操作完
       * </pre>
       */
      public boolean getSwapIsfinish() {
        return swapIsfinish_;
      }
      /**
       * <code>optional bool swap_isfinish = 2;</code>
       *
       * <pre>
       *所有玩家是不是都操作完
       * </pre>
       */
      public Builder setSwapIsfinish(boolean value) {
        bitField0_ |= 0x00000002;
        swapIsfinish_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool swap_isfinish = 2;</code>
       *
       * <pre>
       *所有玩家是不是都操作完
       * </pre>
       */
      public Builder clearSwapIsfinish() {
        bitField0_ = (bitField0_ & ~0x00000002);
        swapIsfinish_ = false;
        onChanged();
        return this;
      }

      // optional int32 swap_seq = 3;
      private int swapSeq_ ;
      /**
       * <code>optional int32 swap_seq = 3;</code>
       *
       * <pre>
       *交换顺序
       * </pre>
       */
      public boolean hasSwapSeq() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 swap_seq = 3;</code>
       *
       * <pre>
       *交换顺序
       * </pre>
       */
      public int getSwapSeq() {
        return swapSeq_;
      }
      /**
       * <code>optional int32 swap_seq = 3;</code>
       *
       * <pre>
       *交换顺序
       * </pre>
       */
      public Builder setSwapSeq(int value) {
        bitField0_ |= 0x00000004;
        swapSeq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 swap_seq = 3;</code>
       *
       * <pre>
       *交换顺序
       * </pre>
       */
      public Builder clearSwapSeq() {
        bitField0_ = (bitField0_ & ~0x00000004);
        swapSeq_ = 0;
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse swap_cards = 4;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> swapCards_ =
        java.util.Collections.emptyList();
      private void ensureSwapCardsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          swapCards_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(swapCards_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> swapCardsBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getSwapCardsList() {
        if (swapCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(swapCards_);
        } else {
          return swapCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public int getSwapCardsCount() {
        if (swapCardsBuilder_ == null) {
          return swapCards_.size();
        } else {
          return swapCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getSwapCards(int index) {
        if (swapCardsBuilder_ == null) {
          return swapCards_.get(index);
        } else {
          return swapCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public Builder setSwapCards(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (swapCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwapCardsIsMutable();
          swapCards_.set(index, value);
          onChanged();
        } else {
          swapCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public Builder setSwapCards(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (swapCardsBuilder_ == null) {
          ensureSwapCardsIsMutable();
          swapCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          swapCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public Builder addSwapCards(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (swapCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwapCardsIsMutable();
          swapCards_.add(value);
          onChanged();
        } else {
          swapCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public Builder addSwapCards(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (swapCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSwapCardsIsMutable();
          swapCards_.add(index, value);
          onChanged();
        } else {
          swapCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public Builder addSwapCards(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (swapCardsBuilder_ == null) {
          ensureSwapCardsIsMutable();
          swapCards_.add(builderForValue.build());
          onChanged();
        } else {
          swapCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public Builder addSwapCards(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (swapCardsBuilder_ == null) {
          ensureSwapCardsIsMutable();
          swapCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          swapCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public Builder addAllSwapCards(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (swapCardsBuilder_ == null) {
          ensureSwapCardsIsMutable();
          super.addAll(values, swapCards_);
          onChanged();
        } else {
          swapCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public Builder clearSwapCards() {
        if (swapCardsBuilder_ == null) {
          swapCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          swapCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public Builder removeSwapCards(int index) {
        if (swapCardsBuilder_ == null) {
          ensureSwapCardsIsMutable();
          swapCards_.remove(index);
          onChanged();
        } else {
          swapCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getSwapCardsBuilder(
          int index) {
        return getSwapCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getSwapCardsOrBuilder(
          int index) {
        if (swapCardsBuilder_ == null) {
          return swapCards_.get(index);  } else {
          return swapCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getSwapCardsOrBuilderList() {
        if (swapCardsBuilder_ != null) {
          return swapCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(swapCards_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addSwapCardsBuilder() {
        return getSwapCardsFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addSwapCardsBuilder(
          int index) {
        return getSwapCardsFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse swap_cards = 4;</code>
       *
       * <pre>
       *交换后的牌
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getSwapCardsBuilderList() {
        return getSwapCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getSwapCardsFieldBuilder() {
        if (swapCardsBuilder_ == null) {
          swapCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  swapCards_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          swapCards_ = null;
        }
        return swapCardsBuilder_;
      }

      // optional int32 user_card_count = 5;
      private int userCardCount_ ;
      /**
       * <code>optional int32 user_card_count = 5;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public boolean hasUserCardCount() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 user_card_count = 5;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCount() {
        return userCardCount_;
      }
      /**
       * <code>optional int32 user_card_count = 5;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setUserCardCount(int value) {
        bitField0_ |= 0x00000010;
        userCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_card_count = 5;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearUserCardCount() {
        bitField0_ = (bitField0_ & ~0x00000010);
        userCardCount_ = 0;
        onChanged();
        return this;
      }

      // optional .Int32ArrayResponse user_cards_data = 6;
      private protobuf.clazz.Protocol.Int32ArrayResponse userCardsData_ = protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> userCardsDataBuilder_;
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public boolean hasUserCardsData() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData() {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_;
        } else {
          return userCardsDataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userCardsData_ = value;
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = builderForValue.build();
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder mergeUserCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              userCardsData_ != protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance()) {
            userCardsData_ =
              protobuf.clazz.Protocol.Int32ArrayResponse.newBuilder(userCardsData_).mergeFrom(value).buildPartial();
          } else {
            userCardsData_ = value;
          }
          onChanged();
        } else {
          userCardsDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearUserCardsData() {
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance();
          onChanged();
        } else {
          userCardsDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getUserCardsDataBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getUserCardsDataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder() {
        if (userCardsDataBuilder_ != null) {
          return userCardsDataBuilder_.getMessageOrBuilder();
        } else {
          return userCardsData_;
        }
      }
      /**
       * <code>optional .Int32ArrayResponse user_cards_data = 6;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getUserCardsDataFieldBuilder() {
        if (userCardsDataBuilder_ == null) {
          userCardsDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  userCardsData_,
                  getParentForChildren(),
                  isClean());
          userCardsData_ = null;
        }
        return userCardsDataBuilder_;
      }

      // repeated int32 change_outCard = 7;
      private java.util.List<java.lang.Integer> changeOutCard_ = java.util.Collections.emptyList();
      private void ensureChangeOutCardIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          changeOutCard_ = new java.util.ArrayList<java.lang.Integer>(changeOutCard_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 change_outCard = 7;</code>
       *
       * <pre>
       *换出去的牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChangeOutCardList() {
        return java.util.Collections.unmodifiableList(changeOutCard_);
      }
      /**
       * <code>repeated int32 change_outCard = 7;</code>
       *
       * <pre>
       *换出去的牌
       * </pre>
       */
      public int getChangeOutCardCount() {
        return changeOutCard_.size();
      }
      /**
       * <code>repeated int32 change_outCard = 7;</code>
       *
       * <pre>
       *换出去的牌
       * </pre>
       */
      public int getChangeOutCard(int index) {
        return changeOutCard_.get(index);
      }
      /**
       * <code>repeated int32 change_outCard = 7;</code>
       *
       * <pre>
       *换出去的牌
       * </pre>
       */
      public Builder setChangeOutCard(
          int index, int value) {
        ensureChangeOutCardIsMutable();
        changeOutCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_outCard = 7;</code>
       *
       * <pre>
       *换出去的牌
       * </pre>
       */
      public Builder addChangeOutCard(int value) {
        ensureChangeOutCardIsMutable();
        changeOutCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_outCard = 7;</code>
       *
       * <pre>
       *换出去的牌
       * </pre>
       */
      public Builder addAllChangeOutCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChangeOutCardIsMutable();
        super.addAll(values, changeOutCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_outCard = 7;</code>
       *
       * <pre>
       *换出去的牌
       * </pre>
       */
      public Builder clearChangeOutCard() {
        changeOutCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Swap_Card_Result_lps)
    }

    static {
      defaultInstance = new Swap_Card_Result_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Swap_Card_Result_lps)
  }

  public interface Send_Last_Card_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 card_count = 1;
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    boolean hasCardCount();
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    int getCardCount();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_type = 3;
    /**
     * <code>optional int32 cards_type = 3;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    boolean hasCardsType();
    /**
     * <code>optional int32 cards_type = 3;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    int getCardsType();

    // optional int32 cards_times = 4;
    /**
     * <code>optional int32 cards_times = 4;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    boolean hasCardsTimes();
    /**
     * <code>optional int32 cards_times = 4;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    int getCardsTimes();

    // optional int32 rangpai_count = 5;
    /**
     * <code>optional int32 rangpai_count = 5;</code>
     *
     * <pre>
     *让牌数量
     * </pre>
     */
    boolean hasRangpaiCount();
    /**
     * <code>optional int32 rangpai_count = 5;</code>
     *
     * <pre>
     *让牌数量
     * </pre>
     */
    int getRangpaiCount();

    // optional int32 game_times = 6;
    /**
     * <code>optional int32 game_times = 6;</code>
     *
     * <pre>
     *游戏倍数
     * </pre>
     */
    boolean hasGameTimes();
    /**
     * <code>optional int32 game_times = 6;</code>
     *
     * <pre>
     *游戏倍数
     * </pre>
     */
    int getGameTimes();

    // optional bool show_rangpai_tips = 7;
    /**
     * <code>optional bool show_rangpai_tips = 7;</code>
     *
     * <pre>
     *是不是显示地主让多少张提示
     * </pre>
     */
    boolean hasShowRangpaiTips();
    /**
     * <code>optional bool show_rangpai_tips = 7;</code>
     *
     * <pre>
     *是不是显示地主让多少张提示
     * </pre>
     */
    boolean getShowRangpaiTips();

    // optional bool show_dipai_action = 8;
    /**
     * <code>optional bool show_dipai_action = 8;</code>
     *
     * <pre>
     *播放底牌动画
     * </pre>
     */
    boolean hasShowDipaiAction();
    /**
     * <code>optional bool show_dipai_action = 8;</code>
     *
     * <pre>
     *播放底牌动画
     * </pre>
     */
    boolean getShowDipaiAction();
  }
  /**
   * Protobuf type {@code lpsddz.Send_Last_Card_lps}
   *
   * <pre>
   *发底牌
   * </pre>
   */
  public static final class Send_Last_Card_lps extends
      com.google.protobuf.GeneratedMessage
      implements Send_Last_Card_lpsOrBuilder {
    // Use Send_Last_Card_lps.newBuilder() to construct.
    private Send_Last_Card_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Send_Last_Card_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Send_Last_Card_lps defaultInstance;
    public static Send_Last_Card_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Send_Last_Card_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Send_Last_Card_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cardCount_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              cardsType_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              cardsTimes_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              rangpaiCount_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              gameTimes_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              showRangpaiTips_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              showDipaiAction_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Send_Last_Card_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Send_Last_Card_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Send_Last_Card_lps> PARSER =
        new com.google.protobuf.AbstractParser<Send_Last_Card_lps>() {
      public Send_Last_Card_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Send_Last_Card_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Send_Last_Card_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 card_count = 1;
    public static final int CARD_COUNT_FIELD_NUMBER = 1;
    private int cardCount_;
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public boolean hasCardCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_count = 1;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public int getCardCount() {
      return cardCount_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_type = 3;
    public static final int CARDS_TYPE_FIELD_NUMBER = 3;
    private int cardsType_;
    /**
     * <code>optional int32 cards_type = 3;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    public boolean hasCardsType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_type = 3;</code>
     *
     * <pre>
     *底牌类型
     * </pre>
     */
    public int getCardsType() {
      return cardsType_;
    }

    // optional int32 cards_times = 4;
    public static final int CARDS_TIMES_FIELD_NUMBER = 4;
    private int cardsTimes_;
    /**
     * <code>optional int32 cards_times = 4;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    public boolean hasCardsTimes() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 cards_times = 4;</code>
     *
     * <pre>
     *底牌倍数
     * </pre>
     */
    public int getCardsTimes() {
      return cardsTimes_;
    }

    // optional int32 rangpai_count = 5;
    public static final int RANGPAI_COUNT_FIELD_NUMBER = 5;
    private int rangpaiCount_;
    /**
     * <code>optional int32 rangpai_count = 5;</code>
     *
     * <pre>
     *让牌数量
     * </pre>
     */
    public boolean hasRangpaiCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 rangpai_count = 5;</code>
     *
     * <pre>
     *让牌数量
     * </pre>
     */
    public int getRangpaiCount() {
      return rangpaiCount_;
    }

    // optional int32 game_times = 6;
    public static final int GAME_TIMES_FIELD_NUMBER = 6;
    private int gameTimes_;
    /**
     * <code>optional int32 game_times = 6;</code>
     *
     * <pre>
     *游戏倍数
     * </pre>
     */
    public boolean hasGameTimes() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 game_times = 6;</code>
     *
     * <pre>
     *游戏倍数
     * </pre>
     */
    public int getGameTimes() {
      return gameTimes_;
    }

    // optional bool show_rangpai_tips = 7;
    public static final int SHOW_RANGPAI_TIPS_FIELD_NUMBER = 7;
    private boolean showRangpaiTips_;
    /**
     * <code>optional bool show_rangpai_tips = 7;</code>
     *
     * <pre>
     *是不是显示地主让多少张提示
     * </pre>
     */
    public boolean hasShowRangpaiTips() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool show_rangpai_tips = 7;</code>
     *
     * <pre>
     *是不是显示地主让多少张提示
     * </pre>
     */
    public boolean getShowRangpaiTips() {
      return showRangpaiTips_;
    }

    // optional bool show_dipai_action = 8;
    public static final int SHOW_DIPAI_ACTION_FIELD_NUMBER = 8;
    private boolean showDipaiAction_;
    /**
     * <code>optional bool show_dipai_action = 8;</code>
     *
     * <pre>
     *播放底牌动画
     * </pre>
     */
    public boolean hasShowDipaiAction() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool show_dipai_action = 8;</code>
     *
     * <pre>
     *播放底牌动画
     * </pre>
     */
    public boolean getShowDipaiAction() {
      return showDipaiAction_;
    }

    private void initFields() {
      cardCount_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsType_ = 0;
      cardsTimes_ = 0;
      rangpaiCount_ = 0;
      gameTimes_ = 0;
      showRangpaiTips_ = false;
      showDipaiAction_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cardCount_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, cardsType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, cardsTimes_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, rangpaiCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, gameTimes_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(7, showRangpaiTips_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(8, showDipaiAction_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cardsType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsTimes_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, rangpaiCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, gameTimes_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, showRangpaiTips_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, showDipaiAction_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Send_Last_Card_lps}
     *
     * <pre>
     *发底牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Send_Last_Card_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Send_Last_Card_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        rangpaiCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        gameTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        showRangpaiTips_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        showDipaiAction_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Send_Last_Card_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardCount_ = cardCount_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsType_ = cardsType_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardsTimes_ = cardsTimes_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.rangpaiCount_ = rangpaiCount_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gameTimes_ = gameTimes_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.showRangpaiTips_ = showRangpaiTips_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.showDipaiAction_ = showDipaiAction_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps.getDefaultInstance()) return this;
        if (other.hasCardCount()) {
          setCardCount(other.getCardCount());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsType()) {
          setCardsType(other.getCardsType());
        }
        if (other.hasCardsTimes()) {
          setCardsTimes(other.getCardsTimes());
        }
        if (other.hasRangpaiCount()) {
          setRangpaiCount(other.getRangpaiCount());
        }
        if (other.hasGameTimes()) {
          setGameTimes(other.getGameTimes());
        }
        if (other.hasShowRangpaiTips()) {
          setShowRangpaiTips(other.getShowRangpaiTips());
        }
        if (other.hasShowDipaiAction()) {
          setShowDipaiAction(other.getShowDipaiAction());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Send_Last_Card_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 card_count = 1;
      private int cardCount_ ;
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public boolean hasCardCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public int getCardCount() {
        return cardCount_;
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder setCardCount(int value) {
        bitField0_ |= 0x00000001;
        cardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_count = 1;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 cards_type = 3;
      private int cardsType_ ;
      /**
       * <code>optional int32 cards_type = 3;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public boolean hasCardsType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cards_type = 3;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public int getCardsType() {
        return cardsType_;
      }
      /**
       * <code>optional int32 cards_type = 3;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public Builder setCardsType(int value) {
        bitField0_ |= 0x00000004;
        cardsType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_type = 3;</code>
       *
       * <pre>
       *底牌类型
       * </pre>
       */
      public Builder clearCardsType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cards_times = 4;
      private int cardsTimes_ ;
      /**
       * <code>optional int32 cards_times = 4;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public boolean hasCardsTimes() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_times = 4;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public int getCardsTimes() {
        return cardsTimes_;
      }
      /**
       * <code>optional int32 cards_times = 4;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public Builder setCardsTimes(int value) {
        bitField0_ |= 0x00000008;
        cardsTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_times = 4;</code>
       *
       * <pre>
       *底牌倍数
       * </pre>
       */
      public Builder clearCardsTimes() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsTimes_ = 0;
        onChanged();
        return this;
      }

      // optional int32 rangpai_count = 5;
      private int rangpaiCount_ ;
      /**
       * <code>optional int32 rangpai_count = 5;</code>
       *
       * <pre>
       *让牌数量
       * </pre>
       */
      public boolean hasRangpaiCount() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 rangpai_count = 5;</code>
       *
       * <pre>
       *让牌数量
       * </pre>
       */
      public int getRangpaiCount() {
        return rangpaiCount_;
      }
      /**
       * <code>optional int32 rangpai_count = 5;</code>
       *
       * <pre>
       *让牌数量
       * </pre>
       */
      public Builder setRangpaiCount(int value) {
        bitField0_ |= 0x00000010;
        rangpaiCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rangpai_count = 5;</code>
       *
       * <pre>
       *让牌数量
       * </pre>
       */
      public Builder clearRangpaiCount() {
        bitField0_ = (bitField0_ & ~0x00000010);
        rangpaiCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_times = 6;
      private int gameTimes_ ;
      /**
       * <code>optional int32 game_times = 6;</code>
       *
       * <pre>
       *游戏倍数
       * </pre>
       */
      public boolean hasGameTimes() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 game_times = 6;</code>
       *
       * <pre>
       *游戏倍数
       * </pre>
       */
      public int getGameTimes() {
        return gameTimes_;
      }
      /**
       * <code>optional int32 game_times = 6;</code>
       *
       * <pre>
       *游戏倍数
       * </pre>
       */
      public Builder setGameTimes(int value) {
        bitField0_ |= 0x00000020;
        gameTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_times = 6;</code>
       *
       * <pre>
       *游戏倍数
       * </pre>
       */
      public Builder clearGameTimes() {
        bitField0_ = (bitField0_ & ~0x00000020);
        gameTimes_ = 0;
        onChanged();
        return this;
      }

      // optional bool show_rangpai_tips = 7;
      private boolean showRangpaiTips_ ;
      /**
       * <code>optional bool show_rangpai_tips = 7;</code>
       *
       * <pre>
       *是不是显示地主让多少张提示
       * </pre>
       */
      public boolean hasShowRangpaiTips() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool show_rangpai_tips = 7;</code>
       *
       * <pre>
       *是不是显示地主让多少张提示
       * </pre>
       */
      public boolean getShowRangpaiTips() {
        return showRangpaiTips_;
      }
      /**
       * <code>optional bool show_rangpai_tips = 7;</code>
       *
       * <pre>
       *是不是显示地主让多少张提示
       * </pre>
       */
      public Builder setShowRangpaiTips(boolean value) {
        bitField0_ |= 0x00000040;
        showRangpaiTips_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool show_rangpai_tips = 7;</code>
       *
       * <pre>
       *是不是显示地主让多少张提示
       * </pre>
       */
      public Builder clearShowRangpaiTips() {
        bitField0_ = (bitField0_ & ~0x00000040);
        showRangpaiTips_ = false;
        onChanged();
        return this;
      }

      // optional bool show_dipai_action = 8;
      private boolean showDipaiAction_ ;
      /**
       * <code>optional bool show_dipai_action = 8;</code>
       *
       * <pre>
       *播放底牌动画
       * </pre>
       */
      public boolean hasShowDipaiAction() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool show_dipai_action = 8;</code>
       *
       * <pre>
       *播放底牌动画
       * </pre>
       */
      public boolean getShowDipaiAction() {
        return showDipaiAction_;
      }
      /**
       * <code>optional bool show_dipai_action = 8;</code>
       *
       * <pre>
       *播放底牌动画
       * </pre>
       */
      public Builder setShowDipaiAction(boolean value) {
        bitField0_ |= 0x00000080;
        showDipaiAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool show_dipai_action = 8;</code>
       *
       * <pre>
       *播放底牌动画
       * </pre>
       */
      public Builder clearShowDipaiAction() {
        bitField0_ = (bitField0_ & ~0x00000080);
        showDipaiAction_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Send_Last_Card_lps)
    }

    static {
      defaultInstance = new Send_Last_Card_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Send_Last_Card_lps)
  }

  public interface Record_Cards_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 record_cards = 1;
    /**
     * <code>repeated int32 record_cards = 1;</code>
     *
     * <pre>
     *记牌器
     * </pre>
     */
    java.util.List<java.lang.Integer> getRecordCardsList();
    /**
     * <code>repeated int32 record_cards = 1;</code>
     *
     * <pre>
     *记牌器
     * </pre>
     */
    int getRecordCardsCount();
    /**
     * <code>repeated int32 record_cards = 1;</code>
     *
     * <pre>
     *记牌器
     * </pre>
     */
    int getRecordCards(int index);
  }
  /**
   * Protobuf type {@code lpsddz.Record_Cards_lps}
   *
   * <pre>
   *记牌器s2c
   * </pre>
   */
  public static final class Record_Cards_lps extends
      com.google.protobuf.GeneratedMessage
      implements Record_Cards_lpsOrBuilder {
    // Use Record_Cards_lps.newBuilder() to construct.
    private Record_Cards_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Record_Cards_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Record_Cards_lps defaultInstance;
    public static Record_Cards_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Record_Cards_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Record_Cards_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                recordCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              recordCards_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                recordCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                recordCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          recordCards_ = java.util.Collections.unmodifiableList(recordCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Record_Cards_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Record_Cards_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Record_Cards_lps> PARSER =
        new com.google.protobuf.AbstractParser<Record_Cards_lps>() {
      public Record_Cards_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Record_Cards_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Record_Cards_lps> getParserForType() {
      return PARSER;
    }

    // repeated int32 record_cards = 1;
    public static final int RECORD_CARDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> recordCards_;
    /**
     * <code>repeated int32 record_cards = 1;</code>
     *
     * <pre>
     *记牌器
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRecordCardsList() {
      return recordCards_;
    }
    /**
     * <code>repeated int32 record_cards = 1;</code>
     *
     * <pre>
     *记牌器
     * </pre>
     */
    public int getRecordCardsCount() {
      return recordCards_.size();
    }
    /**
     * <code>repeated int32 record_cards = 1;</code>
     *
     * <pre>
     *记牌器
     * </pre>
     */
    public int getRecordCards(int index) {
      return recordCards_.get(index);
    }

    private void initFields() {
      recordCards_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < recordCards_.size(); i++) {
        output.writeInt32(1, recordCards_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < recordCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(recordCards_.get(i));
        }
        size += dataSize;
        size += 1 * getRecordCardsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Record_Cards_lps}
     *
     * <pre>
     *记牌器s2c
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Record_Cards_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Record_Cards_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        recordCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Record_Cards_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          recordCards_ = java.util.Collections.unmodifiableList(recordCards_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.recordCards_ = recordCards_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps.getDefaultInstance()) return this;
        if (!other.recordCards_.isEmpty()) {
          if (recordCards_.isEmpty()) {
            recordCards_ = other.recordCards_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRecordCardsIsMutable();
            recordCards_.addAll(other.recordCards_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Record_Cards_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 record_cards = 1;
      private java.util.List<java.lang.Integer> recordCards_ = java.util.Collections.emptyList();
      private void ensureRecordCardsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          recordCards_ = new java.util.ArrayList<java.lang.Integer>(recordCards_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 record_cards = 1;</code>
       *
       * <pre>
       *记牌器
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRecordCardsList() {
        return java.util.Collections.unmodifiableList(recordCards_);
      }
      /**
       * <code>repeated int32 record_cards = 1;</code>
       *
       * <pre>
       *记牌器
       * </pre>
       */
      public int getRecordCardsCount() {
        return recordCards_.size();
      }
      /**
       * <code>repeated int32 record_cards = 1;</code>
       *
       * <pre>
       *记牌器
       * </pre>
       */
      public int getRecordCards(int index) {
        return recordCards_.get(index);
      }
      /**
       * <code>repeated int32 record_cards = 1;</code>
       *
       * <pre>
       *记牌器
       * </pre>
       */
      public Builder setRecordCards(
          int index, int value) {
        ensureRecordCardsIsMutable();
        recordCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 record_cards = 1;</code>
       *
       * <pre>
       *记牌器
       * </pre>
       */
      public Builder addRecordCards(int value) {
        ensureRecordCardsIsMutable();
        recordCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 record_cards = 1;</code>
       *
       * <pre>
       *记牌器
       * </pre>
       */
      public Builder addAllRecordCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRecordCardsIsMutable();
        super.addAll(values, recordCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 record_cards = 1;</code>
       *
       * <pre>
       *记牌器
       * </pre>
       */
      public Builder clearRecordCards() {
        recordCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Record_Cards_lps)
    }

    static {
      defaultInstance = new Record_Cards_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Record_Cards_lps)
  }

  public interface Rang_Pai_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_player = 1;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *需要操作的玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *需要操作的玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 rang_action = 2;
    /**
     * <code>repeated int32 rang_action = 2;</code>
     *
     * <pre>
     *操作动作
     * </pre>
     */
    java.util.List<java.lang.Integer> getRangActionList();
    /**
     * <code>repeated int32 rang_action = 2;</code>
     *
     * <pre>
     *操作动作
     * </pre>
     */
    int getRangActionCount();
    /**
     * <code>repeated int32 rang_action = 2;</code>
     *
     * <pre>
     *操作动作
     * </pre>
     */
    int getRangAction(int index);

    // optional int32 display_time = 3;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *操作时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *操作时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code lpsddz.Rang_Pai_lps}
   *
   * <pre>
   *让牌s2c
   * </pre>
   */
  public static final class Rang_Pai_lps extends
      com.google.protobuf.GeneratedMessage
      implements Rang_Pai_lpsOrBuilder {
    // Use Rang_Pai_lps.newBuilder() to construct.
    private Rang_Pai_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Rang_Pai_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Rang_Pai_lps defaultInstance;
    public static Rang_Pai_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Rang_Pai_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Rang_Pai_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                rangAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              rangAction_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                rangAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                rangAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          rangAction_ = java.util.Collections.unmodifiableList(rangAction_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Rang_Pai_lps> PARSER =
        new com.google.protobuf.AbstractParser<Rang_Pai_lps>() {
      public Rang_Pai_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Rang_Pai_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Rang_Pai_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_player = 1;
    public static final int CUR_PLAYER_FIELD_NUMBER = 1;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *需要操作的玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *需要操作的玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 rang_action = 2;
    public static final int RANG_ACTION_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> rangAction_;
    /**
     * <code>repeated int32 rang_action = 2;</code>
     *
     * <pre>
     *操作动作
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRangActionList() {
      return rangAction_;
    }
    /**
     * <code>repeated int32 rang_action = 2;</code>
     *
     * <pre>
     *操作动作
     * </pre>
     */
    public int getRangActionCount() {
      return rangAction_.size();
    }
    /**
     * <code>repeated int32 rang_action = 2;</code>
     *
     * <pre>
     *操作动作
     * </pre>
     */
    public int getRangAction(int index) {
      return rangAction_.get(index);
    }

    // optional int32 display_time = 3;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 3;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *操作时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 3;</code>
     *
     * <pre>
     *操作时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      curPlayer_ = 0;
      rangAction_ = java.util.Collections.emptyList();
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curPlayer_);
      }
      for (int i = 0; i < rangAction_.size(); i++) {
        output.writeInt32(2, rangAction_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < rangAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(rangAction_.get(i));
        }
        size += dataSize;
        size += 1 * getRangActionList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Rang_Pai_lps}
     *
     * <pre>
     *让牌s2c
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        rangAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          rangAction_ = java.util.Collections.unmodifiableList(rangAction_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.rangAction_ = rangAction_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps.getDefaultInstance()) return this;
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.rangAction_.isEmpty()) {
          if (rangAction_.isEmpty()) {
            rangAction_ = other.rangAction_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRangActionIsMutable();
            rangAction_.addAll(other.rangAction_);
          }
          onChanged();
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_player = 1;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *需要操作的玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *需要操作的玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *需要操作的玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000001;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *需要操作的玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 rang_action = 2;
      private java.util.List<java.lang.Integer> rangAction_ = java.util.Collections.emptyList();
      private void ensureRangActionIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          rangAction_ = new java.util.ArrayList<java.lang.Integer>(rangAction_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 rang_action = 2;</code>
       *
       * <pre>
       *操作动作
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRangActionList() {
        return java.util.Collections.unmodifiableList(rangAction_);
      }
      /**
       * <code>repeated int32 rang_action = 2;</code>
       *
       * <pre>
       *操作动作
       * </pre>
       */
      public int getRangActionCount() {
        return rangAction_.size();
      }
      /**
       * <code>repeated int32 rang_action = 2;</code>
       *
       * <pre>
       *操作动作
       * </pre>
       */
      public int getRangAction(int index) {
        return rangAction_.get(index);
      }
      /**
       * <code>repeated int32 rang_action = 2;</code>
       *
       * <pre>
       *操作动作
       * </pre>
       */
      public Builder setRangAction(
          int index, int value) {
        ensureRangActionIsMutable();
        rangAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rang_action = 2;</code>
       *
       * <pre>
       *操作动作
       * </pre>
       */
      public Builder addRangAction(int value) {
        ensureRangActionIsMutable();
        rangAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rang_action = 2;</code>
       *
       * <pre>
       *操作动作
       * </pre>
       */
      public Builder addAllRangAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRangActionIsMutable();
        super.addAll(values, rangAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 rang_action = 2;</code>
       *
       * <pre>
       *操作动作
       * </pre>
       */
      public Builder clearRangAction() {
        rangAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 display_time = 3;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *操作时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *操作时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *操作时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000004;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 3;</code>
       *
       * <pre>
       *操作时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Rang_Pai_lps)
    }

    static {
      defaultInstance = new Rang_Pai_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Rang_Pai_lps)
  }

  public interface Rang_Pai_Request_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 rang_pai = 1;
    /**
     * <code>optional int32 rang_pai = 1;</code>
     *
     * <pre>
     *0：不让，1：让两张，2：让三张，3：让四张
     * </pre>
     */
    boolean hasRangPai();
    /**
     * <code>optional int32 rang_pai = 1;</code>
     *
     * <pre>
     *0：不让，1：让两张，2：让三张，3：让四张
     * </pre>
     */
    int getRangPai();
  }
  /**
   * Protobuf type {@code lpsddz.Rang_Pai_Request_lps}
   *
   * <pre>
   *让牌请求c2s
   * </pre>
   */
  public static final class Rang_Pai_Request_lps extends
      com.google.protobuf.GeneratedMessage
      implements Rang_Pai_Request_lpsOrBuilder {
    // Use Rang_Pai_Request_lps.newBuilder() to construct.
    private Rang_Pai_Request_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Rang_Pai_Request_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Rang_Pai_Request_lps defaultInstance;
    public static Rang_Pai_Request_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Rang_Pai_Request_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Rang_Pai_Request_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              rangPai_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_Request_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_Request_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Rang_Pai_Request_lps> PARSER =
        new com.google.protobuf.AbstractParser<Rang_Pai_Request_lps>() {
      public Rang_Pai_Request_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Rang_Pai_Request_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Rang_Pai_Request_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 rang_pai = 1;
    public static final int RANG_PAI_FIELD_NUMBER = 1;
    private int rangPai_;
    /**
     * <code>optional int32 rang_pai = 1;</code>
     *
     * <pre>
     *0：不让，1：让两张，2：让三张，3：让四张
     * </pre>
     */
    public boolean hasRangPai() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 rang_pai = 1;</code>
     *
     * <pre>
     *0：不让，1：让两张，2：让三张，3：让四张
     * </pre>
     */
    public int getRangPai() {
      return rangPai_;
    }

    private void initFields() {
      rangPai_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, rangPai_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, rangPai_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Rang_Pai_Request_lps}
     *
     * <pre>
     *让牌请求c2s
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_Request_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_Request_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rangPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_Request_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.rangPai_ = rangPai_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps.getDefaultInstance()) return this;
        if (other.hasRangPai()) {
          setRangPai(other.getRangPai());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Request_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 rang_pai = 1;
      private int rangPai_ ;
      /**
       * <code>optional int32 rang_pai = 1;</code>
       *
       * <pre>
       *0：不让，1：让两张，2：让三张，3：让四张
       * </pre>
       */
      public boolean hasRangPai() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 rang_pai = 1;</code>
       *
       * <pre>
       *0：不让，1：让两张，2：让三张，3：让四张
       * </pre>
       */
      public int getRangPai() {
        return rangPai_;
      }
      /**
       * <code>optional int32 rang_pai = 1;</code>
       *
       * <pre>
       *0：不让，1：让两张，2：让三张，3：让四张
       * </pre>
       */
      public Builder setRangPai(int value) {
        bitField0_ |= 0x00000001;
        rangPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rang_pai = 1;</code>
       *
       * <pre>
       *0：不让，1：让两张，2：让三张，3：让四张
       * </pre>
       */
      public Builder clearRangPai() {
        bitField0_ = (bitField0_ & ~0x00000001);
        rangPai_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Rang_Pai_Request_lps)
    }

    static {
      defaultInstance = new Rang_Pai_Request_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Rang_Pai_Request_lps)
  }

  public interface Rang_Pai_Result_lpsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_player = 1;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    int getCurPlayer();

    // optional int32 rang_pai = 2;
    /**
     * <code>optional int32 rang_pai = 2;</code>
     *
     * <pre>
     *0：不让，1：让两张，2：让三张，3：让四张
     * </pre>
     */
    boolean hasRangPai();
    /**
     * <code>optional int32 rang_pai = 2;</code>
     *
     * <pre>
     *0：不让，1：让两张，2：让三张，3：让四张
     * </pre>
     */
    int getRangPai();

    // optional int32 all_rang_pai = 3;
    /**
     * <code>optional int32 all_rang_pai = 3;</code>
     *
     * <pre>
     *让牌总数
     * </pre>
     */
    boolean hasAllRangPai();
    /**
     * <code>optional int32 all_rang_pai = 3;</code>
     *
     * <pre>
     *让牌总数
     * </pre>
     */
    int getAllRangPai();
  }
  /**
   * Protobuf type {@code lpsddz.Rang_Pai_Result_lps}
   *
   * <pre>
   *让牌结果s2c
   * </pre>
   */
  public static final class Rang_Pai_Result_lps extends
      com.google.protobuf.GeneratedMessage
      implements Rang_Pai_Result_lpsOrBuilder {
    // Use Rang_Pai_Result_lps.newBuilder() to construct.
    private Rang_Pai_Result_lps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Rang_Pai_Result_lps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Rang_Pai_Result_lps defaultInstance;
    public static Rang_Pai_Result_lps getDefaultInstance() {
      return defaultInstance;
    }

    public Rang_Pai_Result_lps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Rang_Pai_Result_lps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              rangPai_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              allRangPai_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_Result_lps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_Result_lps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps.Builder.class);
    }

    public static com.google.protobuf.Parser<Rang_Pai_Result_lps> PARSER =
        new com.google.protobuf.AbstractParser<Rang_Pai_Result_lps>() {
      public Rang_Pai_Result_lps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Rang_Pai_Result_lps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Rang_Pai_Result_lps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_player = 1;
    public static final int CUR_PLAYER_FIELD_NUMBER = 1;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *操作的玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // optional int32 rang_pai = 2;
    public static final int RANG_PAI_FIELD_NUMBER = 2;
    private int rangPai_;
    /**
     * <code>optional int32 rang_pai = 2;</code>
     *
     * <pre>
     *0：不让，1：让两张，2：让三张，3：让四张
     * </pre>
     */
    public boolean hasRangPai() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 rang_pai = 2;</code>
     *
     * <pre>
     *0：不让，1：让两张，2：让三张，3：让四张
     * </pre>
     */
    public int getRangPai() {
      return rangPai_;
    }

    // optional int32 all_rang_pai = 3;
    public static final int ALL_RANG_PAI_FIELD_NUMBER = 3;
    private int allRangPai_;
    /**
     * <code>optional int32 all_rang_pai = 3;</code>
     *
     * <pre>
     *让牌总数
     * </pre>
     */
    public boolean hasAllRangPai() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 all_rang_pai = 3;</code>
     *
     * <pre>
     *让牌总数
     * </pre>
     */
    public int getAllRangPai() {
      return allRangPai_;
    }

    private void initFields() {
      curPlayer_ = 0;
      rangPai_ = 0;
      allRangPai_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, rangPai_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, allRangPai_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, rangPai_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, allRangPai_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code lpsddz.Rang_Pai_Result_lps}
     *
     * <pre>
     *让牌结果s2c
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_Result_lps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_Result_lps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps.class, protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps.Builder.class);
      }

      // Construct using protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        rangPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        allRangPai_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.internal_static_lpsddz_Rang_Pai_Result_lps_descriptor;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps getDefaultInstanceForType() {
        return protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps.getDefaultInstance();
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps build() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps buildPartial() {
        protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps result = new protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curPlayer_ = curPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rangPai_ = rangPai_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.allRangPai_ = allRangPai_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps) {
          return mergeFrom((protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps other) {
        if (other == protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps.getDefaultInstance()) return this;
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (other.hasRangPai()) {
          setRangPai(other.getRangPai());
        }
        if (other.hasAllRangPai()) {
          setAllRangPai(other.getAllRangPai());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.lpsddz.lpsDdzRsp.Rang_Pai_Result_lps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_player = 1;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000001;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *操作的玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 rang_pai = 2;
      private int rangPai_ ;
      /**
       * <code>optional int32 rang_pai = 2;</code>
       *
       * <pre>
       *0：不让，1：让两张，2：让三张，3：让四张
       * </pre>
       */
      public boolean hasRangPai() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 rang_pai = 2;</code>
       *
       * <pre>
       *0：不让，1：让两张，2：让三张，3：让四张
       * </pre>
       */
      public int getRangPai() {
        return rangPai_;
      }
      /**
       * <code>optional int32 rang_pai = 2;</code>
       *
       * <pre>
       *0：不让，1：让两张，2：让三张，3：让四张
       * </pre>
       */
      public Builder setRangPai(int value) {
        bitField0_ |= 0x00000002;
        rangPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rang_pai = 2;</code>
       *
       * <pre>
       *0：不让，1：让两张，2：让三张，3：让四张
       * </pre>
       */
      public Builder clearRangPai() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rangPai_ = 0;
        onChanged();
        return this;
      }

      // optional int32 all_rang_pai = 3;
      private int allRangPai_ ;
      /**
       * <code>optional int32 all_rang_pai = 3;</code>
       *
       * <pre>
       *让牌总数
       * </pre>
       */
      public boolean hasAllRangPai() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 all_rang_pai = 3;</code>
       *
       * <pre>
       *让牌总数
       * </pre>
       */
      public int getAllRangPai() {
        return allRangPai_;
      }
      /**
       * <code>optional int32 all_rang_pai = 3;</code>
       *
       * <pre>
       *让牌总数
       * </pre>
       */
      public Builder setAllRangPai(int value) {
        bitField0_ |= 0x00000004;
        allRangPai_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 all_rang_pai = 3;</code>
       *
       * <pre>
       *让牌总数
       * </pre>
       */
      public Builder clearAllRangPai() {
        bitField0_ = (bitField0_ & ~0x00000004);
        allRangPai_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lpsddz.Rang_Pai_Result_lps)
    }

    static {
      defaultInstance = new Rang_Pai_Result_lps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:lpsddz.Rang_Pai_Result_lps)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_OutCardData_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_OutCardData_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_PukeGameEndDdz_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_PukeGameEndDdz_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_TableResponseDDZ_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_TableResponseDDZ_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_GameStartDDZ_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_GameStartDDZ_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_ReDispath_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_ReDispath_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_CallBankerResult_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_CallBankerResult_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_CallBankerDDZ_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_CallBankerDDZ_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_AddTimesDDZ_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_AddTimesDDZ_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_AddTimesDDZResult_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_AddTimesDDZResult_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Effect_Action_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Effect_Action_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Call_Banker_Request_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Call_Banker_Request_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Add_Times_Request_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Add_Times_Request_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Fen_Luo_Send_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Fen_Luo_Send_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Fen_Luo_Request_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Fen_Luo_Request_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Fen_Luo_Result_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Fen_Luo_Result_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Swap_Card_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Swap_Card_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Swap_Card_Request_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Swap_Card_Request_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Swap_Card_Result_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Swap_Card_Result_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Send_Last_Card_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Send_Last_Card_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Record_Cards_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Record_Cards_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Rang_Pai_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Rang_Pai_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Rang_Pai_Request_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Rang_Pai_Request_lps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_lpsddz_Rang_Pai_Result_lps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_lpsddz_Rang_Pai_Result_lps_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025ddz/lpsddzProto.proto\022\006lpsddz\032\024basic/p" +
      "rotocol.proto\"\242\003\n\017OutCardData_lps\022\027\n\017out" +
      "_card_player\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\031" +
      "\n\021change_cards_data\030\003 \003(\005\022\023\n\013cards_count" +
      "\030\004 \001(\005\022\021\n\tcard_type\030\005 \001(\005\022\022\n\ncur_player\030" +
      "\006 \001(\005\022\031\n\021cur_player_ya_pai\030\007 \001(\005\022\025\n\rpr_c" +
      "ards_data\030\010 \003(\005\022\034\n\024pr_change_cards_data\030" +
      "\t \003(\005\022\026\n\016pr_cards_count\030\n \001(\005\022\030\n\020pr_out_" +
      "card_type\030\013 \001(\005\022\024\n\014is_first_out\030\014 \001(\005\022\024\n" +
      "\014display_time\030\r \001(\005\022\026\n\016difen_bomb_des\030\016 ",
      "\003(\t\022\027\n\017user_card_count\030\017 \003(\005\022,\n\017user_car" +
      "ds_data\030\020 \003(\0132\023.Int32ArrayResponse\"\310\004\n\022P" +
      "ukeGameEndDdz_lps\022\034\n\troom_info\030\001 \001(\0132\t.R" +
      "oomInfo\022\021\n\tcur_round\030\002 \001(\005\022\022\n\ngame_round" +
      "\030\003 \001(\005\022\022\n\ncard_count\030\004 \003(\005\022\'\n\ncards_data" +
      "\030\005 \003(\0132\023.Int32ArrayResponse\022\025\n\rboom_card" +
      "_num\030\006 \003(\005\022\021\n\tend_score\030\007 \003(\005\022\022\n\nplayer_" +
      "num\030\010 \001(\005\022\025\n\rbanker_player\030\t \001(\005\022\016\n\006reas" +
      "on\030\n \001(\005\022\030\n\020chun_tian_player\030\013 \003(\005\022\023\n\013is" +
      "_add_time\030\024 \003(\010\022\022\n\ncell_score\030\022 \001(\005\022\r\n\005t",
      "imes\030\023 \001(\005\022\020\n\010boom_num\030\025 \001(\005\022\022\n\nqiang_ti" +
      "me\030\026 \001(\005\022\025\n\rchuntian_time\030\027 \001(\005\022\022\n\ndipai" +
      "_time\030\031 \001(\005\022\031\n\021all_boom_card_num\030\014 \003(\005\022\025" +
      "\n\rall_end_score\030\r \003(\005\022\025\n\rend_score_max\030\016" +
      " \003(\005\022\017\n\007win_num\030\017 \003(\005\022\020\n\010lose_num\030\020 \003(\005\022" +
      "$\n\007players\030\021 \003(\0132\023.RoomPlayerResponse\022\026\n" +
      "\016all_banker_num\030\030 \003(\005\"\270\007\n\024TableResponseD" +
      "DZ_lps\022\025\n\rbanker_player\030\001 \001(\005\022\026\n\016current" +
      "_player\030\002 \001(\005\022\023\n\013prev_player\030\003 \001(\005\022\017\n\007tr" +
      "ustee\030\004 \003(\010\022+\n\016out_cards_data\030\005 \003(\0132\023.In",
      "t32ArrayResponse\022.\n\021change_cards_data\030\006 " +
      "\003(\0132\023.Int32ArrayResponse\022\027\n\017out_cards_co" +
      "unt\030\007 \003(\005\022\023\n\013player_pass\030\010 \003(\005\022\021\n\tcard_t" +
      "ype\030\t \003(\005\022\032\n\022pr_out_card_player\030\n \001(\005\022\034\n" +
      "\024pr_change_cards_data\030\013 \003(\005\022\025\n\rpr_cards_" +
      "data\030\014 \003(\005\022\026\n\016pr_cards_count\030\r \001(\005\022\030\n\020pr" +
      "_out_card_type\030\016 \001(\005\022\022\n\nmagic_card\030\017 \001(\005" +
      "\022\024\n\014is_first_out\030\020 \001(\005\022\024\n\014display_time\030\021" +
      " \001(\005\022\022\n\ncard_count\030\022 \003(\005\022\'\n\ncards_data\030\023" +
      " \003(\0132\023.Int32ArrayResponse\022\034\n\troom_info\030\024",
      " \001(\0132\t.RoomInfo\022$\n\007players\030\025 \003(\0132\023.RoomP" +
      "layerResponse\022\024\n\014qiang_banker\030\026 \003(\005\022\023\n\013c" +
      "all_banker\030\027 \003(\005\022\021\n\tcall_type\030\030 \001(\005\022\023\n\013c" +
      "all_action\030\031 \003(\005\022\024\n\014qiang_action\030\032 \003(\005\022\021" +
      "\n\tadd_times\030\033 \003(\005\022\025\n\rdi_card_count\030\034 \001(\005" +
      "\022\025\n\rdi_cards_data\030\035 \003(\005\022\025\n\rdi_cards_type" +
      "\030\036 \001(\005\022\026\n\016difen_bomb_des\030\037 \003(\t\022\031\n\021cur_pl" +
      "ayer_ya_pai\030  \001(\005\022\014\n\004piao\030! \003(\005\022\017\n\007is_pi" +
      "ao\030\" \003(\005\022\022\n\ncan_select\030# \003(\010\022\023\n\013select_u" +
      "ser\030$ \003(\010\022\024\n\014all_rang_pai\030% \001(\005\022\027\n\017curr_",
      "add_player\030& \001(\005\"\332\001\n\020GameStartDDZ_lps\022\034\n" +
      "\troom_info\030\001 \001(\0132\t.RoomInfo\022\022\n\ncard_coun" +
      "t\030\002 \003(\005\022\'\n\ncards_data\030\003 \003(\0132\023.Int32Array" +
      "Response\022\026\n\016difen_bomb_des\030\004 \003(\t\022$\n\007play" +
      "ers\030\005 \003(\0132\023.RoomPlayerResponse\022\031\n\021di_pai" +
      "_card_count\030\006 \001(\005\022\022\n\nmagic_card\030\007 \001(\005\"\270\001" +
      "\n\rReDispath_lps\022\026\n\016send_card_type\030\001 \001(\005\022" +
      "\022\n\ncard_count\030\002 \003(\005\022\'\n\ncards_data\030\003 \003(\0132" +
      "\023.Int32ArrayResponse\022\022\n\nmagic_card\030\004 \001(\005" +
      "\022\022\n\nsend_cards\030\005 \003(\005\022\027\n\017first_sendchair\030",
      "\006 \001(\005\022\021\n\tming_card\030\007 \001(\005\"\307\002\n\024CallBankerR" +
      "esult_lps\022\024\n\014qiang_player\030\001 \001(\005\022\023\n\013call_" +
      "player\030\002 \001(\005\022\024\n\014qiang_action\030\003 \001(\005\022\023\n\013ca" +
      "ll_action\030\004 \001(\005\022\026\n\016difen_bomb_des\030\005 \003(\t\022" +
      "\025\n\rbanker_player\030\006 \001(\005\022\022\n\ncard_count\030\007 \001" +
      "(\005\022\022\n\ncards_data\030\010 \003(\005\022\022\n\ncards_type\030\t \001" +
      "(\005\022\027\n\017user_card_count\030\n \003(\005\022,\n\017user_card" +
      "s_data\030\013 \003(\0132\023.Int32ArrayResponse\022\024\n\014all" +
      "_rang_pai\030\014 \001(\005\022\021\n\tcall_type\030\r \001(\005\"\310\001\n\021C" +
      "allBankerDDZ_lps\022\034\n\024qiang_current_player",
      "\030\001 \001(\005\022\033\n\023call_current_player\030\002 \001(\005\022\034\n\024q" +
      "iang_current_action\030\003 \003(\005\022\033\n\023call_curren" +
      "t_action\030\004 \003(\005\022\021\n\tcall_type\030\005 \001(\005\022\024\n\014dis" +
      "play_time\030\006 \001(\005\022\024\n\014fei_pai_card\030\007 \001(\005\"W\n" +
      "\017AddTimesDDZ_lps\022\026\n\016addtimesaction\030\001 \003(\005" +
      "\022\024\n\014display_time\030\006 \001(\005\022\026\n\016current_player" +
      "\030\007 \001(\005\"_\n\025AddTimesDDZResult_lps\022\026\n\016addti" +
      "mesaction\030\001 \001(\005\022\026\n\016opreate_player\030\002 \001(\005\022" +
      "\026\n\016difen_bomb_des\030\003 \003(\t\"=\n\021Effect_Action" +
      "_lps\022\024\n\014smile_status\030\001 \003(\005\022\022\n\ncry_status",
      "\030\002 \003(\005\"R\n\027Call_Banker_Request_lps\022\032\n\022sel" +
      "ect_call_banker\030\001 \001(\005\022\033\n\023select_qiang_ba" +
      "nker\030\002 \001(\005\"*\n\025Add_Times_Request_lps\022\021\n\ta" +
      "dd_times\030\001 \001(\005\"e\n\020Fen_Luo_Send_lps\022\022\n\ncu" +
      "r_player\030\001 \001(\005\022\022\n\ncan_select\030\002 \003(\010\022\023\n\013se" +
      "lect_user\030\003 \003(\010\022\024\n\014display_time\030\004 \001(\005\"(\n" +
      "\023Fen_Luo_Request_lps\022\021\n\tluo_index\030\001 \001(\005\"" +
      "\237\001\n\022Fen_Luo_Result_lps\022\026\n\016control_player" +
      "\030\001 \001(\005\022\027\n\017user_card_count\030\002 \001(\005\022,\n\017user_" +
      "cards_data\030\003 \001(\0132\023.Int32ArrayResponse\022\027\n",
      "\017choose_isfinish\030\004 \001(\010\022\021\n\tluo_index\030\005 \001(" +
      "\005\"#\n\rSwap_Card_lps\022\022\n\nswap_state\030\001 \003(\010\"*" +
      "\n\025Swap_Card_Request_lps\022\021\n\tswap_card\030\001 \003" +
      "(\005\"\333\001\n\024Swap_Card_Result_lps\022\022\n\ncur_playe" +
      "r\030\001 \001(\005\022\025\n\rswap_isfinish\030\002 \001(\010\022\020\n\010swap_s" +
      "eq\030\003 \001(\005\022\'\n\nswap_cards\030\004 \003(\0132\023.Int32Arra" +
      "yResponse\022\027\n\017user_card_count\030\005 \001(\005\022,\n\017us" +
      "er_cards_data\030\006 \001(\0132\023.Int32ArrayResponse" +
      "\022\026\n\016change_outCard\030\007 \003(\005\"\306\001\n\022Send_Last_C" +
      "ard_lps\022\022\n\ncard_count\030\001 \001(\005\022\022\n\ncards_dat",
      "a\030\002 \003(\005\022\022\n\ncards_type\030\003 \001(\005\022\023\n\013cards_tim" +
      "es\030\004 \001(\005\022\025\n\rrangpai_count\030\005 \001(\005\022\022\n\ngame_" +
      "times\030\006 \001(\005\022\031\n\021show_rangpai_tips\030\007 \001(\010\022\031" +
      "\n\021show_dipai_action\030\010 \001(\010\"(\n\020Record_Card" +
      "s_lps\022\024\n\014record_cards\030\001 \003(\005\"M\n\014Rang_Pai_" +
      "lps\022\022\n\ncur_player\030\001 \001(\005\022\023\n\013rang_action\030\002" +
      " \003(\005\022\024\n\014display_time\030\003 \001(\005\"(\n\024Rang_Pai_R" +
      "equest_lps\022\020\n\010rang_pai\030\001 \001(\005\"Q\n\023Rang_Pai" +
      "_Result_lps\022\022\n\ncur_player\030\001 \001(\005\022\020\n\010rang_" +
      "pai\030\002 \001(\005\022\024\n\014all_rang_pai\030\003 \001(\005B\"\n\025proto",
      "buf.clazz.lpsddzB\tlpsDdzRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_lpsddz_OutCardData_lps_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_lpsddz_OutCardData_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_OutCardData_lps_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "ChangeCardsData", "CardsCount", "CardType", "CurPlayer", "CurPlayerYaPai", "PrCardsData", "PrChangeCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "DifenBombDes", "UserCardCount", "UserCardsData", });
          internal_static_lpsddz_PukeGameEndDdz_lps_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_lpsddz_PukeGameEndDdz_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_PukeGameEndDdz_lps_descriptor,
              new java.lang.String[] { "RoomInfo", "CurRound", "GameRound", "CardCount", "CardsData", "BoomCardNum", "EndScore", "PlayerNum", "BankerPlayer", "Reason", "ChunTianPlayer", "IsAddTime", "CellScore", "Times", "BoomNum", "QiangTime", "ChuntianTime", "DipaiTime", "AllBoomCardNum", "AllEndScore", "EndScoreMax", "WinNum", "LoseNum", "Players", "AllBankerNum", });
          internal_static_lpsddz_TableResponseDDZ_lps_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_lpsddz_TableResponseDDZ_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_TableResponseDDZ_lps_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "ChangeCardsData", "OutCardsCount", "PlayerPass", "CardType", "PrOutCardPlayer", "PrChangeCardsData", "PrCardsData", "PrCardsCount", "PrOutCardType", "MagicCard", "IsFirstOut", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "QiangBanker", "CallBanker", "CallType", "CallAction", "QiangAction", "AddTimes", "DiCardCount", "DiCardsData", "DiCardsType", "DifenBombDes", "CurPlayerYaPai", "Piao", "IsPiao", "CanSelect", "SelectUser", "AllRangPai", "CurrAddPlayer", });
          internal_static_lpsddz_GameStartDDZ_lps_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_lpsddz_GameStartDDZ_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_GameStartDDZ_lps_descriptor,
              new java.lang.String[] { "RoomInfo", "CardCount", "CardsData", "DifenBombDes", "Players", "DiPaiCardCount", "MagicCard", });
          internal_static_lpsddz_ReDispath_lps_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_lpsddz_ReDispath_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_ReDispath_lps_descriptor,
              new java.lang.String[] { "SendCardType", "CardCount", "CardsData", "MagicCard", "SendCards", "FirstSendchair", "MingCard", });
          internal_static_lpsddz_CallBankerResult_lps_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_lpsddz_CallBankerResult_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_CallBankerResult_lps_descriptor,
              new java.lang.String[] { "QiangPlayer", "CallPlayer", "QiangAction", "CallAction", "DifenBombDes", "BankerPlayer", "CardCount", "CardsData", "CardsType", "UserCardCount", "UserCardsData", "AllRangPai", "CallType", });
          internal_static_lpsddz_CallBankerDDZ_lps_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_lpsddz_CallBankerDDZ_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_CallBankerDDZ_lps_descriptor,
              new java.lang.String[] { "QiangCurrentPlayer", "CallCurrentPlayer", "QiangCurrentAction", "CallCurrentAction", "CallType", "DisplayTime", "FeiPaiCard", });
          internal_static_lpsddz_AddTimesDDZ_lps_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_lpsddz_AddTimesDDZ_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_AddTimesDDZ_lps_descriptor,
              new java.lang.String[] { "Addtimesaction", "DisplayTime", "CurrentPlayer", });
          internal_static_lpsddz_AddTimesDDZResult_lps_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_lpsddz_AddTimesDDZResult_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_AddTimesDDZResult_lps_descriptor,
              new java.lang.String[] { "Addtimesaction", "OpreatePlayer", "DifenBombDes", });
          internal_static_lpsddz_Effect_Action_lps_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_lpsddz_Effect_Action_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Effect_Action_lps_descriptor,
              new java.lang.String[] { "SmileStatus", "CryStatus", });
          internal_static_lpsddz_Call_Banker_Request_lps_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_lpsddz_Call_Banker_Request_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Call_Banker_Request_lps_descriptor,
              new java.lang.String[] { "SelectCallBanker", "SelectQiangBanker", });
          internal_static_lpsddz_Add_Times_Request_lps_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_lpsddz_Add_Times_Request_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Add_Times_Request_lps_descriptor,
              new java.lang.String[] { "AddTimes", });
          internal_static_lpsddz_Fen_Luo_Send_lps_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_lpsddz_Fen_Luo_Send_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Fen_Luo_Send_lps_descriptor,
              new java.lang.String[] { "CurPlayer", "CanSelect", "SelectUser", "DisplayTime", });
          internal_static_lpsddz_Fen_Luo_Request_lps_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_lpsddz_Fen_Luo_Request_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Fen_Luo_Request_lps_descriptor,
              new java.lang.String[] { "LuoIndex", });
          internal_static_lpsddz_Fen_Luo_Result_lps_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_lpsddz_Fen_Luo_Result_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Fen_Luo_Result_lps_descriptor,
              new java.lang.String[] { "ControlPlayer", "UserCardCount", "UserCardsData", "ChooseIsfinish", "LuoIndex", });
          internal_static_lpsddz_Swap_Card_lps_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_lpsddz_Swap_Card_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Swap_Card_lps_descriptor,
              new java.lang.String[] { "SwapState", });
          internal_static_lpsddz_Swap_Card_Request_lps_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_lpsddz_Swap_Card_Request_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Swap_Card_Request_lps_descriptor,
              new java.lang.String[] { "SwapCard", });
          internal_static_lpsddz_Swap_Card_Result_lps_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_lpsddz_Swap_Card_Result_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Swap_Card_Result_lps_descriptor,
              new java.lang.String[] { "CurPlayer", "SwapIsfinish", "SwapSeq", "SwapCards", "UserCardCount", "UserCardsData", "ChangeOutCard", });
          internal_static_lpsddz_Send_Last_Card_lps_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_lpsddz_Send_Last_Card_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Send_Last_Card_lps_descriptor,
              new java.lang.String[] { "CardCount", "CardsData", "CardsType", "CardsTimes", "RangpaiCount", "GameTimes", "ShowRangpaiTips", "ShowDipaiAction", });
          internal_static_lpsddz_Record_Cards_lps_descriptor =
            getDescriptor().getMessageTypes().get(19);
          internal_static_lpsddz_Record_Cards_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Record_Cards_lps_descriptor,
              new java.lang.String[] { "RecordCards", });
          internal_static_lpsddz_Rang_Pai_lps_descriptor =
            getDescriptor().getMessageTypes().get(20);
          internal_static_lpsddz_Rang_Pai_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Rang_Pai_lps_descriptor,
              new java.lang.String[] { "CurPlayer", "RangAction", "DisplayTime", });
          internal_static_lpsddz_Rang_Pai_Request_lps_descriptor =
            getDescriptor().getMessageTypes().get(21);
          internal_static_lpsddz_Rang_Pai_Request_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Rang_Pai_Request_lps_descriptor,
              new java.lang.String[] { "RangPai", });
          internal_static_lpsddz_Rang_Pai_Result_lps_descriptor =
            getDescriptor().getMessageTypes().get(22);
          internal_static_lpsddz_Rang_Pai_Result_lps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_lpsddz_Rang_Pai_Result_lps_descriptor,
              new java.lang.String[] { "CurPlayer", "RangPai", "AllRangPai", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
