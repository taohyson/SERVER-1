// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtz/dtz.proto

package protobuf.clazz.dtz;

public final class DTZPro {
  private DTZPro() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ShowAutoOutCardTimeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 target_player = 1;
    /**
     * <code>required int32 target_player = 1;</code>
     */
    boolean hasTargetPlayer();
    /**
     * <code>required int32 target_player = 1;</code>
     */
    int getTargetPlayer();

    // required int32 displayer_time = 2;
    /**
     * <code>required int32 displayer_time = 2;</code>
     */
    boolean hasDisplayerTime();
    /**
     * <code>required int32 displayer_time = 2;</code>
     */
    int getDisplayerTime();
  }
  /**
   * Protobuf type {@code dtz.ShowAutoOutCardTime}
   */
  public static final class ShowAutoOutCardTime extends
      com.google.protobuf.GeneratedMessage
      implements ShowAutoOutCardTimeOrBuilder {
    // Use ShowAutoOutCardTime.newBuilder() to construct.
    private ShowAutoOutCardTime(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ShowAutoOutCardTime(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ShowAutoOutCardTime defaultInstance;
    public static ShowAutoOutCardTime getDefaultInstance() {
      return defaultInstance;
    }

    public ShowAutoOutCardTime getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ShowAutoOutCardTime(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              targetPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              displayerTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_ShowAutoOutCardTime_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_ShowAutoOutCardTime_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime.class, protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime.Builder.class);
    }

    public static com.google.protobuf.Parser<ShowAutoOutCardTime> PARSER =
        new com.google.protobuf.AbstractParser<ShowAutoOutCardTime>() {
      public ShowAutoOutCardTime parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ShowAutoOutCardTime(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ShowAutoOutCardTime> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 target_player = 1;
    public static final int TARGET_PLAYER_FIELD_NUMBER = 1;
    private int targetPlayer_;
    /**
     * <code>required int32 target_player = 1;</code>
     */
    public boolean hasTargetPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 target_player = 1;</code>
     */
    public int getTargetPlayer() {
      return targetPlayer_;
    }

    // required int32 displayer_time = 2;
    public static final int DISPLAYER_TIME_FIELD_NUMBER = 2;
    private int displayerTime_;
    /**
     * <code>required int32 displayer_time = 2;</code>
     */
    public boolean hasDisplayerTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 displayer_time = 2;</code>
     */
    public int getDisplayerTime() {
      return displayerTime_;
    }

    private void initFields() {
      targetPlayer_ = 0;
      displayerTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTargetPlayer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDisplayerTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, targetPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, displayerTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, targetPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, displayerTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dtz.ShowAutoOutCardTime}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTimeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_ShowAutoOutCardTime_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_ShowAutoOutCardTime_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime.class, protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime.Builder.class);
      }

      // Construct using protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        targetPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        displayerTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_ShowAutoOutCardTime_descriptor;
      }

      public protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime getDefaultInstanceForType() {
        return protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime.getDefaultInstance();
      }

      public protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime build() {
        protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime buildPartial() {
        protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime result = new protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.targetPlayer_ = targetPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayerTime_ = displayerTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime) {
          return mergeFrom((protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime other) {
        if (other == protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime.getDefaultInstance()) return this;
        if (other.hasTargetPlayer()) {
          setTargetPlayer(other.getTargetPlayer());
        }
        if (other.hasDisplayerTime()) {
          setDisplayerTime(other.getDisplayerTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTargetPlayer()) {
          
          return false;
        }
        if (!hasDisplayerTime()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dtz.DTZPro.ShowAutoOutCardTime) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 target_player = 1;
      private int targetPlayer_ ;
      /**
       * <code>required int32 target_player = 1;</code>
       */
      public boolean hasTargetPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 target_player = 1;</code>
       */
      public int getTargetPlayer() {
        return targetPlayer_;
      }
      /**
       * <code>required int32 target_player = 1;</code>
       */
      public Builder setTargetPlayer(int value) {
        bitField0_ |= 0x00000001;
        targetPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 target_player = 1;</code>
       */
      public Builder clearTargetPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        targetPlayer_ = 0;
        onChanged();
        return this;
      }

      // required int32 displayer_time = 2;
      private int displayerTime_ ;
      /**
       * <code>required int32 displayer_time = 2;</code>
       */
      public boolean hasDisplayerTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 displayer_time = 2;</code>
       */
      public int getDisplayerTime() {
        return displayerTime_;
      }
      /**
       * <code>required int32 displayer_time = 2;</code>
       */
      public Builder setDisplayerTime(int value) {
        bitField0_ |= 0x00000002;
        displayerTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 displayer_time = 2;</code>
       */
      public Builder clearDisplayerTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        displayerTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dtz.ShowAutoOutCardTime)
    }

    static {
      defaultInstance = new ShowAutoOutCardTime(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dtz.ShowAutoOutCardTime)
  }

  public interface OutCardDataDTZOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // optional int32 cards_count = 3;
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 4;
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 5;
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 6;
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 7;
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 8;
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional bool is_first_out = 9;
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean getIsFirstOut();

    // repeated int32 user_can_out_data = 10;
    /**
     * <code>repeated int32 user_can_out_data = 10;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 10;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 10;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 11;
    /**
     * <code>optional int32 user_can_out_count = 11;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 11;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCount();

    // repeated int32 user_get_score = 12;
    /**
     * <code>repeated int32 user_get_score = 12;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetScoreList();
    /**
     * <code>repeated int32 user_get_score = 12;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScoreCount();
    /**
     * <code>repeated int32 user_get_score = 12;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScore(int index);

    // repeated int32 hand_card_count = 13;
    /**
     * <code>repeated int32 hand_card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_card_data = 18;
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
     *
     * <pre>
     * 手牌数目
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
     *
     * <pre>
     * 手牌数目
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
     *
     * <pre>
     * 手牌数目
     * </pre>
     */
    int getHandCardDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
     *
     * <pre>
     * 手牌数目
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
     *
     * <pre>
     * 手牌数目
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
        int index);

    // repeated int32 win_order = 14;
    /**
     * <code>repeated int32 win_order = 14;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 14;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 14;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // optional bool is_have_not_card = 15;
    /**
     * <code>optional bool is_have_not_card = 15;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    boolean hasIsHaveNotCard();
    /**
     * <code>optional bool is_have_not_card = 15;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    boolean getIsHaveNotCard();

    // optional bool have_card_than_out = 16;
    /**
     * <code>optional bool have_card_than_out = 16;</code>
     *
     * <pre>
     * 有牌必出
     * </pre>
     */
    boolean hasHaveCardThanOut();
    /**
     * <code>optional bool have_card_than_out = 16;</code>
     *
     * <pre>
     * 有牌必出
     * </pre>
     */
    boolean getHaveCardThanOut();

    // optional int32 display_time = 17;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     * 多少秒后自动出牌
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     * 多少秒后自动出牌
     * </pre>
     */
    int getDisplayTime();

    // optional int32 pine_count = 19;
    /**
     * <code>optional int32 pine_count = 19;</code>
     *
     * <pre>
     * 飞机牌
     * </pre>
     */
    boolean hasPineCount();
    /**
     * <code>optional int32 pine_count = 19;</code>
     *
     * <pre>
     * 飞机牌
     * </pre>
     */
    int getPineCount();
  }
  /**
   * Protobuf type {@code dtz.OutCardDataDTZ}
   *
   * <pre>
   *用户出牌
   * </pre>
   */
  public static final class OutCardDataDTZ extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataDTZOrBuilder {
    // Use OutCardDataDTZ.newBuilder() to construct.
    private OutCardDataDTZ(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataDTZ(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataDTZ defaultInstance;
    public static OutCardDataDTZ getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataDTZ getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataDTZ(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readBool();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              bitField0_ |= 0x00000080;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              userGetScore_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              bitField0_ |= 0x00000100;
              isHaveNotCard_ = input.readBool();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000200;
              haveCardThanOut_ = input.readBool();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000400;
              displayTime_ = input.readInt32();
              break;
            }
            case 146: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                handCardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00002000;
              }
              handCardData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 152: {
              bitField0_ |= 0x00000800;
              pineCount_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          handCardData_ = java.util.Collections.unmodifiableList(handCardData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_OutCardDataDTZ_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_OutCardDataDTZ_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dtz.DTZPro.OutCardDataDTZ.class, protobuf.clazz.dtz.DTZPro.OutCardDataDTZ.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataDTZ> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataDTZ>() {
      public OutCardDataDTZ parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataDTZ(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataDTZ> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // optional int32 cards_count = 3;
    public static final int CARDS_COUNT_FIELD_NUMBER = 3;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 3;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 4;
    public static final int CARD_TYPE_FIELD_NUMBER = 4;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 4;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 5;
    public static final int CUR_PLAYER_FIELD_NUMBER = 5;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 5;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 6;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 6;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 7;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 7;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 7;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 8;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 8;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional bool is_first_out = 9;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 9;
    private boolean isFirstOut_;
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool is_first_out = 9;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean getIsFirstOut() {
      return isFirstOut_;
    }

    // repeated int32 user_can_out_data = 10;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 10;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 10;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 10;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 11;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 11;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 11;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 user_can_out_count = 11;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // repeated int32 user_get_score = 12;
    public static final int USER_GET_SCORE_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> userGetScore_;
    /**
     * <code>repeated int32 user_get_score = 12;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetScoreList() {
      return userGetScore_;
    }
    /**
     * <code>repeated int32 user_get_score = 12;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScoreCount() {
      return userGetScore_.size();
    }
    /**
     * <code>repeated int32 user_get_score = 12;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScore(int index) {
      return userGetScore_.get(index);
    }

    // repeated int32 hand_card_count = 13;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_card_data = 18;
    public static final int HAND_CARD_DATA_FIELD_NUMBER = 18;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
     *
     * <pre>
     * 手牌数目
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardDataList() {
      return handCardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
     *
     * <pre>
     * 手牌数目
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardDataOrBuilderList() {
      return handCardData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
     *
     * <pre>
     * 手牌数目
     * </pre>
     */
    public int getHandCardDataCount() {
      return handCardData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
     *
     * <pre>
     * 手牌数目
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index) {
      return handCardData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
     *
     * <pre>
     * 手牌数目
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
        int index) {
      return handCardData_.get(index);
    }

    // repeated int32 win_order = 14;
    public static final int WIN_ORDER_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 14;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 14;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 14;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // optional bool is_have_not_card = 15;
    public static final int IS_HAVE_NOT_CARD_FIELD_NUMBER = 15;
    private boolean isHaveNotCard_;
    /**
     * <code>optional bool is_have_not_card = 15;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    public boolean hasIsHaveNotCard() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool is_have_not_card = 15;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    public boolean getIsHaveNotCard() {
      return isHaveNotCard_;
    }

    // optional bool have_card_than_out = 16;
    public static final int HAVE_CARD_THAN_OUT_FIELD_NUMBER = 16;
    private boolean haveCardThanOut_;
    /**
     * <code>optional bool have_card_than_out = 16;</code>
     *
     * <pre>
     * 有牌必出
     * </pre>
     */
    public boolean hasHaveCardThanOut() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool have_card_than_out = 16;</code>
     *
     * <pre>
     * 有牌必出
     * </pre>
     */
    public boolean getHaveCardThanOut() {
      return haveCardThanOut_;
    }

    // optional int32 display_time = 17;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 17;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     * 多少秒后自动出牌
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 display_time = 17;</code>
     *
     * <pre>
     * 多少秒后自动出牌
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional int32 pine_count = 19;
    public static final int PINE_COUNT_FIELD_NUMBER = 19;
    private int pineCount_;
    /**
     * <code>optional int32 pine_count = 19;</code>
     *
     * <pre>
     * 飞机牌
     * </pre>
     */
    public boolean hasPineCount() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 pine_count = 19;</code>
     *
     * <pre>
     * 飞机牌
     * </pre>
     */
    public int getPineCount() {
      return pineCount_;
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = false;
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      userGetScore_ = java.util.Collections.emptyList();
      handCardCount_ = java.util.Collections.emptyList();
      handCardData_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
      isHaveNotCard_ = false;
      haveCardThanOut_ = false;
      displayTime_ = 0;
      pineCount_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(6, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(9, isFirstOut_);
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(10, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(11, userCanOutCount_);
      }
      for (int i = 0; i < userGetScore_.size(); i++) {
        output.writeInt32(12, userGetScore_.get(i));
      }
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(13, handCardCount_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(14, winOrder_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(15, isHaveNotCard_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(16, haveCardThanOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(17, displayTime_);
      }
      for (int i = 0; i < handCardData_.size(); i++) {
        output.writeMessage(18, handCardData_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(19, pineCount_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, isFirstOut_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, userCanOutCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userGetScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetScore_.get(i));
        }
        size += dataSize;
        size += 1 * getUserGetScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 1 * getWinOrderList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, isHaveNotCard_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, haveCardThanOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, displayTime_);
      }
      for (int i = 0; i < handCardData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, handCardData_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, pineCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dtz.DTZPro.OutCardDataDTZ prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dtz.OutCardDataDTZ}
     *
     * <pre>
     *用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dtz.DTZPro.OutCardDataDTZOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_OutCardDataDTZ_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_OutCardDataDTZ_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dtz.DTZPro.OutCardDataDTZ.class, protobuf.clazz.dtz.DTZPro.OutCardDataDTZ.Builder.class);
      }

      // Construct using protobuf.clazz.dtz.DTZPro.OutCardDataDTZ.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        isFirstOut_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        if (handCardDataBuilder_ == null) {
          handCardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          handCardDataBuilder_.clear();
        }
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        isHaveNotCard_ = false;
        bitField0_ = (bitField0_ & ~0x00008000);
        haveCardThanOut_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        pineCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_OutCardDataDTZ_descriptor;
      }

      public protobuf.clazz.dtz.DTZPro.OutCardDataDTZ getDefaultInstanceForType() {
        return protobuf.clazz.dtz.DTZPro.OutCardDataDTZ.getDefaultInstance();
      }

      public protobuf.clazz.dtz.DTZPro.OutCardDataDTZ build() {
        protobuf.clazz.dtz.DTZPro.OutCardDataDTZ result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dtz.DTZPro.OutCardDataDTZ buildPartial() {
        protobuf.clazz.dtz.DTZPro.OutCardDataDTZ result = new protobuf.clazz.dtz.DTZPro.OutCardDataDTZ(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000080;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.userGetScore_ = userGetScore_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardDataBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000)) {
            handCardData_ = java.util.Collections.unmodifiableList(handCardData_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.handCardData_ = handCardData_;
        } else {
          result.handCardData_ = handCardDataBuilder_.build();
        }
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.winOrder_ = winOrder_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.isHaveNotCard_ = isHaveNotCard_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.haveCardThanOut_ = haveCardThanOut_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.pineCount_ = pineCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dtz.DTZPro.OutCardDataDTZ) {
          return mergeFrom((protobuf.clazz.dtz.DTZPro.OutCardDataDTZ)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dtz.DTZPro.OutCardDataDTZ other) {
        if (other == protobuf.clazz.dtz.DTZPro.OutCardDataDTZ.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (!other.userGetScore_.isEmpty()) {
          if (userGetScore_.isEmpty()) {
            userGetScore_ = other.userGetScore_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureUserGetScoreIsMutable();
            userGetScore_.addAll(other.userGetScore_);
          }
          onChanged();
        }
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardDataBuilder_ == null) {
          if (!other.handCardData_.isEmpty()) {
            if (handCardData_.isEmpty()) {
              handCardData_ = other.handCardData_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureHandCardDataIsMutable();
              handCardData_.addAll(other.handCardData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardData_.isEmpty()) {
            if (handCardDataBuilder_.isEmpty()) {
              handCardDataBuilder_.dispose();
              handCardDataBuilder_ = null;
              handCardData_ = other.handCardData_;
              bitField0_ = (bitField0_ & ~0x00002000);
              handCardDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardDataFieldBuilder() : null;
            } else {
              handCardDataBuilder_.addAllMessages(other.handCardData_);
            }
          }
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (other.hasIsHaveNotCard()) {
          setIsHaveNotCard(other.getIsHaveNotCard());
        }
        if (other.hasHaveCardThanOut()) {
          setHaveCardThanOut(other.getHaveCardThanOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasPineCount()) {
          setPineCount(other.getPineCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dtz.DTZPro.OutCardDataDTZ parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dtz.DTZPro.OutCardDataDTZ) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 3;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000004;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 3;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 4;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000008;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 4;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 5;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000010;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 5;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 6;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 6;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 7;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000040;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 7;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 8;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000080;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_first_out = 9;
      private boolean isFirstOut_ ;
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder setIsFirstOut(boolean value) {
        bitField0_ |= 0x00000100;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_first_out = 9;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isFirstOut_ = false;
        onChanged();
        return this;
      }

      // repeated int32 user_can_out_data = 10;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 10;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 10;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 10;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 10;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 10;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 10;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 10;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 11;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 11;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 user_can_out_count = 11;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 11;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00000400;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 11;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00000400);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_get_score = 12;
      private java.util.List<java.lang.Integer> userGetScore_ = java.util.Collections.emptyList();
      private void ensureUserGetScoreIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          userGetScore_ = new java.util.ArrayList<java.lang.Integer>(userGetScore_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 user_get_score = 12;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetScoreList() {
        return java.util.Collections.unmodifiableList(userGetScore_);
      }
      /**
       * <code>repeated int32 user_get_score = 12;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScoreCount() {
        return userGetScore_.size();
      }
      /**
       * <code>repeated int32 user_get_score = 12;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScore(int index) {
        return userGetScore_.get(index);
      }
      /**
       * <code>repeated int32 user_get_score = 12;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder setUserGetScore(
          int index, int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 12;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addUserGetScore(int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 12;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addAllUserGetScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetScoreIsMutable();
        super.addAll(values, userGetScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 12;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder clearUserGetScore() {
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated int32 hand_card_count = 13;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_card_data = 18;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardDataIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          handCardData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardData_);
          bitField0_ |= 0x00002000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardDataList() {
        if (handCardDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardData_);
        } else {
          return handCardDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public int getHandCardDataCount() {
        if (handCardDataBuilder_ == null) {
          return handCardData_.size();
        } else {
          return handCardDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardData(int index) {
        if (handCardDataBuilder_ == null) {
          return handCardData_.get(index);
        } else {
          return handCardDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public Builder setHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.set(index, value);
          onChanged();
        } else {
          handCardDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public Builder setHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public Builder addHandCardData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.add(value);
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public Builder addHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardDataIsMutable();
          handCardData_.add(index, value);
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public Builder addHandCardData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public Builder addHandCardData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public Builder addAllHandCardData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          super.addAll(values, handCardData_);
          onChanged();
        } else {
          handCardDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public Builder clearHandCardData() {
        if (handCardDataBuilder_ == null) {
          handCardData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
        } else {
          handCardDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public Builder removeHandCardData(int index) {
        if (handCardDataBuilder_ == null) {
          ensureHandCardDataIsMutable();
          handCardData_.remove(index);
          onChanged();
        } else {
          handCardDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardDataBuilder(
          int index) {
        return getHandCardDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardDataOrBuilder(
          int index) {
        if (handCardDataBuilder_ == null) {
          return handCardData_.get(index);  } else {
          return handCardDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardDataOrBuilderList() {
        if (handCardDataBuilder_ != null) {
          return handCardDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardDataBuilder() {
        return getHandCardDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardDataBuilder(
          int index) {
        return getHandCardDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_card_data = 18;</code>
       *
       * <pre>
       * 手牌数目
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardDataBuilderList() {
        return getHandCardDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardDataFieldBuilder() {
        if (handCardDataBuilder_ == null) {
          handCardDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardData_,
                  ((bitField0_ & 0x00002000) == 0x00002000),
                  getParentForChildren(),
                  isClean());
          handCardData_ = null;
        }
        return handCardDataBuilder_;
      }

      // repeated int32 win_order = 14;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 win_order = 14;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 14;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 14;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 14;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 14;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 14;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 14;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // optional bool is_have_not_card = 15;
      private boolean isHaveNotCard_ ;
      /**
       * <code>optional bool is_have_not_card = 15;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public boolean hasIsHaveNotCard() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional bool is_have_not_card = 15;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public boolean getIsHaveNotCard() {
        return isHaveNotCard_;
      }
      /**
       * <code>optional bool is_have_not_card = 15;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public Builder setIsHaveNotCard(boolean value) {
        bitField0_ |= 0x00008000;
        isHaveNotCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_have_not_card = 15;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public Builder clearIsHaveNotCard() {
        bitField0_ = (bitField0_ & ~0x00008000);
        isHaveNotCard_ = false;
        onChanged();
        return this;
      }

      // optional bool have_card_than_out = 16;
      private boolean haveCardThanOut_ ;
      /**
       * <code>optional bool have_card_than_out = 16;</code>
       *
       * <pre>
       * 有牌必出
       * </pre>
       */
      public boolean hasHaveCardThanOut() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional bool have_card_than_out = 16;</code>
       *
       * <pre>
       * 有牌必出
       * </pre>
       */
      public boolean getHaveCardThanOut() {
        return haveCardThanOut_;
      }
      /**
       * <code>optional bool have_card_than_out = 16;</code>
       *
       * <pre>
       * 有牌必出
       * </pre>
       */
      public Builder setHaveCardThanOut(boolean value) {
        bitField0_ |= 0x00010000;
        haveCardThanOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool have_card_than_out = 16;</code>
       *
       * <pre>
       * 有牌必出
       * </pre>
       */
      public Builder clearHaveCardThanOut() {
        bitField0_ = (bitField0_ & ~0x00010000);
        haveCardThanOut_ = false;
        onChanged();
        return this;
      }

      // optional int32 display_time = 17;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       * 多少秒后自动出牌
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       * 多少秒后自动出牌
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       * 多少秒后自动出牌
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00020000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 17;</code>
       *
       * <pre>
       * 多少秒后自动出牌
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00020000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pine_count = 19;
      private int pineCount_ ;
      /**
       * <code>optional int32 pine_count = 19;</code>
       *
       * <pre>
       * 飞机牌
       * </pre>
       */
      public boolean hasPineCount() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 pine_count = 19;</code>
       *
       * <pre>
       * 飞机牌
       * </pre>
       */
      public int getPineCount() {
        return pineCount_;
      }
      /**
       * <code>optional int32 pine_count = 19;</code>
       *
       * <pre>
       * 飞机牌
       * </pre>
       */
      public Builder setPineCount(int value) {
        bitField0_ |= 0x00040000;
        pineCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pine_count = 19;</code>
       *
       * <pre>
       * 飞机牌
       * </pre>
       */
      public Builder clearPineCount() {
        bitField0_ = (bitField0_ & ~0x00040000);
        pineCount_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dtz.OutCardDataDTZ)
    }

    static {
      defaultInstance = new OutCardDataDTZ(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dtz.OutCardDataDTZ)
  }

  public interface GameStartDTZOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_banker = 1;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    int getCurBanker();

    // repeated int32 card_count = 2;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 3;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 display_time = 4;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional .RoomInfo room_info = 5;
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 6;
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 left_card_count = 8;
    /**
     * <code>optional int32 left_card_count = 8;</code>
     *
     * <pre>
     * 扑牌数目
     * </pre>
     */
    boolean hasLeftCardCount();
    /**
     * <code>optional int32 left_card_count = 8;</code>
     *
     * <pre>
     * 扑牌数目
     * </pre>
     */
    int getLeftCardCount();

    // optional bytes commResponse = 7;
    /**
     * <code>optional bytes commResponse = 7;</code>
     *
     * <pre>
     *通用字节流
     * </pre>
     */
    boolean hasCommResponse();
    /**
     * <code>optional bytes commResponse = 7;</code>
     *
     * <pre>
     *通用字节流
     * </pre>
     */
    com.google.protobuf.ByteString getCommResponse();
  }
  /**
   * Protobuf type {@code dtz.GameStartDTZ}
   *
   * <pre>
   * 游戏开始
   * </pre>
   */
  public static final class GameStartDTZ extends
      com.google.protobuf.GeneratedMessage
      implements GameStartDTZOrBuilder {
    // Use GameStartDTZ.newBuilder() to construct.
    private GameStartDTZ(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStartDTZ(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStartDTZ defaultInstance;
    public static GameStartDTZ getDefaultInstance() {
      return defaultInstance;
    }

    public GameStartDTZ getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStartDTZ(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curBanker_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
            case 42: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000020;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 58: {
              bitField0_ |= 0x00000010;
              commResponse_ = input.readBytes();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              leftCardCount_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_GameStartDTZ_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_GameStartDTZ_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dtz.DTZPro.GameStartDTZ.class, protobuf.clazz.dtz.DTZPro.GameStartDTZ.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStartDTZ> PARSER =
        new com.google.protobuf.AbstractParser<GameStartDTZ>() {
      public GameStartDTZ parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStartDTZ(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStartDTZ> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_banker = 1;
    public static final int CUR_BANKER_FIELD_NUMBER = 1;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // repeated int32 card_count = 2;
    public static final int CARD_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 2;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 3;
    public static final int CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 display_time = 4;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 4;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 4;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional .RoomInfo room_info = 5;
    public static final int ROOM_INFO_FIELD_NUMBER = 5;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 5;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 6;
    public static final int PLAYERS_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 6;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 left_card_count = 8;
    public static final int LEFT_CARD_COUNT_FIELD_NUMBER = 8;
    private int leftCardCount_;
    /**
     * <code>optional int32 left_card_count = 8;</code>
     *
     * <pre>
     * 扑牌数目
     * </pre>
     */
    public boolean hasLeftCardCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 left_card_count = 8;</code>
     *
     * <pre>
     * 扑牌数目
     * </pre>
     */
    public int getLeftCardCount() {
      return leftCardCount_;
    }

    // optional bytes commResponse = 7;
    public static final int COMMRESPONSE_FIELD_NUMBER = 7;
    private com.google.protobuf.ByteString commResponse_;
    /**
     * <code>optional bytes commResponse = 7;</code>
     *
     * <pre>
     *通用字节流
     * </pre>
     */
    public boolean hasCommResponse() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes commResponse = 7;</code>
     *
     * <pre>
     *通用字节流
     * </pre>
     */
    public com.google.protobuf.ByteString getCommResponse() {
      return commResponse_;
    }

    private void initFields() {
      curBanker_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      displayTime_ = 0;
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      leftCardCount_ = 0;
      commResponse_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curBanker_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(2, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(5, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(6, players_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(7, commResponse_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, leftCardCount_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curBanker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, displayTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, players_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, commResponse_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, leftCardCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dtz.DTZPro.GameStartDTZ parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.GameStartDTZ parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.GameStartDTZ parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.GameStartDTZ parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.GameStartDTZ parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.GameStartDTZ parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.GameStartDTZ parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.GameStartDTZ parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.GameStartDTZ parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.GameStartDTZ parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dtz.DTZPro.GameStartDTZ prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dtz.GameStartDTZ}
     *
     * <pre>
     * 游戏开始
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dtz.DTZPro.GameStartDTZOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_GameStartDTZ_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_GameStartDTZ_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dtz.DTZPro.GameStartDTZ.class, protobuf.clazz.dtz.DTZPro.GameStartDTZ.Builder.class);
      }

      // Construct using protobuf.clazz.dtz.DTZPro.GameStartDTZ.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          cardsDataBuilder_.clear();
        }
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          playersBuilder_.clear();
        }
        leftCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        commResponse_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_GameStartDTZ_descriptor;
      }

      public protobuf.clazz.dtz.DTZPro.GameStartDTZ getDefaultInstanceForType() {
        return protobuf.clazz.dtz.DTZPro.GameStartDTZ.getDefaultInstance();
      }

      public protobuf.clazz.dtz.DTZPro.GameStartDTZ build() {
        protobuf.clazz.dtz.DTZPro.GameStartDTZ result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dtz.DTZPro.GameStartDTZ buildPartial() {
        protobuf.clazz.dtz.DTZPro.GameStartDTZ result = new protobuf.clazz.dtz.DTZPro.GameStartDTZ(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curBanker_ = curBanker_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.leftCardCount_ = leftCardCount_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000010;
        }
        result.commResponse_ = commResponse_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dtz.DTZPro.GameStartDTZ) {
          return mergeFrom((protobuf.clazz.dtz.DTZPro.GameStartDTZ)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dtz.DTZPro.GameStartDTZ other) {
        if (other == protobuf.clazz.dtz.DTZPro.GameStartDTZ.getDefaultInstance()) return this;
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000004);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000020);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasLeftCardCount()) {
          setLeftCardCount(other.getLeftCardCount());
        }
        if (other.hasCommResponse()) {
          setCommResponse(other.getCommResponse());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dtz.DTZPro.GameStartDTZ parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dtz.DTZPro.GameStartDTZ) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_banker = 1;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000001;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 2;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 2;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 3;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 display_time = 4;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000008;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 4;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional .RoomInfo room_info = 5;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 6;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 6;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 left_card_count = 8;
      private int leftCardCount_ ;
      /**
       * <code>optional int32 left_card_count = 8;</code>
       *
       * <pre>
       * 扑牌数目
       * </pre>
       */
      public boolean hasLeftCardCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 left_card_count = 8;</code>
       *
       * <pre>
       * 扑牌数目
       * </pre>
       */
      public int getLeftCardCount() {
        return leftCardCount_;
      }
      /**
       * <code>optional int32 left_card_count = 8;</code>
       *
       * <pre>
       * 扑牌数目
       * </pre>
       */
      public Builder setLeftCardCount(int value) {
        bitField0_ |= 0x00000040;
        leftCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 left_card_count = 8;</code>
       *
       * <pre>
       * 扑牌数目
       * </pre>
       */
      public Builder clearLeftCardCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        leftCardCount_ = 0;
        onChanged();
        return this;
      }

      // optional bytes commResponse = 7;
      private com.google.protobuf.ByteString commResponse_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes commResponse = 7;</code>
       *
       * <pre>
       *通用字节流
       * </pre>
       */
      public boolean hasCommResponse() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bytes commResponse = 7;</code>
       *
       * <pre>
       *通用字节流
       * </pre>
       */
      public com.google.protobuf.ByteString getCommResponse() {
        return commResponse_;
      }
      /**
       * <code>optional bytes commResponse = 7;</code>
       *
       * <pre>
       *通用字节流
       * </pre>
       */
      public Builder setCommResponse(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        commResponse_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes commResponse = 7;</code>
       *
       * <pre>
       *通用字节流
       * </pre>
       */
      public Builder clearCommResponse() {
        bitField0_ = (bitField0_ & ~0x00000080);
        commResponse_ = getDefaultInstance().getCommResponse();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dtz.GameStartDTZ)
    }

    static {
      defaultInstance = new GameStartDTZ(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dtz.GameStartDTZ)
  }

  public interface RoomResponseDTZOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 6;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 card_type = 7;
    /**
     * <code>repeated int32 card_type = 7;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 7;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 7;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 8;
    /**
     * <code>optional int32 pr_out_card_player = 8;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 8;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_cards_data = 9;
    /**
     * <code>repeated int32 pr_cards_data = 9;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 9;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 9;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 10;
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 11;
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 display_time = 12;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 13;
    /**
     * <code>repeated int32 card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 14;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .RoomInfo room_info = 15;
    /**
     * <code>optional .RoomInfo room_info = 15;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 15;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 15;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 16;
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 user_can_out_data = 17;
    /**
     * <code>repeated int32 user_can_out_data = 17;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 17;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 17;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 18;
    /**
     * <code>optional int32 user_can_out_count = 18;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 18;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCount();

    // repeated int32 user_get_score = 19;
    /**
     * <code>repeated int32 user_get_score = 19;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetScoreList();
    /**
     * <code>repeated int32 user_get_score = 19;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScoreCount();
    /**
     * <code>repeated int32 user_get_score = 19;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScore(int index);

    // repeated int32 win_order = 20;
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // optional int32 left_card_count = 21;
    /**
     * <code>optional int32 left_card_count = 21;</code>
     *
     * <pre>
     * 扑牌数目
     * </pre>
     */
    boolean hasLeftCardCount();
    /**
     * <code>optional int32 left_card_count = 21;</code>
     *
     * <pre>
     * 扑牌数目
     * </pre>
     */
    int getLeftCardCount();

    // repeated int32 player_pass = 22;
    /**
     * <code>repeated int32 player_pass = 22;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 22;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 22;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // optional bool is_first_out = 23;
    /**
     * <code>optional bool is_first_out = 23;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional bool is_first_out = 23;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean getIsFirstOut();

    // optional int32 pine_count = 24;
    /**
     * <code>optional int32 pine_count = 24;</code>
     *
     * <pre>
     * 飞机牌
     * </pre>
     */
    boolean hasPineCount();
    /**
     * <code>optional int32 pine_count = 24;</code>
     *
     * <pre>
     * 飞机牌
     * </pre>
     */
    int getPineCount();

    // optional bool is_have_not_card = 25;
    /**
     * <code>optional bool is_have_not_card = 25;</code>
     *
     * <pre>
     *当前玩家是否没
     * </pre>
     */
    boolean hasIsHaveNotCard();
    /**
     * <code>optional bool is_have_not_card = 25;</code>
     *
     * <pre>
     *当前玩家是否没
     * </pre>
     */
    boolean getIsHaveNotCard();
  }
  /**
   * Protobuf type {@code dtz.RoomResponseDTZ}
   */
  public static final class RoomResponseDTZ extends
      com.google.protobuf.GeneratedMessage
      implements RoomResponseDTZOrBuilder {
    // Use RoomResponseDTZ.newBuilder() to construct.
    private RoomResponseDTZ(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomResponseDTZ(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomResponseDTZ defaultInstance;
    public static RoomResponseDTZ getDefaultInstance() {
      return defaultInstance;
    }

    public RoomResponseDTZ getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomResponseDTZ(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000040;
              displayTime_ = input.readInt32();
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00002000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 122: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00008000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              bitField0_ |= 0x00000100;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              userGetScore_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              bitField0_ |= 0x00000200;
              leftCardCount_ = input.readInt32();
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              bitField0_ |= 0x00000400;
              isFirstOut_ = input.readBool();
              break;
            }
            case 192: {
              bitField0_ |= 0x00000800;
              pineCount_ = input.readInt32();
              break;
            }
            case 200: {
              bitField0_ |= 0x00001000;
              isHaveNotCard_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_RoomResponseDTZ_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_RoomResponseDTZ_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dtz.DTZPro.RoomResponseDTZ.class, protobuf.clazz.dtz.DTZPro.RoomResponseDTZ.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomResponseDTZ> PARSER =
        new com.google.protobuf.AbstractParser<RoomResponseDTZ>() {
      public RoomResponseDTZ parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomResponseDTZ(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomResponseDTZ> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 6;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 card_type = 7;
    public static final int CARD_TYPE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 7;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 7;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 7;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 8;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 8;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 8;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 8;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_cards_data = 9;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 9;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 9;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 9;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 10;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 10;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 11;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 11;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 display_time = 12;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 12;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     * 显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 13;
    public static final int CARD_COUNT_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 13;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 14;
    public static final int CARDS_DATA_FIELD_NUMBER = 14;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .RoomInfo room_info = 15;
    public static final int ROOM_INFO_FIELD_NUMBER = 15;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 15;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .RoomInfo room_info = 15;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 15;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 16;
    public static final int PLAYERS_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 16;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 user_can_out_data = 17;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 17;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 17;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 17;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 18;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 18;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 18;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 user_can_out_count = 18;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // repeated int32 user_get_score = 19;
    public static final int USER_GET_SCORE_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> userGetScore_;
    /**
     * <code>repeated int32 user_get_score = 19;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetScoreList() {
      return userGetScore_;
    }
    /**
     * <code>repeated int32 user_get_score = 19;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScoreCount() {
      return userGetScore_.size();
    }
    /**
     * <code>repeated int32 user_get_score = 19;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScore(int index) {
      return userGetScore_.get(index);
    }

    // repeated int32 win_order = 20;
    public static final int WIN_ORDER_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 20;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // optional int32 left_card_count = 21;
    public static final int LEFT_CARD_COUNT_FIELD_NUMBER = 21;
    private int leftCardCount_;
    /**
     * <code>optional int32 left_card_count = 21;</code>
     *
     * <pre>
     * 扑牌数目
     * </pre>
     */
    public boolean hasLeftCardCount() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 left_card_count = 21;</code>
     *
     * <pre>
     * 扑牌数目
     * </pre>
     */
    public int getLeftCardCount() {
      return leftCardCount_;
    }

    // repeated int32 player_pass = 22;
    public static final int PLAYER_PASS_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 22;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 22;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 22;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // optional bool is_first_out = 23;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 23;
    private boolean isFirstOut_;
    /**
     * <code>optional bool is_first_out = 23;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool is_first_out = 23;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 pine_count = 24;
    public static final int PINE_COUNT_FIELD_NUMBER = 24;
    private int pineCount_;
    /**
     * <code>optional int32 pine_count = 24;</code>
     *
     * <pre>
     * 飞机牌
     * </pre>
     */
    public boolean hasPineCount() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 pine_count = 24;</code>
     *
     * <pre>
     * 飞机牌
     * </pre>
     */
    public int getPineCount() {
      return pineCount_;
    }

    // optional bool is_have_not_card = 25;
    public static final int IS_HAVE_NOT_CARD_FIELD_NUMBER = 25;
    private boolean isHaveNotCard_;
    /**
     * <code>optional bool is_have_not_card = 25;</code>
     *
     * <pre>
     *当前玩家是否没
     * </pre>
     */
    public boolean hasIsHaveNotCard() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool is_have_not_card = 25;</code>
     *
     * <pre>
     *当前玩家是否没
     * </pre>
     */
    public boolean getIsHaveNotCard() {
      return isHaveNotCard_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      userGetScore_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
      leftCardCount_ = 0;
      playerPass_ = java.util.Collections.emptyList();
      isFirstOut_ = false;
      pineCount_ = 0;
      isHaveNotCard_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(6, outCardsCount_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(7, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, prOutCardPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(9, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(10, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(11, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(12, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(13, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(14, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(15, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(16, players_.get(i));
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(17, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(18, userCanOutCount_);
      }
      for (int i = 0; i < userGetScore_.size(); i++) {
        output.writeInt32(19, userGetScore_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(20, winOrder_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(21, leftCardCount_);
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(22, playerPass_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(23, isFirstOut_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(24, pineCount_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(25, isHaveNotCard_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 2 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, userCanOutCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userGetScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetScore_.get(i));
        }
        size += dataSize;
        size += 2 * getUserGetScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 2 * getWinOrderList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, leftCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 2 * getPlayerPassList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(23, isFirstOut_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, pineCount_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(25, isHaveNotCard_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dtz.DTZPro.RoomResponseDTZ prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dtz.RoomResponseDTZ}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dtz.DTZPro.RoomResponseDTZOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_RoomResponseDTZ_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_RoomResponseDTZ_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dtz.DTZPro.RoomResponseDTZ.class, protobuf.clazz.dtz.DTZPro.RoomResponseDTZ.Builder.class);
      }

      // Construct using protobuf.clazz.dtz.DTZPro.RoomResponseDTZ.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
        } else {
          playersBuilder_.clear();
        }
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        leftCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        isFirstOut_ = false;
        bitField0_ = (bitField0_ & ~0x00400000);
        pineCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        isHaveNotCard_ = false;
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_RoomResponseDTZ_descriptor;
      }

      public protobuf.clazz.dtz.DTZPro.RoomResponseDTZ getDefaultInstanceForType() {
        return protobuf.clazz.dtz.DTZPro.RoomResponseDTZ.getDefaultInstance();
      }

      public protobuf.clazz.dtz.DTZPro.RoomResponseDTZ build() {
        protobuf.clazz.dtz.DTZPro.RoomResponseDTZ result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dtz.DTZPro.RoomResponseDTZ buildPartial() {
        protobuf.clazz.dtz.DTZPro.RoomResponseDTZ result = new protobuf.clazz.dtz.DTZPro.RoomResponseDTZ(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000040;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000080;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.userGetScore_ = userGetScore_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.winOrder_ = winOrder_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.leftCardCount_ = leftCardCount_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.playerPass_ = playerPass_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.pineCount_ = pineCount_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.isHaveNotCard_ = isHaveNotCard_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dtz.DTZPro.RoomResponseDTZ) {
          return mergeFrom((protobuf.clazz.dtz.DTZPro.RoomResponseDTZ)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dtz.DTZPro.RoomResponseDTZ other) {
        if (other == protobuf.clazz.dtz.DTZPro.RoomResponseDTZ.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00002000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00008000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (!other.userGetScore_.isEmpty()) {
          if (userGetScore_.isEmpty()) {
            userGetScore_ = other.userGetScore_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureUserGetScoreIsMutable();
            userGetScore_.addAll(other.userGetScore_);
          }
          onChanged();
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (other.hasLeftCardCount()) {
          setLeftCardCount(other.getLeftCardCount());
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasPineCount()) {
          setPineCount(other.getPineCount());
        }
        if (other.hasIsHaveNotCard()) {
          setIsHaveNotCard(other.getIsHaveNotCard());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dtz.DTZPro.RoomResponseDTZ parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dtz.DTZPro.RoomResponseDTZ) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 6;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 7;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 card_type = 7;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 7;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 7;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 7;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 7;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 7;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 7;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 8;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 8;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 pr_out_card_player = 8;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 8;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000080;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 8;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 9;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 9;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 9;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 9;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 9;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 9;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 9;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 9;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 10;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000200;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 11;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000400;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000400);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 12;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000800;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       * 显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 13;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 13;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 14;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00002000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 14;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00002000) == 0x00002000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .RoomInfo room_info = 15;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 15;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .RoomInfo room_info = 15;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 15;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 15;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 15;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 15;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 15;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 15;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 16;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00008000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 16;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00008000) == 0x00008000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 user_can_out_data = 17;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 17;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 17;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 17;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 17;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 17;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 17;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 17;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 18;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 18;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 user_can_out_count = 18;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 18;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00020000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 18;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00020000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_get_score = 19;
      private java.util.List<java.lang.Integer> userGetScore_ = java.util.Collections.emptyList();
      private void ensureUserGetScoreIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          userGetScore_ = new java.util.ArrayList<java.lang.Integer>(userGetScore_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 user_get_score = 19;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetScoreList() {
        return java.util.Collections.unmodifiableList(userGetScore_);
      }
      /**
       * <code>repeated int32 user_get_score = 19;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScoreCount() {
        return userGetScore_.size();
      }
      /**
       * <code>repeated int32 user_get_score = 19;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScore(int index) {
        return userGetScore_.get(index);
      }
      /**
       * <code>repeated int32 user_get_score = 19;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder setUserGetScore(
          int index, int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 19;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addUserGetScore(int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 19;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addAllUserGetScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetScoreIsMutable();
        super.addAll(values, userGetScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 19;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder clearUserGetScore() {
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // repeated int32 win_order = 20;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 20;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // optional int32 left_card_count = 21;
      private int leftCardCount_ ;
      /**
       * <code>optional int32 left_card_count = 21;</code>
       *
       * <pre>
       * 扑牌数目
       * </pre>
       */
      public boolean hasLeftCardCount() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 left_card_count = 21;</code>
       *
       * <pre>
       * 扑牌数目
       * </pre>
       */
      public int getLeftCardCount() {
        return leftCardCount_;
      }
      /**
       * <code>optional int32 left_card_count = 21;</code>
       *
       * <pre>
       * 扑牌数目
       * </pre>
       */
      public Builder setLeftCardCount(int value) {
        bitField0_ |= 0x00100000;
        leftCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 left_card_count = 21;</code>
       *
       * <pre>
       * 扑牌数目
       * </pre>
       */
      public Builder clearLeftCardCount() {
        bitField0_ = (bitField0_ & ~0x00100000);
        leftCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 22;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 player_pass = 22;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 22;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 22;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 22;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 22;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 22;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 22;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // optional bool is_first_out = 23;
      private boolean isFirstOut_ ;
      /**
       * <code>optional bool is_first_out = 23;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional bool is_first_out = 23;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional bool is_first_out = 23;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder setIsFirstOut(boolean value) {
        bitField0_ |= 0x00400000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_first_out = 23;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00400000);
        isFirstOut_ = false;
        onChanged();
        return this;
      }

      // optional int32 pine_count = 24;
      private int pineCount_ ;
      /**
       * <code>optional int32 pine_count = 24;</code>
       *
       * <pre>
       * 飞机牌
       * </pre>
       */
      public boolean hasPineCount() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 pine_count = 24;</code>
       *
       * <pre>
       * 飞机牌
       * </pre>
       */
      public int getPineCount() {
        return pineCount_;
      }
      /**
       * <code>optional int32 pine_count = 24;</code>
       *
       * <pre>
       * 飞机牌
       * </pre>
       */
      public Builder setPineCount(int value) {
        bitField0_ |= 0x00800000;
        pineCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pine_count = 24;</code>
       *
       * <pre>
       * 飞机牌
       * </pre>
       */
      public Builder clearPineCount() {
        bitField0_ = (bitField0_ & ~0x00800000);
        pineCount_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_have_not_card = 25;
      private boolean isHaveNotCard_ ;
      /**
       * <code>optional bool is_have_not_card = 25;</code>
       *
       * <pre>
       *当前玩家是否没
       * </pre>
       */
      public boolean hasIsHaveNotCard() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional bool is_have_not_card = 25;</code>
       *
       * <pre>
       *当前玩家是否没
       * </pre>
       */
      public boolean getIsHaveNotCard() {
        return isHaveNotCard_;
      }
      /**
       * <code>optional bool is_have_not_card = 25;</code>
       *
       * <pre>
       *当前玩家是否没
       * </pre>
       */
      public Builder setIsHaveNotCard(boolean value) {
        bitField0_ |= 0x01000000;
        isHaveNotCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_have_not_card = 25;</code>
       *
       * <pre>
       *当前玩家是否没
       * </pre>
       */
      public Builder clearIsHaveNotCard() {
        bitField0_ = (bitField0_ & ~0x01000000);
        isHaveNotCard_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dtz.RoomResponseDTZ)
    }

    static {
      defaultInstance = new RoomResponseDTZ(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dtz.RoomResponseDTZ)
  }

  public interface GameEndDTZOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional int32 curr_round = 2;
    /**
     * <code>optional int32 curr_round = 2;</code>
     *
     * <pre>
     * 当前圈数
     * </pre>
     */
    boolean hasCurrRound();
    /**
     * <code>optional int32 curr_round = 2;</code>
     *
     * <pre>
     * 当前圈数
     * </pre>
     */
    int getCurrRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 left_card_count = 6;
    /**
     * <code>optional int32 left_card_count = 6;</code>
     *
     * <pre>
     * 剩余牌库牌数
     * </pre>
     */
    boolean hasLeftCardCount();
    /**
     * <code>optional int32 left_card_count = 6;</code>
     *
     * <pre>
     * 剩余牌库牌数
     * </pre>
     */
    int getLeftCardCount();

    // repeated int32 left_cards_data = 7;
    /**
     * <code>repeated int32 left_cards_data = 7;</code>
     */
    java.util.List<java.lang.Integer> getLeftCardsDataList();
    /**
     * <code>repeated int32 left_cards_data = 7;</code>
     */
    int getLeftCardsDataCount();
    /**
     * <code>repeated int32 left_cards_data = 7;</code>
     */
    int getLeftCardsData(int index);

    // optional int32 reason = 8;
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     * 结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     * 结束类型
     * </pre>
     */
    int getReason();

    // optional int32 banker_player = 9;
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    int getBankerPlayer();

    // repeated int32 win_order = 10;
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     * 输赢排名
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     * 输赢排名
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     * 输赢排名
     * </pre>
     */
    int getWinOrder(int index);

    // repeated .RoomPlayerResponse players = 11;
    /**
     * <code>repeated .RoomPlayerResponse players = 11;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 11;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 11;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 11;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 11;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated .Int32ArrayResponse score_detail_count = 3;
    /**
     * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
     *
     * <pre>
     * 分数详情中特殊牌张数
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getScoreDetailCountList();
    /**
     * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
     *
     * <pre>
     * 分数详情中特殊牌张数
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getScoreDetailCount(int index);
    /**
     * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
     *
     * <pre>
     * 分数详情中特殊牌张数
     * </pre>
     */
    int getScoreDetailCountCount();
    /**
     * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
     *
     * <pre>
     * 分数详情中特殊牌张数
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getScoreDetailCountOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
     *
     * <pre>
     * 分数详情中特殊牌张数
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getScoreDetailCountOrBuilder(
        int index);

    // repeated .Int32ArrayResponse score_detail = 13;
    /**
     * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
     *
     * <pre>
     * 分数详情中分数
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getScoreDetailList();
    /**
     * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
     *
     * <pre>
     * 分数详情中分数
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getScoreDetail(int index);
    /**
     * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
     *
     * <pre>
     * 分数详情中分数
     * </pre>
     */
    int getScoreDetailCount();
    /**
     * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
     *
     * <pre>
     * 分数详情中分数
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getScoreDetailOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
     *
     * <pre>
     * 分数详情中分数
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getScoreDetailOrBuilder(
        int index);

    // repeated int32 win_order_score = 14;
    /**
     * <code>repeated int32 win_order_score = 14;</code>
     *
     * <pre>
     * 名次得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderScoreList();
    /**
     * <code>repeated int32 win_order_score = 14;</code>
     *
     * <pre>
     * 名次得分
     * </pre>
     */
    int getWinOrderScoreCount();
    /**
     * <code>repeated int32 win_order_score = 14;</code>
     *
     * <pre>
     * 名次得分
     * </pre>
     */
    int getWinOrderScore(int index);

    // repeated int32 curr_round_score = 23;
    /**
     * <code>repeated int32 curr_round_score = 23;</code>
     *
     * <pre>
     * 本局得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getCurrRoundScoreList();
    /**
     * <code>repeated int32 curr_round_score = 23;</code>
     *
     * <pre>
     * 本局得分
     * </pre>
     */
    int getCurrRoundScoreCount();
    /**
     * <code>repeated int32 curr_round_score = 23;</code>
     *
     * <pre>
     * 本局得分
     * </pre>
     */
    int getCurrRoundScore(int index);

    // repeated int32 integral = 12;
    /**
     * <code>repeated int32 integral = 12;</code>
     *
     * <pre>
     * 总得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getIntegralList();
    /**
     * <code>repeated int32 integral = 12;</code>
     *
     * <pre>
     * 总得分
     * </pre>
     */
    int getIntegralCount();
    /**
     * <code>repeated int32 integral = 12;</code>
     *
     * <pre>
     * 总得分
     * </pre>
     */
    int getIntegral(int index);

    // repeated int32 round = 15;
    /**
     * <code>repeated int32 round = 15;</code>
     *
     * <pre>
     * 总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getRoundList();
    /**
     * <code>repeated int32 round = 15;</code>
     *
     * <pre>
     * 总结算
     * </pre>
     */
    int getRoundCount();
    /**
     * <code>repeated int32 round = 15;</code>
     *
     * <pre>
     * 总结算
     * </pre>
     */
    int getRound(int index);

    // repeated .Int32ArrayResponse magic_bomb_count = 16;
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
     *
     * <pre>
     * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getMagicBombCountList();
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
     *
     * <pre>
     * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getMagicBombCount(int index);
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
     *
     * <pre>
     * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
     * </pre>
     */
    int getMagicBombCountCount();
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
     *
     * <pre>
     * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getMagicBombCountOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
     *
     * <pre>
     * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getMagicBombCountOrBuilder(
        int index);

    // repeated .Int32ArrayResponse magic_bomb_socre = 17;
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getMagicBombSocreList();
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getMagicBombSocre(int index);
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
     */
    int getMagicBombSocreCount();
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getMagicBombSocreOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getMagicBombSocreOrBuilder(
        int index);

    // repeated int32 di_bonm_socre = 18;
    /**
     * <code>repeated int32 di_bonm_socre = 18;</code>
     *
     * <pre>
     * 地炸分
     * </pre>
     */
    java.util.List<java.lang.Integer> getDiBonmSocreList();
    /**
     * <code>repeated int32 di_bonm_socre = 18;</code>
     *
     * <pre>
     * 地炸分
     * </pre>
     */
    int getDiBonmSocreCount();
    /**
     * <code>repeated int32 di_bonm_socre = 18;</code>
     *
     * <pre>
     * 地炸分
     * </pre>
     */
    int getDiBonmSocre(int index);

    // repeated int32 pai_score = 19;
    /**
     * <code>repeated int32 pai_score = 19;</code>
     *
     * <pre>
     * 牌面分
     * </pre>
     */
    java.util.List<java.lang.Integer> getPaiScoreList();
    /**
     * <code>repeated int32 pai_score = 19;</code>
     *
     * <pre>
     * 牌面分
     * </pre>
     */
    int getPaiScoreCount();
    /**
     * <code>repeated int32 pai_score = 19;</code>
     *
     * <pre>
     * 牌面分
     * </pre>
     */
    int getPaiScore(int index);

    // repeated int32 all_score = 20;
    /**
     * <code>repeated int32 all_score = 20;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllScoreList();
    /**
     * <code>repeated int32 all_score = 20;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    int getAllScoreCount();
    /**
     * <code>repeated int32 all_score = 20;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    int getAllScore(int index);

    // repeated int32 win_lose_score = 21;
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     * 胜负分
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinLoseScoreList();
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     * 胜负分
     * </pre>
     */
    int getWinLoseScoreCount();
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     * 胜负分
     * </pre>
     */
    int getWinLoseScore(int index);

    // repeated int32 end_reward_score = 22;
    /**
     * <code>repeated int32 end_reward_score = 22;</code>
     *
     * <pre>
     * 终局奖励分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndRewardScoreList();
    /**
     * <code>repeated int32 end_reward_score = 22;</code>
     *
     * <pre>
     * 终局奖励分
     * </pre>
     */
    int getEndRewardScoreCount();
    /**
     * <code>repeated int32 end_reward_score = 22;</code>
     *
     * <pre>
     * 终局奖励分
     * </pre>
     */
    int getEndRewardScore(int index);
  }
  /**
   * Protobuf type {@code dtz.GameEndDTZ}
   */
  public static final class GameEndDTZ extends
      com.google.protobuf.GeneratedMessage
      implements GameEndDTZOrBuilder {
    // Use GameEndDTZ.newBuilder() to construct.
    private GameEndDTZ(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameEndDTZ(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameEndDTZ defaultInstance;
    public static GameEndDTZ getDefaultInstance() {
      return defaultInstance;
    }

    public GameEndDTZ getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameEndDTZ(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currRound_ = input.readInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                scoreDetailCount_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000400;
              }
              scoreDetailCount_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              leftCardCount_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                leftCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              leftCardsData_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                leftCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                leftCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              reason_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000200;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                integral_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              integral_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                integral_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                integral_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 106: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                scoreDetail_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000800;
              }
              scoreDetail_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                winOrderScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              winOrderScore_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                winOrderScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrderScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                round_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              round_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                round_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                round_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                magicBombCount_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00010000;
              }
              magicBombCount_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                magicBombSocre_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00020000;
              }
              magicBombSocre_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                diBonmSocre_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              diBonmSocre_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                diBonmSocre_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                diBonmSocre_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                paiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              paiScore_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                paiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                paiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                allScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              allScore_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                allScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                winLoseScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              winLoseScore_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                winLoseScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winLoseScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                endRewardScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              endRewardScore_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                endRewardScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endRewardScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                currRoundScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              currRoundScore_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                currRoundScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                currRoundScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          scoreDetailCount_ = java.util.Collections.unmodifiableList(scoreDetailCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          leftCardsData_ = java.util.Collections.unmodifiableList(leftCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          integral_ = java.util.Collections.unmodifiableList(integral_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          scoreDetail_ = java.util.Collections.unmodifiableList(scoreDetail_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          winOrderScore_ = java.util.Collections.unmodifiableList(winOrderScore_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          round_ = java.util.Collections.unmodifiableList(round_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          magicBombCount_ = java.util.Collections.unmodifiableList(magicBombCount_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          magicBombSocre_ = java.util.Collections.unmodifiableList(magicBombSocre_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          diBonmSocre_ = java.util.Collections.unmodifiableList(diBonmSocre_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          paiScore_ = java.util.Collections.unmodifiableList(paiScore_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          allScore_ = java.util.Collections.unmodifiableList(allScore_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          winLoseScore_ = java.util.Collections.unmodifiableList(winLoseScore_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          endRewardScore_ = java.util.Collections.unmodifiableList(endRewardScore_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          currRoundScore_ = java.util.Collections.unmodifiableList(currRoundScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_GameEndDTZ_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_GameEndDTZ_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dtz.DTZPro.GameEndDTZ.class, protobuf.clazz.dtz.DTZPro.GameEndDTZ.Builder.class);
    }

    public static com.google.protobuf.Parser<GameEndDTZ> PARSER =
        new com.google.protobuf.AbstractParser<GameEndDTZ>() {
      public GameEndDTZ parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameEndDTZ(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameEndDTZ> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 curr_round = 2;
    public static final int CURR_ROUND_FIELD_NUMBER = 2;
    private int currRound_;
    /**
     * <code>optional int32 curr_round = 2;</code>
     *
     * <pre>
     * 当前圈数
     * </pre>
     */
    public boolean hasCurrRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 curr_round = 2;</code>
     *
     * <pre>
     * 当前圈数
     * </pre>
     */
    public int getCurrRound() {
      return currRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     * 扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 left_card_count = 6;
    public static final int LEFT_CARD_COUNT_FIELD_NUMBER = 6;
    private int leftCardCount_;
    /**
     * <code>optional int32 left_card_count = 6;</code>
     *
     * <pre>
     * 剩余牌库牌数
     * </pre>
     */
    public boolean hasLeftCardCount() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 left_card_count = 6;</code>
     *
     * <pre>
     * 剩余牌库牌数
     * </pre>
     */
    public int getLeftCardCount() {
      return leftCardCount_;
    }

    // repeated int32 left_cards_data = 7;
    public static final int LEFT_CARDS_DATA_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> leftCardsData_;
    /**
     * <code>repeated int32 left_cards_data = 7;</code>
     */
    public java.util.List<java.lang.Integer>
        getLeftCardsDataList() {
      return leftCardsData_;
    }
    /**
     * <code>repeated int32 left_cards_data = 7;</code>
     */
    public int getLeftCardsDataCount() {
      return leftCardsData_.size();
    }
    /**
     * <code>repeated int32 left_cards_data = 7;</code>
     */
    public int getLeftCardsData(int index) {
      return leftCardsData_.get(index);
    }

    // optional int32 reason = 8;
    public static final int REASON_FIELD_NUMBER = 8;
    private int reason_;
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     * 结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     * 结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // optional int32 banker_player = 9;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 9;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // repeated int32 win_order = 10;
    public static final int WIN_ORDER_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     * 输赢排名
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     * 输赢排名
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 10;</code>
     *
     * <pre>
     * 输赢排名
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // repeated .RoomPlayerResponse players = 11;
    public static final int PLAYERS_FIELD_NUMBER = 11;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 11;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 11;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 11;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 11;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 11;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated .Int32ArrayResponse score_detail_count = 3;
    public static final int SCORE_DETAIL_COUNT_FIELD_NUMBER = 3;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> scoreDetailCount_;
    /**
     * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
     *
     * <pre>
     * 分数详情中特殊牌张数
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getScoreDetailCountList() {
      return scoreDetailCount_;
    }
    /**
     * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
     *
     * <pre>
     * 分数详情中特殊牌张数
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getScoreDetailCountOrBuilderList() {
      return scoreDetailCount_;
    }
    /**
     * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
     *
     * <pre>
     * 分数详情中特殊牌张数
     * </pre>
     */
    public int getScoreDetailCountCount() {
      return scoreDetailCount_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
     *
     * <pre>
     * 分数详情中特殊牌张数
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getScoreDetailCount(int index) {
      return scoreDetailCount_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
     *
     * <pre>
     * 分数详情中特殊牌张数
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getScoreDetailCountOrBuilder(
        int index) {
      return scoreDetailCount_.get(index);
    }

    // repeated .Int32ArrayResponse score_detail = 13;
    public static final int SCORE_DETAIL_FIELD_NUMBER = 13;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> scoreDetail_;
    /**
     * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
     *
     * <pre>
     * 分数详情中分数
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getScoreDetailList() {
      return scoreDetail_;
    }
    /**
     * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
     *
     * <pre>
     * 分数详情中分数
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getScoreDetailOrBuilderList() {
      return scoreDetail_;
    }
    /**
     * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
     *
     * <pre>
     * 分数详情中分数
     * </pre>
     */
    public int getScoreDetailCount() {
      return scoreDetail_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
     *
     * <pre>
     * 分数详情中分数
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getScoreDetail(int index) {
      return scoreDetail_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
     *
     * <pre>
     * 分数详情中分数
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getScoreDetailOrBuilder(
        int index) {
      return scoreDetail_.get(index);
    }

    // repeated int32 win_order_score = 14;
    public static final int WIN_ORDER_SCORE_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> winOrderScore_;
    /**
     * <code>repeated int32 win_order_score = 14;</code>
     *
     * <pre>
     * 名次得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderScoreList() {
      return winOrderScore_;
    }
    /**
     * <code>repeated int32 win_order_score = 14;</code>
     *
     * <pre>
     * 名次得分
     * </pre>
     */
    public int getWinOrderScoreCount() {
      return winOrderScore_.size();
    }
    /**
     * <code>repeated int32 win_order_score = 14;</code>
     *
     * <pre>
     * 名次得分
     * </pre>
     */
    public int getWinOrderScore(int index) {
      return winOrderScore_.get(index);
    }

    // repeated int32 curr_round_score = 23;
    public static final int CURR_ROUND_SCORE_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> currRoundScore_;
    /**
     * <code>repeated int32 curr_round_score = 23;</code>
     *
     * <pre>
     * 本局得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCurrRoundScoreList() {
      return currRoundScore_;
    }
    /**
     * <code>repeated int32 curr_round_score = 23;</code>
     *
     * <pre>
     * 本局得分
     * </pre>
     */
    public int getCurrRoundScoreCount() {
      return currRoundScore_.size();
    }
    /**
     * <code>repeated int32 curr_round_score = 23;</code>
     *
     * <pre>
     * 本局得分
     * </pre>
     */
    public int getCurrRoundScore(int index) {
      return currRoundScore_.get(index);
    }

    // repeated int32 integral = 12;
    public static final int INTEGRAL_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> integral_;
    /**
     * <code>repeated int32 integral = 12;</code>
     *
     * <pre>
     * 总得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getIntegralList() {
      return integral_;
    }
    /**
     * <code>repeated int32 integral = 12;</code>
     *
     * <pre>
     * 总得分
     * </pre>
     */
    public int getIntegralCount() {
      return integral_.size();
    }
    /**
     * <code>repeated int32 integral = 12;</code>
     *
     * <pre>
     * 总得分
     * </pre>
     */
    public int getIntegral(int index) {
      return integral_.get(index);
    }

    // repeated int32 round = 15;
    public static final int ROUND_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> round_;
    /**
     * <code>repeated int32 round = 15;</code>
     *
     * <pre>
     * 总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getRoundList() {
      return round_;
    }
    /**
     * <code>repeated int32 round = 15;</code>
     *
     * <pre>
     * 总结算
     * </pre>
     */
    public int getRoundCount() {
      return round_.size();
    }
    /**
     * <code>repeated int32 round = 15;</code>
     *
     * <pre>
     * 总结算
     * </pre>
     */
    public int getRound(int index) {
      return round_.get(index);
    }

    // repeated .Int32ArrayResponse magic_bomb_count = 16;
    public static final int MAGIC_BOMB_COUNT_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> magicBombCount_;
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
     *
     * <pre>
     * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getMagicBombCountList() {
      return magicBombCount_;
    }
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
     *
     * <pre>
     * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getMagicBombCountOrBuilderList() {
      return magicBombCount_;
    }
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
     *
     * <pre>
     * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
     * </pre>
     */
    public int getMagicBombCountCount() {
      return magicBombCount_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
     *
     * <pre>
     * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getMagicBombCount(int index) {
      return magicBombCount_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
     *
     * <pre>
     * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getMagicBombCountOrBuilder(
        int index) {
      return magicBombCount_.get(index);
    }

    // repeated .Int32ArrayResponse magic_bomb_socre = 17;
    public static final int MAGIC_BOMB_SOCRE_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> magicBombSocre_;
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getMagicBombSocreList() {
      return magicBombSocre_;
    }
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getMagicBombSocreOrBuilderList() {
      return magicBombSocre_;
    }
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
     */
    public int getMagicBombSocreCount() {
      return magicBombSocre_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getMagicBombSocre(int index) {
      return magicBombSocre_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getMagicBombSocreOrBuilder(
        int index) {
      return magicBombSocre_.get(index);
    }

    // repeated int32 di_bonm_socre = 18;
    public static final int DI_BONM_SOCRE_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> diBonmSocre_;
    /**
     * <code>repeated int32 di_bonm_socre = 18;</code>
     *
     * <pre>
     * 地炸分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDiBonmSocreList() {
      return diBonmSocre_;
    }
    /**
     * <code>repeated int32 di_bonm_socre = 18;</code>
     *
     * <pre>
     * 地炸分
     * </pre>
     */
    public int getDiBonmSocreCount() {
      return diBonmSocre_.size();
    }
    /**
     * <code>repeated int32 di_bonm_socre = 18;</code>
     *
     * <pre>
     * 地炸分
     * </pre>
     */
    public int getDiBonmSocre(int index) {
      return diBonmSocre_.get(index);
    }

    // repeated int32 pai_score = 19;
    public static final int PAI_SCORE_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> paiScore_;
    /**
     * <code>repeated int32 pai_score = 19;</code>
     *
     * <pre>
     * 牌面分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPaiScoreList() {
      return paiScore_;
    }
    /**
     * <code>repeated int32 pai_score = 19;</code>
     *
     * <pre>
     * 牌面分
     * </pre>
     */
    public int getPaiScoreCount() {
      return paiScore_.size();
    }
    /**
     * <code>repeated int32 pai_score = 19;</code>
     *
     * <pre>
     * 牌面分
     * </pre>
     */
    public int getPaiScore(int index) {
      return paiScore_.get(index);
    }

    // repeated int32 all_score = 20;
    public static final int ALL_SCORE_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> allScore_;
    /**
     * <code>repeated int32 all_score = 20;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllScoreList() {
      return allScore_;
    }
    /**
     * <code>repeated int32 all_score = 20;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    public int getAllScoreCount() {
      return allScore_.size();
    }
    /**
     * <code>repeated int32 all_score = 20;</code>
     *
     * <pre>
     * 总分
     * </pre>
     */
    public int getAllScore(int index) {
      return allScore_.get(index);
    }

    // repeated int32 win_lose_score = 21;
    public static final int WIN_LOSE_SCORE_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> winLoseScore_;
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     * 胜负分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinLoseScoreList() {
      return winLoseScore_;
    }
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     * 胜负分
     * </pre>
     */
    public int getWinLoseScoreCount() {
      return winLoseScore_.size();
    }
    /**
     * <code>repeated int32 win_lose_score = 21;</code>
     *
     * <pre>
     * 胜负分
     * </pre>
     */
    public int getWinLoseScore(int index) {
      return winLoseScore_.get(index);
    }

    // repeated int32 end_reward_score = 22;
    public static final int END_REWARD_SCORE_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> endRewardScore_;
    /**
     * <code>repeated int32 end_reward_score = 22;</code>
     *
     * <pre>
     * 终局奖励分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndRewardScoreList() {
      return endRewardScore_;
    }
    /**
     * <code>repeated int32 end_reward_score = 22;</code>
     *
     * <pre>
     * 终局奖励分
     * </pre>
     */
    public int getEndRewardScoreCount() {
      return endRewardScore_.size();
    }
    /**
     * <code>repeated int32 end_reward_score = 22;</code>
     *
     * <pre>
     * 终局奖励分
     * </pre>
     */
    public int getEndRewardScore(int index) {
      return endRewardScore_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      currRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      leftCardCount_ = 0;
      leftCardsData_ = java.util.Collections.emptyList();
      reason_ = 0;
      bankerPlayer_ = 0;
      winOrder_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
      scoreDetailCount_ = java.util.Collections.emptyList();
      scoreDetail_ = java.util.Collections.emptyList();
      winOrderScore_ = java.util.Collections.emptyList();
      currRoundScore_ = java.util.Collections.emptyList();
      integral_ = java.util.Collections.emptyList();
      round_ = java.util.Collections.emptyList();
      magicBombCount_ = java.util.Collections.emptyList();
      magicBombSocre_ = java.util.Collections.emptyList();
      diBonmSocre_ = java.util.Collections.emptyList();
      paiScore_ = java.util.Collections.emptyList();
      allScore_ = java.util.Collections.emptyList();
      winLoseScore_ = java.util.Collections.emptyList();
      endRewardScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currRound_);
      }
      for (int i = 0; i < scoreDetailCount_.size(); i++) {
        output.writeMessage(3, scoreDetailCount_.get(i));
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(6, leftCardCount_);
      }
      for (int i = 0; i < leftCardsData_.size(); i++) {
        output.writeInt32(7, leftCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, reason_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, bankerPlayer_);
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(10, winOrder_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(11, players_.get(i));
      }
      for (int i = 0; i < integral_.size(); i++) {
        output.writeInt32(12, integral_.get(i));
      }
      for (int i = 0; i < scoreDetail_.size(); i++) {
        output.writeMessage(13, scoreDetail_.get(i));
      }
      for (int i = 0; i < winOrderScore_.size(); i++) {
        output.writeInt32(14, winOrderScore_.get(i));
      }
      for (int i = 0; i < round_.size(); i++) {
        output.writeInt32(15, round_.get(i));
      }
      for (int i = 0; i < magicBombCount_.size(); i++) {
        output.writeMessage(16, magicBombCount_.get(i));
      }
      for (int i = 0; i < magicBombSocre_.size(); i++) {
        output.writeMessage(17, magicBombSocre_.get(i));
      }
      for (int i = 0; i < diBonmSocre_.size(); i++) {
        output.writeInt32(18, diBonmSocre_.get(i));
      }
      for (int i = 0; i < paiScore_.size(); i++) {
        output.writeInt32(19, paiScore_.get(i));
      }
      for (int i = 0; i < allScore_.size(); i++) {
        output.writeInt32(20, allScore_.get(i));
      }
      for (int i = 0; i < winLoseScore_.size(); i++) {
        output.writeInt32(21, winLoseScore_.get(i));
      }
      for (int i = 0; i < endRewardScore_.size(); i++) {
        output.writeInt32(22, endRewardScore_.get(i));
      }
      for (int i = 0; i < currRoundScore_.size(); i++) {
        output.writeInt32(23, currRoundScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currRound_);
      }
      for (int i = 0; i < scoreDetailCount_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, scoreDetailCount_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, leftCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < leftCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(leftCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getLeftCardsDataList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, reason_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, bankerPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 1 * getWinOrderList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < integral_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(integral_.get(i));
        }
        size += dataSize;
        size += 1 * getIntegralList().size();
      }
      for (int i = 0; i < scoreDetail_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, scoreDetail_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrderScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrderScore_.get(i));
        }
        size += dataSize;
        size += 1 * getWinOrderScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < round_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(round_.get(i));
        }
        size += dataSize;
        size += 1 * getRoundList().size();
      }
      for (int i = 0; i < magicBombCount_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, magicBombCount_.get(i));
      }
      for (int i = 0; i < magicBombSocre_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, magicBombSocre_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < diBonmSocre_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(diBonmSocre_.get(i));
        }
        size += dataSize;
        size += 2 * getDiBonmSocreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < paiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(paiScore_.get(i));
        }
        size += dataSize;
        size += 2 * getPaiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allScore_.get(i));
        }
        size += dataSize;
        size += 2 * getAllScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winLoseScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winLoseScore_.get(i));
        }
        size += dataSize;
        size += 2 * getWinLoseScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endRewardScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endRewardScore_.get(i));
        }
        size += dataSize;
        size += 2 * getEndRewardScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < currRoundScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(currRoundScore_.get(i));
        }
        size += dataSize;
        size += 2 * getCurrRoundScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dtz.DTZPro.GameEndDTZ parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.GameEndDTZ parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.GameEndDTZ parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.GameEndDTZ parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.GameEndDTZ parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.GameEndDTZ parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.GameEndDTZ parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.GameEndDTZ parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.GameEndDTZ parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.GameEndDTZ parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dtz.DTZPro.GameEndDTZ prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dtz.GameEndDTZ}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dtz.DTZPro.GameEndDTZOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_GameEndDTZ_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_GameEndDTZ_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dtz.DTZPro.GameEndDTZ.class, protobuf.clazz.dtz.DTZPro.GameEndDTZ.Builder.class);
      }

      // Construct using protobuf.clazz.dtz.DTZPro.GameEndDTZ.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
          getScoreDetailCountFieldBuilder();
          getScoreDetailFieldBuilder();
          getMagicBombCountFieldBuilder();
          getMagicBombSocreFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        currRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          cardsDataBuilder_.clear();
        }
        leftCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        leftCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          playersBuilder_.clear();
        }
        if (scoreDetailCountBuilder_ == null) {
          scoreDetailCount_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          scoreDetailCountBuilder_.clear();
        }
        if (scoreDetailBuilder_ == null) {
          scoreDetail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          scoreDetailBuilder_.clear();
        }
        winOrderScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        currRoundScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        integral_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        round_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        if (magicBombCountBuilder_ == null) {
          magicBombCount_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
        } else {
          magicBombCountBuilder_.clear();
        }
        if (magicBombSocreBuilder_ == null) {
          magicBombSocre_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          magicBombSocreBuilder_.clear();
        }
        diBonmSocre_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        paiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        allScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        winLoseScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        endRewardScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_GameEndDTZ_descriptor;
      }

      public protobuf.clazz.dtz.DTZPro.GameEndDTZ getDefaultInstanceForType() {
        return protobuf.clazz.dtz.DTZPro.GameEndDTZ.getDefaultInstance();
      }

      public protobuf.clazz.dtz.DTZPro.GameEndDTZ build() {
        protobuf.clazz.dtz.DTZPro.GameEndDTZ result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dtz.DTZPro.GameEndDTZ buildPartial() {
        protobuf.clazz.dtz.DTZPro.GameEndDTZ result = new protobuf.clazz.dtz.DTZPro.GameEndDTZ(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currRound_ = currRound_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.leftCardCount_ = leftCardCount_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          leftCardsData_ = java.util.Collections.unmodifiableList(leftCardsData_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.leftCardsData_ = leftCardsData_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.reason_ = reason_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.winOrder_ = winOrder_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (scoreDetailCountBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            scoreDetailCount_ = java.util.Collections.unmodifiableList(scoreDetailCount_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.scoreDetailCount_ = scoreDetailCount_;
        } else {
          result.scoreDetailCount_ = scoreDetailCountBuilder_.build();
        }
        if (scoreDetailBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            scoreDetail_ = java.util.Collections.unmodifiableList(scoreDetail_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.scoreDetail_ = scoreDetail_;
        } else {
          result.scoreDetail_ = scoreDetailBuilder_.build();
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          winOrderScore_ = java.util.Collections.unmodifiableList(winOrderScore_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.winOrderScore_ = winOrderScore_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          currRoundScore_ = java.util.Collections.unmodifiableList(currRoundScore_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.currRoundScore_ = currRoundScore_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          integral_ = java.util.Collections.unmodifiableList(integral_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.integral_ = integral_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          round_ = java.util.Collections.unmodifiableList(round_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.round_ = round_;
        if (magicBombCountBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000)) {
            magicBombCount_ = java.util.Collections.unmodifiableList(magicBombCount_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.magicBombCount_ = magicBombCount_;
        } else {
          result.magicBombCount_ = magicBombCountBuilder_.build();
        }
        if (magicBombSocreBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            magicBombSocre_ = java.util.Collections.unmodifiableList(magicBombSocre_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.magicBombSocre_ = magicBombSocre_;
        } else {
          result.magicBombSocre_ = magicBombSocreBuilder_.build();
        }
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          diBonmSocre_ = java.util.Collections.unmodifiableList(diBonmSocre_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.diBonmSocre_ = diBonmSocre_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          paiScore_ = java.util.Collections.unmodifiableList(paiScore_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.paiScore_ = paiScore_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          allScore_ = java.util.Collections.unmodifiableList(allScore_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.allScore_ = allScore_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          winLoseScore_ = java.util.Collections.unmodifiableList(winLoseScore_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.winLoseScore_ = winLoseScore_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          endRewardScore_ = java.util.Collections.unmodifiableList(endRewardScore_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.endRewardScore_ = endRewardScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dtz.DTZPro.GameEndDTZ) {
          return mergeFrom((protobuf.clazz.dtz.DTZPro.GameEndDTZ)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dtz.DTZPro.GameEndDTZ other) {
        if (other == protobuf.clazz.dtz.DTZPro.GameEndDTZ.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurrRound()) {
          setCurrRound(other.getCurrRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000008);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasLeftCardCount()) {
          setLeftCardCount(other.getLeftCardCount());
        }
        if (!other.leftCardsData_.isEmpty()) {
          if (leftCardsData_.isEmpty()) {
            leftCardsData_ = other.leftCardsData_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureLeftCardsDataIsMutable();
            leftCardsData_.addAll(other.leftCardsData_);
          }
          onChanged();
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000200);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (scoreDetailCountBuilder_ == null) {
          if (!other.scoreDetailCount_.isEmpty()) {
            if (scoreDetailCount_.isEmpty()) {
              scoreDetailCount_ = other.scoreDetailCount_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureScoreDetailCountIsMutable();
              scoreDetailCount_.addAll(other.scoreDetailCount_);
            }
            onChanged();
          }
        } else {
          if (!other.scoreDetailCount_.isEmpty()) {
            if (scoreDetailCountBuilder_.isEmpty()) {
              scoreDetailCountBuilder_.dispose();
              scoreDetailCountBuilder_ = null;
              scoreDetailCount_ = other.scoreDetailCount_;
              bitField0_ = (bitField0_ & ~0x00000400);
              scoreDetailCountBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getScoreDetailCountFieldBuilder() : null;
            } else {
              scoreDetailCountBuilder_.addAllMessages(other.scoreDetailCount_);
            }
          }
        }
        if (scoreDetailBuilder_ == null) {
          if (!other.scoreDetail_.isEmpty()) {
            if (scoreDetail_.isEmpty()) {
              scoreDetail_ = other.scoreDetail_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureScoreDetailIsMutable();
              scoreDetail_.addAll(other.scoreDetail_);
            }
            onChanged();
          }
        } else {
          if (!other.scoreDetail_.isEmpty()) {
            if (scoreDetailBuilder_.isEmpty()) {
              scoreDetailBuilder_.dispose();
              scoreDetailBuilder_ = null;
              scoreDetail_ = other.scoreDetail_;
              bitField0_ = (bitField0_ & ~0x00000800);
              scoreDetailBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getScoreDetailFieldBuilder() : null;
            } else {
              scoreDetailBuilder_.addAllMessages(other.scoreDetail_);
            }
          }
        }
        if (!other.winOrderScore_.isEmpty()) {
          if (winOrderScore_.isEmpty()) {
            winOrderScore_ = other.winOrderScore_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureWinOrderScoreIsMutable();
            winOrderScore_.addAll(other.winOrderScore_);
          }
          onChanged();
        }
        if (!other.currRoundScore_.isEmpty()) {
          if (currRoundScore_.isEmpty()) {
            currRoundScore_ = other.currRoundScore_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureCurrRoundScoreIsMutable();
            currRoundScore_.addAll(other.currRoundScore_);
          }
          onChanged();
        }
        if (!other.integral_.isEmpty()) {
          if (integral_.isEmpty()) {
            integral_ = other.integral_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureIntegralIsMutable();
            integral_.addAll(other.integral_);
          }
          onChanged();
        }
        if (!other.round_.isEmpty()) {
          if (round_.isEmpty()) {
            round_ = other.round_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureRoundIsMutable();
            round_.addAll(other.round_);
          }
          onChanged();
        }
        if (magicBombCountBuilder_ == null) {
          if (!other.magicBombCount_.isEmpty()) {
            if (magicBombCount_.isEmpty()) {
              magicBombCount_ = other.magicBombCount_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureMagicBombCountIsMutable();
              magicBombCount_.addAll(other.magicBombCount_);
            }
            onChanged();
          }
        } else {
          if (!other.magicBombCount_.isEmpty()) {
            if (magicBombCountBuilder_.isEmpty()) {
              magicBombCountBuilder_.dispose();
              magicBombCountBuilder_ = null;
              magicBombCount_ = other.magicBombCount_;
              bitField0_ = (bitField0_ & ~0x00010000);
              magicBombCountBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMagicBombCountFieldBuilder() : null;
            } else {
              magicBombCountBuilder_.addAllMessages(other.magicBombCount_);
            }
          }
        }
        if (magicBombSocreBuilder_ == null) {
          if (!other.magicBombSocre_.isEmpty()) {
            if (magicBombSocre_.isEmpty()) {
              magicBombSocre_ = other.magicBombSocre_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensureMagicBombSocreIsMutable();
              magicBombSocre_.addAll(other.magicBombSocre_);
            }
            onChanged();
          }
        } else {
          if (!other.magicBombSocre_.isEmpty()) {
            if (magicBombSocreBuilder_.isEmpty()) {
              magicBombSocreBuilder_.dispose();
              magicBombSocreBuilder_ = null;
              magicBombSocre_ = other.magicBombSocre_;
              bitField0_ = (bitField0_ & ~0x00020000);
              magicBombSocreBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMagicBombSocreFieldBuilder() : null;
            } else {
              magicBombSocreBuilder_.addAllMessages(other.magicBombSocre_);
            }
          }
        }
        if (!other.diBonmSocre_.isEmpty()) {
          if (diBonmSocre_.isEmpty()) {
            diBonmSocre_ = other.diBonmSocre_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureDiBonmSocreIsMutable();
            diBonmSocre_.addAll(other.diBonmSocre_);
          }
          onChanged();
        }
        if (!other.paiScore_.isEmpty()) {
          if (paiScore_.isEmpty()) {
            paiScore_ = other.paiScore_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensurePaiScoreIsMutable();
            paiScore_.addAll(other.paiScore_);
          }
          onChanged();
        }
        if (!other.allScore_.isEmpty()) {
          if (allScore_.isEmpty()) {
            allScore_ = other.allScore_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureAllScoreIsMutable();
            allScore_.addAll(other.allScore_);
          }
          onChanged();
        }
        if (!other.winLoseScore_.isEmpty()) {
          if (winLoseScore_.isEmpty()) {
            winLoseScore_ = other.winLoseScore_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureWinLoseScoreIsMutable();
            winLoseScore_.addAll(other.winLoseScore_);
          }
          onChanged();
        }
        if (!other.endRewardScore_.isEmpty()) {
          if (endRewardScore_.isEmpty()) {
            endRewardScore_ = other.endRewardScore_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureEndRewardScoreIsMutable();
            endRewardScore_.addAll(other.endRewardScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dtz.DTZPro.GameEndDTZ parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dtz.DTZPro.GameEndDTZ) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 curr_round = 2;
      private int currRound_ ;
      /**
       * <code>optional int32 curr_round = 2;</code>
       *
       * <pre>
       * 当前圈数
       * </pre>
       */
      public boolean hasCurrRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 curr_round = 2;</code>
       *
       * <pre>
       * 当前圈数
       * </pre>
       */
      public int getCurrRound() {
        return currRound_;
      }
      /**
       * <code>optional int32 curr_round = 2;</code>
       *
       * <pre>
       * 当前圈数
       * </pre>
       */
      public Builder setCurrRound(int value) {
        bitField0_ |= 0x00000002;
        currRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 curr_round = 2;</code>
       *
       * <pre>
       * 当前圈数
       * </pre>
       */
      public Builder clearCurrRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       * 扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 left_card_count = 6;
      private int leftCardCount_ ;
      /**
       * <code>optional int32 left_card_count = 6;</code>
       *
       * <pre>
       * 剩余牌库牌数
       * </pre>
       */
      public boolean hasLeftCardCount() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 left_card_count = 6;</code>
       *
       * <pre>
       * 剩余牌库牌数
       * </pre>
       */
      public int getLeftCardCount() {
        return leftCardCount_;
      }
      /**
       * <code>optional int32 left_card_count = 6;</code>
       *
       * <pre>
       * 剩余牌库牌数
       * </pre>
       */
      public Builder setLeftCardCount(int value) {
        bitField0_ |= 0x00000010;
        leftCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 left_card_count = 6;</code>
       *
       * <pre>
       * 剩余牌库牌数
       * </pre>
       */
      public Builder clearLeftCardCount() {
        bitField0_ = (bitField0_ & ~0x00000010);
        leftCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 left_cards_data = 7;
      private java.util.List<java.lang.Integer> leftCardsData_ = java.util.Collections.emptyList();
      private void ensureLeftCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          leftCardsData_ = new java.util.ArrayList<java.lang.Integer>(leftCardsData_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 left_cards_data = 7;</code>
       */
      public java.util.List<java.lang.Integer>
          getLeftCardsDataList() {
        return java.util.Collections.unmodifiableList(leftCardsData_);
      }
      /**
       * <code>repeated int32 left_cards_data = 7;</code>
       */
      public int getLeftCardsDataCount() {
        return leftCardsData_.size();
      }
      /**
       * <code>repeated int32 left_cards_data = 7;</code>
       */
      public int getLeftCardsData(int index) {
        return leftCardsData_.get(index);
      }
      /**
       * <code>repeated int32 left_cards_data = 7;</code>
       */
      public Builder setLeftCardsData(
          int index, int value) {
        ensureLeftCardsDataIsMutable();
        leftCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 left_cards_data = 7;</code>
       */
      public Builder addLeftCardsData(int value) {
        ensureLeftCardsDataIsMutable();
        leftCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 left_cards_data = 7;</code>
       */
      public Builder addAllLeftCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLeftCardsDataIsMutable();
        super.addAll(values, leftCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 left_cards_data = 7;</code>
       */
      public Builder clearLeftCardsData() {
        leftCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional int32 reason = 8;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       * 结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       * 结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       * 结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000040;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       * 结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000040);
        reason_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 9;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000080;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000080);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 win_order = 10;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       * 输赢排名
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       * 输赢排名
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       * 输赢排名
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       * 输赢排名
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       * 输赢排名
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       * 输赢排名
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 10;</code>
       *
       * <pre>
       * 输赢排名
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 11;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 11;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated .Int32ArrayResponse score_detail_count = 3;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> scoreDetailCount_ =
        java.util.Collections.emptyList();
      private void ensureScoreDetailCountIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          scoreDetailCount_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(scoreDetailCount_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> scoreDetailCountBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getScoreDetailCountList() {
        if (scoreDetailCountBuilder_ == null) {
          return java.util.Collections.unmodifiableList(scoreDetailCount_);
        } else {
          return scoreDetailCountBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public int getScoreDetailCountCount() {
        if (scoreDetailCountBuilder_ == null) {
          return scoreDetailCount_.size();
        } else {
          return scoreDetailCountBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getScoreDetailCount(int index) {
        if (scoreDetailCountBuilder_ == null) {
          return scoreDetailCount_.get(index);
        } else {
          return scoreDetailCountBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public Builder setScoreDetailCount(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (scoreDetailCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScoreDetailCountIsMutable();
          scoreDetailCount_.set(index, value);
          onChanged();
        } else {
          scoreDetailCountBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public Builder setScoreDetailCount(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (scoreDetailCountBuilder_ == null) {
          ensureScoreDetailCountIsMutable();
          scoreDetailCount_.set(index, builderForValue.build());
          onChanged();
        } else {
          scoreDetailCountBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public Builder addScoreDetailCount(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (scoreDetailCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScoreDetailCountIsMutable();
          scoreDetailCount_.add(value);
          onChanged();
        } else {
          scoreDetailCountBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public Builder addScoreDetailCount(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (scoreDetailCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScoreDetailCountIsMutable();
          scoreDetailCount_.add(index, value);
          onChanged();
        } else {
          scoreDetailCountBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public Builder addScoreDetailCount(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (scoreDetailCountBuilder_ == null) {
          ensureScoreDetailCountIsMutable();
          scoreDetailCount_.add(builderForValue.build());
          onChanged();
        } else {
          scoreDetailCountBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public Builder addScoreDetailCount(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (scoreDetailCountBuilder_ == null) {
          ensureScoreDetailCountIsMutable();
          scoreDetailCount_.add(index, builderForValue.build());
          onChanged();
        } else {
          scoreDetailCountBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public Builder addAllScoreDetailCount(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (scoreDetailCountBuilder_ == null) {
          ensureScoreDetailCountIsMutable();
          super.addAll(values, scoreDetailCount_);
          onChanged();
        } else {
          scoreDetailCountBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public Builder clearScoreDetailCount() {
        if (scoreDetailCountBuilder_ == null) {
          scoreDetailCount_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          scoreDetailCountBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public Builder removeScoreDetailCount(int index) {
        if (scoreDetailCountBuilder_ == null) {
          ensureScoreDetailCountIsMutable();
          scoreDetailCount_.remove(index);
          onChanged();
        } else {
          scoreDetailCountBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getScoreDetailCountBuilder(
          int index) {
        return getScoreDetailCountFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getScoreDetailCountOrBuilder(
          int index) {
        if (scoreDetailCountBuilder_ == null) {
          return scoreDetailCount_.get(index);  } else {
          return scoreDetailCountBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getScoreDetailCountOrBuilderList() {
        if (scoreDetailCountBuilder_ != null) {
          return scoreDetailCountBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(scoreDetailCount_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addScoreDetailCountBuilder() {
        return getScoreDetailCountFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addScoreDetailCountBuilder(
          int index) {
        return getScoreDetailCountFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail_count = 3;</code>
       *
       * <pre>
       * 分数详情中特殊牌张数
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getScoreDetailCountBuilderList() {
        return getScoreDetailCountFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getScoreDetailCountFieldBuilder() {
        if (scoreDetailCountBuilder_ == null) {
          scoreDetailCountBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  scoreDetailCount_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          scoreDetailCount_ = null;
        }
        return scoreDetailCountBuilder_;
      }

      // repeated .Int32ArrayResponse score_detail = 13;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> scoreDetail_ =
        java.util.Collections.emptyList();
      private void ensureScoreDetailIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          scoreDetail_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(scoreDetail_);
          bitField0_ |= 0x00000800;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> scoreDetailBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getScoreDetailList() {
        if (scoreDetailBuilder_ == null) {
          return java.util.Collections.unmodifiableList(scoreDetail_);
        } else {
          return scoreDetailBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public int getScoreDetailCount() {
        if (scoreDetailBuilder_ == null) {
          return scoreDetail_.size();
        } else {
          return scoreDetailBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getScoreDetail(int index) {
        if (scoreDetailBuilder_ == null) {
          return scoreDetail_.get(index);
        } else {
          return scoreDetailBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public Builder setScoreDetail(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (scoreDetailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScoreDetailIsMutable();
          scoreDetail_.set(index, value);
          onChanged();
        } else {
          scoreDetailBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public Builder setScoreDetail(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (scoreDetailBuilder_ == null) {
          ensureScoreDetailIsMutable();
          scoreDetail_.set(index, builderForValue.build());
          onChanged();
        } else {
          scoreDetailBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public Builder addScoreDetail(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (scoreDetailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScoreDetailIsMutable();
          scoreDetail_.add(value);
          onChanged();
        } else {
          scoreDetailBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public Builder addScoreDetail(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (scoreDetailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScoreDetailIsMutable();
          scoreDetail_.add(index, value);
          onChanged();
        } else {
          scoreDetailBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public Builder addScoreDetail(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (scoreDetailBuilder_ == null) {
          ensureScoreDetailIsMutable();
          scoreDetail_.add(builderForValue.build());
          onChanged();
        } else {
          scoreDetailBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public Builder addScoreDetail(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (scoreDetailBuilder_ == null) {
          ensureScoreDetailIsMutable();
          scoreDetail_.add(index, builderForValue.build());
          onChanged();
        } else {
          scoreDetailBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public Builder addAllScoreDetail(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (scoreDetailBuilder_ == null) {
          ensureScoreDetailIsMutable();
          super.addAll(values, scoreDetail_);
          onChanged();
        } else {
          scoreDetailBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public Builder clearScoreDetail() {
        if (scoreDetailBuilder_ == null) {
          scoreDetail_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          scoreDetailBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public Builder removeScoreDetail(int index) {
        if (scoreDetailBuilder_ == null) {
          ensureScoreDetailIsMutable();
          scoreDetail_.remove(index);
          onChanged();
        } else {
          scoreDetailBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getScoreDetailBuilder(
          int index) {
        return getScoreDetailFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getScoreDetailOrBuilder(
          int index) {
        if (scoreDetailBuilder_ == null) {
          return scoreDetail_.get(index);  } else {
          return scoreDetailBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getScoreDetailOrBuilderList() {
        if (scoreDetailBuilder_ != null) {
          return scoreDetailBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(scoreDetail_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addScoreDetailBuilder() {
        return getScoreDetailFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addScoreDetailBuilder(
          int index) {
        return getScoreDetailFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse score_detail = 13;</code>
       *
       * <pre>
       * 分数详情中分数
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getScoreDetailBuilderList() {
        return getScoreDetailFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getScoreDetailFieldBuilder() {
        if (scoreDetailBuilder_ == null) {
          scoreDetailBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  scoreDetail_,
                  ((bitField0_ & 0x00000800) == 0x00000800),
                  getParentForChildren(),
                  isClean());
          scoreDetail_ = null;
        }
        return scoreDetailBuilder_;
      }

      // repeated int32 win_order_score = 14;
      private java.util.List<java.lang.Integer> winOrderScore_ = java.util.Collections.emptyList();
      private void ensureWinOrderScoreIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          winOrderScore_ = new java.util.ArrayList<java.lang.Integer>(winOrderScore_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 win_order_score = 14;</code>
       *
       * <pre>
       * 名次得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderScoreList() {
        return java.util.Collections.unmodifiableList(winOrderScore_);
      }
      /**
       * <code>repeated int32 win_order_score = 14;</code>
       *
       * <pre>
       * 名次得分
       * </pre>
       */
      public int getWinOrderScoreCount() {
        return winOrderScore_.size();
      }
      /**
       * <code>repeated int32 win_order_score = 14;</code>
       *
       * <pre>
       * 名次得分
       * </pre>
       */
      public int getWinOrderScore(int index) {
        return winOrderScore_.get(index);
      }
      /**
       * <code>repeated int32 win_order_score = 14;</code>
       *
       * <pre>
       * 名次得分
       * </pre>
       */
      public Builder setWinOrderScore(
          int index, int value) {
        ensureWinOrderScoreIsMutable();
        winOrderScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order_score = 14;</code>
       *
       * <pre>
       * 名次得分
       * </pre>
       */
      public Builder addWinOrderScore(int value) {
        ensureWinOrderScoreIsMutable();
        winOrderScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order_score = 14;</code>
       *
       * <pre>
       * 名次得分
       * </pre>
       */
      public Builder addAllWinOrderScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderScoreIsMutable();
        super.addAll(values, winOrderScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order_score = 14;</code>
       *
       * <pre>
       * 名次得分
       * </pre>
       */
      public Builder clearWinOrderScore() {
        winOrderScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 curr_round_score = 23;
      private java.util.List<java.lang.Integer> currRoundScore_ = java.util.Collections.emptyList();
      private void ensureCurrRoundScoreIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          currRoundScore_ = new java.util.ArrayList<java.lang.Integer>(currRoundScore_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 curr_round_score = 23;</code>
       *
       * <pre>
       * 本局得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCurrRoundScoreList() {
        return java.util.Collections.unmodifiableList(currRoundScore_);
      }
      /**
       * <code>repeated int32 curr_round_score = 23;</code>
       *
       * <pre>
       * 本局得分
       * </pre>
       */
      public int getCurrRoundScoreCount() {
        return currRoundScore_.size();
      }
      /**
       * <code>repeated int32 curr_round_score = 23;</code>
       *
       * <pre>
       * 本局得分
       * </pre>
       */
      public int getCurrRoundScore(int index) {
        return currRoundScore_.get(index);
      }
      /**
       * <code>repeated int32 curr_round_score = 23;</code>
       *
       * <pre>
       * 本局得分
       * </pre>
       */
      public Builder setCurrRoundScore(
          int index, int value) {
        ensureCurrRoundScoreIsMutable();
        currRoundScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 curr_round_score = 23;</code>
       *
       * <pre>
       * 本局得分
       * </pre>
       */
      public Builder addCurrRoundScore(int value) {
        ensureCurrRoundScoreIsMutable();
        currRoundScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 curr_round_score = 23;</code>
       *
       * <pre>
       * 本局得分
       * </pre>
       */
      public Builder addAllCurrRoundScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCurrRoundScoreIsMutable();
        super.addAll(values, currRoundScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 curr_round_score = 23;</code>
       *
       * <pre>
       * 本局得分
       * </pre>
       */
      public Builder clearCurrRoundScore() {
        currRoundScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 integral = 12;
      private java.util.List<java.lang.Integer> integral_ = java.util.Collections.emptyList();
      private void ensureIntegralIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          integral_ = new java.util.ArrayList<java.lang.Integer>(integral_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 integral = 12;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getIntegralList() {
        return java.util.Collections.unmodifiableList(integral_);
      }
      /**
       * <code>repeated int32 integral = 12;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public int getIntegralCount() {
        return integral_.size();
      }
      /**
       * <code>repeated int32 integral = 12;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public int getIntegral(int index) {
        return integral_.get(index);
      }
      /**
       * <code>repeated int32 integral = 12;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public Builder setIntegral(
          int index, int value) {
        ensureIntegralIsMutable();
        integral_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 integral = 12;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public Builder addIntegral(int value) {
        ensureIntegralIsMutable();
        integral_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 integral = 12;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public Builder addAllIntegral(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIntegralIsMutable();
        super.addAll(values, integral_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 integral = 12;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public Builder clearIntegral() {
        integral_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated int32 round = 15;
      private java.util.List<java.lang.Integer> round_ = java.util.Collections.emptyList();
      private void ensureRoundIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          round_ = new java.util.ArrayList<java.lang.Integer>(round_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 round = 15;</code>
       *
       * <pre>
       * 总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getRoundList() {
        return java.util.Collections.unmodifiableList(round_);
      }
      /**
       * <code>repeated int32 round = 15;</code>
       *
       * <pre>
       * 总结算
       * </pre>
       */
      public int getRoundCount() {
        return round_.size();
      }
      /**
       * <code>repeated int32 round = 15;</code>
       *
       * <pre>
       * 总结算
       * </pre>
       */
      public int getRound(int index) {
        return round_.get(index);
      }
      /**
       * <code>repeated int32 round = 15;</code>
       *
       * <pre>
       * 总结算
       * </pre>
       */
      public Builder setRound(
          int index, int value) {
        ensureRoundIsMutable();
        round_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round = 15;</code>
       *
       * <pre>
       * 总结算
       * </pre>
       */
      public Builder addRound(int value) {
        ensureRoundIsMutable();
        round_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round = 15;</code>
       *
       * <pre>
       * 总结算
       * </pre>
       */
      public Builder addAllRound(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRoundIsMutable();
        super.addAll(values, round_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 round = 15;</code>
       *
       * <pre>
       * 总结算
       * </pre>
       */
      public Builder clearRound() {
        round_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse magic_bomb_count = 16;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> magicBombCount_ =
        java.util.Collections.emptyList();
      private void ensureMagicBombCountIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          magicBombCount_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(magicBombCount_);
          bitField0_ |= 0x00010000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> magicBombCountBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getMagicBombCountList() {
        if (magicBombCountBuilder_ == null) {
          return java.util.Collections.unmodifiableList(magicBombCount_);
        } else {
          return magicBombCountBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public int getMagicBombCountCount() {
        if (magicBombCountBuilder_ == null) {
          return magicBombCount_.size();
        } else {
          return magicBombCountBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getMagicBombCount(int index) {
        if (magicBombCountBuilder_ == null) {
          return magicBombCount_.get(index);
        } else {
          return magicBombCountBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public Builder setMagicBombCount(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (magicBombCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMagicBombCountIsMutable();
          magicBombCount_.set(index, value);
          onChanged();
        } else {
          magicBombCountBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public Builder setMagicBombCount(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (magicBombCountBuilder_ == null) {
          ensureMagicBombCountIsMutable();
          magicBombCount_.set(index, builderForValue.build());
          onChanged();
        } else {
          magicBombCountBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public Builder addMagicBombCount(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (magicBombCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMagicBombCountIsMutable();
          magicBombCount_.add(value);
          onChanged();
        } else {
          magicBombCountBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public Builder addMagicBombCount(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (magicBombCountBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMagicBombCountIsMutable();
          magicBombCount_.add(index, value);
          onChanged();
        } else {
          magicBombCountBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public Builder addMagicBombCount(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (magicBombCountBuilder_ == null) {
          ensureMagicBombCountIsMutable();
          magicBombCount_.add(builderForValue.build());
          onChanged();
        } else {
          magicBombCountBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public Builder addMagicBombCount(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (magicBombCountBuilder_ == null) {
          ensureMagicBombCountIsMutable();
          magicBombCount_.add(index, builderForValue.build());
          onChanged();
        } else {
          magicBombCountBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public Builder addAllMagicBombCount(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (magicBombCountBuilder_ == null) {
          ensureMagicBombCountIsMutable();
          super.addAll(values, magicBombCount_);
          onChanged();
        } else {
          magicBombCountBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public Builder clearMagicBombCount() {
        if (magicBombCountBuilder_ == null) {
          magicBombCount_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          magicBombCountBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public Builder removeMagicBombCount(int index) {
        if (magicBombCountBuilder_ == null) {
          ensureMagicBombCountIsMutable();
          magicBombCount_.remove(index);
          onChanged();
        } else {
          magicBombCountBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getMagicBombCountBuilder(
          int index) {
        return getMagicBombCountFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getMagicBombCountOrBuilder(
          int index) {
        if (magicBombCountBuilder_ == null) {
          return magicBombCount_.get(index);  } else {
          return magicBombCountBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getMagicBombCountOrBuilderList() {
        if (magicBombCountBuilder_ != null) {
          return magicBombCountBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(magicBombCount_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addMagicBombCountBuilder() {
        return getMagicBombCountFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addMagicBombCountBuilder(
          int index) {
        return getMagicBombCountFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_count = 16;</code>
       *
       * <pre>
       * 特殊炸次数：0位（K筒子）、1位（A筒子）、2位（2筒子）
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getMagicBombCountBuilderList() {
        return getMagicBombCountFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getMagicBombCountFieldBuilder() {
        if (magicBombCountBuilder_ == null) {
          magicBombCountBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  magicBombCount_,
                  ((bitField0_ & 0x00010000) == 0x00010000),
                  getParentForChildren(),
                  isClean());
          magicBombCount_ = null;
        }
        return magicBombCountBuilder_;
      }

      // repeated .Int32ArrayResponse magic_bomb_socre = 17;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> magicBombSocre_ =
        java.util.Collections.emptyList();
      private void ensureMagicBombSocreIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          magicBombSocre_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(magicBombSocre_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> magicBombSocreBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getMagicBombSocreList() {
        if (magicBombSocreBuilder_ == null) {
          return java.util.Collections.unmodifiableList(magicBombSocre_);
        } else {
          return magicBombSocreBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public int getMagicBombSocreCount() {
        if (magicBombSocreBuilder_ == null) {
          return magicBombSocre_.size();
        } else {
          return magicBombSocreBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getMagicBombSocre(int index) {
        if (magicBombSocreBuilder_ == null) {
          return magicBombSocre_.get(index);
        } else {
          return magicBombSocreBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public Builder setMagicBombSocre(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (magicBombSocreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMagicBombSocreIsMutable();
          magicBombSocre_.set(index, value);
          onChanged();
        } else {
          magicBombSocreBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public Builder setMagicBombSocre(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (magicBombSocreBuilder_ == null) {
          ensureMagicBombSocreIsMutable();
          magicBombSocre_.set(index, builderForValue.build());
          onChanged();
        } else {
          magicBombSocreBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public Builder addMagicBombSocre(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (magicBombSocreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMagicBombSocreIsMutable();
          magicBombSocre_.add(value);
          onChanged();
        } else {
          magicBombSocreBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public Builder addMagicBombSocre(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (magicBombSocreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMagicBombSocreIsMutable();
          magicBombSocre_.add(index, value);
          onChanged();
        } else {
          magicBombSocreBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public Builder addMagicBombSocre(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (magicBombSocreBuilder_ == null) {
          ensureMagicBombSocreIsMutable();
          magicBombSocre_.add(builderForValue.build());
          onChanged();
        } else {
          magicBombSocreBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public Builder addMagicBombSocre(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (magicBombSocreBuilder_ == null) {
          ensureMagicBombSocreIsMutable();
          magicBombSocre_.add(index, builderForValue.build());
          onChanged();
        } else {
          magicBombSocreBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public Builder addAllMagicBombSocre(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (magicBombSocreBuilder_ == null) {
          ensureMagicBombSocreIsMutable();
          super.addAll(values, magicBombSocre_);
          onChanged();
        } else {
          magicBombSocreBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public Builder clearMagicBombSocre() {
        if (magicBombSocreBuilder_ == null) {
          magicBombSocre_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          magicBombSocreBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public Builder removeMagicBombSocre(int index) {
        if (magicBombSocreBuilder_ == null) {
          ensureMagicBombSocreIsMutable();
          magicBombSocre_.remove(index);
          onChanged();
        } else {
          magicBombSocreBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getMagicBombSocreBuilder(
          int index) {
        return getMagicBombSocreFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getMagicBombSocreOrBuilder(
          int index) {
        if (magicBombSocreBuilder_ == null) {
          return magicBombSocre_.get(index);  } else {
          return magicBombSocreBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getMagicBombSocreOrBuilderList() {
        if (magicBombSocreBuilder_ != null) {
          return magicBombSocreBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(magicBombSocre_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addMagicBombSocreBuilder() {
        return getMagicBombSocreFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addMagicBombSocreBuilder(
          int index) {
        return getMagicBombSocreFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse magic_bomb_socre = 17;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getMagicBombSocreBuilderList() {
        return getMagicBombSocreFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getMagicBombSocreFieldBuilder() {
        if (magicBombSocreBuilder_ == null) {
          magicBombSocreBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  magicBombSocre_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          magicBombSocre_ = null;
        }
        return magicBombSocreBuilder_;
      }

      // repeated int32 di_bonm_socre = 18;
      private java.util.List<java.lang.Integer> diBonmSocre_ = java.util.Collections.emptyList();
      private void ensureDiBonmSocreIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          diBonmSocre_ = new java.util.ArrayList<java.lang.Integer>(diBonmSocre_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 di_bonm_socre = 18;</code>
       *
       * <pre>
       * 地炸分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDiBonmSocreList() {
        return java.util.Collections.unmodifiableList(diBonmSocre_);
      }
      /**
       * <code>repeated int32 di_bonm_socre = 18;</code>
       *
       * <pre>
       * 地炸分
       * </pre>
       */
      public int getDiBonmSocreCount() {
        return diBonmSocre_.size();
      }
      /**
       * <code>repeated int32 di_bonm_socre = 18;</code>
       *
       * <pre>
       * 地炸分
       * </pre>
       */
      public int getDiBonmSocre(int index) {
        return diBonmSocre_.get(index);
      }
      /**
       * <code>repeated int32 di_bonm_socre = 18;</code>
       *
       * <pre>
       * 地炸分
       * </pre>
       */
      public Builder setDiBonmSocre(
          int index, int value) {
        ensureDiBonmSocreIsMutable();
        diBonmSocre_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_bonm_socre = 18;</code>
       *
       * <pre>
       * 地炸分
       * </pre>
       */
      public Builder addDiBonmSocre(int value) {
        ensureDiBonmSocreIsMutable();
        diBonmSocre_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_bonm_socre = 18;</code>
       *
       * <pre>
       * 地炸分
       * </pre>
       */
      public Builder addAllDiBonmSocre(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiBonmSocreIsMutable();
        super.addAll(values, diBonmSocre_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_bonm_socre = 18;</code>
       *
       * <pre>
       * 地炸分
       * </pre>
       */
      public Builder clearDiBonmSocre() {
        diBonmSocre_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // repeated int32 pai_score = 19;
      private java.util.List<java.lang.Integer> paiScore_ = java.util.Collections.emptyList();
      private void ensurePaiScoreIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          paiScore_ = new java.util.ArrayList<java.lang.Integer>(paiScore_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 pai_score = 19;</code>
       *
       * <pre>
       * 牌面分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPaiScoreList() {
        return java.util.Collections.unmodifiableList(paiScore_);
      }
      /**
       * <code>repeated int32 pai_score = 19;</code>
       *
       * <pre>
       * 牌面分
       * </pre>
       */
      public int getPaiScoreCount() {
        return paiScore_.size();
      }
      /**
       * <code>repeated int32 pai_score = 19;</code>
       *
       * <pre>
       * 牌面分
       * </pre>
       */
      public int getPaiScore(int index) {
        return paiScore_.get(index);
      }
      /**
       * <code>repeated int32 pai_score = 19;</code>
       *
       * <pre>
       * 牌面分
       * </pre>
       */
      public Builder setPaiScore(
          int index, int value) {
        ensurePaiScoreIsMutable();
        paiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pai_score = 19;</code>
       *
       * <pre>
       * 牌面分
       * </pre>
       */
      public Builder addPaiScore(int value) {
        ensurePaiScoreIsMutable();
        paiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pai_score = 19;</code>
       *
       * <pre>
       * 牌面分
       * </pre>
       */
      public Builder addAllPaiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePaiScoreIsMutable();
        super.addAll(values, paiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pai_score = 19;</code>
       *
       * <pre>
       * 牌面分
       * </pre>
       */
      public Builder clearPaiScore() {
        paiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // repeated int32 all_score = 20;
      private java.util.List<java.lang.Integer> allScore_ = java.util.Collections.emptyList();
      private void ensureAllScoreIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          allScore_ = new java.util.ArrayList<java.lang.Integer>(allScore_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 all_score = 20;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllScoreList() {
        return java.util.Collections.unmodifiableList(allScore_);
      }
      /**
       * <code>repeated int32 all_score = 20;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public int getAllScoreCount() {
        return allScore_.size();
      }
      /**
       * <code>repeated int32 all_score = 20;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public int getAllScore(int index) {
        return allScore_.get(index);
      }
      /**
       * <code>repeated int32 all_score = 20;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public Builder setAllScore(
          int index, int value) {
        ensureAllScoreIsMutable();
        allScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_score = 20;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public Builder addAllScore(int value) {
        ensureAllScoreIsMutable();
        allScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_score = 20;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public Builder addAllAllScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllScoreIsMutable();
        super.addAll(values, allScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_score = 20;</code>
       *
       * <pre>
       * 总分
       * </pre>
       */
      public Builder clearAllScore() {
        allScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated int32 win_lose_score = 21;
      private java.util.List<java.lang.Integer> winLoseScore_ = java.util.Collections.emptyList();
      private void ensureWinLoseScoreIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          winLoseScore_ = new java.util.ArrayList<java.lang.Integer>(winLoseScore_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       * 胜负分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinLoseScoreList() {
        return java.util.Collections.unmodifiableList(winLoseScore_);
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       * 胜负分
       * </pre>
       */
      public int getWinLoseScoreCount() {
        return winLoseScore_.size();
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       * 胜负分
       * </pre>
       */
      public int getWinLoseScore(int index) {
        return winLoseScore_.get(index);
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       * 胜负分
       * </pre>
       */
      public Builder setWinLoseScore(
          int index, int value) {
        ensureWinLoseScoreIsMutable();
        winLoseScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       * 胜负分
       * </pre>
       */
      public Builder addWinLoseScore(int value) {
        ensureWinLoseScoreIsMutable();
        winLoseScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       * 胜负分
       * </pre>
       */
      public Builder addAllWinLoseScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinLoseScoreIsMutable();
        super.addAll(values, winLoseScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_lose_score = 21;</code>
       *
       * <pre>
       * 胜负分
       * </pre>
       */
      public Builder clearWinLoseScore() {
        winLoseScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 end_reward_score = 22;
      private java.util.List<java.lang.Integer> endRewardScore_ = java.util.Collections.emptyList();
      private void ensureEndRewardScoreIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          endRewardScore_ = new java.util.ArrayList<java.lang.Integer>(endRewardScore_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 end_reward_score = 22;</code>
       *
       * <pre>
       * 终局奖励分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndRewardScoreList() {
        return java.util.Collections.unmodifiableList(endRewardScore_);
      }
      /**
       * <code>repeated int32 end_reward_score = 22;</code>
       *
       * <pre>
       * 终局奖励分
       * </pre>
       */
      public int getEndRewardScoreCount() {
        return endRewardScore_.size();
      }
      /**
       * <code>repeated int32 end_reward_score = 22;</code>
       *
       * <pre>
       * 终局奖励分
       * </pre>
       */
      public int getEndRewardScore(int index) {
        return endRewardScore_.get(index);
      }
      /**
       * <code>repeated int32 end_reward_score = 22;</code>
       *
       * <pre>
       * 终局奖励分
       * </pre>
       */
      public Builder setEndRewardScore(
          int index, int value) {
        ensureEndRewardScoreIsMutable();
        endRewardScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_reward_score = 22;</code>
       *
       * <pre>
       * 终局奖励分
       * </pre>
       */
      public Builder addEndRewardScore(int value) {
        ensureEndRewardScoreIsMutable();
        endRewardScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_reward_score = 22;</code>
       *
       * <pre>
       * 终局奖励分
       * </pre>
       */
      public Builder addAllEndRewardScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndRewardScoreIsMutable();
        super.addAll(values, endRewardScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_reward_score = 22;</code>
       *
       * <pre>
       * 终局奖励分
       * </pre>
       */
      public Builder clearEndRewardScore() {
        endRewardScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dtz.GameEndDTZ)
    }

    static {
      defaultInstance = new GameEndDTZ(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dtz.GameEndDTZ)
  }

  public interface CurrRoundScoreOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 cards_score_detail = 1;
    /**
     * <code>repeated int32 cards_score_detail = 1;</code>
     *
     * <pre>
     *牌分数量 （5,10,K 依次顺序）
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsScoreDetailList();
    /**
     * <code>repeated int32 cards_score_detail = 1;</code>
     *
     * <pre>
     *牌分数量 （5,10,K 依次顺序）
     * </pre>
     */
    int getCardsScoreDetailCount();
    /**
     * <code>repeated int32 cards_score_detail = 1;</code>
     *
     * <pre>
     *牌分数量 （5,10,K 依次顺序）
     * </pre>
     */
    int getCardsScoreDetail(int index);

    // optional int32 curz_score = 2;
    /**
     * <code>optional int32 curz_score = 2;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    boolean hasCurzScore();
    /**
     * <code>optional int32 curz_score = 2;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    int getCurzScore();
  }
  /**
   * Protobuf type {@code dtz.CurrRoundScore}
   *
   * <pre>
   * 牌信息
   * </pre>
   */
  public static final class CurrRoundScore extends
      com.google.protobuf.GeneratedMessage
      implements CurrRoundScoreOrBuilder {
    // Use CurrRoundScore.newBuilder() to construct.
    private CurrRoundScore(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CurrRoundScore(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CurrRoundScore defaultInstance;
    public static CurrRoundScore getDefaultInstance() {
      return defaultInstance;
    }

    public CurrRoundScore getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CurrRoundScore(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardsScoreDetail_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardsScoreDetail_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cardsScoreDetail_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsScoreDetail_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              curzScore_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardsScoreDetail_ = java.util.Collections.unmodifiableList(cardsScoreDetail_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_CurrRoundScore_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_CurrRoundScore_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dtz.DTZPro.CurrRoundScore.class, protobuf.clazz.dtz.DTZPro.CurrRoundScore.Builder.class);
    }

    public static com.google.protobuf.Parser<CurrRoundScore> PARSER =
        new com.google.protobuf.AbstractParser<CurrRoundScore>() {
      public CurrRoundScore parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CurrRoundScore(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CurrRoundScore> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 cards_score_detail = 1;
    public static final int CARDS_SCORE_DETAIL_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cardsScoreDetail_;
    /**
     * <code>repeated int32 cards_score_detail = 1;</code>
     *
     * <pre>
     *牌分数量 （5,10,K 依次顺序）
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsScoreDetailList() {
      return cardsScoreDetail_;
    }
    /**
     * <code>repeated int32 cards_score_detail = 1;</code>
     *
     * <pre>
     *牌分数量 （5,10,K 依次顺序）
     * </pre>
     */
    public int getCardsScoreDetailCount() {
      return cardsScoreDetail_.size();
    }
    /**
     * <code>repeated int32 cards_score_detail = 1;</code>
     *
     * <pre>
     *牌分数量 （5,10,K 依次顺序）
     * </pre>
     */
    public int getCardsScoreDetail(int index) {
      return cardsScoreDetail_.get(index);
    }

    // optional int32 curz_score = 2;
    public static final int CURZ_SCORE_FIELD_NUMBER = 2;
    private int curzScore_;
    /**
     * <code>optional int32 curz_score = 2;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public boolean hasCurzScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 curz_score = 2;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public int getCurzScore() {
      return curzScore_;
    }

    private void initFields() {
      cardsScoreDetail_ = java.util.Collections.emptyList();
      curzScore_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardsScoreDetail_.size(); i++) {
        output.writeInt32(1, cardsScoreDetail_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, curzScore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cardsScoreDetail_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsScoreDetail_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsScoreDetailList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curzScore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dtz.DTZPro.CurrRoundScore parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.CurrRoundScore parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.CurrRoundScore parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.CurrRoundScore parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.CurrRoundScore parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.CurrRoundScore parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.CurrRoundScore parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.CurrRoundScore parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.CurrRoundScore parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.CurrRoundScore parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dtz.DTZPro.CurrRoundScore prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dtz.CurrRoundScore}
     *
     * <pre>
     * 牌信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dtz.DTZPro.CurrRoundScoreOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_CurrRoundScore_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_CurrRoundScore_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dtz.DTZPro.CurrRoundScore.class, protobuf.clazz.dtz.DTZPro.CurrRoundScore.Builder.class);
      }

      // Construct using protobuf.clazz.dtz.DTZPro.CurrRoundScore.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardsScoreDetail_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        curzScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_CurrRoundScore_descriptor;
      }

      public protobuf.clazz.dtz.DTZPro.CurrRoundScore getDefaultInstanceForType() {
        return protobuf.clazz.dtz.DTZPro.CurrRoundScore.getDefaultInstance();
      }

      public protobuf.clazz.dtz.DTZPro.CurrRoundScore build() {
        protobuf.clazz.dtz.DTZPro.CurrRoundScore result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dtz.DTZPro.CurrRoundScore buildPartial() {
        protobuf.clazz.dtz.DTZPro.CurrRoundScore result = new protobuf.clazz.dtz.DTZPro.CurrRoundScore(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsScoreDetail_ = java.util.Collections.unmodifiableList(cardsScoreDetail_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cardsScoreDetail_ = cardsScoreDetail_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curzScore_ = curzScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dtz.DTZPro.CurrRoundScore) {
          return mergeFrom((protobuf.clazz.dtz.DTZPro.CurrRoundScore)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dtz.DTZPro.CurrRoundScore other) {
        if (other == protobuf.clazz.dtz.DTZPro.CurrRoundScore.getDefaultInstance()) return this;
        if (!other.cardsScoreDetail_.isEmpty()) {
          if (cardsScoreDetail_.isEmpty()) {
            cardsScoreDetail_ = other.cardsScoreDetail_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardsScoreDetailIsMutable();
            cardsScoreDetail_.addAll(other.cardsScoreDetail_);
          }
          onChanged();
        }
        if (other.hasCurzScore()) {
          setCurzScore(other.getCurzScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dtz.DTZPro.CurrRoundScore parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dtz.DTZPro.CurrRoundScore) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 cards_score_detail = 1;
      private java.util.List<java.lang.Integer> cardsScoreDetail_ = java.util.Collections.emptyList();
      private void ensureCardsScoreDetailIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsScoreDetail_ = new java.util.ArrayList<java.lang.Integer>(cardsScoreDetail_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 cards_score_detail = 1;</code>
       *
       * <pre>
       *牌分数量 （5,10,K 依次顺序）
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsScoreDetailList() {
        return java.util.Collections.unmodifiableList(cardsScoreDetail_);
      }
      /**
       * <code>repeated int32 cards_score_detail = 1;</code>
       *
       * <pre>
       *牌分数量 （5,10,K 依次顺序）
       * </pre>
       */
      public int getCardsScoreDetailCount() {
        return cardsScoreDetail_.size();
      }
      /**
       * <code>repeated int32 cards_score_detail = 1;</code>
       *
       * <pre>
       *牌分数量 （5,10,K 依次顺序）
       * </pre>
       */
      public int getCardsScoreDetail(int index) {
        return cardsScoreDetail_.get(index);
      }
      /**
       * <code>repeated int32 cards_score_detail = 1;</code>
       *
       * <pre>
       *牌分数量 （5,10,K 依次顺序）
       * </pre>
       */
      public Builder setCardsScoreDetail(
          int index, int value) {
        ensureCardsScoreDetailIsMutable();
        cardsScoreDetail_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_score_detail = 1;</code>
       *
       * <pre>
       *牌分数量 （5,10,K 依次顺序）
       * </pre>
       */
      public Builder addCardsScoreDetail(int value) {
        ensureCardsScoreDetailIsMutable();
        cardsScoreDetail_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_score_detail = 1;</code>
       *
       * <pre>
       *牌分数量 （5,10,K 依次顺序）
       * </pre>
       */
      public Builder addAllCardsScoreDetail(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsScoreDetailIsMutable();
        super.addAll(values, cardsScoreDetail_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_score_detail = 1;</code>
       *
       * <pre>
       *牌分数量 （5,10,K 依次顺序）
       * </pre>
       */
      public Builder clearCardsScoreDetail() {
        cardsScoreDetail_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 curz_score = 2;
      private int curzScore_ ;
      /**
       * <code>optional int32 curz_score = 2;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public boolean hasCurzScore() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 curz_score = 2;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public int getCurzScore() {
        return curzScore_;
      }
      /**
       * <code>optional int32 curz_score = 2;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder setCurzScore(int value) {
        bitField0_ |= 0x00000002;
        curzScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 curz_score = 2;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder clearCurzScore() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curzScore_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dtz.CurrRoundScore)
    }

    static {
      defaultInstance = new CurrRoundScore(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dtz.CurrRoundScore)
  }

  public interface PlayerScoreOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 history_score = 1;
    /**
     * <code>repeated int32 history_score = 1;</code>
     *
     * <pre>
     *历史总分
     * </pre>
     */
    java.util.List<java.lang.Integer> getHistoryScoreList();
    /**
     * <code>repeated int32 history_score = 1;</code>
     *
     * <pre>
     *历史总分
     * </pre>
     */
    int getHistoryScoreCount();
    /**
     * <code>repeated int32 history_score = 1;</code>
     *
     * <pre>
     *历史总分
     * </pre>
     */
    int getHistoryScore(int index);

    // repeated int32 cur_score = 2;
    /**
     * <code>repeated int32 cur_score = 2;</code>
     *
     * <pre>
     * 本局总分
     * </pre>
     */
    java.util.List<java.lang.Integer> getCurScoreList();
    /**
     * <code>repeated int32 cur_score = 2;</code>
     *
     * <pre>
     * 本局总分
     * </pre>
     */
    int getCurScoreCount();
    /**
     * <code>repeated int32 cur_score = 2;</code>
     *
     * <pre>
     * 本局总分
     * </pre>
     */
    int getCurScore(int index);

    // repeated int32 magic_score = 3;
    /**
     * <code>repeated int32 magic_score = 3;</code>
     *
     * <pre>
     * 地炸、筒子分
     * </pre>
     */
    java.util.List<java.lang.Integer> getMagicScoreList();
    /**
     * <code>repeated int32 magic_score = 3;</code>
     *
     * <pre>
     * 地炸、筒子分
     * </pre>
     */
    int getMagicScoreCount();
    /**
     * <code>repeated int32 magic_score = 3;</code>
     *
     * <pre>
     * 地炸、筒子分
     * </pre>
     */
    int getMagicScore(int index);
  }
  /**
   * Protobuf type {@code dtz.PlayerScore}
   */
  public static final class PlayerScore extends
      com.google.protobuf.GeneratedMessage
      implements PlayerScoreOrBuilder {
    // Use PlayerScore.newBuilder() to construct.
    private PlayerScore(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlayerScore(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PlayerScore defaultInstance;
    public static PlayerScore getDefaultInstance() {
      return defaultInstance;
    }

    public PlayerScore getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PlayerScore(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                historyScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              historyScore_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                historyScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                historyScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                curScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              curScore_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                curScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                curScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                magicScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              magicScore_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                magicScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                magicScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          historyScore_ = java.util.Collections.unmodifiableList(historyScore_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          curScore_ = java.util.Collections.unmodifiableList(curScore_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          magicScore_ = java.util.Collections.unmodifiableList(magicScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_PlayerScore_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.dtz.DTZPro.internal_static_dtz_PlayerScore_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.dtz.DTZPro.PlayerScore.class, protobuf.clazz.dtz.DTZPro.PlayerScore.Builder.class);
    }

    public static com.google.protobuf.Parser<PlayerScore> PARSER =
        new com.google.protobuf.AbstractParser<PlayerScore>() {
      public PlayerScore parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlayerScore(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlayerScore> getParserForType() {
      return PARSER;
    }

    // repeated int32 history_score = 1;
    public static final int HISTORY_SCORE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> historyScore_;
    /**
     * <code>repeated int32 history_score = 1;</code>
     *
     * <pre>
     *历史总分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHistoryScoreList() {
      return historyScore_;
    }
    /**
     * <code>repeated int32 history_score = 1;</code>
     *
     * <pre>
     *历史总分
     * </pre>
     */
    public int getHistoryScoreCount() {
      return historyScore_.size();
    }
    /**
     * <code>repeated int32 history_score = 1;</code>
     *
     * <pre>
     *历史总分
     * </pre>
     */
    public int getHistoryScore(int index) {
      return historyScore_.get(index);
    }

    // repeated int32 cur_score = 2;
    public static final int CUR_SCORE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> curScore_;
    /**
     * <code>repeated int32 cur_score = 2;</code>
     *
     * <pre>
     * 本局总分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCurScoreList() {
      return curScore_;
    }
    /**
     * <code>repeated int32 cur_score = 2;</code>
     *
     * <pre>
     * 本局总分
     * </pre>
     */
    public int getCurScoreCount() {
      return curScore_.size();
    }
    /**
     * <code>repeated int32 cur_score = 2;</code>
     *
     * <pre>
     * 本局总分
     * </pre>
     */
    public int getCurScore(int index) {
      return curScore_.get(index);
    }

    // repeated int32 magic_score = 3;
    public static final int MAGIC_SCORE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> magicScore_;
    /**
     * <code>repeated int32 magic_score = 3;</code>
     *
     * <pre>
     * 地炸、筒子分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMagicScoreList() {
      return magicScore_;
    }
    /**
     * <code>repeated int32 magic_score = 3;</code>
     *
     * <pre>
     * 地炸、筒子分
     * </pre>
     */
    public int getMagicScoreCount() {
      return magicScore_.size();
    }
    /**
     * <code>repeated int32 magic_score = 3;</code>
     *
     * <pre>
     * 地炸、筒子分
     * </pre>
     */
    public int getMagicScore(int index) {
      return magicScore_.get(index);
    }

    private void initFields() {
      historyScore_ = java.util.Collections.emptyList();
      curScore_ = java.util.Collections.emptyList();
      magicScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < historyScore_.size(); i++) {
        output.writeInt32(1, historyScore_.get(i));
      }
      for (int i = 0; i < curScore_.size(); i++) {
        output.writeInt32(2, curScore_.get(i));
      }
      for (int i = 0; i < magicScore_.size(); i++) {
        output.writeInt32(3, magicScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < historyScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(historyScore_.get(i));
        }
        size += dataSize;
        size += 1 * getHistoryScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < curScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(curScore_.get(i));
        }
        size += dataSize;
        size += 1 * getCurScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < magicScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(magicScore_.get(i));
        }
        size += dataSize;
        size += 1 * getMagicScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.dtz.DTZPro.PlayerScore parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.PlayerScore parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.PlayerScore parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.dtz.DTZPro.PlayerScore parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.PlayerScore parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.PlayerScore parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.PlayerScore parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.PlayerScore parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.dtz.DTZPro.PlayerScore parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.dtz.DTZPro.PlayerScore parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.dtz.DTZPro.PlayerScore prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dtz.PlayerScore}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.dtz.DTZPro.PlayerScoreOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_PlayerScore_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_PlayerScore_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.dtz.DTZPro.PlayerScore.class, protobuf.clazz.dtz.DTZPro.PlayerScore.Builder.class);
      }

      // Construct using protobuf.clazz.dtz.DTZPro.PlayerScore.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        historyScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        curScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        magicScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.dtz.DTZPro.internal_static_dtz_PlayerScore_descriptor;
      }

      public protobuf.clazz.dtz.DTZPro.PlayerScore getDefaultInstanceForType() {
        return protobuf.clazz.dtz.DTZPro.PlayerScore.getDefaultInstance();
      }

      public protobuf.clazz.dtz.DTZPro.PlayerScore build() {
        protobuf.clazz.dtz.DTZPro.PlayerScore result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.dtz.DTZPro.PlayerScore buildPartial() {
        protobuf.clazz.dtz.DTZPro.PlayerScore result = new protobuf.clazz.dtz.DTZPro.PlayerScore(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          historyScore_ = java.util.Collections.unmodifiableList(historyScore_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.historyScore_ = historyScore_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          curScore_ = java.util.Collections.unmodifiableList(curScore_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.curScore_ = curScore_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          magicScore_ = java.util.Collections.unmodifiableList(magicScore_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.magicScore_ = magicScore_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.dtz.DTZPro.PlayerScore) {
          return mergeFrom((protobuf.clazz.dtz.DTZPro.PlayerScore)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.dtz.DTZPro.PlayerScore other) {
        if (other == protobuf.clazz.dtz.DTZPro.PlayerScore.getDefaultInstance()) return this;
        if (!other.historyScore_.isEmpty()) {
          if (historyScore_.isEmpty()) {
            historyScore_ = other.historyScore_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHistoryScoreIsMutable();
            historyScore_.addAll(other.historyScore_);
          }
          onChanged();
        }
        if (!other.curScore_.isEmpty()) {
          if (curScore_.isEmpty()) {
            curScore_ = other.curScore_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCurScoreIsMutable();
            curScore_.addAll(other.curScore_);
          }
          onChanged();
        }
        if (!other.magicScore_.isEmpty()) {
          if (magicScore_.isEmpty()) {
            magicScore_ = other.magicScore_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureMagicScoreIsMutable();
            magicScore_.addAll(other.magicScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.dtz.DTZPro.PlayerScore parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.dtz.DTZPro.PlayerScore) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 history_score = 1;
      private java.util.List<java.lang.Integer> historyScore_ = java.util.Collections.emptyList();
      private void ensureHistoryScoreIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          historyScore_ = new java.util.ArrayList<java.lang.Integer>(historyScore_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 history_score = 1;</code>
       *
       * <pre>
       *历史总分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHistoryScoreList() {
        return java.util.Collections.unmodifiableList(historyScore_);
      }
      /**
       * <code>repeated int32 history_score = 1;</code>
       *
       * <pre>
       *历史总分
       * </pre>
       */
      public int getHistoryScoreCount() {
        return historyScore_.size();
      }
      /**
       * <code>repeated int32 history_score = 1;</code>
       *
       * <pre>
       *历史总分
       * </pre>
       */
      public int getHistoryScore(int index) {
        return historyScore_.get(index);
      }
      /**
       * <code>repeated int32 history_score = 1;</code>
       *
       * <pre>
       *历史总分
       * </pre>
       */
      public Builder setHistoryScore(
          int index, int value) {
        ensureHistoryScoreIsMutable();
        historyScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 history_score = 1;</code>
       *
       * <pre>
       *历史总分
       * </pre>
       */
      public Builder addHistoryScore(int value) {
        ensureHistoryScoreIsMutable();
        historyScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 history_score = 1;</code>
       *
       * <pre>
       *历史总分
       * </pre>
       */
      public Builder addAllHistoryScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHistoryScoreIsMutable();
        super.addAll(values, historyScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 history_score = 1;</code>
       *
       * <pre>
       *历史总分
       * </pre>
       */
      public Builder clearHistoryScore() {
        historyScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated int32 cur_score = 2;
      private java.util.List<java.lang.Integer> curScore_ = java.util.Collections.emptyList();
      private void ensureCurScoreIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          curScore_ = new java.util.ArrayList<java.lang.Integer>(curScore_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cur_score = 2;</code>
       *
       * <pre>
       * 本局总分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCurScoreList() {
        return java.util.Collections.unmodifiableList(curScore_);
      }
      /**
       * <code>repeated int32 cur_score = 2;</code>
       *
       * <pre>
       * 本局总分
       * </pre>
       */
      public int getCurScoreCount() {
        return curScore_.size();
      }
      /**
       * <code>repeated int32 cur_score = 2;</code>
       *
       * <pre>
       * 本局总分
       * </pre>
       */
      public int getCurScore(int index) {
        return curScore_.get(index);
      }
      /**
       * <code>repeated int32 cur_score = 2;</code>
       *
       * <pre>
       * 本局总分
       * </pre>
       */
      public Builder setCurScore(
          int index, int value) {
        ensureCurScoreIsMutable();
        curScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cur_score = 2;</code>
       *
       * <pre>
       * 本局总分
       * </pre>
       */
      public Builder addCurScore(int value) {
        ensureCurScoreIsMutable();
        curScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cur_score = 2;</code>
       *
       * <pre>
       * 本局总分
       * </pre>
       */
      public Builder addAllCurScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCurScoreIsMutable();
        super.addAll(values, curScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cur_score = 2;</code>
       *
       * <pre>
       * 本局总分
       * </pre>
       */
      public Builder clearCurScore() {
        curScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 magic_score = 3;
      private java.util.List<java.lang.Integer> magicScore_ = java.util.Collections.emptyList();
      private void ensureMagicScoreIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          magicScore_ = new java.util.ArrayList<java.lang.Integer>(magicScore_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 magic_score = 3;</code>
       *
       * <pre>
       * 地炸、筒子分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMagicScoreList() {
        return java.util.Collections.unmodifiableList(magicScore_);
      }
      /**
       * <code>repeated int32 magic_score = 3;</code>
       *
       * <pre>
       * 地炸、筒子分
       * </pre>
       */
      public int getMagicScoreCount() {
        return magicScore_.size();
      }
      /**
       * <code>repeated int32 magic_score = 3;</code>
       *
       * <pre>
       * 地炸、筒子分
       * </pre>
       */
      public int getMagicScore(int index) {
        return magicScore_.get(index);
      }
      /**
       * <code>repeated int32 magic_score = 3;</code>
       *
       * <pre>
       * 地炸、筒子分
       * </pre>
       */
      public Builder setMagicScore(
          int index, int value) {
        ensureMagicScoreIsMutable();
        magicScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 magic_score = 3;</code>
       *
       * <pre>
       * 地炸、筒子分
       * </pre>
       */
      public Builder addMagicScore(int value) {
        ensureMagicScoreIsMutable();
        magicScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 magic_score = 3;</code>
       *
       * <pre>
       * 地炸、筒子分
       * </pre>
       */
      public Builder addAllMagicScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMagicScoreIsMutable();
        super.addAll(values, magicScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 magic_score = 3;</code>
       *
       * <pre>
       * 地炸、筒子分
       * </pre>
       */
      public Builder clearMagicScore() {
        magicScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dtz.PlayerScore)
    }

    static {
      defaultInstance = new PlayerScore(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dtz.PlayerScore)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dtz_ShowAutoOutCardTime_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dtz_ShowAutoOutCardTime_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dtz_OutCardDataDTZ_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dtz_OutCardDataDTZ_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dtz_GameStartDTZ_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dtz_GameStartDTZ_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dtz_RoomResponseDTZ_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dtz_RoomResponseDTZ_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dtz_GameEndDTZ_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dtz_GameEndDTZ_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dtz_CurrRoundScore_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dtz_CurrRoundScore_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dtz_PlayerScore_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dtz_PlayerScore_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rdtz/dtz.proto\022\003dtz\032\024basic/protocol.pro" +
      "to\032\022basic/common.proto\"D\n\023ShowAutoOutCar" +
      "dTime\022\025\n\rtarget_player\030\001 \002(\005\022\026\n\016displaye" +
      "r_time\030\002 \002(\005\"\340\003\n\016OutCardDataDTZ\022\027\n\017out_c" +
      "ard_player\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\023\n\013" +
      "cards_count\030\003 \001(\005\022\021\n\tcard_type\030\004 \001(\005\022\022\n\n" +
      "cur_player\030\005 \001(\005\022\025\n\rpr_cards_data\030\006 \003(\005\022" +
      "\026\n\016pr_cards_count\030\007 \001(\005\022\030\n\020pr_out_card_t" +
      "ype\030\010 \001(\005\022\024\n\014is_first_out\030\t \001(\010\022\031\n\021user_" +
      "can_out_data\030\n \003(\005\022\032\n\022user_can_out_count",
      "\030\013 \001(\005\022\026\n\016user_get_score\030\014 \003(\005\022\027\n\017hand_c" +
      "ard_count\030\r \003(\005\022+\n\016hand_card_data\030\022 \003(\0132" +
      "\023.Int32ArrayResponse\022\021\n\twin_order\030\016 \003(\005\022" +
      "\030\n\020is_have_not_card\030\017 \001(\010\022\032\n\022have_card_t" +
      "han_out\030\020 \001(\010\022\024\n\014display_time\030\021 \001(\005\022\022\n\np" +
      "ine_count\030\023 \001(\005\"\350\001\n\014GameStartDTZ\022\022\n\ncur_" +
      "banker\030\001 \001(\005\022\022\n\ncard_count\030\002 \003(\005\022\'\n\ncard" +
      "s_data\030\003 \003(\0132\023.Int32ArrayResponse\022\024\n\014dis" +
      "play_time\030\004 \001(\005\022\034\n\troom_info\030\005 \001(\0132\t.Roo" +
      "mInfo\022$\n\007players\030\006 \003(\0132\023.RoomPlayerRespo",
      "nse\022\027\n\017left_card_count\030\010 \001(\005\022\024\n\014commResp" +
      "onse\030\007 \001(\014\"\217\005\n\017RoomResponseDTZ\022\025\n\rbanker" +
      "_player\030\001 \001(\005\022\026\n\016current_player\030\002 \001(\005\022\023\n" +
      "\013prev_player\030\003 \001(\005\022\017\n\007trustee\030\004 \003(\010\022+\n\016o" +
      "ut_cards_data\030\005 \003(\0132\023.Int32ArrayResponse" +
      "\022\027\n\017out_cards_count\030\006 \003(\005\022\021\n\tcard_type\030\007" +
      " \003(\005\022\032\n\022pr_out_card_player\030\010 \001(\005\022\025\n\rpr_c" +
      "ards_data\030\t \003(\005\022\026\n\016pr_cards_count\030\n \001(\005\022" +
      "\030\n\020pr_out_card_type\030\013 \001(\005\022\024\n\014display_tim" +
      "e\030\014 \001(\005\022\022\n\ncard_count\030\r \003(\005\022\'\n\ncards_dat",
      "a\030\016 \003(\0132\023.Int32ArrayResponse\022\034\n\troom_inf" +
      "o\030\017 \001(\0132\t.RoomInfo\022$\n\007players\030\020 \003(\0132\023.Ro" +
      "omPlayerResponse\022\031\n\021user_can_out_data\030\021 " +
      "\003(\005\022\032\n\022user_can_out_count\030\022 \001(\005\022\026\n\016user_" +
      "get_score\030\023 \003(\005\022\021\n\twin_order\030\024 \003(\005\022\027\n\017le" +
      "ft_card_count\030\025 \001(\005\022\023\n\013player_pass\030\026 \003(\005" +
      "\022\024\n\014is_first_out\030\027 \001(\010\022\022\n\npine_count\030\030 \001" +
      "(\005\022\030\n\020is_have_not_card\030\031 \001(\010\"\212\005\n\nGameEnd" +
      "DTZ\022\034\n\troom_info\030\001 \001(\0132\t.RoomInfo\022\022\n\ncur" +
      "r_round\030\002 \001(\005\022\022\n\ncard_count\030\004 \003(\005\022\'\n\ncar",
      "ds_data\030\005 \003(\0132\023.Int32ArrayResponse\022\027\n\017le" +
      "ft_card_count\030\006 \001(\005\022\027\n\017left_cards_data\030\007" +
      " \003(\005\022\016\n\006reason\030\010 \001(\005\022\025\n\rbanker_player\030\t " +
      "\001(\005\022\021\n\twin_order\030\n \003(\005\022$\n\007players\030\013 \003(\0132" +
      "\023.RoomPlayerResponse\022/\n\022score_detail_cou" +
      "nt\030\003 \003(\0132\023.Int32ArrayResponse\022)\n\014score_d" +
      "etail\030\r \003(\0132\023.Int32ArrayResponse\022\027\n\017win_" +
      "order_score\030\016 \003(\005\022\030\n\020curr_round_score\030\027 " +
      "\003(\005\022\020\n\010integral\030\014 \003(\005\022\r\n\005round\030\017 \003(\005\022-\n\020" +
      "magic_bomb_count\030\020 \003(\0132\023.Int32ArrayRespo",
      "nse\022-\n\020magic_bomb_socre\030\021 \003(\0132\023.Int32Arr" +
      "ayResponse\022\025\n\rdi_bonm_socre\030\022 \003(\005\022\021\n\tpai" +
      "_score\030\023 \003(\005\022\021\n\tall_score\030\024 \003(\005\022\026\n\016win_l" +
      "ose_score\030\025 \003(\005\022\030\n\020end_reward_score\030\026 \003(" +
      "\005\"@\n\016CurrRoundScore\022\032\n\022cards_score_detai" +
      "l\030\001 \003(\005\022\022\n\ncurz_score\030\002 \001(\005\"L\n\013PlayerSco" +
      "re\022\025\n\rhistory_score\030\001 \003(\005\022\021\n\tcur_score\030\002" +
      " \003(\005\022\023\n\013magic_score\030\003 \003(\005B\034\n\022protobuf.cl" +
      "azz.dtzB\006DTZPro"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_dtz_ShowAutoOutCardTime_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_dtz_ShowAutoOutCardTime_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dtz_ShowAutoOutCardTime_descriptor,
              new java.lang.String[] { "TargetPlayer", "DisplayerTime", });
          internal_static_dtz_OutCardDataDTZ_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_dtz_OutCardDataDTZ_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dtz_OutCardDataDTZ_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "UserCanOutData", "UserCanOutCount", "UserGetScore", "HandCardCount", "HandCardData", "WinOrder", "IsHaveNotCard", "HaveCardThanOut", "DisplayTime", "PineCount", });
          internal_static_dtz_GameStartDTZ_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_dtz_GameStartDTZ_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dtz_GameStartDTZ_descriptor,
              new java.lang.String[] { "CurBanker", "CardCount", "CardsData", "DisplayTime", "RoomInfo", "Players", "LeftCardCount", "CommResponse", });
          internal_static_dtz_RoomResponseDTZ_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_dtz_RoomResponseDTZ_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dtz_RoomResponseDTZ_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "OutCardsCount", "CardType", "PrOutCardPlayer", "PrCardsData", "PrCardsCount", "PrOutCardType", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "UserCanOutData", "UserCanOutCount", "UserGetScore", "WinOrder", "LeftCardCount", "PlayerPass", "IsFirstOut", "PineCount", "IsHaveNotCard", });
          internal_static_dtz_GameEndDTZ_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_dtz_GameEndDTZ_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dtz_GameEndDTZ_descriptor,
              new java.lang.String[] { "RoomInfo", "CurrRound", "CardCount", "CardsData", "LeftCardCount", "LeftCardsData", "Reason", "BankerPlayer", "WinOrder", "Players", "ScoreDetailCount", "ScoreDetail", "WinOrderScore", "CurrRoundScore", "Integral", "Round", "MagicBombCount", "MagicBombSocre", "DiBonmSocre", "PaiScore", "AllScore", "WinLoseScore", "EndRewardScore", });
          internal_static_dtz_CurrRoundScore_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_dtz_CurrRoundScore_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dtz_CurrRoundScore_descriptor,
              new java.lang.String[] { "CardsScoreDetail", "CurzScore", });
          internal_static_dtz_PlayerScore_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_dtz_PlayerScore_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dtz_PlayerScore_descriptor,
              new java.lang.String[] { "HistoryScore", "CurScore", "MagicScore", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
          protobuf.clazz.Common.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
