// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdh/sdhProto.proto

package protobuf.clazz.sdh;

public final class SdhRsp {
  private SdhRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RoomInfoSdhOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 room_id = 1;
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    boolean hasRoomId();
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    int getRoomId();

    // optional int32 game_type_index = 4;
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    boolean hasGameTypeIndex();
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    int getGameTypeIndex();

    // optional int32 game_rule_index = 2;
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    boolean hasGameRuleIndex();
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    int getGameRuleIndex();

    // repeated int32 game_rule_index_ex = 12;
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    java.util.List<java.lang.Integer> getGameRuleIndexExList();
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    int getGameRuleIndexExCount();
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    int getGameRuleIndexEx(int index);

    // optional string game_rule_des = 3;
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    boolean hasGameRuleDes();
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getGameRuleDes();
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getGameRuleDesBytes();

    // optional int32 game_round = 5;
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    int getGameRound();

    // optional int32 cur_round = 6;
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    int getCurRound();

    // optional int32 game_status = 7;
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    boolean hasGameStatus();
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    int getGameStatus();

    // optional int64 create_player_id = 8;
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    boolean hasCreatePlayerId();
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    long getCreatePlayerId();

    // optional int32 begin_left_card = 9;
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    boolean hasBeginLeftCard();
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    int getBeginLeftCard();

    // optional int32 _banker_player = 10;
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional string create_name = 11;
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    boolean hasCreateName();
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    java.lang.String getCreateName();
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    com.google.protobuf.ByteString
        getCreateNameBytes();
  }
  /**
   * Protobuf type {@code sdh.RoomInfoSdh}
   *
   * <pre>
   *房间信息
   * </pre>
   */
  public static final class RoomInfoSdh extends
      com.google.protobuf.GeneratedMessage
      implements RoomInfoSdhOrBuilder {
    // Use RoomInfoSdh.newBuilder() to construct.
    private RoomInfoSdh(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomInfoSdh(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomInfoSdh defaultInstance;
    public static RoomInfoSdh getDefaultInstance() {
      return defaultInstance;
    }

    public RoomInfoSdh getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomInfoSdh(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              roomId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000004;
              gameRuleIndex_ = input.readInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000008;
              gameRuleDes_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              gameTypeIndex_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              gameRound_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              curRound_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              gameStatus_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              createPlayerId_ = input.readInt64();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              beginLeftCard_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              BankerPlayer_ = input.readInt32();
              break;
            }
            case 90: {
              bitField0_ |= 0x00000400;
              createName_ = input.readBytes();
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              gameRuleIndexEx_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                gameRuleIndexEx_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = java.util.Collections.unmodifiableList(gameRuleIndexEx_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_RoomInfoSdh_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_RoomInfoSdh_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.class, protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomInfoSdh> PARSER =
        new com.google.protobuf.AbstractParser<RoomInfoSdh>() {
      public RoomInfoSdh parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomInfoSdh(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomInfoSdh> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 room_id = 1;
    public static final int ROOM_ID_FIELD_NUMBER = 1;
    private int roomId_;
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 room_id = 1;</code>
     *
     * <pre>
     *房间号
     * </pre>
     */
    public int getRoomId() {
      return roomId_;
    }

    // optional int32 game_type_index = 4;
    public static final int GAME_TYPE_INDEX_FIELD_NUMBER = 4;
    private int gameTypeIndex_;
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public boolean hasGameTypeIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 game_type_index = 4;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public int getGameTypeIndex() {
      return gameTypeIndex_;
    }

    // optional int32 game_rule_index = 2;
    public static final int GAME_RULE_INDEX_FIELD_NUMBER = 2;
    private int gameRuleIndex_;
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public boolean hasGameRuleIndex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_rule_index = 2;</code>
     *
     * <pre>
     *玩法
     * </pre>
     */
    public int getGameRuleIndex() {
      return gameRuleIndex_;
    }

    // repeated int32 game_rule_index_ex = 12;
    public static final int GAME_RULE_INDEX_EX_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> gameRuleIndexEx_;
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getGameRuleIndexExList() {
      return gameRuleIndexEx_;
    }
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public int getGameRuleIndexExCount() {
      return gameRuleIndexEx_.size();
    }
    /**
     * <code>repeated int32 game_rule_index_ex = 12;</code>
     *
     * <pre>
     *附加玩法
     * </pre>
     */
    public int getGameRuleIndexEx(int index) {
      return gameRuleIndexEx_.get(index);
    }

    // optional string game_rule_des = 3;
    public static final int GAME_RULE_DES_FIELD_NUMBER = 3;
    private java.lang.Object gameRuleDes_;
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public boolean hasGameRuleDes() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getGameRuleDes() {
      java.lang.Object ref = gameRuleDes_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          gameRuleDes_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string game_rule_des = 3;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getGameRuleDesBytes() {
      java.lang.Object ref = gameRuleDes_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        gameRuleDes_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 game_round = 5;
    public static final int GAME_ROUND_FIELD_NUMBER = 5;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 game_round = 5;</code>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // optional int32 cur_round = 6;
    public static final int CUR_ROUND_FIELD_NUMBER = 6;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 cur_round = 6;</code>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_status = 7;
    public static final int GAME_STATUS_FIELD_NUMBER = 7;
    private int gameStatus_;
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    public boolean hasGameStatus() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 game_status = 7;</code>
     */
    public int getGameStatus() {
      return gameStatus_;
    }

    // optional int64 create_player_id = 8;
    public static final int CREATE_PLAYER_ID_FIELD_NUMBER = 8;
    private long createPlayerId_;
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    public boolean hasCreatePlayerId() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int64 create_player_id = 8;</code>
     */
    public long getCreatePlayerId() {
      return createPlayerId_;
    }

    // optional int32 begin_left_card = 9;
    public static final int BEGIN_LEFT_CARD_FIELD_NUMBER = 9;
    private int beginLeftCard_;
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    public boolean hasBeginLeftCard() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 begin_left_card = 9;</code>
     */
    public int getBeginLeftCard() {
      return beginLeftCard_;
    }

    // optional int32 _banker_player = 10;
    public static final int _BANKER_PLAYER_FIELD_NUMBER = 10;
    private int BankerPlayer_;
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 _banker_player = 10;</code>
     *
     * <pre>
     *当前庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return BankerPlayer_;
    }

    // optional string create_name = 11;
    public static final int CREATE_NAME_FIELD_NUMBER = 11;
    private java.lang.Object createName_;
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public boolean hasCreateName() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public java.lang.String getCreateName() {
      java.lang.Object ref = createName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          createName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string create_name = 11;</code>
     *
     * <pre>
     *创建者姓名
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCreateNameBytes() {
      java.lang.Object ref = createName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        createName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      roomId_ = 0;
      gameTypeIndex_ = 0;
      gameRuleIndex_ = 0;
      gameRuleIndexEx_ = java.util.Collections.emptyList();
      gameRuleDes_ = "";
      gameRound_ = 0;
      curRound_ = 0;
      gameStatus_ = 0;
      createPlayerId_ = 0L;
      beginLeftCard_ = 0;
      BankerPlayer_ = 0;
      createName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, roomId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(2, gameRuleIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(3, getGameRuleDesBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, gameTypeIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, gameRound_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, curRound_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, gameStatus_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt64(8, createPlayerId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, beginLeftCard_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, BankerPlayer_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(11, getCreateNameBytes());
      }
      for (int i = 0; i < gameRuleIndexEx_.size(); i++) {
        output.writeInt32(12, gameRuleIndexEx_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, roomId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, gameRuleIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getGameRuleDesBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, gameTypeIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, gameRound_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curRound_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, gameStatus_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, createPlayerId_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, beginLeftCard_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, BankerPlayer_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, getCreateNameBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < gameRuleIndexEx_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(gameRuleIndexEx_.get(i));
        }
        size += dataSize;
        size += 1 * getGameRuleIndexExList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.RoomInfoSdh prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.RoomInfoSdh}
     *
     * <pre>
     *房间信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_RoomInfoSdh_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_RoomInfoSdh_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.class, protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        roomId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        gameTypeIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRuleIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRuleIndexEx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        gameRuleDes_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        gameStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        createPlayerId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        beginLeftCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        BankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        createName_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_RoomInfoSdh_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.RoomInfoSdh getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.RoomInfoSdh build() {
        protobuf.clazz.sdh.SdhRsp.RoomInfoSdh result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.RoomInfoSdh buildPartial() {
        protobuf.clazz.sdh.SdhRsp.RoomInfoSdh result = new protobuf.clazz.sdh.SdhRsp.RoomInfoSdh(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gameTypeIndex_ = gameTypeIndex_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRuleIndex_ = gameRuleIndex_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = java.util.Collections.unmodifiableList(gameRuleIndexEx_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.gameRuleIndexEx_ = gameRuleIndexEx_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.gameRuleDes_ = gameRuleDes_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gameRound_ = gameRound_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.gameStatus_ = gameStatus_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.createPlayerId_ = createPlayerId_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.beginLeftCard_ = beginLeftCard_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.BankerPlayer_ = BankerPlayer_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.createName_ = createName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.RoomInfoSdh) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.RoomInfoSdh)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.RoomInfoSdh other) {
        if (other == protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasGameTypeIndex()) {
          setGameTypeIndex(other.getGameTypeIndex());
        }
        if (other.hasGameRuleIndex()) {
          setGameRuleIndex(other.getGameRuleIndex());
        }
        if (!other.gameRuleIndexEx_.isEmpty()) {
          if (gameRuleIndexEx_.isEmpty()) {
            gameRuleIndexEx_ = other.gameRuleIndexEx_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureGameRuleIndexExIsMutable();
            gameRuleIndexEx_.addAll(other.gameRuleIndexEx_);
          }
          onChanged();
        }
        if (other.hasGameRuleDes()) {
          bitField0_ |= 0x00000010;
          gameRuleDes_ = other.gameRuleDes_;
          onChanged();
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameStatus()) {
          setGameStatus(other.getGameStatus());
        }
        if (other.hasCreatePlayerId()) {
          setCreatePlayerId(other.getCreatePlayerId());
        }
        if (other.hasBeginLeftCard()) {
          setBeginLeftCard(other.getBeginLeftCard());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCreateName()) {
          bitField0_ |= 0x00000800;
          createName_ = other.createName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.RoomInfoSdh parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.RoomInfoSdh) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 room_id = 1;
      private int roomId_ ;
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public int getRoomId() {
        return roomId_;
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public Builder setRoomId(int value) {
        bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 room_id = 1;</code>
       *
       * <pre>
       *房间号
       * </pre>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomId_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_type_index = 4;
      private int gameTypeIndex_ ;
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public boolean hasGameTypeIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public int getGameTypeIndex() {
        return gameTypeIndex_;
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder setGameTypeIndex(int value) {
        bitField0_ |= 0x00000002;
        gameTypeIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_type_index = 4;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder clearGameTypeIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        gameTypeIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_rule_index = 2;
      private int gameRuleIndex_ ;
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public boolean hasGameRuleIndex() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public int getGameRuleIndex() {
        return gameRuleIndex_;
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder setGameRuleIndex(int value) {
        bitField0_ |= 0x00000004;
        gameRuleIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_rule_index = 2;</code>
       *
       * <pre>
       *玩法
       * </pre>
       */
      public Builder clearGameRuleIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRuleIndex_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 game_rule_index_ex = 12;
      private java.util.List<java.lang.Integer> gameRuleIndexEx_ = java.util.Collections.emptyList();
      private void ensureGameRuleIndexExIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          gameRuleIndexEx_ = new java.util.ArrayList<java.lang.Integer>(gameRuleIndexEx_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getGameRuleIndexExList() {
        return java.util.Collections.unmodifiableList(gameRuleIndexEx_);
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public int getGameRuleIndexExCount() {
        return gameRuleIndexEx_.size();
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public int getGameRuleIndexEx(int index) {
        return gameRuleIndexEx_.get(index);
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder setGameRuleIndexEx(
          int index, int value) {
        ensureGameRuleIndexExIsMutable();
        gameRuleIndexEx_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder addGameRuleIndexEx(int value) {
        ensureGameRuleIndexExIsMutable();
        gameRuleIndexEx_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder addAllGameRuleIndexEx(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGameRuleIndexExIsMutable();
        super.addAll(values, gameRuleIndexEx_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 game_rule_index_ex = 12;</code>
       *
       * <pre>
       *附加玩法
       * </pre>
       */
      public Builder clearGameRuleIndexEx() {
        gameRuleIndexEx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional string game_rule_des = 3;
      private java.lang.Object gameRuleDes_ = "";
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public boolean hasGameRuleDes() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getGameRuleDes() {
        java.lang.Object ref = gameRuleDes_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          gameRuleDes_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getGameRuleDesBytes() {
        java.lang.Object ref = gameRuleDes_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          gameRuleDes_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setGameRuleDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        gameRuleDes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearGameRuleDes() {
        bitField0_ = (bitField0_ & ~0x00000010);
        gameRuleDes_ = getDefaultInstance().getGameRuleDes();
        onChanged();
        return this;
      }
      /**
       * <code>optional string game_rule_des = 3;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setGameRuleDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        gameRuleDes_ = value;
        onChanged();
        return this;
      }

      // optional int32 game_round = 5;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000020;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 5;</code>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000020);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_round = 6;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000040;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 6;</code>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000040);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_status = 7;
      private int gameStatus_ ;
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public boolean hasGameStatus() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public int getGameStatus() {
        return gameStatus_;
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public Builder setGameStatus(int value) {
        bitField0_ |= 0x00000080;
        gameStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_status = 7;</code>
       */
      public Builder clearGameStatus() {
        bitField0_ = (bitField0_ & ~0x00000080);
        gameStatus_ = 0;
        onChanged();
        return this;
      }

      // optional int64 create_player_id = 8;
      private long createPlayerId_ ;
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public boolean hasCreatePlayerId() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public long getCreatePlayerId() {
        return createPlayerId_;
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public Builder setCreatePlayerId(long value) {
        bitField0_ |= 0x00000100;
        createPlayerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 create_player_id = 8;</code>
       */
      public Builder clearCreatePlayerId() {
        bitField0_ = (bitField0_ & ~0x00000100);
        createPlayerId_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 begin_left_card = 9;
      private int beginLeftCard_ ;
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public boolean hasBeginLeftCard() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public int getBeginLeftCard() {
        return beginLeftCard_;
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public Builder setBeginLeftCard(int value) {
        bitField0_ |= 0x00000200;
        beginLeftCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 begin_left_card = 9;</code>
       */
      public Builder clearBeginLeftCard() {
        bitField0_ = (bitField0_ & ~0x00000200);
        beginLeftCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 _banker_player = 10;
      private int BankerPlayer_ ;
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return BankerPlayer_;
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000400;
        BankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 _banker_player = 10;</code>
       *
       * <pre>
       *当前庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000400);
        BankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional string create_name = 11;
      private java.lang.Object createName_ = "";
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public boolean hasCreateName() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public java.lang.String getCreateName() {
        java.lang.Object ref = createName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          createName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCreateNameBytes() {
        java.lang.Object ref = createName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          createName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder setCreateName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        createName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder clearCreateName() {
        bitField0_ = (bitField0_ & ~0x00000800);
        createName_ = getDefaultInstance().getCreateName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string create_name = 11;</code>
       *
       * <pre>
       *创建者姓名
       * </pre>
       */
      public Builder setCreateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        createName_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.RoomInfoSdh)
    }

    static {
      defaultInstance = new RoomInfoSdh(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.RoomInfoSdh)
  }

  public interface RoomPlayerResponseSdhOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int64 account_id = 1;
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    boolean hasAccountId();
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    long getAccountId();

    // optional string user_name = 2;
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    boolean hasUserName();
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    java.lang.String getUserName();
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    com.google.protobuf.ByteString
        getUserNameBytes();

    // optional string head_img_url = 3;
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    boolean hasHeadImgUrl();
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    java.lang.String getHeadImgUrl();
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    com.google.protobuf.ByteString
        getHeadImgUrlBytes();

    // optional int32 seat_index = 4;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    int getSeatIndex();

    // optional string ip = 5;
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    boolean hasIp();
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    java.lang.String getIp();
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpBytes();

    // optional int32 online = 6;
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    boolean hasOnline();
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    int getOnline();

    // optional int32 sex = 7;
    /**
     * <code>optional int32 sex = 7;</code>
     */
    boolean hasSex();
    /**
     * <code>optional int32 sex = 7;</code>
     */
    int getSex();

    // optional int32 score = 8;
    /**
     * <code>optional int32 score = 8;</code>
     */
    boolean hasScore();
    /**
     * <code>optional int32 score = 8;</code>
     */
    int getScore();

    // optional int32 ready = 9;
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    boolean hasReady();
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    int getReady();

    // optional string ip_addr = 10;
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    boolean hasIpAddr();
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    java.lang.String getIpAddr();
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    com.google.protobuf.ByteString
        getIpAddrBytes();

    // optional .LocationInfor locationInfor = 11;
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    boolean hasLocationInfor();
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    protobuf.clazz.Protocol.LocationInfor getLocationInfor();
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder();

    // optional bool is_trustee = 12;
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    boolean hasIsTrustee();
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    boolean getIsTrustee();

    // optional int64 money = 13;
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    boolean hasMoney();
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    long getMoney();

    // optional int64 gold = 14;
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    boolean hasGold();
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    long getGold();

    // repeated int32 out_cards_data = 15;
    /**
     * <code>repeated int32 out_cards_data = 15;</code>
     *
     * <pre>
     * 出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsDataList();
    /**
     * <code>repeated int32 out_cards_data = 15;</code>
     *
     * <pre>
     * 出牌数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated int32 out_cards_data = 15;</code>
     *
     * <pre>
     * 出牌数据
     * </pre>
     */
    int getOutCardsData(int index);

    // optional int32 out_cards_count = 16;
    /**
     * <code>optional int32 out_cards_count = 16;</code>
     *
     * <pre>
     * 出牌数量
     * </pre>
     */
    boolean hasOutCardsCount();
    /**
     * <code>optional int32 out_cards_count = 16;</code>
     *
     * <pre>
     * 出牌数量
     * </pre>
     */
    int getOutCardsCount();

    // repeated int32 score_cards_data = 17;
    /**
     * <code>repeated int32 score_cards_data = 17;</code>
     *
     * <pre>
     * 得分牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getScoreCardsDataList();
    /**
     * <code>repeated int32 score_cards_data = 17;</code>
     *
     * <pre>
     * 得分牌数据
     * </pre>
     */
    int getScoreCardsDataCount();
    /**
     * <code>repeated int32 score_cards_data = 17;</code>
     *
     * <pre>
     * 得分牌数据
     * </pre>
     */
    int getScoreCardsData(int index);

    // optional int32 score_cards_count = 18;
    /**
     * <code>optional int32 score_cards_count = 18;</code>
     *
     * <pre>
     * 得分牌数量
     * </pre>
     */
    boolean hasScoreCardsCount();
    /**
     * <code>optional int32 score_cards_count = 18;</code>
     *
     * <pre>
     * 得分牌数量
     * </pre>
     */
    int getScoreCardsCount();

    // repeated int32 cur_out_cards_data = 19;
    /**
     * <code>repeated int32 cur_out_cards_data = 19;</code>
     *
     * <pre>
     * 当前轮出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCurOutCardsDataList();
    /**
     * <code>repeated int32 cur_out_cards_data = 19;</code>
     *
     * <pre>
     * 当前轮出牌数据
     * </pre>
     */
    int getCurOutCardsDataCount();
    /**
     * <code>repeated int32 cur_out_cards_data = 19;</code>
     *
     * <pre>
     * 当前轮出牌数据
     * </pre>
     */
    int getCurOutCardsData(int index);

    // optional int32 cur_out_cards_count = 20;
    /**
     * <code>optional int32 cur_out_cards_count = 20;</code>
     *
     * <pre>
     * 当前轮出牌数量
     * </pre>
     */
    boolean hasCurOutCardsCount();
    /**
     * <code>optional int32 cur_out_cards_count = 20;</code>
     *
     * <pre>
     * 当前轮出牌数量
     * </pre>
     */
    int getCurOutCardsCount();

    // optional bool has_main = 21;
    /**
     * <code>optional bool has_main = 21;</code>
     *
     * <pre>
     * 是否有主
     * </pre>
     */
    boolean hasHasMain();
    /**
     * <code>optional bool has_main = 21;</code>
     *
     * <pre>
     * 是否有主
     * </pre>
     */
    boolean getHasMain();

    // optional int32 jifen = 22;
    /**
     * <code>optional int32 jifen = 22;</code>
     *
     * <pre>
     * 总积分
     * </pre>
     */
    boolean hasJifen();
    /**
     * <code>optional int32 jifen = 22;</code>
     *
     * <pre>
     * 总积分
     * </pre>
     */
    int getJifen();

    // repeated int32 max_card = 23;
    /**
     * <code>repeated int32 max_card = 23;</code>
     */
    java.util.List<java.lang.Integer> getMaxCardList();
    /**
     * <code>repeated int32 max_card = 23;</code>
     */
    int getMaxCardCount();
    /**
     * <code>repeated int32 max_card = 23;</code>
     */
    int getMaxCard(int index);

    // repeated .Int32ArrayResponse max_card_xt = 24;
    /**
     * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
     *
     * <pre>
     * 所有玩家的最大卡牌
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getMaxCardXtList();
    /**
     * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
     *
     * <pre>
     * 所有玩家的最大卡牌
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getMaxCardXt(int index);
    /**
     * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
     *
     * <pre>
     * 所有玩家的最大卡牌
     * </pre>
     */
    int getMaxCardXtCount();
    /**
     * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
     *
     * <pre>
     * 所有玩家的最大卡牌
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getMaxCardXtOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
     *
     * <pre>
     * 所有玩家的最大卡牌
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getMaxCardXtOrBuilder(
        int index);

    // optional int32 guard = 25;
    /**
     * <code>optional int32 guard = 25;</code>
     *
     * <pre>
     * 留守花色 0-5表示方块、梅花、红桃、黑桃、取消、报副
     * </pre>
     */
    boolean hasGuard();
    /**
     * <code>optional int32 guard = 25;</code>
     *
     * <pre>
     * 留守花色 0-5表示方块、梅花、红桃、黑桃、取消、报副
     * </pre>
     */
    int getGuard();

    // repeated .sdh.playerOutCards playerOutCards = 26;
    /**
     * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
     *
     * <pre>
     * 每个玩家的出牌数据
     * </pre>
     */
    java.util.List<protobuf.clazz.sdh.SdhRsp.playerOutCards> 
        getPlayerOutCardsList();
    /**
     * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
     *
     * <pre>
     * 每个玩家的出牌数据
     * </pre>
     */
    protobuf.clazz.sdh.SdhRsp.playerOutCards getPlayerOutCards(int index);
    /**
     * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
     *
     * <pre>
     * 每个玩家的出牌数据
     * </pre>
     */
    int getPlayerOutCardsCount();
    /**
     * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
     *
     * <pre>
     * 每个玩家的出牌数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.sdh.SdhRsp.playerOutCardsOrBuilder> 
        getPlayerOutCardsOrBuilderList();
    /**
     * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
     *
     * <pre>
     * 每个玩家的出牌数据
     * </pre>
     */
    protobuf.clazz.sdh.SdhRsp.playerOutCardsOrBuilder getPlayerOutCardsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code sdh.RoomPlayerResponseSdh}
   *
   * <pre>
   *房间的玩家
   * </pre>
   */
  public static final class RoomPlayerResponseSdh extends
      com.google.protobuf.GeneratedMessage
      implements RoomPlayerResponseSdhOrBuilder {
    // Use RoomPlayerResponseSdh.newBuilder() to construct.
    private RoomPlayerResponseSdh(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomPlayerResponseSdh(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomPlayerResponseSdh defaultInstance;
    public static RoomPlayerResponseSdh getDefaultInstance() {
      return defaultInstance;
    }

    public RoomPlayerResponseSdh getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomPlayerResponseSdh(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              accountId_ = input.readInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              userName_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              headImgUrl_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              seatIndex_ = input.readInt32();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              ip_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              online_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              sex_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              score_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              ready_ = input.readInt32();
              break;
            }
            case 82: {
              bitField0_ |= 0x00000200;
              ipAddr_ = input.readBytes();
              break;
            }
            case 90: {
              protobuf.clazz.Protocol.LocationInfor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = locationInfor_.toBuilder();
              }
              locationInfor_ = input.readMessage(protobuf.clazz.Protocol.LocationInfor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locationInfor_);
                locationInfor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              isTrustee_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              money_ = input.readInt64();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              gold_ = input.readInt64();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                outCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              outCardsData_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                outCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              bitField0_ |= 0x00004000;
              outCardsCount_ = input.readInt32();
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                scoreCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              scoreCardsData_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                scoreCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                scoreCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              bitField0_ |= 0x00008000;
              scoreCardsCount_ = input.readInt32();
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                curOutCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              curOutCardsData_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                curOutCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                curOutCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              bitField0_ |= 0x00010000;
              curOutCardsCount_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00020000;
              hasMain_ = input.readBool();
              break;
            }
            case 176: {
              bitField0_ |= 0x00040000;
              jifen_ = input.readInt32();
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                maxCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              maxCard_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                maxCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                maxCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 194: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                maxCardXt_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00800000;
              }
              maxCardXt_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 200: {
              bitField0_ |= 0x00080000;
              guard_ = input.readInt32();
              break;
            }
            case 210: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                playerOutCards_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.playerOutCards>();
                mutable_bitField0_ |= 0x02000000;
              }
              playerOutCards_.add(input.readMessage(protobuf.clazz.sdh.SdhRsp.playerOutCards.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          scoreCardsData_ = java.util.Collections.unmodifiableList(scoreCardsData_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          curOutCardsData_ = java.util.Collections.unmodifiableList(curOutCardsData_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          maxCard_ = java.util.Collections.unmodifiableList(maxCard_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          maxCardXt_ = java.util.Collections.unmodifiableList(maxCardXt_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          playerOutCards_ = java.util.Collections.unmodifiableList(playerOutCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_RoomPlayerResponseSdh_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_RoomPlayerResponseSdh_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.class, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomPlayerResponseSdh> PARSER =
        new com.google.protobuf.AbstractParser<RoomPlayerResponseSdh>() {
      public RoomPlayerResponseSdh parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomPlayerResponseSdh(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomPlayerResponseSdh> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 account_id = 1;
    public static final int ACCOUNT_ID_FIELD_NUMBER = 1;
    private long accountId_;
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    public boolean hasAccountId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 account_id = 1;</code>
     *
     * <pre>
     *账号id
     * </pre>
     */
    public long getAccountId() {
      return accountId_;
    }

    // optional string user_name = 2;
    public static final int USER_NAME_FIELD_NUMBER = 2;
    private java.lang.Object userName_;
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public boolean hasUserName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public java.lang.String getUserName() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          userName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string user_name = 2;</code>
     *
     * <pre>
     *角色名
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUserNameBytes() {
      java.lang.Object ref = userName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string head_img_url = 3;
    public static final int HEAD_IMG_URL_FIELD_NUMBER = 3;
    private java.lang.Object headImgUrl_;
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public boolean hasHeadImgUrl() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public java.lang.String getHeadImgUrl() {
      java.lang.Object ref = headImgUrl_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          headImgUrl_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string head_img_url = 3;</code>
     *
     * <pre>
     *玩家头像
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHeadImgUrlBytes() {
      java.lang.Object ref = headImgUrl_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headImgUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 seat_index = 4;
    public static final int SEAT_INDEX_FIELD_NUMBER = 4;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 seat_index = 4;</code>
     *
     * <pre>
     *玩家位置索引
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional string ip = 5;
    public static final int IP_FIELD_NUMBER = 5;
    private java.lang.Object ip_;
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public boolean hasIp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public java.lang.String getIp() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ip_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ip = 5;</code>
     *
     * <pre>
     *玩家IP
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpBytes() {
      java.lang.Object ref = ip_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ip_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 online = 6;
    public static final int ONLINE_FIELD_NUMBER = 6;
    private int online_;
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    public boolean hasOnline() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 online = 6;</code>
     *
     * <pre>
     *1在线0断线
     * </pre>
     */
    public int getOnline() {
      return online_;
    }

    // optional int32 sex = 7;
    public static final int SEX_FIELD_NUMBER = 7;
    private int sex_;
    /**
     * <code>optional int32 sex = 7;</code>
     */
    public boolean hasSex() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 sex = 7;</code>
     */
    public int getSex() {
      return sex_;
    }

    // optional int32 score = 8;
    public static final int SCORE_FIELD_NUMBER = 8;
    private int score_;
    /**
     * <code>optional int32 score = 8;</code>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 score = 8;</code>
     */
    public int getScore() {
      return score_;
    }

    // optional int32 ready = 9;
    public static final int READY_FIELD_NUMBER = 9;
    private int ready_;
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    public boolean hasReady() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 ready = 9;</code>
     *
     * <pre>
     *0没准备,1准备
     * </pre>
     */
    public int getReady() {
      return ready_;
    }

    // optional string ip_addr = 10;
    public static final int IP_ADDR_FIELD_NUMBER = 10;
    private java.lang.Object ipAddr_;
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public boolean hasIpAddr() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public java.lang.String getIpAddr() {
      java.lang.Object ref = ipAddr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          ipAddr_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string ip_addr = 10;</code>
     *
     * <pre>
     *物理地址
     * </pre>
     */
    public com.google.protobuf.ByteString
        getIpAddrBytes() {
      java.lang.Object ref = ipAddr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ipAddr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .LocationInfor locationInfor = 11;
    public static final int LOCATIONINFOR_FIELD_NUMBER = 11;
    private protobuf.clazz.Protocol.LocationInfor locationInfor_;
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public boolean hasLocationInfor() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public protobuf.clazz.Protocol.LocationInfor getLocationInfor() {
      return locationInfor_;
    }
    /**
     * <code>optional .LocationInfor locationInfor = 11;</code>
     */
    public protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder() {
      return locationInfor_;
    }

    // optional bool is_trustee = 12;
    public static final int IS_TRUSTEE_FIELD_NUMBER = 12;
    private boolean isTrustee_;
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    public boolean hasIsTrustee() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool is_trustee = 12;</code>
     *
     * <pre>
     *true托管 false 取消
     * </pre>
     */
    public boolean getIsTrustee() {
      return isTrustee_;
    }

    // optional int64 money = 13;
    public static final int MONEY_FIELD_NUMBER = 13;
    private long money_;
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    public boolean hasMoney() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int64 money = 13;</code>
     *
     * <pre>
     *金币
     * </pre>
     */
    public long getMoney() {
      return money_;
    }

    // optional int64 gold = 14;
    public static final int GOLD_FIELD_NUMBER = 14;
    private long gold_;
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    public boolean hasGold() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int64 gold = 14;</code>
     *
     * <pre>
     *闲逸豆
     * </pre>
     */
    public long getGold() {
      return gold_;
    }

    // repeated int32 out_cards_data = 15;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> outCardsData_;
    /**
     * <code>repeated int32 out_cards_data = 15;</code>
     *
     * <pre>
     * 出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated int32 out_cards_data = 15;</code>
     *
     * <pre>
     * 出牌数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated int32 out_cards_data = 15;</code>
     *
     * <pre>
     * 出牌数据
     * </pre>
     */
    public int getOutCardsData(int index) {
      return outCardsData_.get(index);
    }

    // optional int32 out_cards_count = 16;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 16;
    private int outCardsCount_;
    /**
     * <code>optional int32 out_cards_count = 16;</code>
     *
     * <pre>
     * 出牌数量
     * </pre>
     */
    public boolean hasOutCardsCount() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 out_cards_count = 16;</code>
     *
     * <pre>
     * 出牌数量
     * </pre>
     */
    public int getOutCardsCount() {
      return outCardsCount_;
    }

    // repeated int32 score_cards_data = 17;
    public static final int SCORE_CARDS_DATA_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> scoreCardsData_;
    /**
     * <code>repeated int32 score_cards_data = 17;</code>
     *
     * <pre>
     * 得分牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getScoreCardsDataList() {
      return scoreCardsData_;
    }
    /**
     * <code>repeated int32 score_cards_data = 17;</code>
     *
     * <pre>
     * 得分牌数据
     * </pre>
     */
    public int getScoreCardsDataCount() {
      return scoreCardsData_.size();
    }
    /**
     * <code>repeated int32 score_cards_data = 17;</code>
     *
     * <pre>
     * 得分牌数据
     * </pre>
     */
    public int getScoreCardsData(int index) {
      return scoreCardsData_.get(index);
    }

    // optional int32 score_cards_count = 18;
    public static final int SCORE_CARDS_COUNT_FIELD_NUMBER = 18;
    private int scoreCardsCount_;
    /**
     * <code>optional int32 score_cards_count = 18;</code>
     *
     * <pre>
     * 得分牌数量
     * </pre>
     */
    public boolean hasScoreCardsCount() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 score_cards_count = 18;</code>
     *
     * <pre>
     * 得分牌数量
     * </pre>
     */
    public int getScoreCardsCount() {
      return scoreCardsCount_;
    }

    // repeated int32 cur_out_cards_data = 19;
    public static final int CUR_OUT_CARDS_DATA_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> curOutCardsData_;
    /**
     * <code>repeated int32 cur_out_cards_data = 19;</code>
     *
     * <pre>
     * 当前轮出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCurOutCardsDataList() {
      return curOutCardsData_;
    }
    /**
     * <code>repeated int32 cur_out_cards_data = 19;</code>
     *
     * <pre>
     * 当前轮出牌数据
     * </pre>
     */
    public int getCurOutCardsDataCount() {
      return curOutCardsData_.size();
    }
    /**
     * <code>repeated int32 cur_out_cards_data = 19;</code>
     *
     * <pre>
     * 当前轮出牌数据
     * </pre>
     */
    public int getCurOutCardsData(int index) {
      return curOutCardsData_.get(index);
    }

    // optional int32 cur_out_cards_count = 20;
    public static final int CUR_OUT_CARDS_COUNT_FIELD_NUMBER = 20;
    private int curOutCardsCount_;
    /**
     * <code>optional int32 cur_out_cards_count = 20;</code>
     *
     * <pre>
     * 当前轮出牌数量
     * </pre>
     */
    public boolean hasCurOutCardsCount() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 cur_out_cards_count = 20;</code>
     *
     * <pre>
     * 当前轮出牌数量
     * </pre>
     */
    public int getCurOutCardsCount() {
      return curOutCardsCount_;
    }

    // optional bool has_main = 21;
    public static final int HAS_MAIN_FIELD_NUMBER = 21;
    private boolean hasMain_;
    /**
     * <code>optional bool has_main = 21;</code>
     *
     * <pre>
     * 是否有主
     * </pre>
     */
    public boolean hasHasMain() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional bool has_main = 21;</code>
     *
     * <pre>
     * 是否有主
     * </pre>
     */
    public boolean getHasMain() {
      return hasMain_;
    }

    // optional int32 jifen = 22;
    public static final int JIFEN_FIELD_NUMBER = 22;
    private int jifen_;
    /**
     * <code>optional int32 jifen = 22;</code>
     *
     * <pre>
     * 总积分
     * </pre>
     */
    public boolean hasJifen() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 jifen = 22;</code>
     *
     * <pre>
     * 总积分
     * </pre>
     */
    public int getJifen() {
      return jifen_;
    }

    // repeated int32 max_card = 23;
    public static final int MAX_CARD_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> maxCard_;
    /**
     * <code>repeated int32 max_card = 23;</code>
     */
    public java.util.List<java.lang.Integer>
        getMaxCardList() {
      return maxCard_;
    }
    /**
     * <code>repeated int32 max_card = 23;</code>
     */
    public int getMaxCardCount() {
      return maxCard_.size();
    }
    /**
     * <code>repeated int32 max_card = 23;</code>
     */
    public int getMaxCard(int index) {
      return maxCard_.get(index);
    }

    // repeated .Int32ArrayResponse max_card_xt = 24;
    public static final int MAX_CARD_XT_FIELD_NUMBER = 24;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> maxCardXt_;
    /**
     * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
     *
     * <pre>
     * 所有玩家的最大卡牌
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getMaxCardXtList() {
      return maxCardXt_;
    }
    /**
     * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
     *
     * <pre>
     * 所有玩家的最大卡牌
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getMaxCardXtOrBuilderList() {
      return maxCardXt_;
    }
    /**
     * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
     *
     * <pre>
     * 所有玩家的最大卡牌
     * </pre>
     */
    public int getMaxCardXtCount() {
      return maxCardXt_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
     *
     * <pre>
     * 所有玩家的最大卡牌
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getMaxCardXt(int index) {
      return maxCardXt_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
     *
     * <pre>
     * 所有玩家的最大卡牌
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getMaxCardXtOrBuilder(
        int index) {
      return maxCardXt_.get(index);
    }

    // optional int32 guard = 25;
    public static final int GUARD_FIELD_NUMBER = 25;
    private int guard_;
    /**
     * <code>optional int32 guard = 25;</code>
     *
     * <pre>
     * 留守花色 0-5表示方块、梅花、红桃、黑桃、取消、报副
     * </pre>
     */
    public boolean hasGuard() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 guard = 25;</code>
     *
     * <pre>
     * 留守花色 0-5表示方块、梅花、红桃、黑桃、取消、报副
     * </pre>
     */
    public int getGuard() {
      return guard_;
    }

    // repeated .sdh.playerOutCards playerOutCards = 26;
    public static final int PLAYEROUTCARDS_FIELD_NUMBER = 26;
    private java.util.List<protobuf.clazz.sdh.SdhRsp.playerOutCards> playerOutCards_;
    /**
     * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
     *
     * <pre>
     * 每个玩家的出牌数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.sdh.SdhRsp.playerOutCards> getPlayerOutCardsList() {
      return playerOutCards_;
    }
    /**
     * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
     *
     * <pre>
     * 每个玩家的出牌数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.playerOutCardsOrBuilder> 
        getPlayerOutCardsOrBuilderList() {
      return playerOutCards_;
    }
    /**
     * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
     *
     * <pre>
     * 每个玩家的出牌数据
     * </pre>
     */
    public int getPlayerOutCardsCount() {
      return playerOutCards_.size();
    }
    /**
     * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
     *
     * <pre>
     * 每个玩家的出牌数据
     * </pre>
     */
    public protobuf.clazz.sdh.SdhRsp.playerOutCards getPlayerOutCards(int index) {
      return playerOutCards_.get(index);
    }
    /**
     * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
     *
     * <pre>
     * 每个玩家的出牌数据
     * </pre>
     */
    public protobuf.clazz.sdh.SdhRsp.playerOutCardsOrBuilder getPlayerOutCardsOrBuilder(
        int index) {
      return playerOutCards_.get(index);
    }

    private void initFields() {
      accountId_ = 0L;
      userName_ = "";
      headImgUrl_ = "";
      seatIndex_ = 0;
      ip_ = "";
      online_ = 0;
      sex_ = 0;
      score_ = 0;
      ready_ = 0;
      ipAddr_ = "";
      locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
      isTrustee_ = false;
      money_ = 0L;
      gold_ = 0L;
      outCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = 0;
      scoreCardsData_ = java.util.Collections.emptyList();
      scoreCardsCount_ = 0;
      curOutCardsData_ = java.util.Collections.emptyList();
      curOutCardsCount_ = 0;
      hasMain_ = false;
      jifen_ = 0;
      maxCard_ = java.util.Collections.emptyList();
      maxCardXt_ = java.util.Collections.emptyList();
      guard_ = 0;
      playerOutCards_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, accountId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getHeadImgUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, seatIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, online_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, sex_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, ready_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, getIpAddrBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, locationInfor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, isTrustee_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt64(13, money_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt64(14, gold_);
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeInt32(15, outCardsData_.get(i));
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(16, outCardsCount_);
      }
      for (int i = 0; i < scoreCardsData_.size(); i++) {
        output.writeInt32(17, scoreCardsData_.get(i));
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(18, scoreCardsCount_);
      }
      for (int i = 0; i < curOutCardsData_.size(); i++) {
        output.writeInt32(19, curOutCardsData_.get(i));
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(20, curOutCardsCount_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeBool(21, hasMain_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(22, jifen_);
      }
      for (int i = 0; i < maxCard_.size(); i++) {
        output.writeInt32(23, maxCard_.get(i));
      }
      for (int i = 0; i < maxCardXt_.size(); i++) {
        output.writeMessage(24, maxCardXt_.get(i));
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(25, guard_);
      }
      for (int i = 0; i < playerOutCards_.size(); i++) {
        output.writeMessage(26, playerOutCards_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, accountId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getUserNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getHeadImgUrlBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, seatIndex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, online_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, sex_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, ready_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, getIpAddrBytes());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, locationInfor_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, isTrustee_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, money_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, gold_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsDataList().size();
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, outCardsCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < scoreCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(scoreCardsData_.get(i));
        }
        size += dataSize;
        size += 2 * getScoreCardsDataList().size();
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, scoreCardsCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < curOutCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(curOutCardsData_.get(i));
        }
        size += dataSize;
        size += 2 * getCurOutCardsDataList().size();
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, curOutCardsCount_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, hasMain_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, jifen_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < maxCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(maxCard_.get(i));
        }
        size += dataSize;
        size += 2 * getMaxCardList().size();
      }
      for (int i = 0; i < maxCardXt_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, maxCardXt_.get(i));
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, guard_);
      }
      for (int i = 0; i < playerOutCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, playerOutCards_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.RoomPlayerResponseSdh}
     *
     * <pre>
     *房间的玩家
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_RoomPlayerResponseSdh_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_RoomPlayerResponseSdh_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.class, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationInforFieldBuilder();
          getMaxCardXtFieldBuilder();
          getPlayerOutCardsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        accountId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        userName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        headImgUrl_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        ip_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        online_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        sex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        ready_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        ipAddr_ = "";
        bitField0_ = (bitField0_ & ~0x00000200);
        if (locationInforBuilder_ == null) {
          locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
        } else {
          locationInforBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        isTrustee_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        money_ = 0L;
        bitField0_ = (bitField0_ & ~0x00001000);
        gold_ = 0L;
        bitField0_ = (bitField0_ & ~0x00002000);
        outCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        outCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        scoreCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        scoreCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        curOutCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        curOutCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        hasMain_ = false;
        bitField0_ = (bitField0_ & ~0x00100000);
        jifen_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        maxCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        if (maxCardXtBuilder_ == null) {
          maxCardXt_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00800000);
        } else {
          maxCardXtBuilder_.clear();
        }
        guard_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        if (playerOutCardsBuilder_ == null) {
          playerOutCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x02000000);
        } else {
          playerOutCardsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_RoomPlayerResponseSdh_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh build() {
        protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh buildPartial() {
        protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh result = new protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.accountId_ = accountId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.userName_ = userName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.headImgUrl_ = headImgUrl_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.ip_ = ip_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.online_ = online_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.sex_ = sex_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.ready_ = ready_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.ipAddr_ = ipAddr_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (locationInforBuilder_ == null) {
          result.locationInfor_ = locationInfor_;
        } else {
          result.locationInfor_ = locationInforBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.isTrustee_ = isTrustee_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.money_ = money_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.gold_ = gold_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.outCardsData_ = outCardsData_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          scoreCardsData_ = java.util.Collections.unmodifiableList(scoreCardsData_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.scoreCardsData_ = scoreCardsData_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.scoreCardsCount_ = scoreCardsCount_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          curOutCardsData_ = java.util.Collections.unmodifiableList(curOutCardsData_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.curOutCardsData_ = curOutCardsData_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.curOutCardsCount_ = curOutCardsCount_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.hasMain_ = hasMain_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.jifen_ = jifen_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          maxCard_ = java.util.Collections.unmodifiableList(maxCard_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.maxCard_ = maxCard_;
        if (maxCardXtBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000)) {
            maxCardXt_ = java.util.Collections.unmodifiableList(maxCardXt_);
            bitField0_ = (bitField0_ & ~0x00800000);
          }
          result.maxCardXt_ = maxCardXt_;
        } else {
          result.maxCardXt_ = maxCardXtBuilder_.build();
        }
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.guard_ = guard_;
        if (playerOutCardsBuilder_ == null) {
          if (((bitField0_ & 0x02000000) == 0x02000000)) {
            playerOutCards_ = java.util.Collections.unmodifiableList(playerOutCards_);
            bitField0_ = (bitField0_ & ~0x02000000);
          }
          result.playerOutCards_ = playerOutCards_;
        } else {
          result.playerOutCards_ = playerOutCardsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh other) {
        if (other == protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.getDefaultInstance()) return this;
        if (other.hasAccountId()) {
          setAccountId(other.getAccountId());
        }
        if (other.hasUserName()) {
          bitField0_ |= 0x00000002;
          userName_ = other.userName_;
          onChanged();
        }
        if (other.hasHeadImgUrl()) {
          bitField0_ |= 0x00000004;
          headImgUrl_ = other.headImgUrl_;
          onChanged();
        }
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasIp()) {
          bitField0_ |= 0x00000010;
          ip_ = other.ip_;
          onChanged();
        }
        if (other.hasOnline()) {
          setOnline(other.getOnline());
        }
        if (other.hasSex()) {
          setSex(other.getSex());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasReady()) {
          setReady(other.getReady());
        }
        if (other.hasIpAddr()) {
          bitField0_ |= 0x00000200;
          ipAddr_ = other.ipAddr_;
          onChanged();
        }
        if (other.hasLocationInfor()) {
          mergeLocationInfor(other.getLocationInfor());
        }
        if (other.hasIsTrustee()) {
          setIsTrustee(other.getIsTrustee());
        }
        if (other.hasMoney()) {
          setMoney(other.getMoney());
        }
        if (other.hasGold()) {
          setGold(other.getGold());
        }
        if (!other.outCardsData_.isEmpty()) {
          if (outCardsData_.isEmpty()) {
            outCardsData_ = other.outCardsData_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureOutCardsDataIsMutable();
            outCardsData_.addAll(other.outCardsData_);
          }
          onChanged();
        }
        if (other.hasOutCardsCount()) {
          setOutCardsCount(other.getOutCardsCount());
        }
        if (!other.scoreCardsData_.isEmpty()) {
          if (scoreCardsData_.isEmpty()) {
            scoreCardsData_ = other.scoreCardsData_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureScoreCardsDataIsMutable();
            scoreCardsData_.addAll(other.scoreCardsData_);
          }
          onChanged();
        }
        if (other.hasScoreCardsCount()) {
          setScoreCardsCount(other.getScoreCardsCount());
        }
        if (!other.curOutCardsData_.isEmpty()) {
          if (curOutCardsData_.isEmpty()) {
            curOutCardsData_ = other.curOutCardsData_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureCurOutCardsDataIsMutable();
            curOutCardsData_.addAll(other.curOutCardsData_);
          }
          onChanged();
        }
        if (other.hasCurOutCardsCount()) {
          setCurOutCardsCount(other.getCurOutCardsCount());
        }
        if (other.hasHasMain()) {
          setHasMain(other.getHasMain());
        }
        if (other.hasJifen()) {
          setJifen(other.getJifen());
        }
        if (!other.maxCard_.isEmpty()) {
          if (maxCard_.isEmpty()) {
            maxCard_ = other.maxCard_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureMaxCardIsMutable();
            maxCard_.addAll(other.maxCard_);
          }
          onChanged();
        }
        if (maxCardXtBuilder_ == null) {
          if (!other.maxCardXt_.isEmpty()) {
            if (maxCardXt_.isEmpty()) {
              maxCardXt_ = other.maxCardXt_;
              bitField0_ = (bitField0_ & ~0x00800000);
            } else {
              ensureMaxCardXtIsMutable();
              maxCardXt_.addAll(other.maxCardXt_);
            }
            onChanged();
          }
        } else {
          if (!other.maxCardXt_.isEmpty()) {
            if (maxCardXtBuilder_.isEmpty()) {
              maxCardXtBuilder_.dispose();
              maxCardXtBuilder_ = null;
              maxCardXt_ = other.maxCardXt_;
              bitField0_ = (bitField0_ & ~0x00800000);
              maxCardXtBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMaxCardXtFieldBuilder() : null;
            } else {
              maxCardXtBuilder_.addAllMessages(other.maxCardXt_);
            }
          }
        }
        if (other.hasGuard()) {
          setGuard(other.getGuard());
        }
        if (playerOutCardsBuilder_ == null) {
          if (!other.playerOutCards_.isEmpty()) {
            if (playerOutCards_.isEmpty()) {
              playerOutCards_ = other.playerOutCards_;
              bitField0_ = (bitField0_ & ~0x02000000);
            } else {
              ensurePlayerOutCardsIsMutable();
              playerOutCards_.addAll(other.playerOutCards_);
            }
            onChanged();
          }
        } else {
          if (!other.playerOutCards_.isEmpty()) {
            if (playerOutCardsBuilder_.isEmpty()) {
              playerOutCardsBuilder_.dispose();
              playerOutCardsBuilder_ = null;
              playerOutCards_ = other.playerOutCards_;
              bitField0_ = (bitField0_ & ~0x02000000);
              playerOutCardsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayerOutCardsFieldBuilder() : null;
            } else {
              playerOutCardsBuilder_.addAllMessages(other.playerOutCards_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 account_id = 1;
      private long accountId_ ;
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public boolean hasAccountId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public long getAccountId() {
        return accountId_;
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public Builder setAccountId(long value) {
        bitField0_ |= 0x00000001;
        accountId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 account_id = 1;</code>
       *
       * <pre>
       *账号id
       * </pre>
       */
      public Builder clearAccountId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        accountId_ = 0L;
        onChanged();
        return this;
      }

      // optional string user_name = 2;
      private java.lang.Object userName_ = "";
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public boolean hasUserName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public java.lang.String getUserName() {
        java.lang.Object ref = userName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          userName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public com.google.protobuf.ByteString
          getUserNameBytes() {
        java.lang.Object ref = userName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder setUserName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder clearUserName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        userName_ = getDefaultInstance().getUserName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string user_name = 2;</code>
       *
       * <pre>
       *角色名
       * </pre>
       */
      public Builder setUserNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        userName_ = value;
        onChanged();
        return this;
      }

      // optional string head_img_url = 3;
      private java.lang.Object headImgUrl_ = "";
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public boolean hasHeadImgUrl() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public java.lang.String getHeadImgUrl() {
        java.lang.Object ref = headImgUrl_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          headImgUrl_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHeadImgUrlBytes() {
        java.lang.Object ref = headImgUrl_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          headImgUrl_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImgUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        headImgUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder clearHeadImgUrl() {
        bitField0_ = (bitField0_ & ~0x00000004);
        headImgUrl_ = getDefaultInstance().getHeadImgUrl();
        onChanged();
        return this;
      }
      /**
       * <code>optional string head_img_url = 3;</code>
       *
       * <pre>
       *玩家头像
       * </pre>
       */
      public Builder setHeadImgUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        headImgUrl_ = value;
        onChanged();
        return this;
      }

      // optional int32 seat_index = 4;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000008;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 4;</code>
       *
       * <pre>
       *玩家位置索引
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional string ip = 5;
      private java.lang.Object ip_ = "";
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public boolean hasIp() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public java.lang.String getIp() {
        java.lang.Object ref = ip_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ip_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpBytes() {
        java.lang.Object ref = ip_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ip_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder setIp(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        ip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder clearIp() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ip_ = getDefaultInstance().getIp();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip = 5;</code>
       *
       * <pre>
       *玩家IP
       * </pre>
       */
      public Builder setIpBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        ip_ = value;
        onChanged();
        return this;
      }

      // optional int32 online = 6;
      private int online_ ;
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public boolean hasOnline() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public int getOnline() {
        return online_;
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public Builder setOnline(int value) {
        bitField0_ |= 0x00000020;
        online_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 online = 6;</code>
       *
       * <pre>
       *1在线0断线
       * </pre>
       */
      public Builder clearOnline() {
        bitField0_ = (bitField0_ & ~0x00000020);
        online_ = 0;
        onChanged();
        return this;
      }

      // optional int32 sex = 7;
      private int sex_ ;
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public boolean hasSex() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public int getSex() {
        return sex_;
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public Builder setSex(int value) {
        bitField0_ |= 0x00000040;
        sex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sex = 7;</code>
       */
      public Builder clearSex() {
        bitField0_ = (bitField0_ & ~0x00000040);
        sex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 score = 8;
      private int score_ ;
      /**
       * <code>optional int32 score = 8;</code>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 score = 8;</code>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>optional int32 score = 8;</code>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000080;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score = 8;</code>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000080);
        score_ = 0;
        onChanged();
        return this;
      }

      // optional int32 ready = 9;
      private int ready_ ;
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public boolean hasReady() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public int getReady() {
        return ready_;
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public Builder setReady(int value) {
        bitField0_ |= 0x00000100;
        ready_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ready = 9;</code>
       *
       * <pre>
       *0没准备,1准备
       * </pre>
       */
      public Builder clearReady() {
        bitField0_ = (bitField0_ & ~0x00000100);
        ready_ = 0;
        onChanged();
        return this;
      }

      // optional string ip_addr = 10;
      private java.lang.Object ipAddr_ = "";
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public boolean hasIpAddr() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public java.lang.String getIpAddr() {
        java.lang.Object ref = ipAddr_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          ipAddr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIpAddrBytes() {
        java.lang.Object ref = ipAddr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ipAddr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder setIpAddr(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        ipAddr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder clearIpAddr() {
        bitField0_ = (bitField0_ & ~0x00000200);
        ipAddr_ = getDefaultInstance().getIpAddr();
        onChanged();
        return this;
      }
      /**
       * <code>optional string ip_addr = 10;</code>
       *
       * <pre>
       *物理地址
       * </pre>
       */
      public Builder setIpAddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        ipAddr_ = value;
        onChanged();
        return this;
      }

      // optional .LocationInfor locationInfor = 11;
      private protobuf.clazz.Protocol.LocationInfor locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder> locationInforBuilder_;
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public boolean hasLocationInfor() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInfor getLocationInfor() {
        if (locationInforBuilder_ == null) {
          return locationInfor_;
        } else {
          return locationInforBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder setLocationInfor(protobuf.clazz.Protocol.LocationInfor value) {
        if (locationInforBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          locationInfor_ = value;
          onChanged();
        } else {
          locationInforBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder setLocationInfor(
          protobuf.clazz.Protocol.LocationInfor.Builder builderForValue) {
        if (locationInforBuilder_ == null) {
          locationInfor_ = builderForValue.build();
          onChanged();
        } else {
          locationInforBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder mergeLocationInfor(protobuf.clazz.Protocol.LocationInfor value) {
        if (locationInforBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              locationInfor_ != protobuf.clazz.Protocol.LocationInfor.getDefaultInstance()) {
            locationInfor_ =
              protobuf.clazz.Protocol.LocationInfor.newBuilder(locationInfor_).mergeFrom(value).buildPartial();
          } else {
            locationInfor_ = value;
          }
          onChanged();
        } else {
          locationInforBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public Builder clearLocationInfor() {
        if (locationInforBuilder_ == null) {
          locationInfor_ = protobuf.clazz.Protocol.LocationInfor.getDefaultInstance();
          onChanged();
        } else {
          locationInforBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInfor.Builder getLocationInforBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getLocationInforFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      public protobuf.clazz.Protocol.LocationInforOrBuilder getLocationInforOrBuilder() {
        if (locationInforBuilder_ != null) {
          return locationInforBuilder_.getMessageOrBuilder();
        } else {
          return locationInfor_;
        }
      }
      /**
       * <code>optional .LocationInfor locationInfor = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder> 
          getLocationInforFieldBuilder() {
        if (locationInforBuilder_ == null) {
          locationInforBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.LocationInfor, protobuf.clazz.Protocol.LocationInfor.Builder, protobuf.clazz.Protocol.LocationInforOrBuilder>(
                  locationInfor_,
                  getParentForChildren(),
                  isClean());
          locationInfor_ = null;
        }
        return locationInforBuilder_;
      }

      // optional bool is_trustee = 12;
      private boolean isTrustee_ ;
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public boolean hasIsTrustee() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public boolean getIsTrustee() {
        return isTrustee_;
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public Builder setIsTrustee(boolean value) {
        bitField0_ |= 0x00000800;
        isTrustee_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_trustee = 12;</code>
       *
       * <pre>
       *true托管 false 取消
       * </pre>
       */
      public Builder clearIsTrustee() {
        bitField0_ = (bitField0_ & ~0x00000800);
        isTrustee_ = false;
        onChanged();
        return this;
      }

      // optional int64 money = 13;
      private long money_ ;
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public boolean hasMoney() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public long getMoney() {
        return money_;
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public Builder setMoney(long value) {
        bitField0_ |= 0x00001000;
        money_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 money = 13;</code>
       *
       * <pre>
       *金币
       * </pre>
       */
      public Builder clearMoney() {
        bitField0_ = (bitField0_ & ~0x00001000);
        money_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 gold = 14;
      private long gold_ ;
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public boolean hasGold() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public long getGold() {
        return gold_;
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public Builder setGold(long value) {
        bitField0_ |= 0x00002000;
        gold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 gold = 14;</code>
       *
       * <pre>
       *闲逸豆
       * </pre>
       */
      public Builder clearGold() {
        bitField0_ = (bitField0_ & ~0x00002000);
        gold_ = 0L;
        onChanged();
        return this;
      }

      // repeated int32 out_cards_data = 15;
      private java.util.List<java.lang.Integer> outCardsData_ = java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          outCardsData_ = new java.util.ArrayList<java.lang.Integer>(outCardsData_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 out_cards_data = 15;</code>
       *
       * <pre>
       * 出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsDataList() {
        return java.util.Collections.unmodifiableList(outCardsData_);
      }
      /**
       * <code>repeated int32 out_cards_data = 15;</code>
       *
       * <pre>
       * 出牌数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        return outCardsData_.size();
      }
      /**
       * <code>repeated int32 out_cards_data = 15;</code>
       *
       * <pre>
       * 出牌数据
       * </pre>
       */
      public int getOutCardsData(int index) {
        return outCardsData_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_data = 15;</code>
       *
       * <pre>
       * 出牌数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, int value) {
        ensureOutCardsDataIsMutable();
        outCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_data = 15;</code>
       *
       * <pre>
       * 出牌数据
       * </pre>
       */
      public Builder addOutCardsData(int value) {
        ensureOutCardsDataIsMutable();
        outCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_data = 15;</code>
       *
       * <pre>
       * 出牌数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsDataIsMutable();
        super.addAll(values, outCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_data = 15;</code>
       *
       * <pre>
       * 出牌数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        outCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // optional int32 out_cards_count = 16;
      private int outCardsCount_ ;
      /**
       * <code>optional int32 out_cards_count = 16;</code>
       *
       * <pre>
       * 出牌数量
       * </pre>
       */
      public boolean hasOutCardsCount() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 out_cards_count = 16;</code>
       *
       * <pre>
       * 出牌数量
       * </pre>
       */
      public int getOutCardsCount() {
        return outCardsCount_;
      }
      /**
       * <code>optional int32 out_cards_count = 16;</code>
       *
       * <pre>
       * 出牌数量
       * </pre>
       */
      public Builder setOutCardsCount(int value) {
        bitField0_ |= 0x00008000;
        outCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_cards_count = 16;</code>
       *
       * <pre>
       * 出牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        bitField0_ = (bitField0_ & ~0x00008000);
        outCardsCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 score_cards_data = 17;
      private java.util.List<java.lang.Integer> scoreCardsData_ = java.util.Collections.emptyList();
      private void ensureScoreCardsDataIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          scoreCardsData_ = new java.util.ArrayList<java.lang.Integer>(scoreCardsData_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated int32 score_cards_data = 17;</code>
       *
       * <pre>
       * 得分牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getScoreCardsDataList() {
        return java.util.Collections.unmodifiableList(scoreCardsData_);
      }
      /**
       * <code>repeated int32 score_cards_data = 17;</code>
       *
       * <pre>
       * 得分牌数据
       * </pre>
       */
      public int getScoreCardsDataCount() {
        return scoreCardsData_.size();
      }
      /**
       * <code>repeated int32 score_cards_data = 17;</code>
       *
       * <pre>
       * 得分牌数据
       * </pre>
       */
      public int getScoreCardsData(int index) {
        return scoreCardsData_.get(index);
      }
      /**
       * <code>repeated int32 score_cards_data = 17;</code>
       *
       * <pre>
       * 得分牌数据
       * </pre>
       */
      public Builder setScoreCardsData(
          int index, int value) {
        ensureScoreCardsDataIsMutable();
        scoreCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_cards_data = 17;</code>
       *
       * <pre>
       * 得分牌数据
       * </pre>
       */
      public Builder addScoreCardsData(int value) {
        ensureScoreCardsDataIsMutable();
        scoreCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_cards_data = 17;</code>
       *
       * <pre>
       * 得分牌数据
       * </pre>
       */
      public Builder addAllScoreCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureScoreCardsDataIsMutable();
        super.addAll(values, scoreCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score_cards_data = 17;</code>
       *
       * <pre>
       * 得分牌数据
       * </pre>
       */
      public Builder clearScoreCardsData() {
        scoreCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      // optional int32 score_cards_count = 18;
      private int scoreCardsCount_ ;
      /**
       * <code>optional int32 score_cards_count = 18;</code>
       *
       * <pre>
       * 得分牌数量
       * </pre>
       */
      public boolean hasScoreCardsCount() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 score_cards_count = 18;</code>
       *
       * <pre>
       * 得分牌数量
       * </pre>
       */
      public int getScoreCardsCount() {
        return scoreCardsCount_;
      }
      /**
       * <code>optional int32 score_cards_count = 18;</code>
       *
       * <pre>
       * 得分牌数量
       * </pre>
       */
      public Builder setScoreCardsCount(int value) {
        bitField0_ |= 0x00020000;
        scoreCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score_cards_count = 18;</code>
       *
       * <pre>
       * 得分牌数量
       * </pre>
       */
      public Builder clearScoreCardsCount() {
        bitField0_ = (bitField0_ & ~0x00020000);
        scoreCardsCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cur_out_cards_data = 19;
      private java.util.List<java.lang.Integer> curOutCardsData_ = java.util.Collections.emptyList();
      private void ensureCurOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          curOutCardsData_ = new java.util.ArrayList<java.lang.Integer>(curOutCardsData_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 cur_out_cards_data = 19;</code>
       *
       * <pre>
       * 当前轮出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCurOutCardsDataList() {
        return java.util.Collections.unmodifiableList(curOutCardsData_);
      }
      /**
       * <code>repeated int32 cur_out_cards_data = 19;</code>
       *
       * <pre>
       * 当前轮出牌数据
       * </pre>
       */
      public int getCurOutCardsDataCount() {
        return curOutCardsData_.size();
      }
      /**
       * <code>repeated int32 cur_out_cards_data = 19;</code>
       *
       * <pre>
       * 当前轮出牌数据
       * </pre>
       */
      public int getCurOutCardsData(int index) {
        return curOutCardsData_.get(index);
      }
      /**
       * <code>repeated int32 cur_out_cards_data = 19;</code>
       *
       * <pre>
       * 当前轮出牌数据
       * </pre>
       */
      public Builder setCurOutCardsData(
          int index, int value) {
        ensureCurOutCardsDataIsMutable();
        curOutCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cur_out_cards_data = 19;</code>
       *
       * <pre>
       * 当前轮出牌数据
       * </pre>
       */
      public Builder addCurOutCardsData(int value) {
        ensureCurOutCardsDataIsMutable();
        curOutCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cur_out_cards_data = 19;</code>
       *
       * <pre>
       * 当前轮出牌数据
       * </pre>
       */
      public Builder addAllCurOutCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCurOutCardsDataIsMutable();
        super.addAll(values, curOutCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cur_out_cards_data = 19;</code>
       *
       * <pre>
       * 当前轮出牌数据
       * </pre>
       */
      public Builder clearCurOutCardsData() {
        curOutCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // optional int32 cur_out_cards_count = 20;
      private int curOutCardsCount_ ;
      /**
       * <code>optional int32 cur_out_cards_count = 20;</code>
       *
       * <pre>
       * 当前轮出牌数量
       * </pre>
       */
      public boolean hasCurOutCardsCount() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 cur_out_cards_count = 20;</code>
       *
       * <pre>
       * 当前轮出牌数量
       * </pre>
       */
      public int getCurOutCardsCount() {
        return curOutCardsCount_;
      }
      /**
       * <code>optional int32 cur_out_cards_count = 20;</code>
       *
       * <pre>
       * 当前轮出牌数量
       * </pre>
       */
      public Builder setCurOutCardsCount(int value) {
        bitField0_ |= 0x00080000;
        curOutCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_out_cards_count = 20;</code>
       *
       * <pre>
       * 当前轮出牌数量
       * </pre>
       */
      public Builder clearCurOutCardsCount() {
        bitField0_ = (bitField0_ & ~0x00080000);
        curOutCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional bool has_main = 21;
      private boolean hasMain_ ;
      /**
       * <code>optional bool has_main = 21;</code>
       *
       * <pre>
       * 是否有主
       * </pre>
       */
      public boolean hasHasMain() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional bool has_main = 21;</code>
       *
       * <pre>
       * 是否有主
       * </pre>
       */
      public boolean getHasMain() {
        return hasMain_;
      }
      /**
       * <code>optional bool has_main = 21;</code>
       *
       * <pre>
       * 是否有主
       * </pre>
       */
      public Builder setHasMain(boolean value) {
        bitField0_ |= 0x00100000;
        hasMain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool has_main = 21;</code>
       *
       * <pre>
       * 是否有主
       * </pre>
       */
      public Builder clearHasMain() {
        bitField0_ = (bitField0_ & ~0x00100000);
        hasMain_ = false;
        onChanged();
        return this;
      }

      // optional int32 jifen = 22;
      private int jifen_ ;
      /**
       * <code>optional int32 jifen = 22;</code>
       *
       * <pre>
       * 总积分
       * </pre>
       */
      public boolean hasJifen() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 jifen = 22;</code>
       *
       * <pre>
       * 总积分
       * </pre>
       */
      public int getJifen() {
        return jifen_;
      }
      /**
       * <code>optional int32 jifen = 22;</code>
       *
       * <pre>
       * 总积分
       * </pre>
       */
      public Builder setJifen(int value) {
        bitField0_ |= 0x00200000;
        jifen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 jifen = 22;</code>
       *
       * <pre>
       * 总积分
       * </pre>
       */
      public Builder clearJifen() {
        bitField0_ = (bitField0_ & ~0x00200000);
        jifen_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 max_card = 23;
      private java.util.List<java.lang.Integer> maxCard_ = java.util.Collections.emptyList();
      private void ensureMaxCardIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          maxCard_ = new java.util.ArrayList<java.lang.Integer>(maxCard_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 max_card = 23;</code>
       */
      public java.util.List<java.lang.Integer>
          getMaxCardList() {
        return java.util.Collections.unmodifiableList(maxCard_);
      }
      /**
       * <code>repeated int32 max_card = 23;</code>
       */
      public int getMaxCardCount() {
        return maxCard_.size();
      }
      /**
       * <code>repeated int32 max_card = 23;</code>
       */
      public int getMaxCard(int index) {
        return maxCard_.get(index);
      }
      /**
       * <code>repeated int32 max_card = 23;</code>
       */
      public Builder setMaxCard(
          int index, int value) {
        ensureMaxCardIsMutable();
        maxCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 max_card = 23;</code>
       */
      public Builder addMaxCard(int value) {
        ensureMaxCardIsMutable();
        maxCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 max_card = 23;</code>
       */
      public Builder addAllMaxCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMaxCardIsMutable();
        super.addAll(values, maxCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 max_card = 23;</code>
       */
      public Builder clearMaxCard() {
        maxCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse max_card_xt = 24;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> maxCardXt_ =
        java.util.Collections.emptyList();
      private void ensureMaxCardXtIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          maxCardXt_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(maxCardXt_);
          bitField0_ |= 0x00800000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> maxCardXtBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getMaxCardXtList() {
        if (maxCardXtBuilder_ == null) {
          return java.util.Collections.unmodifiableList(maxCardXt_);
        } else {
          return maxCardXtBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public int getMaxCardXtCount() {
        if (maxCardXtBuilder_ == null) {
          return maxCardXt_.size();
        } else {
          return maxCardXtBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getMaxCardXt(int index) {
        if (maxCardXtBuilder_ == null) {
          return maxCardXt_.get(index);
        } else {
          return maxCardXtBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public Builder setMaxCardXt(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (maxCardXtBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMaxCardXtIsMutable();
          maxCardXt_.set(index, value);
          onChanged();
        } else {
          maxCardXtBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public Builder setMaxCardXt(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (maxCardXtBuilder_ == null) {
          ensureMaxCardXtIsMutable();
          maxCardXt_.set(index, builderForValue.build());
          onChanged();
        } else {
          maxCardXtBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public Builder addMaxCardXt(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (maxCardXtBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMaxCardXtIsMutable();
          maxCardXt_.add(value);
          onChanged();
        } else {
          maxCardXtBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public Builder addMaxCardXt(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (maxCardXtBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMaxCardXtIsMutable();
          maxCardXt_.add(index, value);
          onChanged();
        } else {
          maxCardXtBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public Builder addMaxCardXt(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (maxCardXtBuilder_ == null) {
          ensureMaxCardXtIsMutable();
          maxCardXt_.add(builderForValue.build());
          onChanged();
        } else {
          maxCardXtBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public Builder addMaxCardXt(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (maxCardXtBuilder_ == null) {
          ensureMaxCardXtIsMutable();
          maxCardXt_.add(index, builderForValue.build());
          onChanged();
        } else {
          maxCardXtBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public Builder addAllMaxCardXt(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (maxCardXtBuilder_ == null) {
          ensureMaxCardXtIsMutable();
          super.addAll(values, maxCardXt_);
          onChanged();
        } else {
          maxCardXtBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public Builder clearMaxCardXt() {
        if (maxCardXtBuilder_ == null) {
          maxCardXt_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00800000);
          onChanged();
        } else {
          maxCardXtBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public Builder removeMaxCardXt(int index) {
        if (maxCardXtBuilder_ == null) {
          ensureMaxCardXtIsMutable();
          maxCardXt_.remove(index);
          onChanged();
        } else {
          maxCardXtBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getMaxCardXtBuilder(
          int index) {
        return getMaxCardXtFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getMaxCardXtOrBuilder(
          int index) {
        if (maxCardXtBuilder_ == null) {
          return maxCardXt_.get(index);  } else {
          return maxCardXtBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getMaxCardXtOrBuilderList() {
        if (maxCardXtBuilder_ != null) {
          return maxCardXtBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(maxCardXt_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addMaxCardXtBuilder() {
        return getMaxCardXtFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addMaxCardXtBuilder(
          int index) {
        return getMaxCardXtFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse max_card_xt = 24;</code>
       *
       * <pre>
       * 所有玩家的最大卡牌
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getMaxCardXtBuilderList() {
        return getMaxCardXtFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getMaxCardXtFieldBuilder() {
        if (maxCardXtBuilder_ == null) {
          maxCardXtBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  maxCardXt_,
                  ((bitField0_ & 0x00800000) == 0x00800000),
                  getParentForChildren(),
                  isClean());
          maxCardXt_ = null;
        }
        return maxCardXtBuilder_;
      }

      // optional int32 guard = 25;
      private int guard_ ;
      /**
       * <code>optional int32 guard = 25;</code>
       *
       * <pre>
       * 留守花色 0-5表示方块、梅花、红桃、黑桃、取消、报副
       * </pre>
       */
      public boolean hasGuard() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int32 guard = 25;</code>
       *
       * <pre>
       * 留守花色 0-5表示方块、梅花、红桃、黑桃、取消、报副
       * </pre>
       */
      public int getGuard() {
        return guard_;
      }
      /**
       * <code>optional int32 guard = 25;</code>
       *
       * <pre>
       * 留守花色 0-5表示方块、梅花、红桃、黑桃、取消、报副
       * </pre>
       */
      public Builder setGuard(int value) {
        bitField0_ |= 0x01000000;
        guard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 guard = 25;</code>
       *
       * <pre>
       * 留守花色 0-5表示方块、梅花、红桃、黑桃、取消、报副
       * </pre>
       */
      public Builder clearGuard() {
        bitField0_ = (bitField0_ & ~0x01000000);
        guard_ = 0;
        onChanged();
        return this;
      }

      // repeated .sdh.playerOutCards playerOutCards = 26;
      private java.util.List<protobuf.clazz.sdh.SdhRsp.playerOutCards> playerOutCards_ =
        java.util.Collections.emptyList();
      private void ensurePlayerOutCardsIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          playerOutCards_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.playerOutCards>(playerOutCards_);
          bitField0_ |= 0x02000000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.playerOutCards, protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder, protobuf.clazz.sdh.SdhRsp.playerOutCardsOrBuilder> playerOutCardsBuilder_;

      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.playerOutCards> getPlayerOutCardsList() {
        if (playerOutCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(playerOutCards_);
        } else {
          return playerOutCardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public int getPlayerOutCardsCount() {
        if (playerOutCardsBuilder_ == null) {
          return playerOutCards_.size();
        } else {
          return playerOutCardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.playerOutCards getPlayerOutCards(int index) {
        if (playerOutCardsBuilder_ == null) {
          return playerOutCards_.get(index);
        } else {
          return playerOutCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public Builder setPlayerOutCards(
          int index, protobuf.clazz.sdh.SdhRsp.playerOutCards value) {
        if (playerOutCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerOutCardsIsMutable();
          playerOutCards_.set(index, value);
          onChanged();
        } else {
          playerOutCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public Builder setPlayerOutCards(
          int index, protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder builderForValue) {
        if (playerOutCardsBuilder_ == null) {
          ensurePlayerOutCardsIsMutable();
          playerOutCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          playerOutCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public Builder addPlayerOutCards(protobuf.clazz.sdh.SdhRsp.playerOutCards value) {
        if (playerOutCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerOutCardsIsMutable();
          playerOutCards_.add(value);
          onChanged();
        } else {
          playerOutCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public Builder addPlayerOutCards(
          int index, protobuf.clazz.sdh.SdhRsp.playerOutCards value) {
        if (playerOutCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerOutCardsIsMutable();
          playerOutCards_.add(index, value);
          onChanged();
        } else {
          playerOutCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public Builder addPlayerOutCards(
          protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder builderForValue) {
        if (playerOutCardsBuilder_ == null) {
          ensurePlayerOutCardsIsMutable();
          playerOutCards_.add(builderForValue.build());
          onChanged();
        } else {
          playerOutCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public Builder addPlayerOutCards(
          int index, protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder builderForValue) {
        if (playerOutCardsBuilder_ == null) {
          ensurePlayerOutCardsIsMutable();
          playerOutCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          playerOutCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public Builder addAllPlayerOutCards(
          java.lang.Iterable<? extends protobuf.clazz.sdh.SdhRsp.playerOutCards> values) {
        if (playerOutCardsBuilder_ == null) {
          ensurePlayerOutCardsIsMutable();
          super.addAll(values, playerOutCards_);
          onChanged();
        } else {
          playerOutCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public Builder clearPlayerOutCards() {
        if (playerOutCardsBuilder_ == null) {
          playerOutCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x02000000);
          onChanged();
        } else {
          playerOutCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public Builder removePlayerOutCards(int index) {
        if (playerOutCardsBuilder_ == null) {
          ensurePlayerOutCardsIsMutable();
          playerOutCards_.remove(index);
          onChanged();
        } else {
          playerOutCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder getPlayerOutCardsBuilder(
          int index) {
        return getPlayerOutCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.playerOutCardsOrBuilder getPlayerOutCardsOrBuilder(
          int index) {
        if (playerOutCardsBuilder_ == null) {
          return playerOutCards_.get(index);  } else {
          return playerOutCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.playerOutCardsOrBuilder> 
           getPlayerOutCardsOrBuilderList() {
        if (playerOutCardsBuilder_ != null) {
          return playerOutCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(playerOutCards_);
        }
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder addPlayerOutCardsBuilder() {
        return getPlayerOutCardsFieldBuilder().addBuilder(
            protobuf.clazz.sdh.SdhRsp.playerOutCards.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder addPlayerOutCardsBuilder(
          int index) {
        return getPlayerOutCardsFieldBuilder().addBuilder(
            index, protobuf.clazz.sdh.SdhRsp.playerOutCards.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.playerOutCards playerOutCards = 26;</code>
       *
       * <pre>
       * 每个玩家的出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder> 
           getPlayerOutCardsBuilderList() {
        return getPlayerOutCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.playerOutCards, protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder, protobuf.clazz.sdh.SdhRsp.playerOutCardsOrBuilder> 
          getPlayerOutCardsFieldBuilder() {
        if (playerOutCardsBuilder_ == null) {
          playerOutCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.sdh.SdhRsp.playerOutCards, protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder, protobuf.clazz.sdh.SdhRsp.playerOutCardsOrBuilder>(
                  playerOutCards_,
                  ((bitField0_ & 0x02000000) == 0x02000000),
                  getParentForChildren(),
                  isClean());
          playerOutCards_ = null;
        }
        return playerOutCardsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:sdh.RoomPlayerResponseSdh)
    }

    static {
      defaultInstance = new RoomPlayerResponseSdh(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.RoomPlayerResponseSdh)
  }

  public interface PukeGameEndSdhOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .sdh.RoomInfoSdh room_info = 1;
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
     */
    protobuf.clazz.sdh.SdhRsp.RoomInfoSdh getRoomInfo();
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
     */
    protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder getRoomInfoOrBuilder();

    // optional int32 cur_round = 2;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getCurRound();

    // optional int32 game_round = 3;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    int getGameRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 end_score = 6;
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    int getEndScore(int index);

    // optional int32 player_num = 7;
    /**
     * <code>optional int32 player_num = 7;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 7;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 reason = 8;
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated .sdh.RoomPlayerResponseSdh players = 9;
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
     */
    java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> 
        getPlayersList();
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
     */
    protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh getPlayers(int index);
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
     */
    java.util.List<? extends protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
     */
    protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 all_end_score = 10;
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated int32 end_score_max = 11;
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreMaxList();
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMaxCount();
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    int getEndScoreMax(int index);

    // repeated int32 win_banker_num = 12;
    /**
     * <code>repeated int32 win_banker_num = 12;</code>
     *
     * <pre>
     *庄家赢数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinBankerNumList();
    /**
     * <code>repeated int32 win_banker_num = 12;</code>
     *
     * <pre>
     *庄家赢数
     * </pre>
     */
    int getWinBankerNumCount();
    /**
     * <code>repeated int32 win_banker_num = 12;</code>
     *
     * <pre>
     *庄家赢数
     * </pre>
     */
    int getWinBankerNum(int index);

    // repeated int32 win_free_num = 13;
    /**
     * <code>repeated int32 win_free_num = 13;</code>
     *
     * <pre>
     *闲家赢数
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinFreeNumList();
    /**
     * <code>repeated int32 win_free_num = 13;</code>
     *
     * <pre>
     *闲家赢数
     * </pre>
     */
    int getWinFreeNumCount();
    /**
     * <code>repeated int32 win_free_num = 13;</code>
     *
     * <pre>
     *闲家赢数
     * </pre>
     */
    int getWinFreeNum(int index);

    // repeated int32 fail_num = 18;
    /**
     * <code>repeated int32 fail_num = 18;</code>
     *
     * <pre>
     *输
     * </pre>
     */
    java.util.List<java.lang.Integer> getFailNumList();
    /**
     * <code>repeated int32 fail_num = 18;</code>
     *
     * <pre>
     *输
     * </pre>
     */
    int getFailNumCount();
    /**
     * <code>repeated int32 fail_num = 18;</code>
     *
     * <pre>
     *输
     * </pre>
     */
    int getFailNum(int index);

    // optional int32 winner = 14;
    /**
     * <code>optional int32 winner = 14;</code>
     *
     * <pre>
     *赢家
     * </pre>
     */
    boolean hasWinner();
    /**
     * <code>optional int32 winner = 14;</code>
     *
     * <pre>
     *赢家
     * </pre>
     */
    int getWinner();

    // optional int32 difen = 15;
    /**
     * <code>optional int32 difen = 15;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    boolean hasDifen();
    /**
     * <code>optional int32 difen = 15;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getDifen();

    // optional int32 score = 16;
    /**
     * <code>optional int32 score = 16;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    boolean hasScore();
    /**
     * <code>optional int32 score = 16;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getScore();

    // optional string desc = 17;
    /**
     * <code>optional string desc = 17;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    boolean hasDesc();
    /**
     * <code>optional string desc = 17;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    java.lang.String getDesc();
    /**
     * <code>optional string desc = 17;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    com.google.protobuf.ByteString
        getDescBytes();

    // optional int32 stall = 19;
    /**
     * <code>optional int32 stall = 19;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    boolean hasStall();
    /**
     * <code>optional int32 stall = 19;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    int getStall();

    // optional int32 rate = 20;
    /**
     * <code>optional int32 rate = 20;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    boolean hasRate();
    /**
     * <code>optional int32 rate = 20;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    int getRate();

    // repeated int32 max_win = 21;
    /**
     * <code>repeated int32 max_win = 21;</code>
     *
     * <pre>
     * 最大赢点
     * </pre>
     */
    java.util.List<java.lang.Integer> getMaxWinList();
    /**
     * <code>repeated int32 max_win = 21;</code>
     *
     * <pre>
     * 最大赢点
     * </pre>
     */
    int getMaxWinCount();
    /**
     * <code>repeated int32 max_win = 21;</code>
     *
     * <pre>
     * 最大赢点
     * </pre>
     */
    int getMaxWin(int index);

    // optional int32 di_card_count = 22;
    /**
     * <code>optional int32 di_card_count = 22;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    boolean hasDiCardCount();
    /**
     * <code>optional int32 di_card_count = 22;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    int getDiCardCount();

    // repeated int32 di_cards_data = 23;
    /**
     * <code>repeated int32 di_cards_data = 23;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getDiCardsDataList();
    /**
     * <code>repeated int32 di_cards_data = 23;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getDiCardsDataCount();
    /**
     * <code>repeated int32 di_cards_data = 23;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getDiCardsData(int index);
  }
  /**
   * Protobuf type {@code sdh.PukeGameEndSdh}
   *
   * <pre>
   *结算
   * </pre>
   */
  public static final class PukeGameEndSdh extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndSdhOrBuilder {
    // Use PukeGameEndSdh.newBuilder() to construct.
    private PukeGameEndSdh(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndSdh(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndSdh defaultInstance;
    public static PukeGameEndSdh getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndSdh getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndSdh(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              curRound_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameRound_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              playerNum_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000010;
              reason_ = input.readInt32();
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                players_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh>();
                mutable_bitField0_ |= 0x00000100;
              }
              players_.add(input.readMessage(protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.PARSER, extensionRegistry));
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              endScoreMax_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                endScoreMax_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScoreMax_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                winBankerNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              winBankerNum_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                winBankerNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                winBankerNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                winFreeNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              winFreeNum_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                winFreeNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winFreeNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              bitField0_ |= 0x00000020;
              winner_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000040;
              difen_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000080;
              score_ = input.readInt32();
              break;
            }
            case 138: {
              bitField0_ |= 0x00000100;
              desc_ = input.readBytes();
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                failNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              failNum_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                failNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                failNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              bitField0_ |= 0x00000200;
              stall_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00000400;
              rate_ = input.readInt32();
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                maxWin_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              maxWin_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                maxWin_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                maxWin_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              bitField0_ |= 0x00000800;
              diCardCount_ = input.readInt32();
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                diCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              diCardsData_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                diCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                diCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          winBankerNum_ = java.util.Collections.unmodifiableList(winBankerNum_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          winFreeNum_ = java.util.Collections.unmodifiableList(winFreeNum_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          failNum_ = java.util.Collections.unmodifiableList(failNum_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          maxWin_ = java.util.Collections.unmodifiableList(maxWin_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          diCardsData_ = java.util.Collections.unmodifiableList(diCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_PukeGameEndSdh_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_PukeGameEndSdh_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh.class, protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndSdh> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndSdh>() {
      public PukeGameEndSdh parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndSdh(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndSdh> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .sdh.RoomInfoSdh room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.sdh.SdhRsp.RoomInfoSdh roomInfo_;
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
     */
    public protobuf.clazz.sdh.SdhRsp.RoomInfoSdh getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
     */
    public protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 cur_round = 2;
    public static final int CUR_ROUND_FIELD_NUMBER = 2;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_round = 3;
    public static final int GAME_ROUND_FIELD_NUMBER = 3;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 end_score = 6;
    public static final int END_SCORE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 6;</code>
     *
     * <pre>
     *结算分数
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // optional int32 player_num = 7;
    public static final int PLAYER_NUM_FIELD_NUMBER = 7;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 7;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_num = 7;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 reason = 8;
    public static final int REASON_FIELD_NUMBER = 8;
    private int reason_;
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 reason = 8;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated .sdh.RoomPlayerResponseSdh players = 9;
    public static final int PLAYERS_FIELD_NUMBER = 9;
    private java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> players_;
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
     */
    public java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
     */
    public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
     */
    public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
     */
    public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 all_end_score = 10;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 10;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 end_score_max = 11;
    public static final int END_SCORE_MAX_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> endScoreMax_;
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreMaxList() {
      return endScoreMax_;
    }
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMaxCount() {
      return endScoreMax_.size();
    }
    /**
     * <code>repeated int32 end_score_max = 11;</code>
     *
     * <pre>
     *单句最高得分
     * </pre>
     */
    public int getEndScoreMax(int index) {
      return endScoreMax_.get(index);
    }

    // repeated int32 win_banker_num = 12;
    public static final int WIN_BANKER_NUM_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> winBankerNum_;
    /**
     * <code>repeated int32 win_banker_num = 12;</code>
     *
     * <pre>
     *庄家赢数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinBankerNumList() {
      return winBankerNum_;
    }
    /**
     * <code>repeated int32 win_banker_num = 12;</code>
     *
     * <pre>
     *庄家赢数
     * </pre>
     */
    public int getWinBankerNumCount() {
      return winBankerNum_.size();
    }
    /**
     * <code>repeated int32 win_banker_num = 12;</code>
     *
     * <pre>
     *庄家赢数
     * </pre>
     */
    public int getWinBankerNum(int index) {
      return winBankerNum_.get(index);
    }

    // repeated int32 win_free_num = 13;
    public static final int WIN_FREE_NUM_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> winFreeNum_;
    /**
     * <code>repeated int32 win_free_num = 13;</code>
     *
     * <pre>
     *闲家赢数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinFreeNumList() {
      return winFreeNum_;
    }
    /**
     * <code>repeated int32 win_free_num = 13;</code>
     *
     * <pre>
     *闲家赢数
     * </pre>
     */
    public int getWinFreeNumCount() {
      return winFreeNum_.size();
    }
    /**
     * <code>repeated int32 win_free_num = 13;</code>
     *
     * <pre>
     *闲家赢数
     * </pre>
     */
    public int getWinFreeNum(int index) {
      return winFreeNum_.get(index);
    }

    // repeated int32 fail_num = 18;
    public static final int FAIL_NUM_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> failNum_;
    /**
     * <code>repeated int32 fail_num = 18;</code>
     *
     * <pre>
     *输
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getFailNumList() {
      return failNum_;
    }
    /**
     * <code>repeated int32 fail_num = 18;</code>
     *
     * <pre>
     *输
     * </pre>
     */
    public int getFailNumCount() {
      return failNum_.size();
    }
    /**
     * <code>repeated int32 fail_num = 18;</code>
     *
     * <pre>
     *输
     * </pre>
     */
    public int getFailNum(int index) {
      return failNum_.get(index);
    }

    // optional int32 winner = 14;
    public static final int WINNER_FIELD_NUMBER = 14;
    private int winner_;
    /**
     * <code>optional int32 winner = 14;</code>
     *
     * <pre>
     *赢家
     * </pre>
     */
    public boolean hasWinner() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 winner = 14;</code>
     *
     * <pre>
     *赢家
     * </pre>
     */
    public int getWinner() {
      return winner_;
    }

    // optional int32 difen = 15;
    public static final int DIFEN_FIELD_NUMBER = 15;
    private int difen_;
    /**
     * <code>optional int32 difen = 15;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public boolean hasDifen() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 difen = 15;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getDifen() {
      return difen_;
    }

    // optional int32 score = 16;
    public static final int SCORE_FIELD_NUMBER = 16;
    private int score_;
    /**
     * <code>optional int32 score = 16;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 score = 16;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getScore() {
      return score_;
    }

    // optional string desc = 17;
    public static final int DESC_FIELD_NUMBER = 17;
    private java.lang.Object desc_;
    /**
     * <code>optional string desc = 17;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    public boolean hasDesc() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional string desc = 17;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    public java.lang.String getDesc() {
      java.lang.Object ref = desc_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          desc_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string desc = 17;</code>
     *
     * <pre>
     *描述
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDescBytes() {
      java.lang.Object ref = desc_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        desc_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 stall = 19;
    public static final int STALL_FIELD_NUMBER = 19;
    private int stall_;
    /**
     * <code>optional int32 stall = 19;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    public boolean hasStall() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 stall = 19;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    public int getStall() {
      return stall_;
    }

    // optional int32 rate = 20;
    public static final int RATE_FIELD_NUMBER = 20;
    private int rate_;
    /**
     * <code>optional int32 rate = 20;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    public boolean hasRate() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 rate = 20;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    public int getRate() {
      return rate_;
    }

    // repeated int32 max_win = 21;
    public static final int MAX_WIN_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> maxWin_;
    /**
     * <code>repeated int32 max_win = 21;</code>
     *
     * <pre>
     * 最大赢点
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMaxWinList() {
      return maxWin_;
    }
    /**
     * <code>repeated int32 max_win = 21;</code>
     *
     * <pre>
     * 最大赢点
     * </pre>
     */
    public int getMaxWinCount() {
      return maxWin_.size();
    }
    /**
     * <code>repeated int32 max_win = 21;</code>
     *
     * <pre>
     * 最大赢点
     * </pre>
     */
    public int getMaxWin(int index) {
      return maxWin_.get(index);
    }

    // optional int32 di_card_count = 22;
    public static final int DI_CARD_COUNT_FIELD_NUMBER = 22;
    private int diCardCount_;
    /**
     * <code>optional int32 di_card_count = 22;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public boolean hasDiCardCount() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 di_card_count = 22;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public int getDiCardCount() {
      return diCardCount_;
    }

    // repeated int32 di_cards_data = 23;
    public static final int DI_CARDS_DATA_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> diCardsData_;
    /**
     * <code>repeated int32 di_cards_data = 23;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDiCardsDataList() {
      return diCardsData_;
    }
    /**
     * <code>repeated int32 di_cards_data = 23;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getDiCardsDataCount() {
      return diCardsData_.size();
    }
    /**
     * <code>repeated int32 di_cards_data = 23;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getDiCardsData(int index) {
      return diCardsData_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance();
      curRound_ = 0;
      gameRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      reason_ = 0;
      players_ = java.util.Collections.emptyList();
      allEndScore_ = java.util.Collections.emptyList();
      endScoreMax_ = java.util.Collections.emptyList();
      winBankerNum_ = java.util.Collections.emptyList();
      winFreeNum_ = java.util.Collections.emptyList();
      failNum_ = java.util.Collections.emptyList();
      winner_ = 0;
      difen_ = 0;
      score_ = 0;
      desc_ = "";
      stall_ = 0;
      rate_ = 0;
      maxWin_ = java.util.Collections.emptyList();
      diCardCount_ = 0;
      diCardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameRound_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(6, endScore_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(7, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(8, reason_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(9, players_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(10, allEndScore_.get(i));
      }
      for (int i = 0; i < endScoreMax_.size(); i++) {
        output.writeInt32(11, endScoreMax_.get(i));
      }
      for (int i = 0; i < winBankerNum_.size(); i++) {
        output.writeInt32(12, winBankerNum_.get(i));
      }
      for (int i = 0; i < winFreeNum_.size(); i++) {
        output.writeInt32(13, winFreeNum_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(14, winner_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(15, difen_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(16, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(17, getDescBytes());
      }
      for (int i = 0; i < failNum_.size(); i++) {
        output.writeInt32(18, failNum_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(19, stall_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(20, rate_);
      }
      for (int i = 0; i < maxWin_.size(); i++) {
        output.writeInt32(21, maxWin_.get(i));
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(22, diCardCount_);
      }
      for (int i = 0; i < diCardsData_.size(); i++) {
        output.writeInt32(23, diCardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, reason_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 1 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScoreMax_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScoreMax_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreMaxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winBankerNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winBankerNum_.get(i));
        }
        size += dataSize;
        size += 1 * getWinBankerNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winFreeNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winFreeNum_.get(i));
        }
        size += dataSize;
        size += 1 * getWinFreeNumList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, winner_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, difen_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, score_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(17, getDescBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < failNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(failNum_.get(i));
        }
        size += dataSize;
        size += 2 * getFailNumList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, stall_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, rate_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < maxWin_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(maxWin_.get(i));
        }
        size += dataSize;
        size += 2 * getMaxWinList().size();
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, diCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < diCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(diCardsData_.get(i));
        }
        size += dataSize;
        size += 2 * getDiCardsDataList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.PukeGameEndSdh}
     *
     * <pre>
     *结算
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.PukeGameEndSdhOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_PukeGameEndSdh_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_PukeGameEndSdh_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh.class, protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          playersBuilder_.clear();
        }
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        winBankerNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        winFreeNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        failNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        winner_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        difen_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        desc_ = "";
        bitField0_ = (bitField0_ & ~0x00020000);
        stall_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        rate_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        maxWin_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        diCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        diCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_PukeGameEndSdh_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh build() {
        protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh buildPartial() {
        protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh result = new protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRound_ = gameRound_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.endScore_ = endScore_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000010;
        }
        result.reason_ = reason_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          endScoreMax_ = java.util.Collections.unmodifiableList(endScoreMax_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.endScoreMax_ = endScoreMax_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          winBankerNum_ = java.util.Collections.unmodifiableList(winBankerNum_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.winBankerNum_ = winBankerNum_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          winFreeNum_ = java.util.Collections.unmodifiableList(winFreeNum_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.winFreeNum_ = winFreeNum_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          failNum_ = java.util.Collections.unmodifiableList(failNum_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.failNum_ = failNum_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.winner_ = winner_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.difen_ = difen_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.desc_ = desc_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.stall_ = stall_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.rate_ = rate_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          maxWin_ = java.util.Collections.unmodifiableList(maxWin_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.maxWin_ = maxWin_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.diCardCount_ = diCardCount_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          diCardsData_ = java.util.Collections.unmodifiableList(diCardsData_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.diCardsData_ = diCardsData_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh other) {
        if (other == protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000100);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.endScoreMax_.isEmpty()) {
          if (endScoreMax_.isEmpty()) {
            endScoreMax_ = other.endScoreMax_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureEndScoreMaxIsMutable();
            endScoreMax_.addAll(other.endScoreMax_);
          }
          onChanged();
        }
        if (!other.winBankerNum_.isEmpty()) {
          if (winBankerNum_.isEmpty()) {
            winBankerNum_ = other.winBankerNum_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureWinBankerNumIsMutable();
            winBankerNum_.addAll(other.winBankerNum_);
          }
          onChanged();
        }
        if (!other.winFreeNum_.isEmpty()) {
          if (winFreeNum_.isEmpty()) {
            winFreeNum_ = other.winFreeNum_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureWinFreeNumIsMutable();
            winFreeNum_.addAll(other.winFreeNum_);
          }
          onChanged();
        }
        if (!other.failNum_.isEmpty()) {
          if (failNum_.isEmpty()) {
            failNum_ = other.failNum_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureFailNumIsMutable();
            failNum_.addAll(other.failNum_);
          }
          onChanged();
        }
        if (other.hasWinner()) {
          setWinner(other.getWinner());
        }
        if (other.hasDifen()) {
          setDifen(other.getDifen());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasDesc()) {
          bitField0_ |= 0x00020000;
          desc_ = other.desc_;
          onChanged();
        }
        if (other.hasStall()) {
          setStall(other.getStall());
        }
        if (other.hasRate()) {
          setRate(other.getRate());
        }
        if (!other.maxWin_.isEmpty()) {
          if (maxWin_.isEmpty()) {
            maxWin_ = other.maxWin_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureMaxWinIsMutable();
            maxWin_.addAll(other.maxWin_);
          }
          onChanged();
        }
        if (other.hasDiCardCount()) {
          setDiCardCount(other.getDiCardCount());
        }
        if (!other.diCardsData_.isEmpty()) {
          if (diCardsData_.isEmpty()) {
            diCardsData_ = other.diCardsData_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureDiCardsDataIsMutable();
            diCardsData_.addAll(other.diCardsData_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.PukeGameEndSdh) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .sdh.RoomInfoSdh room_info = 1;
      private protobuf.clazz.sdh.SdhRsp.RoomInfoSdh roomInfo_ = protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.RoomInfoSdh, protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomInfoSdh getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.sdh.SdhRsp.RoomInfoSdh value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.sdh.SdhRsp.RoomInfoSdh value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.RoomInfoSdh, protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.sdh.SdhRsp.RoomInfoSdh, protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 cur_round = 2;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000002;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 3;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000004;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 end_score = 6;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 6;</code>
       *
       * <pre>
       *结算分数
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional int32 player_num = 7;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 7;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 player_num = 7;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 7;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000040;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 7;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000040);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 8;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000080;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 8;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000080);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated .sdh.RoomPlayerResponseSdh players = 9;
      private java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          players_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh>(players_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder> playersBuilder_;

      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public Builder addPlayers(protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 9;</code>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 all_end_score = 10;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 10;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 end_score_max = 11;
      private java.util.List<java.lang.Integer> endScoreMax_ = java.util.Collections.emptyList();
      private void ensureEndScoreMaxIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          endScoreMax_ = new java.util.ArrayList<java.lang.Integer>(endScoreMax_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreMaxList() {
        return java.util.Collections.unmodifiableList(endScoreMax_);
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMaxCount() {
        return endScoreMax_.size();
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public int getEndScoreMax(int index) {
        return endScoreMax_.get(index);
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder setEndScoreMax(
          int index, int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addEndScoreMax(int value) {
        ensureEndScoreMaxIsMutable();
        endScoreMax_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder addAllEndScoreMax(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreMaxIsMutable();
        super.addAll(values, endScoreMax_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_max = 11;</code>
       *
       * <pre>
       *单句最高得分
       * </pre>
       */
      public Builder clearEndScoreMax() {
        endScoreMax_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 win_banker_num = 12;
      private java.util.List<java.lang.Integer> winBankerNum_ = java.util.Collections.emptyList();
      private void ensureWinBankerNumIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          winBankerNum_ = new java.util.ArrayList<java.lang.Integer>(winBankerNum_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 win_banker_num = 12;</code>
       *
       * <pre>
       *庄家赢数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinBankerNumList() {
        return java.util.Collections.unmodifiableList(winBankerNum_);
      }
      /**
       * <code>repeated int32 win_banker_num = 12;</code>
       *
       * <pre>
       *庄家赢数
       * </pre>
       */
      public int getWinBankerNumCount() {
        return winBankerNum_.size();
      }
      /**
       * <code>repeated int32 win_banker_num = 12;</code>
       *
       * <pre>
       *庄家赢数
       * </pre>
       */
      public int getWinBankerNum(int index) {
        return winBankerNum_.get(index);
      }
      /**
       * <code>repeated int32 win_banker_num = 12;</code>
       *
       * <pre>
       *庄家赢数
       * </pre>
       */
      public Builder setWinBankerNum(
          int index, int value) {
        ensureWinBankerNumIsMutable();
        winBankerNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_banker_num = 12;</code>
       *
       * <pre>
       *庄家赢数
       * </pre>
       */
      public Builder addWinBankerNum(int value) {
        ensureWinBankerNumIsMutable();
        winBankerNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_banker_num = 12;</code>
       *
       * <pre>
       *庄家赢数
       * </pre>
       */
      public Builder addAllWinBankerNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinBankerNumIsMutable();
        super.addAll(values, winBankerNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_banker_num = 12;</code>
       *
       * <pre>
       *庄家赢数
       * </pre>
       */
      public Builder clearWinBankerNum() {
        winBankerNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated int32 win_free_num = 13;
      private java.util.List<java.lang.Integer> winFreeNum_ = java.util.Collections.emptyList();
      private void ensureWinFreeNumIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          winFreeNum_ = new java.util.ArrayList<java.lang.Integer>(winFreeNum_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 win_free_num = 13;</code>
       *
       * <pre>
       *闲家赢数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinFreeNumList() {
        return java.util.Collections.unmodifiableList(winFreeNum_);
      }
      /**
       * <code>repeated int32 win_free_num = 13;</code>
       *
       * <pre>
       *闲家赢数
       * </pre>
       */
      public int getWinFreeNumCount() {
        return winFreeNum_.size();
      }
      /**
       * <code>repeated int32 win_free_num = 13;</code>
       *
       * <pre>
       *闲家赢数
       * </pre>
       */
      public int getWinFreeNum(int index) {
        return winFreeNum_.get(index);
      }
      /**
       * <code>repeated int32 win_free_num = 13;</code>
       *
       * <pre>
       *闲家赢数
       * </pre>
       */
      public Builder setWinFreeNum(
          int index, int value) {
        ensureWinFreeNumIsMutable();
        winFreeNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_free_num = 13;</code>
       *
       * <pre>
       *闲家赢数
       * </pre>
       */
      public Builder addWinFreeNum(int value) {
        ensureWinFreeNumIsMutable();
        winFreeNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_free_num = 13;</code>
       *
       * <pre>
       *闲家赢数
       * </pre>
       */
      public Builder addAllWinFreeNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinFreeNumIsMutable();
        super.addAll(values, winFreeNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_free_num = 13;</code>
       *
       * <pre>
       *闲家赢数
       * </pre>
       */
      public Builder clearWinFreeNum() {
        winFreeNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 fail_num = 18;
      private java.util.List<java.lang.Integer> failNum_ = java.util.Collections.emptyList();
      private void ensureFailNumIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          failNum_ = new java.util.ArrayList<java.lang.Integer>(failNum_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 fail_num = 18;</code>
       *
       * <pre>
       *输
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getFailNumList() {
        return java.util.Collections.unmodifiableList(failNum_);
      }
      /**
       * <code>repeated int32 fail_num = 18;</code>
       *
       * <pre>
       *输
       * </pre>
       */
      public int getFailNumCount() {
        return failNum_.size();
      }
      /**
       * <code>repeated int32 fail_num = 18;</code>
       *
       * <pre>
       *输
       * </pre>
       */
      public int getFailNum(int index) {
        return failNum_.get(index);
      }
      /**
       * <code>repeated int32 fail_num = 18;</code>
       *
       * <pre>
       *输
       * </pre>
       */
      public Builder setFailNum(
          int index, int value) {
        ensureFailNumIsMutable();
        failNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fail_num = 18;</code>
       *
       * <pre>
       *输
       * </pre>
       */
      public Builder addFailNum(int value) {
        ensureFailNumIsMutable();
        failNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fail_num = 18;</code>
       *
       * <pre>
       *输
       * </pre>
       */
      public Builder addAllFailNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFailNumIsMutable();
        super.addAll(values, failNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fail_num = 18;</code>
       *
       * <pre>
       *输
       * </pre>
       */
      public Builder clearFailNum() {
        failNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // optional int32 winner = 14;
      private int winner_ ;
      /**
       * <code>optional int32 winner = 14;</code>
       *
       * <pre>
       *赢家
       * </pre>
       */
      public boolean hasWinner() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 winner = 14;</code>
       *
       * <pre>
       *赢家
       * </pre>
       */
      public int getWinner() {
        return winner_;
      }
      /**
       * <code>optional int32 winner = 14;</code>
       *
       * <pre>
       *赢家
       * </pre>
       */
      public Builder setWinner(int value) {
        bitField0_ |= 0x00004000;
        winner_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 winner = 14;</code>
       *
       * <pre>
       *赢家
       * </pre>
       */
      public Builder clearWinner() {
        bitField0_ = (bitField0_ & ~0x00004000);
        winner_ = 0;
        onChanged();
        return this;
      }

      // optional int32 difen = 15;
      private int difen_ ;
      /**
       * <code>optional int32 difen = 15;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public boolean hasDifen() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 difen = 15;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getDifen() {
        return difen_;
      }
      /**
       * <code>optional int32 difen = 15;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder setDifen(int value) {
        bitField0_ |= 0x00008000;
        difen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 difen = 15;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder clearDifen() {
        bitField0_ = (bitField0_ & ~0x00008000);
        difen_ = 0;
        onChanged();
        return this;
      }

      // optional int32 score = 16;
      private int score_ ;
      /**
       * <code>optional int32 score = 16;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 score = 16;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>optional int32 score = 16;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00010000;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score = 16;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00010000);
        score_ = 0;
        onChanged();
        return this;
      }

      // optional string desc = 17;
      private java.lang.Object desc_ = "";
      /**
       * <code>optional string desc = 17;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public boolean hasDesc() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional string desc = 17;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public java.lang.String getDesc() {
        java.lang.Object ref = desc_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          desc_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string desc = 17;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDescBytes() {
        java.lang.Object ref = desc_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          desc_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string desc = 17;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public Builder setDesc(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        desc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string desc = 17;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public Builder clearDesc() {
        bitField0_ = (bitField0_ & ~0x00020000);
        desc_ = getDefaultInstance().getDesc();
        onChanged();
        return this;
      }
      /**
       * <code>optional string desc = 17;</code>
       *
       * <pre>
       *描述
       * </pre>
       */
      public Builder setDescBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        desc_ = value;
        onChanged();
        return this;
      }

      // optional int32 stall = 19;
      private int stall_ ;
      /**
       * <code>optional int32 stall = 19;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public boolean hasStall() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 stall = 19;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public int getStall() {
        return stall_;
      }
      /**
       * <code>optional int32 stall = 19;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public Builder setStall(int value) {
        bitField0_ |= 0x00040000;
        stall_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 stall = 19;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public Builder clearStall() {
        bitField0_ = (bitField0_ & ~0x00040000);
        stall_ = 0;
        onChanged();
        return this;
      }

      // optional int32 rate = 20;
      private int rate_ ;
      /**
       * <code>optional int32 rate = 20;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public boolean hasRate() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 rate = 20;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public int getRate() {
        return rate_;
      }
      /**
       * <code>optional int32 rate = 20;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public Builder setRate(int value) {
        bitField0_ |= 0x00080000;
        rate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rate = 20;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public Builder clearRate() {
        bitField0_ = (bitField0_ & ~0x00080000);
        rate_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 max_win = 21;
      private java.util.List<java.lang.Integer> maxWin_ = java.util.Collections.emptyList();
      private void ensureMaxWinIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          maxWin_ = new java.util.ArrayList<java.lang.Integer>(maxWin_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 max_win = 21;</code>
       *
       * <pre>
       * 最大赢点
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMaxWinList() {
        return java.util.Collections.unmodifiableList(maxWin_);
      }
      /**
       * <code>repeated int32 max_win = 21;</code>
       *
       * <pre>
       * 最大赢点
       * </pre>
       */
      public int getMaxWinCount() {
        return maxWin_.size();
      }
      /**
       * <code>repeated int32 max_win = 21;</code>
       *
       * <pre>
       * 最大赢点
       * </pre>
       */
      public int getMaxWin(int index) {
        return maxWin_.get(index);
      }
      /**
       * <code>repeated int32 max_win = 21;</code>
       *
       * <pre>
       * 最大赢点
       * </pre>
       */
      public Builder setMaxWin(
          int index, int value) {
        ensureMaxWinIsMutable();
        maxWin_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 max_win = 21;</code>
       *
       * <pre>
       * 最大赢点
       * </pre>
       */
      public Builder addMaxWin(int value) {
        ensureMaxWinIsMutable();
        maxWin_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 max_win = 21;</code>
       *
       * <pre>
       * 最大赢点
       * </pre>
       */
      public Builder addAllMaxWin(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMaxWinIsMutable();
        super.addAll(values, maxWin_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 max_win = 21;</code>
       *
       * <pre>
       * 最大赢点
       * </pre>
       */
      public Builder clearMaxWin() {
        maxWin_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // optional int32 di_card_count = 22;
      private int diCardCount_ ;
      /**
       * <code>optional int32 di_card_count = 22;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public boolean hasDiCardCount() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 di_card_count = 22;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public int getDiCardCount() {
        return diCardCount_;
      }
      /**
       * <code>optional int32 di_card_count = 22;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder setDiCardCount(int value) {
        bitField0_ |= 0x00200000;
        diCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_card_count = 22;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder clearDiCardCount() {
        bitField0_ = (bitField0_ & ~0x00200000);
        diCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 di_cards_data = 23;
      private java.util.List<java.lang.Integer> diCardsData_ = java.util.Collections.emptyList();
      private void ensureDiCardsDataIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          diCardsData_ = new java.util.ArrayList<java.lang.Integer>(diCardsData_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 di_cards_data = 23;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDiCardsDataList() {
        return java.util.Collections.unmodifiableList(diCardsData_);
      }
      /**
       * <code>repeated int32 di_cards_data = 23;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getDiCardsDataCount() {
        return diCardsData_.size();
      }
      /**
       * <code>repeated int32 di_cards_data = 23;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getDiCardsData(int index) {
        return diCardsData_.get(index);
      }
      /**
       * <code>repeated int32 di_cards_data = 23;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder setDiCardsData(
          int index, int value) {
        ensureDiCardsDataIsMutable();
        diCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 23;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addDiCardsData(int value) {
        ensureDiCardsDataIsMutable();
        diCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 23;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addAllDiCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiCardsDataIsMutable();
        super.addAll(values, diCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 23;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder clearDiCardsData() {
        diCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.PukeGameEndSdh)
    }

    static {
      defaultInstance = new PukeGameEndSdh(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.PukeGameEndSdh)
  }

  public interface StallRateOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_player = 17;
    /**
     * <code>optional int32 cur_player = 17;</code>
     *
     * <pre>
     * 当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 17;</code>
     *
     * <pre>
     * 当前玩家
     * </pre>
     */
    int getCurPlayer();

    // optional int32 cur_banker = 18;
    /**
     * <code>optional int32 cur_banker = 18;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 18;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    int getCurBanker();

    // optional int32 stall = 19;
    /**
     * <code>optional int32 stall = 19;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    boolean hasStall();
    /**
     * <code>optional int32 stall = 19;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    int getStall();

    // optional int32 rate = 20;
    /**
     * <code>optional int32 rate = 20;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    boolean hasRate();
    /**
     * <code>optional int32 rate = 20;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    int getRate();

    // optional int32 difen = 21;
    /**
     * <code>optional int32 difen = 21;</code>
     *
     * <pre>
     * 底分
     * </pre>
     */
    boolean hasDifen();
    /**
     * <code>optional int32 difen = 21;</code>
     *
     * <pre>
     * 底分
     * </pre>
     */
    int getDifen();

    // repeated int32 main_color_list = 22;
    /**
     * <code>repeated int32 main_color_list = 22;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    java.util.List<java.lang.Integer> getMainColorListList();
    /**
     * <code>repeated int32 main_color_list = 22;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    int getMainColorListCount();
    /**
     * <code>repeated int32 main_color_list = 22;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    int getMainColorList(int index);

    // repeated int32 main_color_number = 23;
    /**
     * <code>repeated int32 main_color_number = 23;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    java.util.List<java.lang.Integer> getMainColorNumberList();
    /**
     * <code>repeated int32 main_color_number = 23;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    int getMainColorNumberCount();
    /**
     * <code>repeated int32 main_color_number = 23;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    int getMainColorNumber(int index);

    // optional int32 main_color_count = 24;
    /**
     * <code>optional int32 main_color_count = 24;</code>
     *
     * <pre>
     * 可以叫的主花色数量
     * </pre>
     */
    boolean hasMainColorCount();
    /**
     * <code>optional int32 main_color_count = 24;</code>
     *
     * <pre>
     * 可以叫的主花色数量
     * </pre>
     */
    int getMainColorCount();
  }
  /**
   * Protobuf type {@code sdh.StallRate}
   */
  public static final class StallRate extends
      com.google.protobuf.GeneratedMessage
      implements StallRateOrBuilder {
    // Use StallRate.newBuilder() to construct.
    private StallRate(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StallRate(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final StallRate defaultInstance;
    public static StallRate getDefaultInstance() {
      return defaultInstance;
    }

    public StallRate getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private StallRate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 136: {
              bitField0_ |= 0x00000001;
              curPlayer_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00000002;
              curBanker_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00000004;
              stall_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00000008;
              rate_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00000010;
              difen_ = input.readInt32();
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                mainColorList_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              mainColorList_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                mainColorList_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                mainColorList_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                mainColorNumber_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              mainColorNumber_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                mainColorNumber_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                mainColorNumber_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              bitField0_ |= 0x00000020;
              mainColorCount_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          mainColorList_ = java.util.Collections.unmodifiableList(mainColorList_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          mainColorNumber_ = java.util.Collections.unmodifiableList(mainColorNumber_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_StallRate_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_StallRate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.StallRate.class, protobuf.clazz.sdh.SdhRsp.StallRate.Builder.class);
    }

    public static com.google.protobuf.Parser<StallRate> PARSER =
        new com.google.protobuf.AbstractParser<StallRate>() {
      public StallRate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StallRate(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<StallRate> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_player = 17;
    public static final int CUR_PLAYER_FIELD_NUMBER = 17;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 17;</code>
     *
     * <pre>
     * 当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_player = 17;</code>
     *
     * <pre>
     * 当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // optional int32 cur_banker = 18;
    public static final int CUR_BANKER_FIELD_NUMBER = 18;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 18;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_banker = 18;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // optional int32 stall = 19;
    public static final int STALL_FIELD_NUMBER = 19;
    private int stall_;
    /**
     * <code>optional int32 stall = 19;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    public boolean hasStall() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 stall = 19;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    public int getStall() {
      return stall_;
    }

    // optional int32 rate = 20;
    public static final int RATE_FIELD_NUMBER = 20;
    private int rate_;
    /**
     * <code>optional int32 rate = 20;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    public boolean hasRate() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 rate = 20;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    public int getRate() {
      return rate_;
    }

    // optional int32 difen = 21;
    public static final int DIFEN_FIELD_NUMBER = 21;
    private int difen_;
    /**
     * <code>optional int32 difen = 21;</code>
     *
     * <pre>
     * 底分
     * </pre>
     */
    public boolean hasDifen() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 difen = 21;</code>
     *
     * <pre>
     * 底分
     * </pre>
     */
    public int getDifen() {
      return difen_;
    }

    // repeated int32 main_color_list = 22;
    public static final int MAIN_COLOR_LIST_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> mainColorList_;
    /**
     * <code>repeated int32 main_color_list = 22;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMainColorListList() {
      return mainColorList_;
    }
    /**
     * <code>repeated int32 main_color_list = 22;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    public int getMainColorListCount() {
      return mainColorList_.size();
    }
    /**
     * <code>repeated int32 main_color_list = 22;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    public int getMainColorList(int index) {
      return mainColorList_.get(index);
    }

    // repeated int32 main_color_number = 23;
    public static final int MAIN_COLOR_NUMBER_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> mainColorNumber_;
    /**
     * <code>repeated int32 main_color_number = 23;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMainColorNumberList() {
      return mainColorNumber_;
    }
    /**
     * <code>repeated int32 main_color_number = 23;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    public int getMainColorNumberCount() {
      return mainColorNumber_.size();
    }
    /**
     * <code>repeated int32 main_color_number = 23;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    public int getMainColorNumber(int index) {
      return mainColorNumber_.get(index);
    }

    // optional int32 main_color_count = 24;
    public static final int MAIN_COLOR_COUNT_FIELD_NUMBER = 24;
    private int mainColorCount_;
    /**
     * <code>optional int32 main_color_count = 24;</code>
     *
     * <pre>
     * 可以叫的主花色数量
     * </pre>
     */
    public boolean hasMainColorCount() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 main_color_count = 24;</code>
     *
     * <pre>
     * 可以叫的主花色数量
     * </pre>
     */
    public int getMainColorCount() {
      return mainColorCount_;
    }

    private void initFields() {
      curPlayer_ = 0;
      curBanker_ = 0;
      stall_ = 0;
      rate_ = 0;
      difen_ = 0;
      mainColorList_ = java.util.Collections.emptyList();
      mainColorNumber_ = java.util.Collections.emptyList();
      mainColorCount_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(17, curPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(18, curBanker_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(19, stall_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(20, rate_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(21, difen_);
      }
      for (int i = 0; i < mainColorList_.size(); i++) {
        output.writeInt32(22, mainColorList_.get(i));
      }
      for (int i = 0; i < mainColorNumber_.size(); i++) {
        output.writeInt32(23, mainColorNumber_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(24, mainColorCount_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, curPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, curBanker_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, stall_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, rate_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, difen_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mainColorList_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mainColorList_.get(i));
        }
        size += dataSize;
        size += 2 * getMainColorListList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mainColorNumber_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mainColorNumber_.get(i));
        }
        size += dataSize;
        size += 2 * getMainColorNumberList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, mainColorCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.StallRate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.StallRate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.StallRate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.StallRate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.StallRate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.StallRate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.StallRate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.StallRate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.StallRate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.StallRate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.StallRate prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.StallRate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.StallRateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_StallRate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_StallRate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.StallRate.class, protobuf.clazz.sdh.SdhRsp.StallRate.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.StallRate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        stall_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        rate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        difen_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mainColorList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        mainColorNumber_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        mainColorCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_StallRate_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.StallRate getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.StallRate.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.StallRate build() {
        protobuf.clazz.sdh.SdhRsp.StallRate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.StallRate buildPartial() {
        protobuf.clazz.sdh.SdhRsp.StallRate result = new protobuf.clazz.sdh.SdhRsp.StallRate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curPlayer_ = curPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curBanker_ = curBanker_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.stall_ = stall_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.rate_ = rate_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.difen_ = difen_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          mainColorList_ = java.util.Collections.unmodifiableList(mainColorList_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.mainColorList_ = mainColorList_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          mainColorNumber_ = java.util.Collections.unmodifiableList(mainColorNumber_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.mainColorNumber_ = mainColorNumber_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mainColorCount_ = mainColorCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.StallRate) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.StallRate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.StallRate other) {
        if (other == protobuf.clazz.sdh.SdhRsp.StallRate.getDefaultInstance()) return this;
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (other.hasStall()) {
          setStall(other.getStall());
        }
        if (other.hasRate()) {
          setRate(other.getRate());
        }
        if (other.hasDifen()) {
          setDifen(other.getDifen());
        }
        if (!other.mainColorList_.isEmpty()) {
          if (mainColorList_.isEmpty()) {
            mainColorList_ = other.mainColorList_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureMainColorListIsMutable();
            mainColorList_.addAll(other.mainColorList_);
          }
          onChanged();
        }
        if (!other.mainColorNumber_.isEmpty()) {
          if (mainColorNumber_.isEmpty()) {
            mainColorNumber_ = other.mainColorNumber_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureMainColorNumberIsMutable();
            mainColorNumber_.addAll(other.mainColorNumber_);
          }
          onChanged();
        }
        if (other.hasMainColorCount()) {
          setMainColorCount(other.getMainColorCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.StallRate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.StallRate) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_player = 17;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 17;</code>
       *
       * <pre>
       * 当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_player = 17;</code>
       *
       * <pre>
       * 当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 17;</code>
       *
       * <pre>
       * 当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000001;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 17;</code>
       *
       * <pre>
       * 当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_banker = 18;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 18;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_banker = 18;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 18;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000002;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 18;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // optional int32 stall = 19;
      private int stall_ ;
      /**
       * <code>optional int32 stall = 19;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public boolean hasStall() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 stall = 19;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public int getStall() {
        return stall_;
      }
      /**
       * <code>optional int32 stall = 19;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public Builder setStall(int value) {
        bitField0_ |= 0x00000004;
        stall_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 stall = 19;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public Builder clearStall() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stall_ = 0;
        onChanged();
        return this;
      }

      // optional int32 rate = 20;
      private int rate_ ;
      /**
       * <code>optional int32 rate = 20;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public boolean hasRate() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 rate = 20;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public int getRate() {
        return rate_;
      }
      /**
       * <code>optional int32 rate = 20;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public Builder setRate(int value) {
        bitField0_ |= 0x00000008;
        rate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rate = 20;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public Builder clearRate() {
        bitField0_ = (bitField0_ & ~0x00000008);
        rate_ = 0;
        onChanged();
        return this;
      }

      // optional int32 difen = 21;
      private int difen_ ;
      /**
       * <code>optional int32 difen = 21;</code>
       *
       * <pre>
       * 底分
       * </pre>
       */
      public boolean hasDifen() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 difen = 21;</code>
       *
       * <pre>
       * 底分
       * </pre>
       */
      public int getDifen() {
        return difen_;
      }
      /**
       * <code>optional int32 difen = 21;</code>
       *
       * <pre>
       * 底分
       * </pre>
       */
      public Builder setDifen(int value) {
        bitField0_ |= 0x00000010;
        difen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 difen = 21;</code>
       *
       * <pre>
       * 底分
       * </pre>
       */
      public Builder clearDifen() {
        bitField0_ = (bitField0_ & ~0x00000010);
        difen_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 main_color_list = 22;
      private java.util.List<java.lang.Integer> mainColorList_ = java.util.Collections.emptyList();
      private void ensureMainColorListIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          mainColorList_ = new java.util.ArrayList<java.lang.Integer>(mainColorList_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 main_color_list = 22;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMainColorListList() {
        return java.util.Collections.unmodifiableList(mainColorList_);
      }
      /**
       * <code>repeated int32 main_color_list = 22;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public int getMainColorListCount() {
        return mainColorList_.size();
      }
      /**
       * <code>repeated int32 main_color_list = 22;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public int getMainColorList(int index) {
        return mainColorList_.get(index);
      }
      /**
       * <code>repeated int32 main_color_list = 22;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public Builder setMainColorList(
          int index, int value) {
        ensureMainColorListIsMutable();
        mainColorList_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_list = 22;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public Builder addMainColorList(int value) {
        ensureMainColorListIsMutable();
        mainColorList_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_list = 22;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public Builder addAllMainColorList(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMainColorListIsMutable();
        super.addAll(values, mainColorList_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_list = 22;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public Builder clearMainColorList() {
        mainColorList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 main_color_number = 23;
      private java.util.List<java.lang.Integer> mainColorNumber_ = java.util.Collections.emptyList();
      private void ensureMainColorNumberIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          mainColorNumber_ = new java.util.ArrayList<java.lang.Integer>(mainColorNumber_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 main_color_number = 23;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMainColorNumberList() {
        return java.util.Collections.unmodifiableList(mainColorNumber_);
      }
      /**
       * <code>repeated int32 main_color_number = 23;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public int getMainColorNumberCount() {
        return mainColorNumber_.size();
      }
      /**
       * <code>repeated int32 main_color_number = 23;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public int getMainColorNumber(int index) {
        return mainColorNumber_.get(index);
      }
      /**
       * <code>repeated int32 main_color_number = 23;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public Builder setMainColorNumber(
          int index, int value) {
        ensureMainColorNumberIsMutable();
        mainColorNumber_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_number = 23;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public Builder addMainColorNumber(int value) {
        ensureMainColorNumberIsMutable();
        mainColorNumber_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_number = 23;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public Builder addAllMainColorNumber(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMainColorNumberIsMutable();
        super.addAll(values, mainColorNumber_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_number = 23;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public Builder clearMainColorNumber() {
        mainColorNumber_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional int32 main_color_count = 24;
      private int mainColorCount_ ;
      /**
       * <code>optional int32 main_color_count = 24;</code>
       *
       * <pre>
       * 可以叫的主花色数量
       * </pre>
       */
      public boolean hasMainColorCount() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 main_color_count = 24;</code>
       *
       * <pre>
       * 可以叫的主花色数量
       * </pre>
       */
      public int getMainColorCount() {
        return mainColorCount_;
      }
      /**
       * <code>optional int32 main_color_count = 24;</code>
       *
       * <pre>
       * 可以叫的主花色数量
       * </pre>
       */
      public Builder setMainColorCount(int value) {
        bitField0_ |= 0x00000080;
        mainColorCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 main_color_count = 24;</code>
       *
       * <pre>
       * 可以叫的主花色数量
       * </pre>
       */
      public Builder clearMainColorCount() {
        bitField0_ = (bitField0_ & ~0x00000080);
        mainColorCount_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.StallRate)
    }

    static {
      defaultInstance = new StallRate(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.StallRate)
  }

  public interface TableResponseSdhOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated .Int32ArrayResponse change_cards_data = 6;
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getChangeCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChangeCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 7;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_status = 8;
    /**
     * <code>repeated int32 player_status = 8;</code>
     *
     * <pre>
     *叫分状态 -1 不叫
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerStatusList();
    /**
     * <code>repeated int32 player_status = 8;</code>
     *
     * <pre>
     *叫分状态 -1 不叫
     * </pre>
     */
    int getPlayerStatusCount();
    /**
     * <code>repeated int32 player_status = 8;</code>
     *
     * <pre>
     *叫分状态 -1 不叫
     * </pre>
     */
    int getPlayerStatus(int index);

    // repeated int32 card_type = 9;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 10;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_change_cards_data = 11;
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // repeated int32 pr_cards_data = 12;
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // optional int32 pr_cards_count = 13;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 14;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 15;
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 16;
    /**
     * <code>optional int32 display_time = 16;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 16;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 17;
    /**
     * <code>repeated int32 card_count = 17;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 17;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 17;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 18;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .sdh.RoomInfoSdh room_info = 19;
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
     */
    protobuf.clazz.sdh.SdhRsp.RoomInfoSdh getRoomInfo();
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
     */
    protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder getRoomInfoOrBuilder();

    // repeated .sdh.RoomPlayerResponseSdh players = 20;
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
     */
    java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> 
        getPlayersList();
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
     */
    protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh getPlayers(int index);
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
     */
    java.util.List<? extends protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
     */
    protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 call_banker = 21;
    /**
     * <code>repeated int32 call_banker = 21;</code>
     */
    java.util.List<java.lang.Integer> getCallBankerList();
    /**
     * <code>repeated int32 call_banker = 21;</code>
     */
    int getCallBankerCount();
    /**
     * <code>repeated int32 call_banker = 21;</code>
     */
    int getCallBanker(int index);

    // repeated int32 call_action = 22;
    /**
     * <code>repeated int32 call_action = 22;</code>
     */
    java.util.List<java.lang.Integer> getCallActionList();
    /**
     * <code>repeated int32 call_action = 22;</code>
     */
    int getCallActionCount();
    /**
     * <code>repeated int32 call_action = 22;</code>
     */
    int getCallAction(int index);

    // optional int32 di_card_count = 23;
    /**
     * <code>optional int32 di_card_count = 23;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    boolean hasDiCardCount();
    /**
     * <code>optional int32 di_card_count = 23;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    int getDiCardCount();

    // repeated int32 di_cards_data = 24;
    /**
     * <code>repeated int32 di_cards_data = 24;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    java.util.List<java.lang.Integer> getDiCardsDataList();
    /**
     * <code>repeated int32 di_cards_data = 24;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getDiCardsDataCount();
    /**
     * <code>repeated int32 di_cards_data = 24;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    int getDiCardsData(int index);

    // repeated string difen_bomb_des = 25;
    /**
     * <code>repeated string difen_bomb_des = 25;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.util.List<java.lang.String>
    getDifenBombDesList();
    /**
     * <code>repeated string difen_bomb_des = 25;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    int getDifenBombDesCount();
    /**
     * <code>repeated string difen_bomb_des = 25;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getDifenBombDes(int index);
    /**
     * <code>repeated string difen_bomb_des = 25;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getDifenBombDesBytes(int index);

    // optional int32 difen = 26;
    /**
     * <code>optional int32 difen = 26;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    boolean hasDifen();
    /**
     * <code>optional int32 difen = 26;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    int getDifen();

    // optional int32 score = 27;
    /**
     * <code>optional int32 score = 27;</code>
     *
     * <pre>
     *总得分
     * </pre>
     */
    boolean hasScore();
    /**
     * <code>optional int32 score = 27;</code>
     *
     * <pre>
     *总得分
     * </pre>
     */
    int getScore();

    // optional int32 main_color = 28;
    /**
     * <code>optional int32 main_color = 28;</code>
     *
     * <pre>
     *主花色
     * </pre>
     */
    boolean hasMainColor();
    /**
     * <code>optional int32 main_color = 28;</code>
     *
     * <pre>
     *主花色
     * </pre>
     */
    int getMainColor();

    // repeated int32 call_banker_score = 29;
    /**
     * <code>repeated int32 call_banker_score = 29;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    java.util.List<java.lang.Integer> getCallBankerScoreList();
    /**
     * <code>repeated int32 call_banker_score = 29;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    int getCallBankerScoreCount();
    /**
     * <code>repeated int32 call_banker_score = 29;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    int getCallBankerScore(int index);

    // optional int32 stall = 30;
    /**
     * <code>optional int32 stall = 30;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    boolean hasStall();
    /**
     * <code>optional int32 stall = 30;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    int getStall();

    // optional int32 rate = 31;
    /**
     * <code>optional int32 rate = 31;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    boolean hasRate();
    /**
     * <code>optional int32 rate = 31;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    int getRate();

    // optional int32 big_player_seat = 32;
    /**
     * <code>optional int32 big_player_seat = 32;</code>
     *
     * <pre>
     * 大牌用户
     * </pre>
     */
    boolean hasBigPlayerSeat();
    /**
     * <code>optional int32 big_player_seat = 32;</code>
     *
     * <pre>
     * 大牌用户
     * </pre>
     */
    int getBigPlayerSeat();

    // repeated int32 main_color_list = 33;
    /**
     * <code>repeated int32 main_color_list = 33;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    java.util.List<java.lang.Integer> getMainColorListList();
    /**
     * <code>repeated int32 main_color_list = 33;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    int getMainColorListCount();
    /**
     * <code>repeated int32 main_color_list = 33;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    int getMainColorList(int index);

    // repeated int32 main_color_number = 34;
    /**
     * <code>repeated int32 main_color_number = 34;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    java.util.List<java.lang.Integer> getMainColorNumberList();
    /**
     * <code>repeated int32 main_color_number = 34;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    int getMainColorNumberCount();
    /**
     * <code>repeated int32 main_color_number = 34;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    int getMainColorNumber(int index);

    // optional int32 main_color_count = 35;
    /**
     * <code>optional int32 main_color_count = 35;</code>
     *
     * <pre>
     * 可以叫的主花色数量
     * </pre>
     */
    boolean hasMainColorCount();
    /**
     * <code>optional int32 main_color_count = 35;</code>
     *
     * <pre>
     * 可以叫的主花色数量
     * </pre>
     */
    int getMainColorCount();

    // optional int32 game_status = 36;
    /**
     * <code>optional int32 game_status = 36;</code>
     *
     * <pre>
     * 游戏状态
     * </pre>
     */
    boolean hasGameStatus();
    /**
     * <code>optional int32 game_status = 36;</code>
     *
     * <pre>
     * 游戏状态
     * </pre>
     */
    int getGameStatus();

    // optional int32 first_out_player = 37;
    /**
     * <code>optional int32 first_out_player = 37;</code>
     *
     * <pre>
     * 首出玩家
     * </pre>
     */
    boolean hasFirstOutPlayer();
    /**
     * <code>optional int32 first_out_player = 37;</code>
     *
     * <pre>
     * 首出玩家
     * </pre>
     */
    int getFirstOutPlayer();

    // optional int32 cur_score = 38;
    /**
     * <code>optional int32 cur_score = 38;</code>
     *
     * <pre>
     * 当前轮得分
     * </pre>
     */
    boolean hasCurScore();
    /**
     * <code>optional int32 cur_score = 38;</code>
     *
     * <pre>
     * 当前轮得分
     * </pre>
     */
    int getCurScore();
  }
  /**
   * Protobuf type {@code sdh.TableResponseSdh}
   */
  public static final class TableResponseSdh extends
      com.google.protobuf.GeneratedMessage
      implements TableResponseSdhOrBuilder {
    // Use TableResponseSdh.newBuilder() to construct.
    private TableResponseSdh(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponseSdh(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponseSdh defaultInstance;
    public static TableResponseSdh getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponseSdh getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponseSdh(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                changeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000020;
              }
              changeCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                playerStatus_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              playerStatus_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                playerStatus_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerStatus_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 146: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00020000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 154: {
              protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 162: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh>();
                mutable_bitField0_ |= 0x00080000;
              }
              players_.add(input.readMessage(protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.PARSER, extensionRegistry));
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                callBanker_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              callBanker_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                callBanker_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                callBanker_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                callAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              callAction_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                callAction_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                callAction_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              bitField0_ |= 0x00000200;
              diCardCount_ = input.readInt32();
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                diCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              diCardsData_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                diCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                diCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 202: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                difenBombDes_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x01000000;
              }
              difenBombDes_.add(input.readBytes());
              break;
            }
            case 208: {
              bitField0_ |= 0x00000400;
              difen_ = input.readInt32();
              break;
            }
            case 216: {
              bitField0_ |= 0x00000800;
              score_ = input.readInt32();
              break;
            }
            case 224: {
              bitField0_ |= 0x00001000;
              mainColor_ = input.readInt32();
              break;
            }
            case 232: {
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
                callBankerScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x10000000;
              }
              callBankerScore_.add(input.readInt32());
              break;
            }
            case 234: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x10000000) == 0x10000000) && input.getBytesUntilLimit() > 0) {
                callBankerScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x10000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                callBankerScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 240: {
              bitField0_ |= 0x00002000;
              stall_ = input.readInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x00004000;
              rate_ = input.readInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x00008000;
              bigPlayerSeat_ = input.readInt32();
              break;
            }
            case 264: {
              if (!((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
                mainColorList_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000001;
              }
              mainColorList_.add(input.readInt32());
              break;
            }
            case 266: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                mainColorList_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                mainColorList_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 272: {
              if (!((mutable_bitField1_ & 0x00000002) == 0x00000002)) {
                mainColorNumber_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000002;
              }
              mainColorNumber_.add(input.readInt32());
              break;
            }
            case 274: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                mainColorNumber_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                mainColorNumber_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 280: {
              bitField0_ |= 0x00010000;
              mainColorCount_ = input.readInt32();
              break;
            }
            case 288: {
              bitField0_ |= 0x00020000;
              gameStatus_ = input.readInt32();
              break;
            }
            case 296: {
              bitField0_ |= 0x00040000;
              firstOutPlayer_ = input.readInt32();
              break;
            }
            case 304: {
              bitField0_ |= 0x00080000;
              curScore_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          playerStatus_ = java.util.Collections.unmodifiableList(playerStatus_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          callBanker_ = java.util.Collections.unmodifiableList(callBanker_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          callAction_ = java.util.Collections.unmodifiableList(callAction_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          diCardsData_ = java.util.Collections.unmodifiableList(diCardsData_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(difenBombDes_);
        }
        if (((mutable_bitField0_ & 0x10000000) == 0x10000000)) {
          callBankerScore_ = java.util.Collections.unmodifiableList(callBankerScore_);
        }
        if (((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
          mainColorList_ = java.util.Collections.unmodifiableList(mainColorList_);
        }
        if (((mutable_bitField1_ & 0x00000002) == 0x00000002)) {
          mainColorNumber_ = java.util.Collections.unmodifiableList(mainColorNumber_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_TableResponseSdh_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_TableResponseSdh_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.TableResponseSdh.class, protobuf.clazz.sdh.SdhRsp.TableResponseSdh.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponseSdh> PARSER =
        new com.google.protobuf.AbstractParser<TableResponseSdh>() {
      public TableResponseSdh parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponseSdh(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponseSdh> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *游戏变量
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *状态变量
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *扑克数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated .Int32ArrayResponse change_cards_data = 6;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> changeCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getChangeCardsDataOrBuilderList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
        int index) {
      return changeCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 7;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 7;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_status = 8;
    public static final int PLAYER_STATUS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> playerStatus_;
    /**
     * <code>repeated int32 player_status = 8;</code>
     *
     * <pre>
     *叫分状态 -1 不叫
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerStatusList() {
      return playerStatus_;
    }
    /**
     * <code>repeated int32 player_status = 8;</code>
     *
     * <pre>
     *叫分状态 -1 不叫
     * </pre>
     */
    public int getPlayerStatusCount() {
      return playerStatus_.size();
    }
    /**
     * <code>repeated int32 player_status = 8;</code>
     *
     * <pre>
     *叫分状态 -1 不叫
     * </pre>
     */
    public int getPlayerStatus(int index) {
      return playerStatus_.get(index);
    }

    // repeated int32 card_type = 9;
    public static final int CARD_TYPE_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 9;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 10;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 10;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 10;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_change_cards_data = 11;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 11;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // repeated int32 pr_cards_data = 12;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 12;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 13;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 13;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 13;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 14;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 14;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 14;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 15;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 15;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 15;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 16;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 16;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 16;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 16;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 17;
    public static final int CARD_COUNT_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 17;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 17;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 17;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 18;
    public static final int CARDS_DATA_FIELD_NUMBER = 18;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .sdh.RoomInfoSdh room_info = 19;
    public static final int ROOM_INFO_FIELD_NUMBER = 19;
    private protobuf.clazz.sdh.SdhRsp.RoomInfoSdh roomInfo_;
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
     */
    public protobuf.clazz.sdh.SdhRsp.RoomInfoSdh getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
     */
    public protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .sdh.RoomPlayerResponseSdh players = 20;
    public static final int PLAYERS_FIELD_NUMBER = 20;
    private java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> players_;
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
     */
    public java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
     */
    public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
     */
    public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
     */
    public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 call_banker = 21;
    public static final int CALL_BANKER_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> callBanker_;
    /**
     * <code>repeated int32 call_banker = 21;</code>
     */
    public java.util.List<java.lang.Integer>
        getCallBankerList() {
      return callBanker_;
    }
    /**
     * <code>repeated int32 call_banker = 21;</code>
     */
    public int getCallBankerCount() {
      return callBanker_.size();
    }
    /**
     * <code>repeated int32 call_banker = 21;</code>
     */
    public int getCallBanker(int index) {
      return callBanker_.get(index);
    }

    // repeated int32 call_action = 22;
    public static final int CALL_ACTION_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> callAction_;
    /**
     * <code>repeated int32 call_action = 22;</code>
     */
    public java.util.List<java.lang.Integer>
        getCallActionList() {
      return callAction_;
    }
    /**
     * <code>repeated int32 call_action = 22;</code>
     */
    public int getCallActionCount() {
      return callAction_.size();
    }
    /**
     * <code>repeated int32 call_action = 22;</code>
     */
    public int getCallAction(int index) {
      return callAction_.get(index);
    }

    // optional int32 di_card_count = 23;
    public static final int DI_CARD_COUNT_FIELD_NUMBER = 23;
    private int diCardCount_;
    /**
     * <code>optional int32 di_card_count = 23;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public boolean hasDiCardCount() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 di_card_count = 23;</code>
     *
     * <pre>
     *底牌扑克数目
     * </pre>
     */
    public int getDiCardCount() {
      return diCardCount_;
    }

    // repeated int32 di_cards_data = 24;
    public static final int DI_CARDS_DATA_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> diCardsData_;
    /**
     * <code>repeated int32 di_cards_data = 24;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDiCardsDataList() {
      return diCardsData_;
    }
    /**
     * <code>repeated int32 di_cards_data = 24;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getDiCardsDataCount() {
      return diCardsData_.size();
    }
    /**
     * <code>repeated int32 di_cards_data = 24;</code>
     *
     * <pre>
     *底牌扑克列表
     * </pre>
     */
    public int getDiCardsData(int index) {
      return diCardsData_.get(index);
    }

    // repeated string difen_bomb_des = 25;
    public static final int DIFEN_BOMB_DES_FIELD_NUMBER = 25;
    private com.google.protobuf.LazyStringList difenBombDes_;
    /**
     * <code>repeated string difen_bomb_des = 25;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.util.List<java.lang.String>
        getDifenBombDesList() {
      return difenBombDes_;
    }
    /**
     * <code>repeated string difen_bomb_des = 25;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public int getDifenBombDesCount() {
      return difenBombDes_.size();
    }
    /**
     * <code>repeated string difen_bomb_des = 25;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getDifenBombDes(int index) {
      return difenBombDes_.get(index);
    }
    /**
     * <code>repeated string difen_bomb_des = 25;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDifenBombDesBytes(int index) {
      return difenBombDes_.getByteString(index);
    }

    // optional int32 difen = 26;
    public static final int DIFEN_FIELD_NUMBER = 26;
    private int difen_;
    /**
     * <code>optional int32 difen = 26;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public boolean hasDifen() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 difen = 26;</code>
     *
     * <pre>
     *底分
     * </pre>
     */
    public int getDifen() {
      return difen_;
    }

    // optional int32 score = 27;
    public static final int SCORE_FIELD_NUMBER = 27;
    private int score_;
    /**
     * <code>optional int32 score = 27;</code>
     *
     * <pre>
     *总得分
     * </pre>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 score = 27;</code>
     *
     * <pre>
     *总得分
     * </pre>
     */
    public int getScore() {
      return score_;
    }

    // optional int32 main_color = 28;
    public static final int MAIN_COLOR_FIELD_NUMBER = 28;
    private int mainColor_;
    /**
     * <code>optional int32 main_color = 28;</code>
     *
     * <pre>
     *主花色
     * </pre>
     */
    public boolean hasMainColor() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 main_color = 28;</code>
     *
     * <pre>
     *主花色
     * </pre>
     */
    public int getMainColor() {
      return mainColor_;
    }

    // repeated int32 call_banker_score = 29;
    public static final int CALL_BANKER_SCORE_FIELD_NUMBER = 29;
    private java.util.List<java.lang.Integer> callBankerScore_;
    /**
     * <code>repeated int32 call_banker_score = 29;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCallBankerScoreList() {
      return callBankerScore_;
    }
    /**
     * <code>repeated int32 call_banker_score = 29;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    public int getCallBankerScoreCount() {
      return callBankerScore_.size();
    }
    /**
     * <code>repeated int32 call_banker_score = 29;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    public int getCallBankerScore(int index) {
      return callBankerScore_.get(index);
    }

    // optional int32 stall = 30;
    public static final int STALL_FIELD_NUMBER = 30;
    private int stall_;
    /**
     * <code>optional int32 stall = 30;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    public boolean hasStall() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 stall = 30;</code>
     *
     * <pre>
     * 档位
     * </pre>
     */
    public int getStall() {
      return stall_;
    }

    // optional int32 rate = 31;
    public static final int RATE_FIELD_NUMBER = 31;
    private int rate_;
    /**
     * <code>optional int32 rate = 31;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    public boolean hasRate() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 rate = 31;</code>
     *
     * <pre>
     * 倍率
     * </pre>
     */
    public int getRate() {
      return rate_;
    }

    // optional int32 big_player_seat = 32;
    public static final int BIG_PLAYER_SEAT_FIELD_NUMBER = 32;
    private int bigPlayerSeat_;
    /**
     * <code>optional int32 big_player_seat = 32;</code>
     *
     * <pre>
     * 大牌用户
     * </pre>
     */
    public boolean hasBigPlayerSeat() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 big_player_seat = 32;</code>
     *
     * <pre>
     * 大牌用户
     * </pre>
     */
    public int getBigPlayerSeat() {
      return bigPlayerSeat_;
    }

    // repeated int32 main_color_list = 33;
    public static final int MAIN_COLOR_LIST_FIELD_NUMBER = 33;
    private java.util.List<java.lang.Integer> mainColorList_;
    /**
     * <code>repeated int32 main_color_list = 33;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMainColorListList() {
      return mainColorList_;
    }
    /**
     * <code>repeated int32 main_color_list = 33;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    public int getMainColorListCount() {
      return mainColorList_.size();
    }
    /**
     * <code>repeated int32 main_color_list = 33;</code>
     *
     * <pre>
     * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
     * </pre>
     */
    public int getMainColorList(int index) {
      return mainColorList_.get(index);
    }

    // repeated int32 main_color_number = 34;
    public static final int MAIN_COLOR_NUMBER_FIELD_NUMBER = 34;
    private java.util.List<java.lang.Integer> mainColorNumber_;
    /**
     * <code>repeated int32 main_color_number = 34;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMainColorNumberList() {
      return mainColorNumber_;
    }
    /**
     * <code>repeated int32 main_color_number = 34;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    public int getMainColorNumberCount() {
      return mainColorNumber_.size();
    }
    /**
     * <code>repeated int32 main_color_number = 34;</code>
     *
     * <pre>
     * (每个花色的卡牌数量)
     * </pre>
     */
    public int getMainColorNumber(int index) {
      return mainColorNumber_.get(index);
    }

    // optional int32 main_color_count = 35;
    public static final int MAIN_COLOR_COUNT_FIELD_NUMBER = 35;
    private int mainColorCount_;
    /**
     * <code>optional int32 main_color_count = 35;</code>
     *
     * <pre>
     * 可以叫的主花色数量
     * </pre>
     */
    public boolean hasMainColorCount() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 main_color_count = 35;</code>
     *
     * <pre>
     * 可以叫的主花色数量
     * </pre>
     */
    public int getMainColorCount() {
      return mainColorCount_;
    }

    // optional int32 game_status = 36;
    public static final int GAME_STATUS_FIELD_NUMBER = 36;
    private int gameStatus_;
    /**
     * <code>optional int32 game_status = 36;</code>
     *
     * <pre>
     * 游戏状态
     * </pre>
     */
    public boolean hasGameStatus() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 game_status = 36;</code>
     *
     * <pre>
     * 游戏状态
     * </pre>
     */
    public int getGameStatus() {
      return gameStatus_;
    }

    // optional int32 first_out_player = 37;
    public static final int FIRST_OUT_PLAYER_FIELD_NUMBER = 37;
    private int firstOutPlayer_;
    /**
     * <code>optional int32 first_out_player = 37;</code>
     *
     * <pre>
     * 首出玩家
     * </pre>
     */
    public boolean hasFirstOutPlayer() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 first_out_player = 37;</code>
     *
     * <pre>
     * 首出玩家
     * </pre>
     */
    public int getFirstOutPlayer() {
      return firstOutPlayer_;
    }

    // optional int32 cur_score = 38;
    public static final int CUR_SCORE_FIELD_NUMBER = 38;
    private int curScore_;
    /**
     * <code>optional int32 cur_score = 38;</code>
     *
     * <pre>
     * 当前轮得分
     * </pre>
     */
    public boolean hasCurScore() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 cur_score = 38;</code>
     *
     * <pre>
     * 当前轮得分
     * </pre>
     */
    public int getCurScore() {
      return curScore_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerStatus_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      callBanker_ = java.util.Collections.emptyList();
      callAction_ = java.util.Collections.emptyList();
      diCardCount_ = 0;
      diCardsData_ = java.util.Collections.emptyList();
      difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      difen_ = 0;
      score_ = 0;
      mainColor_ = 0;
      callBankerScore_ = java.util.Collections.emptyList();
      stall_ = 0;
      rate_ = 0;
      bigPlayerSeat_ = 0;
      mainColorList_ = java.util.Collections.emptyList();
      mainColorNumber_ = java.util.Collections.emptyList();
      mainColorCount_ = 0;
      gameStatus_ = 0;
      firstOutPlayer_ = 0;
      curScore_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeMessage(6, changeCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(7, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerStatus_.size(); i++) {
        output.writeInt32(8, playerStatus_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(9, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(10, prOutCardPlayer_);
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(11, prChangeCardsData_.get(i));
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(12, prCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(15, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(16, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(17, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(18, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(19, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(20, players_.get(i));
      }
      for (int i = 0; i < callBanker_.size(); i++) {
        output.writeInt32(21, callBanker_.get(i));
      }
      for (int i = 0; i < callAction_.size(); i++) {
        output.writeInt32(22, callAction_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(23, diCardCount_);
      }
      for (int i = 0; i < diCardsData_.size(); i++) {
        output.writeInt32(24, diCardsData_.get(i));
      }
      for (int i = 0; i < difenBombDes_.size(); i++) {
        output.writeBytes(25, difenBombDes_.getByteString(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(26, difen_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(27, score_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(28, mainColor_);
      }
      for (int i = 0; i < callBankerScore_.size(); i++) {
        output.writeInt32(29, callBankerScore_.get(i));
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(30, stall_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(31, rate_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(32, bigPlayerSeat_);
      }
      for (int i = 0; i < mainColorList_.size(); i++) {
        output.writeInt32(33, mainColorList_.get(i));
      }
      for (int i = 0; i < mainColorNumber_.size(); i++) {
        output.writeInt32(34, mainColorNumber_.get(i));
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(35, mainColorCount_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(36, gameStatus_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(37, firstOutPlayer_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(38, curScore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, changeCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerStatus_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerStatus_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerStatusList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < callBanker_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callBanker_.get(i));
        }
        size += dataSize;
        size += 2 * getCallBankerList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < callAction_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callAction_.get(i));
        }
        size += dataSize;
        size += 2 * getCallActionList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(23, diCardCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < diCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(diCardsData_.get(i));
        }
        size += dataSize;
        size += 2 * getDiCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < difenBombDes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(difenBombDes_.getByteString(i));
        }
        size += dataSize;
        size += 2 * getDifenBombDesList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(26, difen_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(27, score_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, mainColor_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < callBankerScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(callBankerScore_.get(i));
        }
        size += dataSize;
        size += 2 * getCallBankerScoreList().size();
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, stall_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(31, rate_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(32, bigPlayerSeat_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mainColorList_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mainColorList_.get(i));
        }
        size += dataSize;
        size += 2 * getMainColorListList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mainColorNumber_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mainColorNumber_.get(i));
        }
        size += dataSize;
        size += 2 * getMainColorNumberList().size();
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(35, mainColorCount_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(36, gameStatus_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(37, firstOutPlayer_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(38, curScore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.TableResponseSdh parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.TableResponseSdh parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.TableResponseSdh parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.TableResponseSdh parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.TableResponseSdh parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.TableResponseSdh parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.TableResponseSdh parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.TableResponseSdh parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.TableResponseSdh parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.TableResponseSdh parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.TableResponseSdh prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.TableResponseSdh}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.TableResponseSdhOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_TableResponseSdh_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_TableResponseSdh_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.TableResponseSdh.class, protobuf.clazz.sdh.SdhRsp.TableResponseSdh.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.TableResponseSdh.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getChangeCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        if (changeCardsDataBuilder_ == null) {
          changeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          changeCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
        } else {
          playersBuilder_.clear();
        }
        callBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        callAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        diCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        diCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x01000000);
        difen_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        mainColor_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        callBankerScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        stall_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        rate_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        bigPlayerSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        mainColorList_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000001);
        mainColorNumber_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000002);
        mainColorCount_ = 0;
        bitField1_ = (bitField1_ & ~0x00000004);
        gameStatus_ = 0;
        bitField1_ = (bitField1_ & ~0x00000008);
        firstOutPlayer_ = 0;
        bitField1_ = (bitField1_ & ~0x00000010);
        curScore_ = 0;
        bitField1_ = (bitField1_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_TableResponseSdh_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.TableResponseSdh getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.TableResponseSdh.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.TableResponseSdh build() {
        protobuf.clazz.sdh.SdhRsp.TableResponseSdh result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.TableResponseSdh buildPartial() {
        protobuf.clazz.sdh.SdhRsp.TableResponseSdh result = new protobuf.clazz.sdh.SdhRsp.TableResponseSdh(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (changeCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.changeCardsData_ = changeCardsData_;
        } else {
          result.changeCardsData_ = changeCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          playerStatus_ = java.util.Collections.unmodifiableList(playerStatus_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.playerStatus_ = playerStatus_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.prCardsData_ = prCardsData_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00080000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          callBanker_ = java.util.Collections.unmodifiableList(callBanker_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.callBanker_ = callBanker_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          callAction_ = java.util.Collections.unmodifiableList(callAction_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.callAction_ = callAction_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.diCardCount_ = diCardCount_;
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          diCardsData_ = java.util.Collections.unmodifiableList(diCardsData_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.diCardsData_ = diCardsData_;
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(
              difenBombDes_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.difenBombDes_ = difenBombDes_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.difen_ = difen_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.mainColor_ = mainColor_;
        if (((bitField0_ & 0x10000000) == 0x10000000)) {
          callBankerScore_ = java.util.Collections.unmodifiableList(callBankerScore_);
          bitField0_ = (bitField0_ & ~0x10000000);
        }
        result.callBankerScore_ = callBankerScore_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.stall_ = stall_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.rate_ = rate_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.bigPlayerSeat_ = bigPlayerSeat_;
        if (((bitField1_ & 0x00000001) == 0x00000001)) {
          mainColorList_ = java.util.Collections.unmodifiableList(mainColorList_);
          bitField1_ = (bitField1_ & ~0x00000001);
        }
        result.mainColorList_ = mainColorList_;
        if (((bitField1_ & 0x00000002) == 0x00000002)) {
          mainColorNumber_ = java.util.Collections.unmodifiableList(mainColorNumber_);
          bitField1_ = (bitField1_ & ~0x00000002);
        }
        result.mainColorNumber_ = mainColorNumber_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00010000;
        }
        result.mainColorCount_ = mainColorCount_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00020000;
        }
        result.gameStatus_ = gameStatus_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00040000;
        }
        result.firstOutPlayer_ = firstOutPlayer_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00080000;
        }
        result.curScore_ = curScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.TableResponseSdh) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.TableResponseSdh)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.TableResponseSdh other) {
        if (other == protobuf.clazz.sdh.SdhRsp.TableResponseSdh.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (changeCardsDataBuilder_ == null) {
          if (!other.changeCardsData_.isEmpty()) {
            if (changeCardsData_.isEmpty()) {
              changeCardsData_ = other.changeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureChangeCardsDataIsMutable();
              changeCardsData_.addAll(other.changeCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.changeCardsData_.isEmpty()) {
            if (changeCardsDataBuilder_.isEmpty()) {
              changeCardsDataBuilder_.dispose();
              changeCardsDataBuilder_ = null;
              changeCardsData_ = other.changeCardsData_;
              bitField0_ = (bitField0_ & ~0x00000020);
              changeCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChangeCardsDataFieldBuilder() : null;
            } else {
              changeCardsDataBuilder_.addAllMessages(other.changeCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerStatus_.isEmpty()) {
          if (playerStatus_.isEmpty()) {
            playerStatus_ = other.playerStatus_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePlayerStatusIsMutable();
            playerStatus_.addAll(other.playerStatus_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00020000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00080000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00080000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.callBanker_.isEmpty()) {
          if (callBanker_.isEmpty()) {
            callBanker_ = other.callBanker_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureCallBankerIsMutable();
            callBanker_.addAll(other.callBanker_);
          }
          onChanged();
        }
        if (!other.callAction_.isEmpty()) {
          if (callAction_.isEmpty()) {
            callAction_ = other.callAction_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureCallActionIsMutable();
            callAction_.addAll(other.callAction_);
          }
          onChanged();
        }
        if (other.hasDiCardCount()) {
          setDiCardCount(other.getDiCardCount());
        }
        if (!other.diCardsData_.isEmpty()) {
          if (diCardsData_.isEmpty()) {
            diCardsData_ = other.diCardsData_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureDiCardsDataIsMutable();
            diCardsData_.addAll(other.diCardsData_);
          }
          onChanged();
        }
        if (!other.difenBombDes_.isEmpty()) {
          if (difenBombDes_.isEmpty()) {
            difenBombDes_ = other.difenBombDes_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureDifenBombDesIsMutable();
            difenBombDes_.addAll(other.difenBombDes_);
          }
          onChanged();
        }
        if (other.hasDifen()) {
          setDifen(other.getDifen());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasMainColor()) {
          setMainColor(other.getMainColor());
        }
        if (!other.callBankerScore_.isEmpty()) {
          if (callBankerScore_.isEmpty()) {
            callBankerScore_ = other.callBankerScore_;
            bitField0_ = (bitField0_ & ~0x10000000);
          } else {
            ensureCallBankerScoreIsMutable();
            callBankerScore_.addAll(other.callBankerScore_);
          }
          onChanged();
        }
        if (other.hasStall()) {
          setStall(other.getStall());
        }
        if (other.hasRate()) {
          setRate(other.getRate());
        }
        if (other.hasBigPlayerSeat()) {
          setBigPlayerSeat(other.getBigPlayerSeat());
        }
        if (!other.mainColorList_.isEmpty()) {
          if (mainColorList_.isEmpty()) {
            mainColorList_ = other.mainColorList_;
            bitField1_ = (bitField1_ & ~0x00000001);
          } else {
            ensureMainColorListIsMutable();
            mainColorList_.addAll(other.mainColorList_);
          }
          onChanged();
        }
        if (!other.mainColorNumber_.isEmpty()) {
          if (mainColorNumber_.isEmpty()) {
            mainColorNumber_ = other.mainColorNumber_;
            bitField1_ = (bitField1_ & ~0x00000002);
          } else {
            ensureMainColorNumberIsMutable();
            mainColorNumber_.addAll(other.mainColorNumber_);
          }
          onChanged();
        }
        if (other.hasMainColorCount()) {
          setMainColorCount(other.getMainColorCount());
        }
        if (other.hasGameStatus()) {
          setGameStatus(other.getGameStatus());
        }
        if (other.hasFirstOutPlayer()) {
          setFirstOutPlayer(other.getFirstOutPlayer());
        }
        if (other.hasCurScore()) {
          setCurScore(other.getCurScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.TableResponseSdh parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.TableResponseSdh) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *游戏变量
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *状态变量
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *扑克数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated .Int32ArrayResponse change_cards_data = 6;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> changeCardsData_ =
        java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          changeCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(changeCardsData_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> changeCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getChangeCardsDataList() {
        if (changeCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(changeCardsData_);
        } else {
          return changeCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.size();
        } else {
          return changeCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getChangeCardsData(int index) {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.get(index);
        } else {
          return changeCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.set(index, value);
          onChanged();
        } else {
          changeCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(value);
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (changeCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(index, value);
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          changeCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          super.addAll(values, changeCardsData_);
          onChanged();
        } else {
          changeCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        if (changeCardsDataBuilder_ == null) {
          changeCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          changeCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder removeChangeCardsData(int index) {
        if (changeCardsDataBuilder_ == null) {
          ensureChangeCardsDataIsMutable();
          changeCardsData_.remove(index);
          onChanged();
        } else {
          changeCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getChangeCardsDataBuilder(
          int index) {
        return getChangeCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getChangeCardsDataOrBuilder(
          int index) {
        if (changeCardsDataBuilder_ == null) {
          return changeCardsData_.get(index);  } else {
          return changeCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getChangeCardsDataOrBuilderList() {
        if (changeCardsDataBuilder_ != null) {
          return changeCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(changeCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChangeCardsDataBuilder() {
        return getChangeCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addChangeCardsDataBuilder(
          int index) {
        return getChangeCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse change_cards_data = 6;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getChangeCardsDataBuilderList() {
        return getChangeCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getChangeCardsDataFieldBuilder() {
        if (changeCardsDataBuilder_ == null) {
          changeCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  changeCardsData_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          changeCardsData_ = null;
        }
        return changeCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 7;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 7;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 player_status = 8;
      private java.util.List<java.lang.Integer> playerStatus_ = java.util.Collections.emptyList();
      private void ensurePlayerStatusIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          playerStatus_ = new java.util.ArrayList<java.lang.Integer>(playerStatus_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 player_status = 8;</code>
       *
       * <pre>
       *叫分状态 -1 不叫
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerStatusList() {
        return java.util.Collections.unmodifiableList(playerStatus_);
      }
      /**
       * <code>repeated int32 player_status = 8;</code>
       *
       * <pre>
       *叫分状态 -1 不叫
       * </pre>
       */
      public int getPlayerStatusCount() {
        return playerStatus_.size();
      }
      /**
       * <code>repeated int32 player_status = 8;</code>
       *
       * <pre>
       *叫分状态 -1 不叫
       * </pre>
       */
      public int getPlayerStatus(int index) {
        return playerStatus_.get(index);
      }
      /**
       * <code>repeated int32 player_status = 8;</code>
       *
       * <pre>
       *叫分状态 -1 不叫
       * </pre>
       */
      public Builder setPlayerStatus(
          int index, int value) {
        ensurePlayerStatusIsMutable();
        playerStatus_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_status = 8;</code>
       *
       * <pre>
       *叫分状态 -1 不叫
       * </pre>
       */
      public Builder addPlayerStatus(int value) {
        ensurePlayerStatusIsMutable();
        playerStatus_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_status = 8;</code>
       *
       * <pre>
       *叫分状态 -1 不叫
       * </pre>
       */
      public Builder addAllPlayerStatus(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerStatusIsMutable();
        super.addAll(values, playerStatus_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_status = 8;</code>
       *
       * <pre>
       *叫分状态 -1 不叫
       * </pre>
       */
      public Builder clearPlayerStatus() {
        playerStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 9;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 9;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 10;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000200;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 10;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 11;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 11;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 12;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 12;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 13;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00001000;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 13;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00001000);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 14;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00002000;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 14;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00002000);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 15;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00004000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 15;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00004000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 16;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 16;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 display_time = 16;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 16;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00008000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 16;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00008000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 17;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated int32 card_count = 17;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 17;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 17;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 17;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 17;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 17;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 17;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 18;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 18;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00020000) == 0x00020000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .sdh.RoomInfoSdh room_info = 19;
      private protobuf.clazz.sdh.SdhRsp.RoomInfoSdh roomInfo_ = protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.RoomInfoSdh, protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomInfoSdh getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.sdh.SdhRsp.RoomInfoSdh value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.sdh.SdhRsp.RoomInfoSdh value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000) &&
              roomInfo_ != protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .sdh.RoomInfoSdh room_info = 19;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.RoomInfoSdh, protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.sdh.SdhRsp.RoomInfoSdh, protobuf.clazz.sdh.SdhRsp.RoomInfoSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomInfoSdhOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .sdh.RoomPlayerResponseSdh players = 20;
      private java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh>(players_);
          bitField0_ |= 0x00080000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder> playersBuilder_;

      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public Builder addPlayers(protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.RoomPlayerResponseSdh players = 20;</code>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdh.Builder, protobuf.clazz.sdh.SdhRsp.RoomPlayerResponseSdhOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00080000) == 0x00080000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 call_banker = 21;
      private java.util.List<java.lang.Integer> callBanker_ = java.util.Collections.emptyList();
      private void ensureCallBankerIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          callBanker_ = new java.util.ArrayList<java.lang.Integer>(callBanker_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 call_banker = 21;</code>
       */
      public java.util.List<java.lang.Integer>
          getCallBankerList() {
        return java.util.Collections.unmodifiableList(callBanker_);
      }
      /**
       * <code>repeated int32 call_banker = 21;</code>
       */
      public int getCallBankerCount() {
        return callBanker_.size();
      }
      /**
       * <code>repeated int32 call_banker = 21;</code>
       */
      public int getCallBanker(int index) {
        return callBanker_.get(index);
      }
      /**
       * <code>repeated int32 call_banker = 21;</code>
       */
      public Builder setCallBanker(
          int index, int value) {
        ensureCallBankerIsMutable();
        callBanker_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker = 21;</code>
       */
      public Builder addCallBanker(int value) {
        ensureCallBankerIsMutable();
        callBanker_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker = 21;</code>
       */
      public Builder addAllCallBanker(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallBankerIsMutable();
        super.addAll(values, callBanker_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker = 21;</code>
       */
      public Builder clearCallBanker() {
        callBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // repeated int32 call_action = 22;
      private java.util.List<java.lang.Integer> callAction_ = java.util.Collections.emptyList();
      private void ensureCallActionIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          callAction_ = new java.util.ArrayList<java.lang.Integer>(callAction_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 call_action = 22;</code>
       */
      public java.util.List<java.lang.Integer>
          getCallActionList() {
        return java.util.Collections.unmodifiableList(callAction_);
      }
      /**
       * <code>repeated int32 call_action = 22;</code>
       */
      public int getCallActionCount() {
        return callAction_.size();
      }
      /**
       * <code>repeated int32 call_action = 22;</code>
       */
      public int getCallAction(int index) {
        return callAction_.get(index);
      }
      /**
       * <code>repeated int32 call_action = 22;</code>
       */
      public Builder setCallAction(
          int index, int value) {
        ensureCallActionIsMutable();
        callAction_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_action = 22;</code>
       */
      public Builder addCallAction(int value) {
        ensureCallActionIsMutable();
        callAction_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_action = 22;</code>
       */
      public Builder addAllCallAction(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallActionIsMutable();
        super.addAll(values, callAction_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_action = 22;</code>
       */
      public Builder clearCallAction() {
        callAction_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // optional int32 di_card_count = 23;
      private int diCardCount_ ;
      /**
       * <code>optional int32 di_card_count = 23;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public boolean hasDiCardCount() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional int32 di_card_count = 23;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public int getDiCardCount() {
        return diCardCount_;
      }
      /**
       * <code>optional int32 di_card_count = 23;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder setDiCardCount(int value) {
        bitField0_ |= 0x00400000;
        diCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_card_count = 23;</code>
       *
       * <pre>
       *底牌扑克数目
       * </pre>
       */
      public Builder clearDiCardCount() {
        bitField0_ = (bitField0_ & ~0x00400000);
        diCardCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 di_cards_data = 24;
      private java.util.List<java.lang.Integer> diCardsData_ = java.util.Collections.emptyList();
      private void ensureDiCardsDataIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          diCardsData_ = new java.util.ArrayList<java.lang.Integer>(diCardsData_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated int32 di_cards_data = 24;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDiCardsDataList() {
        return java.util.Collections.unmodifiableList(diCardsData_);
      }
      /**
       * <code>repeated int32 di_cards_data = 24;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getDiCardsDataCount() {
        return diCardsData_.size();
      }
      /**
       * <code>repeated int32 di_cards_data = 24;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public int getDiCardsData(int index) {
        return diCardsData_.get(index);
      }
      /**
       * <code>repeated int32 di_cards_data = 24;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder setDiCardsData(
          int index, int value) {
        ensureDiCardsDataIsMutable();
        diCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 24;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addDiCardsData(int value) {
        ensureDiCardsDataIsMutable();
        diCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 24;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder addAllDiCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiCardsDataIsMutable();
        super.addAll(values, diCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 di_cards_data = 24;</code>
       *
       * <pre>
       *底牌扑克列表
       * </pre>
       */
      public Builder clearDiCardsData() {
        diCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      // repeated string difen_bomb_des = 25;
      private com.google.protobuf.LazyStringList difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDifenBombDesIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          difenBombDes_ = new com.google.protobuf.LazyStringArrayList(difenBombDes_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated string difen_bomb_des = 25;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.util.List<java.lang.String>
          getDifenBombDesList() {
        return java.util.Collections.unmodifiableList(difenBombDes_);
      }
      /**
       * <code>repeated string difen_bomb_des = 25;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public int getDifenBombDesCount() {
        return difenBombDes_.size();
      }
      /**
       * <code>repeated string difen_bomb_des = 25;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getDifenBombDes(int index) {
        return difenBombDes_.get(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 25;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDifenBombDesBytes(int index) {
        return difenBombDes_.getByteString(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 25;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setDifenBombDes(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 25;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 25;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addAllDifenBombDes(
          java.lang.Iterable<java.lang.String> values) {
        ensureDifenBombDesIsMutable();
        super.addAll(values, difenBombDes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 25;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearDifenBombDes() {
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 25;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }

      // optional int32 difen = 26;
      private int difen_ ;
      /**
       * <code>optional int32 difen = 26;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public boolean hasDifen() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int32 difen = 26;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public int getDifen() {
        return difen_;
      }
      /**
       * <code>optional int32 difen = 26;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder setDifen(int value) {
        bitField0_ |= 0x02000000;
        difen_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 difen = 26;</code>
       *
       * <pre>
       *底分
       * </pre>
       */
      public Builder clearDifen() {
        bitField0_ = (bitField0_ & ~0x02000000);
        difen_ = 0;
        onChanged();
        return this;
      }

      // optional int32 score = 27;
      private int score_ ;
      /**
       * <code>optional int32 score = 27;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 score = 27;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>optional int32 score = 27;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x04000000;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score = 27;</code>
       *
       * <pre>
       *总得分
       * </pre>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x04000000);
        score_ = 0;
        onChanged();
        return this;
      }

      // optional int32 main_color = 28;
      private int mainColor_ ;
      /**
       * <code>optional int32 main_color = 28;</code>
       *
       * <pre>
       *主花色
       * </pre>
       */
      public boolean hasMainColor() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 main_color = 28;</code>
       *
       * <pre>
       *主花色
       * </pre>
       */
      public int getMainColor() {
        return mainColor_;
      }
      /**
       * <code>optional int32 main_color = 28;</code>
       *
       * <pre>
       *主花色
       * </pre>
       */
      public Builder setMainColor(int value) {
        bitField0_ |= 0x08000000;
        mainColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 main_color = 28;</code>
       *
       * <pre>
       *主花色
       * </pre>
       */
      public Builder clearMainColor() {
        bitField0_ = (bitField0_ & ~0x08000000);
        mainColor_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 call_banker_score = 29;
      private java.util.List<java.lang.Integer> callBankerScore_ = java.util.Collections.emptyList();
      private void ensureCallBankerScoreIsMutable() {
        if (!((bitField0_ & 0x10000000) == 0x10000000)) {
          callBankerScore_ = new java.util.ArrayList<java.lang.Integer>(callBankerScore_);
          bitField0_ |= 0x10000000;
         }
      }
      /**
       * <code>repeated int32 call_banker_score = 29;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCallBankerScoreList() {
        return java.util.Collections.unmodifiableList(callBankerScore_);
      }
      /**
       * <code>repeated int32 call_banker_score = 29;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public int getCallBankerScoreCount() {
        return callBankerScore_.size();
      }
      /**
       * <code>repeated int32 call_banker_score = 29;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public int getCallBankerScore(int index) {
        return callBankerScore_.get(index);
      }
      /**
       * <code>repeated int32 call_banker_score = 29;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public Builder setCallBankerScore(
          int index, int value) {
        ensureCallBankerScoreIsMutable();
        callBankerScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker_score = 29;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public Builder addCallBankerScore(int value) {
        ensureCallBankerScoreIsMutable();
        callBankerScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker_score = 29;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public Builder addAllCallBankerScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCallBankerScoreIsMutable();
        super.addAll(values, callBankerScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 call_banker_score = 29;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public Builder clearCallBankerScore() {
        callBankerScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x10000000);
        onChanged();
        return this;
      }

      // optional int32 stall = 30;
      private int stall_ ;
      /**
       * <code>optional int32 stall = 30;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public boolean hasStall() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional int32 stall = 30;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public int getStall() {
        return stall_;
      }
      /**
       * <code>optional int32 stall = 30;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public Builder setStall(int value) {
        bitField0_ |= 0x20000000;
        stall_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 stall = 30;</code>
       *
       * <pre>
       * 档位
       * </pre>
       */
      public Builder clearStall() {
        bitField0_ = (bitField0_ & ~0x20000000);
        stall_ = 0;
        onChanged();
        return this;
      }

      // optional int32 rate = 31;
      private int rate_ ;
      /**
       * <code>optional int32 rate = 31;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public boolean hasRate() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional int32 rate = 31;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public int getRate() {
        return rate_;
      }
      /**
       * <code>optional int32 rate = 31;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public Builder setRate(int value) {
        bitField0_ |= 0x40000000;
        rate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rate = 31;</code>
       *
       * <pre>
       * 倍率
       * </pre>
       */
      public Builder clearRate() {
        bitField0_ = (bitField0_ & ~0x40000000);
        rate_ = 0;
        onChanged();
        return this;
      }

      // optional int32 big_player_seat = 32;
      private int bigPlayerSeat_ ;
      /**
       * <code>optional int32 big_player_seat = 32;</code>
       *
       * <pre>
       * 大牌用户
       * </pre>
       */
      public boolean hasBigPlayerSeat() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 big_player_seat = 32;</code>
       *
       * <pre>
       * 大牌用户
       * </pre>
       */
      public int getBigPlayerSeat() {
        return bigPlayerSeat_;
      }
      /**
       * <code>optional int32 big_player_seat = 32;</code>
       *
       * <pre>
       * 大牌用户
       * </pre>
       */
      public Builder setBigPlayerSeat(int value) {
        bitField0_ |= 0x80000000;
        bigPlayerSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 big_player_seat = 32;</code>
       *
       * <pre>
       * 大牌用户
       * </pre>
       */
      public Builder clearBigPlayerSeat() {
        bitField0_ = (bitField0_ & ~0x80000000);
        bigPlayerSeat_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 main_color_list = 33;
      private java.util.List<java.lang.Integer> mainColorList_ = java.util.Collections.emptyList();
      private void ensureMainColorListIsMutable() {
        if (!((bitField1_ & 0x00000001) == 0x00000001)) {
          mainColorList_ = new java.util.ArrayList<java.lang.Integer>(mainColorList_);
          bitField1_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 main_color_list = 33;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMainColorListList() {
        return java.util.Collections.unmodifiableList(mainColorList_);
      }
      /**
       * <code>repeated int32 main_color_list = 33;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public int getMainColorListCount() {
        return mainColorList_.size();
      }
      /**
       * <code>repeated int32 main_color_list = 33;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public int getMainColorList(int index) {
        return mainColorList_.get(index);
      }
      /**
       * <code>repeated int32 main_color_list = 33;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public Builder setMainColorList(
          int index, int value) {
        ensureMainColorListIsMutable();
        mainColorList_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_list = 33;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public Builder addMainColorList(int value) {
        ensureMainColorListIsMutable();
        mainColorList_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_list = 33;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public Builder addAllMainColorList(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMainColorListIsMutable();
        super.addAll(values, mainColorList_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_list = 33;</code>
       *
       * <pre>
       * 可以叫的主花色列表(0-4 方、梅、红、黑、无主)
       * </pre>
       */
      public Builder clearMainColorList() {
        mainColorList_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated int32 main_color_number = 34;
      private java.util.List<java.lang.Integer> mainColorNumber_ = java.util.Collections.emptyList();
      private void ensureMainColorNumberIsMutable() {
        if (!((bitField1_ & 0x00000002) == 0x00000002)) {
          mainColorNumber_ = new java.util.ArrayList<java.lang.Integer>(mainColorNumber_);
          bitField1_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 main_color_number = 34;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMainColorNumberList() {
        return java.util.Collections.unmodifiableList(mainColorNumber_);
      }
      /**
       * <code>repeated int32 main_color_number = 34;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public int getMainColorNumberCount() {
        return mainColorNumber_.size();
      }
      /**
       * <code>repeated int32 main_color_number = 34;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public int getMainColorNumber(int index) {
        return mainColorNumber_.get(index);
      }
      /**
       * <code>repeated int32 main_color_number = 34;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public Builder setMainColorNumber(
          int index, int value) {
        ensureMainColorNumberIsMutable();
        mainColorNumber_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_number = 34;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public Builder addMainColorNumber(int value) {
        ensureMainColorNumberIsMutable();
        mainColorNumber_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_number = 34;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public Builder addAllMainColorNumber(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMainColorNumberIsMutable();
        super.addAll(values, mainColorNumber_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_color_number = 34;</code>
       *
       * <pre>
       * (每个花色的卡牌数量)
       * </pre>
       */
      public Builder clearMainColorNumber() {
        mainColorNumber_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 main_color_count = 35;
      private int mainColorCount_ ;
      /**
       * <code>optional int32 main_color_count = 35;</code>
       *
       * <pre>
       * 可以叫的主花色数量
       * </pre>
       */
      public boolean hasMainColorCount() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 main_color_count = 35;</code>
       *
       * <pre>
       * 可以叫的主花色数量
       * </pre>
       */
      public int getMainColorCount() {
        return mainColorCount_;
      }
      /**
       * <code>optional int32 main_color_count = 35;</code>
       *
       * <pre>
       * 可以叫的主花色数量
       * </pre>
       */
      public Builder setMainColorCount(int value) {
        bitField1_ |= 0x00000004;
        mainColorCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 main_color_count = 35;</code>
       *
       * <pre>
       * 可以叫的主花色数量
       * </pre>
       */
      public Builder clearMainColorCount() {
        bitField1_ = (bitField1_ & ~0x00000004);
        mainColorCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_status = 36;
      private int gameStatus_ ;
      /**
       * <code>optional int32 game_status = 36;</code>
       *
       * <pre>
       * 游戏状态
       * </pre>
       */
      public boolean hasGameStatus() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 game_status = 36;</code>
       *
       * <pre>
       * 游戏状态
       * </pre>
       */
      public int getGameStatus() {
        return gameStatus_;
      }
      /**
       * <code>optional int32 game_status = 36;</code>
       *
       * <pre>
       * 游戏状态
       * </pre>
       */
      public Builder setGameStatus(int value) {
        bitField1_ |= 0x00000008;
        gameStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_status = 36;</code>
       *
       * <pre>
       * 游戏状态
       * </pre>
       */
      public Builder clearGameStatus() {
        bitField1_ = (bitField1_ & ~0x00000008);
        gameStatus_ = 0;
        onChanged();
        return this;
      }

      // optional int32 first_out_player = 37;
      private int firstOutPlayer_ ;
      /**
       * <code>optional int32 first_out_player = 37;</code>
       *
       * <pre>
       * 首出玩家
       * </pre>
       */
      public boolean hasFirstOutPlayer() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 first_out_player = 37;</code>
       *
       * <pre>
       * 首出玩家
       * </pre>
       */
      public int getFirstOutPlayer() {
        return firstOutPlayer_;
      }
      /**
       * <code>optional int32 first_out_player = 37;</code>
       *
       * <pre>
       * 首出玩家
       * </pre>
       */
      public Builder setFirstOutPlayer(int value) {
        bitField1_ |= 0x00000010;
        firstOutPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 first_out_player = 37;</code>
       *
       * <pre>
       * 首出玩家
       * </pre>
       */
      public Builder clearFirstOutPlayer() {
        bitField1_ = (bitField1_ & ~0x00000010);
        firstOutPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_score = 38;
      private int curScore_ ;
      /**
       * <code>optional int32 cur_score = 38;</code>
       *
       * <pre>
       * 当前轮得分
       * </pre>
       */
      public boolean hasCurScore() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_score = 38;</code>
       *
       * <pre>
       * 当前轮得分
       * </pre>
       */
      public int getCurScore() {
        return curScore_;
      }
      /**
       * <code>optional int32 cur_score = 38;</code>
       *
       * <pre>
       * 当前轮得分
       * </pre>
       */
      public Builder setCurScore(int value) {
        bitField1_ |= 0x00000020;
        curScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_score = 38;</code>
       *
       * <pre>
       * 当前轮得分
       * </pre>
       */
      public Builder clearCurScore() {
        bitField1_ = (bitField1_ & ~0x00000020);
        curScore_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.TableResponseSdh)
    }

    static {
      defaultInstance = new TableResponseSdh(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.TableResponseSdh)
  }

  public interface GameStartSdhOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 sice_index = 1;
    /**
     * <code>optional int32 sice_index = 1;</code>
     *
     * <pre>
     *骰子点数
     * </pre>
     */
    boolean hasSiceIndex();
    /**
     * <code>optional int32 sice_index = 1;</code>
     *
     * <pre>
     *骰子点数
     * </pre>
     */
    int getSiceIndex();

    // optional int32 banker_player = 2;
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家用户
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家用户
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 3;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前用户
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前用户
     * </pre>
     */
    int getCurrentPlayer();

    // repeated int32 cards_count = 4;
    /**
     * <code>repeated int32 cards_count = 4;</code>
     *
     * <pre>
     *每个用户的手牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsCountList();
    /**
     * <code>repeated int32 cards_count = 4;</code>
     *
     * <pre>
     *每个用户的手牌
     * </pre>
     */
    int getCardsCountCount();
    /**
     * <code>repeated int32 cards_count = 4;</code>
     *
     * <pre>
     *每个用户的手牌
     * </pre>
     */
    int getCardsCount(int index);

    // optional int32 player_action = 5;
    /**
     * <code>optional int32 player_action = 5;</code>
     *
     * <pre>
     *用户动作
     * </pre>
     */
    boolean hasPlayerAction();
    /**
     * <code>optional int32 player_action = 5;</code>
     *
     * <pre>
     *用户动作
     * </pre>
     */
    int getPlayerAction();

    // repeated int32 card_data = 6;
    /**
     * <code>repeated int32 card_data = 6;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardDataList();
    /**
     * <code>repeated int32 card_data = 6;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    int getCardDataCount();
    /**
     * <code>repeated int32 card_data = 6;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    int getCardData(int index);

    // optional int32 left_card_count = 7;
    /**
     * <code>optional int32 left_card_count = 7;</code>
     *
     * <pre>
     *剩余牌
     * </pre>
     */
    boolean hasLeftCardCount();
    /**
     * <code>optional int32 left_card_count = 7;</code>
     *
     * <pre>
     *剩余牌
     * </pre>
     */
    int getLeftCardCount();

    // optional int32 xiao_hu_tag = 8;
    /**
     * <code>optional int32 xiao_hu_tag = 8;</code>
     *
     * <pre>
     *小胡标记 0 没小胡 1 有小胡；
     * </pre>
     */
    boolean hasXiaoHuTag();
    /**
     * <code>optional int32 xiao_hu_tag = 8;</code>
     *
     * <pre>
     *小胡标记 0 没小胡 1 有小胡；
     * </pre>
     */
    int getXiaoHuTag();

    // optional int32 game_round = 9;
    /**
     * <code>optional int32 game_round = 9;</code>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 9;</code>
     */
    int getGameRound();

    // optional int32 cur_round = 10;
    /**
     * <code>optional int32 cur_round = 10;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 10;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    int getCurRound();

    // repeated .Int32ArrayResponse cards_data = 11;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 other_cards = 12;
    /**
     * <code>repeated int32 other_cards = 12;</code>
     *
     * <pre>
     *其他牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getOtherCardsList();
    /**
     * <code>repeated int32 other_cards = 12;</code>
     *
     * <pre>
     *其他牌数据
     * </pre>
     */
    int getOtherCardsCount();
    /**
     * <code>repeated int32 other_cards = 12;</code>
     *
     * <pre>
     *其他牌数据
     * </pre>
     */
    int getOtherCards(int index);
  }
  /**
   * Protobuf type {@code sdh.GameStartSdh}
   */
  public static final class GameStartSdh extends
      com.google.protobuf.GeneratedMessage
      implements GameStartSdhOrBuilder {
    // Use GameStartSdh.newBuilder() to construct.
    private GameStartSdh(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStartSdh(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStartSdh defaultInstance;
    public static GameStartSdh getDefaultInstance() {
      return defaultInstance;
    }

    public GameStartSdh getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStartSdh(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              siceIndex_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardsCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              playerAction_ = input.readInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                cardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              cardData_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                cardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              leftCardCount_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              xiaoHuTag_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              gameRound_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000080;
              curRound_ = input.readInt32();
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000400;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                otherCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              otherCards_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                otherCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                otherCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardsCount_ = java.util.Collections.unmodifiableList(cardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          otherCards_ = java.util.Collections.unmodifiableList(otherCards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_GameStartSdh_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_GameStartSdh_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.GameStartSdh.class, protobuf.clazz.sdh.SdhRsp.GameStartSdh.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStartSdh> PARSER =
        new com.google.protobuf.AbstractParser<GameStartSdh>() {
      public GameStartSdh parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStartSdh(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStartSdh> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 sice_index = 1;
    public static final int SICE_INDEX_FIELD_NUMBER = 1;
    private int siceIndex_;
    /**
     * <code>optional int32 sice_index = 1;</code>
     *
     * <pre>
     *骰子点数
     * </pre>
     */
    public boolean hasSiceIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 sice_index = 1;</code>
     *
     * <pre>
     *骰子点数
     * </pre>
     */
    public int getSiceIndex() {
      return siceIndex_;
    }

    // optional int32 banker_player = 2;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 2;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家用户
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 banker_player = 2;</code>
     *
     * <pre>
     *庄家用户
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 3;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 3;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前用户
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前用户
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // repeated int32 cards_count = 4;
    public static final int CARDS_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardsCount_;
    /**
     * <code>repeated int32 cards_count = 4;</code>
     *
     * <pre>
     *每个用户的手牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsCountList() {
      return cardsCount_;
    }
    /**
     * <code>repeated int32 cards_count = 4;</code>
     *
     * <pre>
     *每个用户的手牌
     * </pre>
     */
    public int getCardsCountCount() {
      return cardsCount_.size();
    }
    /**
     * <code>repeated int32 cards_count = 4;</code>
     *
     * <pre>
     *每个用户的手牌
     * </pre>
     */
    public int getCardsCount(int index) {
      return cardsCount_.get(index);
    }

    // optional int32 player_action = 5;
    public static final int PLAYER_ACTION_FIELD_NUMBER = 5;
    private int playerAction_;
    /**
     * <code>optional int32 player_action = 5;</code>
     *
     * <pre>
     *用户动作
     * </pre>
     */
    public boolean hasPlayerAction() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_action = 5;</code>
     *
     * <pre>
     *用户动作
     * </pre>
     */
    public int getPlayerAction() {
      return playerAction_;
    }

    // repeated int32 card_data = 6;
    public static final int CARD_DATA_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> cardData_;
    /**
     * <code>repeated int32 card_data = 6;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardDataList() {
      return cardData_;
    }
    /**
     * <code>repeated int32 card_data = 6;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public int getCardDataCount() {
      return cardData_.size();
    }
    /**
     * <code>repeated int32 card_data = 6;</code>
     *
     * <pre>
     *手牌
     * </pre>
     */
    public int getCardData(int index) {
      return cardData_.get(index);
    }

    // optional int32 left_card_count = 7;
    public static final int LEFT_CARD_COUNT_FIELD_NUMBER = 7;
    private int leftCardCount_;
    /**
     * <code>optional int32 left_card_count = 7;</code>
     *
     * <pre>
     *剩余牌
     * </pre>
     */
    public boolean hasLeftCardCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 left_card_count = 7;</code>
     *
     * <pre>
     *剩余牌
     * </pre>
     */
    public int getLeftCardCount() {
      return leftCardCount_;
    }

    // optional int32 xiao_hu_tag = 8;
    public static final int XIAO_HU_TAG_FIELD_NUMBER = 8;
    private int xiaoHuTag_;
    /**
     * <code>optional int32 xiao_hu_tag = 8;</code>
     *
     * <pre>
     *小胡标记 0 没小胡 1 有小胡；
     * </pre>
     */
    public boolean hasXiaoHuTag() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 xiao_hu_tag = 8;</code>
     *
     * <pre>
     *小胡标记 0 没小胡 1 有小胡；
     * </pre>
     */
    public int getXiaoHuTag() {
      return xiaoHuTag_;
    }

    // optional int32 game_round = 9;
    public static final int GAME_ROUND_FIELD_NUMBER = 9;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 9;</code>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 game_round = 9;</code>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // optional int32 cur_round = 10;
    public static final int CUR_ROUND_FIELD_NUMBER = 10;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 10;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 cur_round = 10;</code>
     *
     * <pre>
     *当前局数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // repeated .Int32ArrayResponse cards_data = 11;
    public static final int CARDS_DATA_FIELD_NUMBER = 11;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 other_cards = 12;
    public static final int OTHER_CARDS_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> otherCards_;
    /**
     * <code>repeated int32 other_cards = 12;</code>
     *
     * <pre>
     *其他牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOtherCardsList() {
      return otherCards_;
    }
    /**
     * <code>repeated int32 other_cards = 12;</code>
     *
     * <pre>
     *其他牌数据
     * </pre>
     */
    public int getOtherCardsCount() {
      return otherCards_.size();
    }
    /**
     * <code>repeated int32 other_cards = 12;</code>
     *
     * <pre>
     *其他牌数据
     * </pre>
     */
    public int getOtherCards(int index) {
      return otherCards_.get(index);
    }

    private void initFields() {
      siceIndex_ = 0;
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      cardsCount_ = java.util.Collections.emptyList();
      playerAction_ = 0;
      cardData_ = java.util.Collections.emptyList();
      leftCardCount_ = 0;
      xiaoHuTag_ = 0;
      gameRound_ = 0;
      curRound_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      otherCards_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, siceIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, currentPlayer_);
      }
      for (int i = 0; i < cardsCount_.size(); i++) {
        output.writeInt32(4, cardsCount_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, playerAction_);
      }
      for (int i = 0; i < cardData_.size(); i++) {
        output.writeInt32(6, cardData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(7, leftCardCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(8, xiaoHuTag_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(9, gameRound_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(10, curRound_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(11, cardsData_.get(i));
      }
      for (int i = 0; i < otherCards_.size(); i++) {
        output.writeInt32(12, otherCards_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, siceIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, currentPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsCountList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, playerAction_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, leftCardCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, xiaoHuTag_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, gameRound_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, curRound_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < otherCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(otherCards_.get(i));
        }
        size += dataSize;
        size += 1 * getOtherCardsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.GameStartSdh parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.GameStartSdh parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.GameStartSdh parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.GameStartSdh parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.GameStartSdh parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.GameStartSdh parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.GameStartSdh parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.GameStartSdh parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.GameStartSdh parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.GameStartSdh parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.GameStartSdh prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.GameStartSdh}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.GameStartSdhOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_GameStartSdh_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_GameStartSdh_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.GameStartSdh.class, protobuf.clazz.sdh.SdhRsp.GameStartSdh.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.GameStartSdh.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        siceIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        playerAction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        cardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        leftCardCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        xiaoHuTag_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          cardsDataBuilder_.clear();
        }
        otherCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_GameStartSdh_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.GameStartSdh getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.GameStartSdh.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.GameStartSdh build() {
        protobuf.clazz.sdh.SdhRsp.GameStartSdh result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.GameStartSdh buildPartial() {
        protobuf.clazz.sdh.SdhRsp.GameStartSdh result = new protobuf.clazz.sdh.SdhRsp.GameStartSdh(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.siceIndex_ = siceIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardsCount_ = java.util.Collections.unmodifiableList(cardsCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerAction_ = playerAction_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          cardData_ = java.util.Collections.unmodifiableList(cardData_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.cardData_ = cardData_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.leftCardCount_ = leftCardCount_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.xiaoHuTag_ = xiaoHuTag_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.gameRound_ = gameRound_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.curRound_ = curRound_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          otherCards_ = java.util.Collections.unmodifiableList(otherCards_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.otherCards_ = otherCards_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.GameStartSdh) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.GameStartSdh)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.GameStartSdh other) {
        if (other == protobuf.clazz.sdh.SdhRsp.GameStartSdh.getDefaultInstance()) return this;
        if (other.hasSiceIndex()) {
          setSiceIndex(other.getSiceIndex());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (!other.cardsCount_.isEmpty()) {
          if (cardsCount_.isEmpty()) {
            cardsCount_ = other.cardsCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardsCountIsMutable();
            cardsCount_.addAll(other.cardsCount_);
          }
          onChanged();
        }
        if (other.hasPlayerAction()) {
          setPlayerAction(other.getPlayerAction());
        }
        if (!other.cardData_.isEmpty()) {
          if (cardData_.isEmpty()) {
            cardData_ = other.cardData_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureCardDataIsMutable();
            cardData_.addAll(other.cardData_);
          }
          onChanged();
        }
        if (other.hasLeftCardCount()) {
          setLeftCardCount(other.getLeftCardCount());
        }
        if (other.hasXiaoHuTag()) {
          setXiaoHuTag(other.getXiaoHuTag());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000400);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.otherCards_.isEmpty()) {
          if (otherCards_.isEmpty()) {
            otherCards_ = other.otherCards_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureOtherCardsIsMutable();
            otherCards_.addAll(other.otherCards_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.GameStartSdh parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.GameStartSdh) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 sice_index = 1;
      private int siceIndex_ ;
      /**
       * <code>optional int32 sice_index = 1;</code>
       *
       * <pre>
       *骰子点数
       * </pre>
       */
      public boolean hasSiceIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 sice_index = 1;</code>
       *
       * <pre>
       *骰子点数
       * </pre>
       */
      public int getSiceIndex() {
        return siceIndex_;
      }
      /**
       * <code>optional int32 sice_index = 1;</code>
       *
       * <pre>
       *骰子点数
       * </pre>
       */
      public Builder setSiceIndex(int value) {
        bitField0_ |= 0x00000001;
        siceIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sice_index = 1;</code>
       *
       * <pre>
       *骰子点数
       * </pre>
       */
      public Builder clearSiceIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        siceIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 2;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家用户
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家用户
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家用户
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000002;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 2;</code>
       *
       * <pre>
       *庄家用户
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 3;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前用户
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前用户
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前用户
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000004;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前用户
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_count = 4;
      private java.util.List<java.lang.Integer> cardsCount_ = java.util.Collections.emptyList();
      private void ensureCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardsCount_ = new java.util.ArrayList<java.lang.Integer>(cardsCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 cards_count = 4;</code>
       *
       * <pre>
       *每个用户的手牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsCountList() {
        return java.util.Collections.unmodifiableList(cardsCount_);
      }
      /**
       * <code>repeated int32 cards_count = 4;</code>
       *
       * <pre>
       *每个用户的手牌
       * </pre>
       */
      public int getCardsCountCount() {
        return cardsCount_.size();
      }
      /**
       * <code>repeated int32 cards_count = 4;</code>
       *
       * <pre>
       *每个用户的手牌
       * </pre>
       */
      public int getCardsCount(int index) {
        return cardsCount_.get(index);
      }
      /**
       * <code>repeated int32 cards_count = 4;</code>
       *
       * <pre>
       *每个用户的手牌
       * </pre>
       */
      public Builder setCardsCount(
          int index, int value) {
        ensureCardsCountIsMutable();
        cardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 4;</code>
       *
       * <pre>
       *每个用户的手牌
       * </pre>
       */
      public Builder addCardsCount(int value) {
        ensureCardsCountIsMutable();
        cardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 4;</code>
       *
       * <pre>
       *每个用户的手牌
       * </pre>
       */
      public Builder addAllCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsCountIsMutable();
        super.addAll(values, cardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 4;</code>
       *
       * <pre>
       *每个用户的手牌
       * </pre>
       */
      public Builder clearCardsCount() {
        cardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional int32 player_action = 5;
      private int playerAction_ ;
      /**
       * <code>optional int32 player_action = 5;</code>
       *
       * <pre>
       *用户动作
       * </pre>
       */
      public boolean hasPlayerAction() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 player_action = 5;</code>
       *
       * <pre>
       *用户动作
       * </pre>
       */
      public int getPlayerAction() {
        return playerAction_;
      }
      /**
       * <code>optional int32 player_action = 5;</code>
       *
       * <pre>
       *用户动作
       * </pre>
       */
      public Builder setPlayerAction(int value) {
        bitField0_ |= 0x00000010;
        playerAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_action = 5;</code>
       *
       * <pre>
       *用户动作
       * </pre>
       */
      public Builder clearPlayerAction() {
        bitField0_ = (bitField0_ & ~0x00000010);
        playerAction_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_data = 6;
      private java.util.List<java.lang.Integer> cardData_ = java.util.Collections.emptyList();
      private void ensureCardDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          cardData_ = new java.util.ArrayList<java.lang.Integer>(cardData_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 card_data = 6;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardDataList() {
        return java.util.Collections.unmodifiableList(cardData_);
      }
      /**
       * <code>repeated int32 card_data = 6;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getCardDataCount() {
        return cardData_.size();
      }
      /**
       * <code>repeated int32 card_data = 6;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public int getCardData(int index) {
        return cardData_.get(index);
      }
      /**
       * <code>repeated int32 card_data = 6;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder setCardData(
          int index, int value) {
        ensureCardDataIsMutable();
        cardData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 6;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder addCardData(int value) {
        ensureCardDataIsMutable();
        cardData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 6;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder addAllCardData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardDataIsMutable();
        super.addAll(values, cardData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_data = 6;</code>
       *
       * <pre>
       *手牌
       * </pre>
       */
      public Builder clearCardData() {
        cardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // optional int32 left_card_count = 7;
      private int leftCardCount_ ;
      /**
       * <code>optional int32 left_card_count = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public boolean hasLeftCardCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 left_card_count = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public int getLeftCardCount() {
        return leftCardCount_;
      }
      /**
       * <code>optional int32 left_card_count = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public Builder setLeftCardCount(int value) {
        bitField0_ |= 0x00000040;
        leftCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 left_card_count = 7;</code>
       *
       * <pre>
       *剩余牌
       * </pre>
       */
      public Builder clearLeftCardCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        leftCardCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 xiao_hu_tag = 8;
      private int xiaoHuTag_ ;
      /**
       * <code>optional int32 xiao_hu_tag = 8;</code>
       *
       * <pre>
       *小胡标记 0 没小胡 1 有小胡；
       * </pre>
       */
      public boolean hasXiaoHuTag() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 xiao_hu_tag = 8;</code>
       *
       * <pre>
       *小胡标记 0 没小胡 1 有小胡；
       * </pre>
       */
      public int getXiaoHuTag() {
        return xiaoHuTag_;
      }
      /**
       * <code>optional int32 xiao_hu_tag = 8;</code>
       *
       * <pre>
       *小胡标记 0 没小胡 1 有小胡；
       * </pre>
       */
      public Builder setXiaoHuTag(int value) {
        bitField0_ |= 0x00000080;
        xiaoHuTag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 xiao_hu_tag = 8;</code>
       *
       * <pre>
       *小胡标记 0 没小胡 1 有小胡；
       * </pre>
       */
      public Builder clearXiaoHuTag() {
        bitField0_ = (bitField0_ & ~0x00000080);
        xiaoHuTag_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 9;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 9;</code>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 game_round = 9;</code>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 9;</code>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000100;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 9;</code>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000100);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_round = 10;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 10;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 cur_round = 10;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 10;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000200;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 10;</code>
       *
       * <pre>
       *当前局数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000200);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 11;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 11;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 other_cards = 12;
      private java.util.List<java.lang.Integer> otherCards_ = java.util.Collections.emptyList();
      private void ensureOtherCardsIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          otherCards_ = new java.util.ArrayList<java.lang.Integer>(otherCards_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 other_cards = 12;</code>
       *
       * <pre>
       *其他牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOtherCardsList() {
        return java.util.Collections.unmodifiableList(otherCards_);
      }
      /**
       * <code>repeated int32 other_cards = 12;</code>
       *
       * <pre>
       *其他牌数据
       * </pre>
       */
      public int getOtherCardsCount() {
        return otherCards_.size();
      }
      /**
       * <code>repeated int32 other_cards = 12;</code>
       *
       * <pre>
       *其他牌数据
       * </pre>
       */
      public int getOtherCards(int index) {
        return otherCards_.get(index);
      }
      /**
       * <code>repeated int32 other_cards = 12;</code>
       *
       * <pre>
       *其他牌数据
       * </pre>
       */
      public Builder setOtherCards(
          int index, int value) {
        ensureOtherCardsIsMutable();
        otherCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 other_cards = 12;</code>
       *
       * <pre>
       *其他牌数据
       * </pre>
       */
      public Builder addOtherCards(int value) {
        ensureOtherCardsIsMutable();
        otherCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 other_cards = 12;</code>
       *
       * <pre>
       *其他牌数据
       * </pre>
       */
      public Builder addAllOtherCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOtherCardsIsMutable();
        super.addAll(values, otherCards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 other_cards = 12;</code>
       *
       * <pre>
       *其他牌数据
       * </pre>
       */
      public Builder clearOtherCards() {
        otherCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.GameStartSdh)
    }

    static {
      defaultInstance = new GameStartSdh(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.GameStartSdh)
  }

  public interface CallBankerResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 call_current_player = 1;
    /**
     * <code>optional int32 call_current_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    boolean hasCallCurrentPlayer();
    /**
     * <code>optional int32 call_current_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    int getCallCurrentPlayer();

    // repeated int32 score = 2;
    /**
     * <code>repeated int32 score = 2;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    java.util.List<java.lang.Integer> getScoreList();
    /**
     * <code>repeated int32 score = 2;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    int getScoreCount();
    /**
     * <code>repeated int32 score = 2;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    int getScore(int index);

    // optional int32 min_score = 3;
    /**
     * <code>optional int32 min_score = 3;</code>
     *
     * <pre>
     * 最小分(0表示不叫)
     * </pre>
     */
    boolean hasMinScore();
    /**
     * <code>optional int32 min_score = 3;</code>
     *
     * <pre>
     * 最小分(0表示不叫)
     * </pre>
     */
    int getMinScore();

    // optional int32 max_score = 4;
    /**
     * <code>optional int32 max_score = 4;</code>
     *
     * <pre>
     * 最大分(可以叫的最大分)
     * </pre>
     */
    boolean hasMaxScore();
    /**
     * <code>optional int32 max_score = 4;</code>
     *
     * <pre>
     * 最大分(可以叫的最大分)
     * </pre>
     */
    int getMaxScore();
  }
  /**
   * Protobuf type {@code sdh.CallBankerResponse}
   *
   * <pre>
   * 叫分响应
   * </pre>
   */
  public static final class CallBankerResponse extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResponseOrBuilder {
    // Use CallBankerResponse.newBuilder() to construct.
    private CallBankerResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResponse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResponse defaultInstance;
    public static CallBankerResponse getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              callCurrentPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                score_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              score_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                score_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                score_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              minScore_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              maxScore_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          score_ = java.util.Collections.unmodifiableList(score_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallBankerResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallBankerResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.CallBankerResponse.class, protobuf.clazz.sdh.SdhRsp.CallBankerResponse.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResponse> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResponse>() {
      public CallBankerResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResponse> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 call_current_player = 1;
    public static final int CALL_CURRENT_PLAYER_FIELD_NUMBER = 1;
    private int callCurrentPlayer_;
    /**
     * <code>optional int32 call_current_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    public boolean hasCallCurrentPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 call_current_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    public int getCallCurrentPlayer() {
      return callCurrentPlayer_;
    }

    // repeated int32 score = 2;
    public static final int SCORE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> score_;
    /**
     * <code>repeated int32 score = 2;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getScoreList() {
      return score_;
    }
    /**
     * <code>repeated int32 score = 2;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    public int getScoreCount() {
      return score_.size();
    }
    /**
     * <code>repeated int32 score = 2;</code>
     *
     * <pre>
     * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
     * </pre>
     */
    public int getScore(int index) {
      return score_.get(index);
    }

    // optional int32 min_score = 3;
    public static final int MIN_SCORE_FIELD_NUMBER = 3;
    private int minScore_;
    /**
     * <code>optional int32 min_score = 3;</code>
     *
     * <pre>
     * 最小分(0表示不叫)
     * </pre>
     */
    public boolean hasMinScore() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 min_score = 3;</code>
     *
     * <pre>
     * 最小分(0表示不叫)
     * </pre>
     */
    public int getMinScore() {
      return minScore_;
    }

    // optional int32 max_score = 4;
    public static final int MAX_SCORE_FIELD_NUMBER = 4;
    private int maxScore_;
    /**
     * <code>optional int32 max_score = 4;</code>
     *
     * <pre>
     * 最大分(可以叫的最大分)
     * </pre>
     */
    public boolean hasMaxScore() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 max_score = 4;</code>
     *
     * <pre>
     * 最大分(可以叫的最大分)
     * </pre>
     */
    public int getMaxScore() {
      return maxScore_;
    }

    private void initFields() {
      callCurrentPlayer_ = 0;
      score_ = java.util.Collections.emptyList();
      minScore_ = 0;
      maxScore_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, callCurrentPlayer_);
      }
      for (int i = 0; i < score_.size(); i++) {
        output.writeInt32(2, score_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, minScore_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, maxScore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, callCurrentPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < score_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(score_.get(i));
        }
        size += dataSize;
        size += 1 * getScoreList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, minScore_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, maxScore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.CallBankerResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.CallBankerResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.CallBankerResponse}
     *
     * <pre>
     * 叫分响应
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.CallBankerResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallBankerResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallBankerResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.CallBankerResponse.class, protobuf.clazz.sdh.SdhRsp.CallBankerResponse.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.CallBankerResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        callCurrentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        score_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        minScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallBankerResponse_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.CallBankerResponse getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.CallBankerResponse.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.CallBankerResponse build() {
        protobuf.clazz.sdh.SdhRsp.CallBankerResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.CallBankerResponse buildPartial() {
        protobuf.clazz.sdh.SdhRsp.CallBankerResponse result = new protobuf.clazz.sdh.SdhRsp.CallBankerResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.callCurrentPlayer_ = callCurrentPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          score_ = java.util.Collections.unmodifiableList(score_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.minScore_ = minScore_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.maxScore_ = maxScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.CallBankerResponse) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.CallBankerResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.CallBankerResponse other) {
        if (other == protobuf.clazz.sdh.SdhRsp.CallBankerResponse.getDefaultInstance()) return this;
        if (other.hasCallCurrentPlayer()) {
          setCallCurrentPlayer(other.getCallCurrentPlayer());
        }
        if (!other.score_.isEmpty()) {
          if (score_.isEmpty()) {
            score_ = other.score_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureScoreIsMutable();
            score_.addAll(other.score_);
          }
          onChanged();
        }
        if (other.hasMinScore()) {
          setMinScore(other.getMinScore());
        }
        if (other.hasMaxScore()) {
          setMaxScore(other.getMaxScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.CallBankerResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.CallBankerResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 call_current_player = 1;
      private int callCurrentPlayer_ ;
      /**
       * <code>optional int32 call_current_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public boolean hasCallCurrentPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 call_current_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public int getCallCurrentPlayer() {
        return callCurrentPlayer_;
      }
      /**
       * <code>optional int32 call_current_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public Builder setCallCurrentPlayer(int value) {
        bitField0_ |= 0x00000001;
        callCurrentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_current_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public Builder clearCallCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        callCurrentPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 score = 2;
      private java.util.List<java.lang.Integer> score_ = java.util.Collections.emptyList();
      private void ensureScoreIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          score_ = new java.util.ArrayList<java.lang.Integer>(score_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 score = 2;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getScoreList() {
        return java.util.Collections.unmodifiableList(score_);
      }
      /**
       * <code>repeated int32 score = 2;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public int getScoreCount() {
        return score_.size();
      }
      /**
       * <code>repeated int32 score = 2;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public int getScore(int index) {
        return score_.get(index);
      }
      /**
       * <code>repeated int32 score = 2;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public Builder setScore(
          int index, int value) {
        ensureScoreIsMutable();
        score_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score = 2;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public Builder addScore(int value) {
        ensureScoreIsMutable();
        score_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score = 2;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public Builder addAllScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureScoreIsMutable();
        super.addAll(values, score_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 score = 2;</code>
       *
       * <pre>
       * 每个玩家的叫庄分数(-1: 不叫, 0: 还没有操作, &gt; 0 叫的分数)
       * </pre>
       */
      public Builder clearScore() {
        score_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 min_score = 3;
      private int minScore_ ;
      /**
       * <code>optional int32 min_score = 3;</code>
       *
       * <pre>
       * 最小分(0表示不叫)
       * </pre>
       */
      public boolean hasMinScore() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 min_score = 3;</code>
       *
       * <pre>
       * 最小分(0表示不叫)
       * </pre>
       */
      public int getMinScore() {
        return minScore_;
      }
      /**
       * <code>optional int32 min_score = 3;</code>
       *
       * <pre>
       * 最小分(0表示不叫)
       * </pre>
       */
      public Builder setMinScore(int value) {
        bitField0_ |= 0x00000004;
        minScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 min_score = 3;</code>
       *
       * <pre>
       * 最小分(0表示不叫)
       * </pre>
       */
      public Builder clearMinScore() {
        bitField0_ = (bitField0_ & ~0x00000004);
        minScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 max_score = 4;
      private int maxScore_ ;
      /**
       * <code>optional int32 max_score = 4;</code>
       *
       * <pre>
       * 最大分(可以叫的最大分)
       * </pre>
       */
      public boolean hasMaxScore() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 max_score = 4;</code>
       *
       * <pre>
       * 最大分(可以叫的最大分)
       * </pre>
       */
      public int getMaxScore() {
        return maxScore_;
      }
      /**
       * <code>optional int32 max_score = 4;</code>
       *
       * <pre>
       * 最大分(可以叫的最大分)
       * </pre>
       */
      public Builder setMaxScore(int value) {
        bitField0_ |= 0x00000008;
        maxScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_score = 4;</code>
       *
       * <pre>
       * 最大分(可以叫的最大分)
       * </pre>
       */
      public Builder clearMaxScore() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxScore_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.CallBankerResponse)
    }

    static {
      defaultInstance = new CallBankerResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.CallBankerResponse)
  }

  public interface CallMainResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_banker = 1;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    int getCurBanker();

    // optional int32 main_color = 2;
    /**
     * <code>optional int32 main_color = 2;</code>
     *
     * <pre>
     * 主花色
     * </pre>
     */
    boolean hasMainColor();
    /**
     * <code>optional int32 main_color = 2;</code>
     *
     * <pre>
     * 主花色
     * </pre>
     */
    int getMainColor();

    // repeated int32 main_card = 3;
    /**
     * <code>repeated int32 main_card = 3;</code>
     *
     * <pre>
     * 主牌值
     * </pre>
     */
    java.util.List<java.lang.Integer> getMainCardList();
    /**
     * <code>repeated int32 main_card = 3;</code>
     *
     * <pre>
     * 主牌值
     * </pre>
     */
    int getMainCardCount();
    /**
     * <code>repeated int32 main_card = 3;</code>
     *
     * <pre>
     * 主牌值
     * </pre>
     */
    int getMainCard(int index);

    // optional int32 main_score = 4;
    /**
     * <code>optional int32 main_score = 4;</code>
     *
     * <pre>
     * 分数
     * </pre>
     */
    boolean hasMainScore();
    /**
     * <code>optional int32 main_score = 4;</code>
     *
     * <pre>
     * 分数
     * </pre>
     */
    int getMainScore();

    // optional int32 di_type = 5;
    /**
     * <code>optional int32 di_type = 5;</code>
     *
     * <pre>
     *底分类型 1加 2乘 -1不显示
     * </pre>
     */
    boolean hasDiType();
    /**
     * <code>optional int32 di_type = 5;</code>
     *
     * <pre>
     *底分类型 1加 2乘 -1不显示
     * </pre>
     */
    int getDiType();

    // optional int32 number = 6;
    /**
     * <code>optional int32 number = 6;</code>
     *
     * <pre>
     * 类型后面接的值
     * </pre>
     */
    boolean hasNumber();
    /**
     * <code>optional int32 number = 6;</code>
     *
     * <pre>
     * 类型后面接的值
     * </pre>
     */
    int getNumber();
  }
  /**
   * Protobuf type {@code sdh.CallMainResponse}
   */
  public static final class CallMainResponse extends
      com.google.protobuf.GeneratedMessage
      implements CallMainResponseOrBuilder {
    // Use CallMainResponse.newBuilder() to construct.
    private CallMainResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallMainResponse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallMainResponse defaultInstance;
    public static CallMainResponse getDefaultInstance() {
      return defaultInstance;
    }

    public CallMainResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallMainResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curBanker_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mainColor_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                mainCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              mainCard_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                mainCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                mainCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              mainScore_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              diType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              number_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          mainCard_ = java.util.Collections.unmodifiableList(mainCard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallMainResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallMainResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.CallMainResponse.class, protobuf.clazz.sdh.SdhRsp.CallMainResponse.Builder.class);
    }

    public static com.google.protobuf.Parser<CallMainResponse> PARSER =
        new com.google.protobuf.AbstractParser<CallMainResponse>() {
      public CallMainResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallMainResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallMainResponse> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_banker = 1;
    public static final int CUR_BANKER_FIELD_NUMBER = 1;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_banker = 1;</code>
     *
     * <pre>
     * 庄家
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // optional int32 main_color = 2;
    public static final int MAIN_COLOR_FIELD_NUMBER = 2;
    private int mainColor_;
    /**
     * <code>optional int32 main_color = 2;</code>
     *
     * <pre>
     * 主花色
     * </pre>
     */
    public boolean hasMainColor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 main_color = 2;</code>
     *
     * <pre>
     * 主花色
     * </pre>
     */
    public int getMainColor() {
      return mainColor_;
    }

    // repeated int32 main_card = 3;
    public static final int MAIN_CARD_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> mainCard_;
    /**
     * <code>repeated int32 main_card = 3;</code>
     *
     * <pre>
     * 主牌值
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMainCardList() {
      return mainCard_;
    }
    /**
     * <code>repeated int32 main_card = 3;</code>
     *
     * <pre>
     * 主牌值
     * </pre>
     */
    public int getMainCardCount() {
      return mainCard_.size();
    }
    /**
     * <code>repeated int32 main_card = 3;</code>
     *
     * <pre>
     * 主牌值
     * </pre>
     */
    public int getMainCard(int index) {
      return mainCard_.get(index);
    }

    // optional int32 main_score = 4;
    public static final int MAIN_SCORE_FIELD_NUMBER = 4;
    private int mainScore_;
    /**
     * <code>optional int32 main_score = 4;</code>
     *
     * <pre>
     * 分数
     * </pre>
     */
    public boolean hasMainScore() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 main_score = 4;</code>
     *
     * <pre>
     * 分数
     * </pre>
     */
    public int getMainScore() {
      return mainScore_;
    }

    // optional int32 di_type = 5;
    public static final int DI_TYPE_FIELD_NUMBER = 5;
    private int diType_;
    /**
     * <code>optional int32 di_type = 5;</code>
     *
     * <pre>
     *底分类型 1加 2乘 -1不显示
     * </pre>
     */
    public boolean hasDiType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 di_type = 5;</code>
     *
     * <pre>
     *底分类型 1加 2乘 -1不显示
     * </pre>
     */
    public int getDiType() {
      return diType_;
    }

    // optional int32 number = 6;
    public static final int NUMBER_FIELD_NUMBER = 6;
    private int number_;
    /**
     * <code>optional int32 number = 6;</code>
     *
     * <pre>
     * 类型后面接的值
     * </pre>
     */
    public boolean hasNumber() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 number = 6;</code>
     *
     * <pre>
     * 类型后面接的值
     * </pre>
     */
    public int getNumber() {
      return number_;
    }

    private void initFields() {
      curBanker_ = 0;
      mainColor_ = 0;
      mainCard_ = java.util.Collections.emptyList();
      mainScore_ = 0;
      diType_ = 0;
      number_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curBanker_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mainColor_);
      }
      for (int i = 0; i < mainCard_.size(); i++) {
        output.writeInt32(3, mainCard_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, mainScore_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, diType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, number_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curBanker_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, mainColor_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mainCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mainCard_.get(i));
        }
        size += dataSize;
        size += 1 * getMainCardList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, mainScore_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, diType_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, number_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.CallMainResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMainResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMainResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMainResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMainResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMainResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMainResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMainResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMainResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMainResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.CallMainResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.CallMainResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.CallMainResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallMainResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallMainResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.CallMainResponse.class, protobuf.clazz.sdh.SdhRsp.CallMainResponse.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.CallMainResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        mainColor_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mainCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        mainScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        diType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        number_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallMainResponse_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.CallMainResponse getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.CallMainResponse.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.CallMainResponse build() {
        protobuf.clazz.sdh.SdhRsp.CallMainResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.CallMainResponse buildPartial() {
        protobuf.clazz.sdh.SdhRsp.CallMainResponse result = new protobuf.clazz.sdh.SdhRsp.CallMainResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curBanker_ = curBanker_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mainColor_ = mainColor_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          mainCard_ = java.util.Collections.unmodifiableList(mainCard_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.mainCard_ = mainCard_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mainScore_ = mainScore_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.diType_ = diType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.number_ = number_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.CallMainResponse) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.CallMainResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.CallMainResponse other) {
        if (other == protobuf.clazz.sdh.SdhRsp.CallMainResponse.getDefaultInstance()) return this;
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (other.hasMainColor()) {
          setMainColor(other.getMainColor());
        }
        if (!other.mainCard_.isEmpty()) {
          if (mainCard_.isEmpty()) {
            mainCard_ = other.mainCard_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureMainCardIsMutable();
            mainCard_.addAll(other.mainCard_);
          }
          onChanged();
        }
        if (other.hasMainScore()) {
          setMainScore(other.getMainScore());
        }
        if (other.hasDiType()) {
          setDiType(other.getDiType());
        }
        if (other.hasNumber()) {
          setNumber(other.getNumber());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.CallMainResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.CallMainResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_banker = 1;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000001;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 1;</code>
       *
       * <pre>
       * 庄家
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // optional int32 main_color = 2;
      private int mainColor_ ;
      /**
       * <code>optional int32 main_color = 2;</code>
       *
       * <pre>
       * 主花色
       * </pre>
       */
      public boolean hasMainColor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 main_color = 2;</code>
       *
       * <pre>
       * 主花色
       * </pre>
       */
      public int getMainColor() {
        return mainColor_;
      }
      /**
       * <code>optional int32 main_color = 2;</code>
       *
       * <pre>
       * 主花色
       * </pre>
       */
      public Builder setMainColor(int value) {
        bitField0_ |= 0x00000002;
        mainColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 main_color = 2;</code>
       *
       * <pre>
       * 主花色
       * </pre>
       */
      public Builder clearMainColor() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mainColor_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 main_card = 3;
      private java.util.List<java.lang.Integer> mainCard_ = java.util.Collections.emptyList();
      private void ensureMainCardIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          mainCard_ = new java.util.ArrayList<java.lang.Integer>(mainCard_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 main_card = 3;</code>
       *
       * <pre>
       * 主牌值
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMainCardList() {
        return java.util.Collections.unmodifiableList(mainCard_);
      }
      /**
       * <code>repeated int32 main_card = 3;</code>
       *
       * <pre>
       * 主牌值
       * </pre>
       */
      public int getMainCardCount() {
        return mainCard_.size();
      }
      /**
       * <code>repeated int32 main_card = 3;</code>
       *
       * <pre>
       * 主牌值
       * </pre>
       */
      public int getMainCard(int index) {
        return mainCard_.get(index);
      }
      /**
       * <code>repeated int32 main_card = 3;</code>
       *
       * <pre>
       * 主牌值
       * </pre>
       */
      public Builder setMainCard(
          int index, int value) {
        ensureMainCardIsMutable();
        mainCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_card = 3;</code>
       *
       * <pre>
       * 主牌值
       * </pre>
       */
      public Builder addMainCard(int value) {
        ensureMainCardIsMutable();
        mainCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_card = 3;</code>
       *
       * <pre>
       * 主牌值
       * </pre>
       */
      public Builder addAllMainCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMainCardIsMutable();
        super.addAll(values, mainCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_card = 3;</code>
       *
       * <pre>
       * 主牌值
       * </pre>
       */
      public Builder clearMainCard() {
        mainCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 main_score = 4;
      private int mainScore_ ;
      /**
       * <code>optional int32 main_score = 4;</code>
       *
       * <pre>
       * 分数
       * </pre>
       */
      public boolean hasMainScore() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 main_score = 4;</code>
       *
       * <pre>
       * 分数
       * </pre>
       */
      public int getMainScore() {
        return mainScore_;
      }
      /**
       * <code>optional int32 main_score = 4;</code>
       *
       * <pre>
       * 分数
       * </pre>
       */
      public Builder setMainScore(int value) {
        bitField0_ |= 0x00000008;
        mainScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 main_score = 4;</code>
       *
       * <pre>
       * 分数
       * </pre>
       */
      public Builder clearMainScore() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mainScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 di_type = 5;
      private int diType_ ;
      /**
       * <code>optional int32 di_type = 5;</code>
       *
       * <pre>
       *底分类型 1加 2乘 -1不显示
       * </pre>
       */
      public boolean hasDiType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 di_type = 5;</code>
       *
       * <pre>
       *底分类型 1加 2乘 -1不显示
       * </pre>
       */
      public int getDiType() {
        return diType_;
      }
      /**
       * <code>optional int32 di_type = 5;</code>
       *
       * <pre>
       *底分类型 1加 2乘 -1不显示
       * </pre>
       */
      public Builder setDiType(int value) {
        bitField0_ |= 0x00000010;
        diType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 di_type = 5;</code>
       *
       * <pre>
       *底分类型 1加 2乘 -1不显示
       * </pre>
       */
      public Builder clearDiType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        diType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 number = 6;
      private int number_ ;
      /**
       * <code>optional int32 number = 6;</code>
       *
       * <pre>
       * 类型后面接的值
       * </pre>
       */
      public boolean hasNumber() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 number = 6;</code>
       *
       * <pre>
       * 类型后面接的值
       * </pre>
       */
      public int getNumber() {
        return number_;
      }
      /**
       * <code>optional int32 number = 6;</code>
       *
       * <pre>
       * 类型后面接的值
       * </pre>
       */
      public Builder setNumber(int value) {
        bitField0_ |= 0x00000020;
        number_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 number = 6;</code>
       *
       * <pre>
       * 类型后面接的值
       * </pre>
       */
      public Builder clearNumber() {
        bitField0_ = (bitField0_ & ~0x00000020);
        number_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.CallMainResponse)
    }

    static {
      defaultInstance = new CallMainResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.CallMainResponse)
  }

  public interface CallBankerRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 call_current_player = 1;
    /**
     * <code>optional int32 call_current_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    boolean hasCallCurrentPlayer();
    /**
     * <code>optional int32 call_current_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    int getCallCurrentPlayer();

    // optional int32 opreate_type = 2;
    /**
     * <code>optional int32 opreate_type = 2;</code>
     *
     * <pre>
     * 请求类型 1:叫庄 -1:不叫 1004:定主
     * </pre>
     */
    boolean hasOpreateType();
    /**
     * <code>optional int32 opreate_type = 2;</code>
     *
     * <pre>
     * 请求类型 1:叫庄 -1:不叫 1004:定主
     * </pre>
     */
    int getOpreateType();

    // optional int32 score = 3;
    /**
     * <code>optional int32 score = 3;</code>
     *
     * <pre>
     * 叫庄分数
     * </pre>
     */
    boolean hasScore();
    /**
     * <code>optional int32 score = 3;</code>
     *
     * <pre>
     * 叫庄分数
     * </pre>
     */
    int getScore();

    // optional int32 main_color = 4;
    /**
     * <code>optional int32 main_color = 4;</code>
     *
     * <pre>
     * 定主 0-4方-黑、正主
     * </pre>
     */
    boolean hasMainColor();
    /**
     * <code>optional int32 main_color = 4;</code>
     *
     * <pre>
     * 定主 0-4方-黑、正主
     * </pre>
     */
    int getMainColor();

    // repeated int32 main_card = 5;
    /**
     * <code>repeated int32 main_card = 5;</code>
     *
     * <pre>
     * 叫主牌值
     * </pre>
     */
    java.util.List<java.lang.Integer> getMainCardList();
    /**
     * <code>repeated int32 main_card = 5;</code>
     *
     * <pre>
     * 叫主牌值
     * </pre>
     */
    int getMainCardCount();
    /**
     * <code>repeated int32 main_card = 5;</code>
     *
     * <pre>
     * 叫主牌值
     * </pre>
     */
    int getMainCard(int index);

    // optional int32 round = 6;
    /**
     * <code>optional int32 round = 6;</code>
     *
     * <pre>
     *发牌次数
     * </pre>
     */
    boolean hasRound();
    /**
     * <code>optional int32 round = 6;</code>
     *
     * <pre>
     *发牌次数
     * </pre>
     */
    int getRound();
  }
  /**
   * Protobuf type {@code sdh.CallBankerRequest}
   *
   * <pre>
   *请求
   * </pre>
   */
  public static final class CallBankerRequest extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerRequestOrBuilder {
    // Use CallBankerRequest.newBuilder() to construct.
    private CallBankerRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerRequest defaultInstance;
    public static CallBankerRequest getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              callCurrentPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              opreateType_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              score_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              mainColor_ = input.readInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                mainCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              mainCard_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                mainCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                mainCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              round_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          mainCard_ = java.util.Collections.unmodifiableList(mainCard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallBankerRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallBankerRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.CallBankerRequest.class, protobuf.clazz.sdh.SdhRsp.CallBankerRequest.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerRequest> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerRequest>() {
      public CallBankerRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerRequest> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 call_current_player = 1;
    public static final int CALL_CURRENT_PLAYER_FIELD_NUMBER = 1;
    private int callCurrentPlayer_;
    /**
     * <code>optional int32 call_current_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    public boolean hasCallCurrentPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 call_current_player = 1;</code>
     *
     * <pre>
     *叫庄用户
     * </pre>
     */
    public int getCallCurrentPlayer() {
      return callCurrentPlayer_;
    }

    // optional int32 opreate_type = 2;
    public static final int OPREATE_TYPE_FIELD_NUMBER = 2;
    private int opreateType_;
    /**
     * <code>optional int32 opreate_type = 2;</code>
     *
     * <pre>
     * 请求类型 1:叫庄 -1:不叫 1004:定主
     * </pre>
     */
    public boolean hasOpreateType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 opreate_type = 2;</code>
     *
     * <pre>
     * 请求类型 1:叫庄 -1:不叫 1004:定主
     * </pre>
     */
    public int getOpreateType() {
      return opreateType_;
    }

    // optional int32 score = 3;
    public static final int SCORE_FIELD_NUMBER = 3;
    private int score_;
    /**
     * <code>optional int32 score = 3;</code>
     *
     * <pre>
     * 叫庄分数
     * </pre>
     */
    public boolean hasScore() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 score = 3;</code>
     *
     * <pre>
     * 叫庄分数
     * </pre>
     */
    public int getScore() {
      return score_;
    }

    // optional int32 main_color = 4;
    public static final int MAIN_COLOR_FIELD_NUMBER = 4;
    private int mainColor_;
    /**
     * <code>optional int32 main_color = 4;</code>
     *
     * <pre>
     * 定主 0-4方-黑、正主
     * </pre>
     */
    public boolean hasMainColor() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 main_color = 4;</code>
     *
     * <pre>
     * 定主 0-4方-黑、正主
     * </pre>
     */
    public int getMainColor() {
      return mainColor_;
    }

    // repeated int32 main_card = 5;
    public static final int MAIN_CARD_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> mainCard_;
    /**
     * <code>repeated int32 main_card = 5;</code>
     *
     * <pre>
     * 叫主牌值
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMainCardList() {
      return mainCard_;
    }
    /**
     * <code>repeated int32 main_card = 5;</code>
     *
     * <pre>
     * 叫主牌值
     * </pre>
     */
    public int getMainCardCount() {
      return mainCard_.size();
    }
    /**
     * <code>repeated int32 main_card = 5;</code>
     *
     * <pre>
     * 叫主牌值
     * </pre>
     */
    public int getMainCard(int index) {
      return mainCard_.get(index);
    }

    // optional int32 round = 6;
    public static final int ROUND_FIELD_NUMBER = 6;
    private int round_;
    /**
     * <code>optional int32 round = 6;</code>
     *
     * <pre>
     *发牌次数
     * </pre>
     */
    public boolean hasRound() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 round = 6;</code>
     *
     * <pre>
     *发牌次数
     * </pre>
     */
    public int getRound() {
      return round_;
    }

    private void initFields() {
      callCurrentPlayer_ = 0;
      opreateType_ = 0;
      score_ = 0;
      mainColor_ = 0;
      mainCard_ = java.util.Collections.emptyList();
      round_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, callCurrentPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, opreateType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, score_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, mainColor_);
      }
      for (int i = 0; i < mainCard_.size(); i++) {
        output.writeInt32(5, mainCard_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, round_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, callCurrentPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, opreateType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, score_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, mainColor_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mainCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mainCard_.get(i));
        }
        size += dataSize;
        size += 1 * getMainCardList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, round_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.CallBankerRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallBankerRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.CallBankerRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.CallBankerRequest}
     *
     * <pre>
     *请求
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.CallBankerRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallBankerRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallBankerRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.CallBankerRequest.class, protobuf.clazz.sdh.SdhRsp.CallBankerRequest.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.CallBankerRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        callCurrentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        score_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        mainColor_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        mainCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        round_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallBankerRequest_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.CallBankerRequest getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.CallBankerRequest.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.CallBankerRequest build() {
        protobuf.clazz.sdh.SdhRsp.CallBankerRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.CallBankerRequest buildPartial() {
        protobuf.clazz.sdh.SdhRsp.CallBankerRequest result = new protobuf.clazz.sdh.SdhRsp.CallBankerRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.callCurrentPlayer_ = callCurrentPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.opreateType_ = opreateType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.score_ = score_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mainColor_ = mainColor_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          mainCard_ = java.util.Collections.unmodifiableList(mainCard_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.mainCard_ = mainCard_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.round_ = round_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.CallBankerRequest) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.CallBankerRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.CallBankerRequest other) {
        if (other == protobuf.clazz.sdh.SdhRsp.CallBankerRequest.getDefaultInstance()) return this;
        if (other.hasCallCurrentPlayer()) {
          setCallCurrentPlayer(other.getCallCurrentPlayer());
        }
        if (other.hasOpreateType()) {
          setOpreateType(other.getOpreateType());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasMainColor()) {
          setMainColor(other.getMainColor());
        }
        if (!other.mainCard_.isEmpty()) {
          if (mainCard_.isEmpty()) {
            mainCard_ = other.mainCard_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureMainCardIsMutable();
            mainCard_.addAll(other.mainCard_);
          }
          onChanged();
        }
        if (other.hasRound()) {
          setRound(other.getRound());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.CallBankerRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.CallBankerRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 call_current_player = 1;
      private int callCurrentPlayer_ ;
      /**
       * <code>optional int32 call_current_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public boolean hasCallCurrentPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 call_current_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public int getCallCurrentPlayer() {
        return callCurrentPlayer_;
      }
      /**
       * <code>optional int32 call_current_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public Builder setCallCurrentPlayer(int value) {
        bitField0_ |= 0x00000001;
        callCurrentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_current_player = 1;</code>
       *
       * <pre>
       *叫庄用户
       * </pre>
       */
      public Builder clearCallCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        callCurrentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 opreate_type = 2;
      private int opreateType_ ;
      /**
       * <code>optional int32 opreate_type = 2;</code>
       *
       * <pre>
       * 请求类型 1:叫庄 -1:不叫 1004:定主
       * </pre>
       */
      public boolean hasOpreateType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 opreate_type = 2;</code>
       *
       * <pre>
       * 请求类型 1:叫庄 -1:不叫 1004:定主
       * </pre>
       */
      public int getOpreateType() {
        return opreateType_;
      }
      /**
       * <code>optional int32 opreate_type = 2;</code>
       *
       * <pre>
       * 请求类型 1:叫庄 -1:不叫 1004:定主
       * </pre>
       */
      public Builder setOpreateType(int value) {
        bitField0_ |= 0x00000002;
        opreateType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_type = 2;</code>
       *
       * <pre>
       * 请求类型 1:叫庄 -1:不叫 1004:定主
       * </pre>
       */
      public Builder clearOpreateType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        opreateType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 score = 3;
      private int score_ ;
      /**
       * <code>optional int32 score = 3;</code>
       *
       * <pre>
       * 叫庄分数
       * </pre>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 score = 3;</code>
       *
       * <pre>
       * 叫庄分数
       * </pre>
       */
      public int getScore() {
        return score_;
      }
      /**
       * <code>optional int32 score = 3;</code>
       *
       * <pre>
       * 叫庄分数
       * </pre>
       */
      public Builder setScore(int value) {
        bitField0_ |= 0x00000004;
        score_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 score = 3;</code>
       *
       * <pre>
       * 叫庄分数
       * </pre>
       */
      public Builder clearScore() {
        bitField0_ = (bitField0_ & ~0x00000004);
        score_ = 0;
        onChanged();
        return this;
      }

      // optional int32 main_color = 4;
      private int mainColor_ ;
      /**
       * <code>optional int32 main_color = 4;</code>
       *
       * <pre>
       * 定主 0-4方-黑、正主
       * </pre>
       */
      public boolean hasMainColor() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 main_color = 4;</code>
       *
       * <pre>
       * 定主 0-4方-黑、正主
       * </pre>
       */
      public int getMainColor() {
        return mainColor_;
      }
      /**
       * <code>optional int32 main_color = 4;</code>
       *
       * <pre>
       * 定主 0-4方-黑、正主
       * </pre>
       */
      public Builder setMainColor(int value) {
        bitField0_ |= 0x00000008;
        mainColor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 main_color = 4;</code>
       *
       * <pre>
       * 定主 0-4方-黑、正主
       * </pre>
       */
      public Builder clearMainColor() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mainColor_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 main_card = 5;
      private java.util.List<java.lang.Integer> mainCard_ = java.util.Collections.emptyList();
      private void ensureMainCardIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          mainCard_ = new java.util.ArrayList<java.lang.Integer>(mainCard_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 main_card = 5;</code>
       *
       * <pre>
       * 叫主牌值
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMainCardList() {
        return java.util.Collections.unmodifiableList(mainCard_);
      }
      /**
       * <code>repeated int32 main_card = 5;</code>
       *
       * <pre>
       * 叫主牌值
       * </pre>
       */
      public int getMainCardCount() {
        return mainCard_.size();
      }
      /**
       * <code>repeated int32 main_card = 5;</code>
       *
       * <pre>
       * 叫主牌值
       * </pre>
       */
      public int getMainCard(int index) {
        return mainCard_.get(index);
      }
      /**
       * <code>repeated int32 main_card = 5;</code>
       *
       * <pre>
       * 叫主牌值
       * </pre>
       */
      public Builder setMainCard(
          int index, int value) {
        ensureMainCardIsMutable();
        mainCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_card = 5;</code>
       *
       * <pre>
       * 叫主牌值
       * </pre>
       */
      public Builder addMainCard(int value) {
        ensureMainCardIsMutable();
        mainCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_card = 5;</code>
       *
       * <pre>
       * 叫主牌值
       * </pre>
       */
      public Builder addAllMainCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMainCardIsMutable();
        super.addAll(values, mainCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_card = 5;</code>
       *
       * <pre>
       * 叫主牌值
       * </pre>
       */
      public Builder clearMainCard() {
        mainCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // optional int32 round = 6;
      private int round_ ;
      /**
       * <code>optional int32 round = 6;</code>
       *
       * <pre>
       *发牌次数
       * </pre>
       */
      public boolean hasRound() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 round = 6;</code>
       *
       * <pre>
       *发牌次数
       * </pre>
       */
      public int getRound() {
        return round_;
      }
      /**
       * <code>optional int32 round = 6;</code>
       *
       * <pre>
       *发牌次数
       * </pre>
       */
      public Builder setRound(int value) {
        bitField0_ |= 0x00000020;
        round_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 round = 6;</code>
       *
       * <pre>
       *发牌次数
       * </pre>
       */
      public Builder clearRound() {
        bitField0_ = (bitField0_ & ~0x00000020);
        round_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.CallBankerRequest)
    }

    static {
      defaultInstance = new CallBankerRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.CallBankerRequest)
  }

  public interface TrusteeInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_player = 1;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     * 托管用户
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     * 托管用户
     * </pre>
     */
    int getCurPlayer();

    // optional bool is_trustee = 2;
    /**
     * <code>optional bool is_trustee = 2;</code>
     *
     * <pre>
     * 是否托管 true托管 false 取消托管
     * </pre>
     */
    boolean hasIsTrustee();
    /**
     * <code>optional bool is_trustee = 2;</code>
     *
     * <pre>
     * 是否托管 true托管 false 取消托管
     * </pre>
     */
    boolean getIsTrustee();
  }
  /**
   * Protobuf type {@code sdh.TrusteeInfo}
   */
  public static final class TrusteeInfo extends
      com.google.protobuf.GeneratedMessage
      implements TrusteeInfoOrBuilder {
    // Use TrusteeInfo.newBuilder() to construct.
    private TrusteeInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TrusteeInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TrusteeInfo defaultInstance;
    public static TrusteeInfo getDefaultInstance() {
      return defaultInstance;
    }

    public TrusteeInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TrusteeInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              isTrustee_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_TrusteeInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_TrusteeInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.TrusteeInfo.class, protobuf.clazz.sdh.SdhRsp.TrusteeInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<TrusteeInfo> PARSER =
        new com.google.protobuf.AbstractParser<TrusteeInfo>() {
      public TrusteeInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TrusteeInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TrusteeInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_player = 1;
    public static final int CUR_PLAYER_FIELD_NUMBER = 1;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     * 托管用户
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     * 托管用户
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // optional bool is_trustee = 2;
    public static final int IS_TRUSTEE_FIELD_NUMBER = 2;
    private boolean isTrustee_;
    /**
     * <code>optional bool is_trustee = 2;</code>
     *
     * <pre>
     * 是否托管 true托管 false 取消托管
     * </pre>
     */
    public boolean hasIsTrustee() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool is_trustee = 2;</code>
     *
     * <pre>
     * 是否托管 true托管 false 取消托管
     * </pre>
     */
    public boolean getIsTrustee() {
      return isTrustee_;
    }

    private void initFields() {
      curPlayer_ = 0;
      isTrustee_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, isTrustee_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isTrustee_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.TrusteeInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.TrusteeInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.TrusteeInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.TrusteeInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.TrusteeInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.TrusteeInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.TrusteeInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.TrusteeInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.TrusteeInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.TrusteeInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.TrusteeInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.TrusteeInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.TrusteeInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_TrusteeInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_TrusteeInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.TrusteeInfo.class, protobuf.clazz.sdh.SdhRsp.TrusteeInfo.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.TrusteeInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        isTrustee_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_TrusteeInfo_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.TrusteeInfo getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.TrusteeInfo.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.TrusteeInfo build() {
        protobuf.clazz.sdh.SdhRsp.TrusteeInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.TrusteeInfo buildPartial() {
        protobuf.clazz.sdh.SdhRsp.TrusteeInfo result = new protobuf.clazz.sdh.SdhRsp.TrusteeInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curPlayer_ = curPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.isTrustee_ = isTrustee_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.TrusteeInfo) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.TrusteeInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.TrusteeInfo other) {
        if (other == protobuf.clazz.sdh.SdhRsp.TrusteeInfo.getDefaultInstance()) return this;
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (other.hasIsTrustee()) {
          setIsTrustee(other.getIsTrustee());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.TrusteeInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.TrusteeInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_player = 1;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       * 托管用户
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       * 托管用户
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       * 托管用户
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000001;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       * 托管用户
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_trustee = 2;
      private boolean isTrustee_ ;
      /**
       * <code>optional bool is_trustee = 2;</code>
       *
       * <pre>
       * 是否托管 true托管 false 取消托管
       * </pre>
       */
      public boolean hasIsTrustee() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool is_trustee = 2;</code>
       *
       * <pre>
       * 是否托管 true托管 false 取消托管
       * </pre>
       */
      public boolean getIsTrustee() {
        return isTrustee_;
      }
      /**
       * <code>optional bool is_trustee = 2;</code>
       *
       * <pre>
       * 是否托管 true托管 false 取消托管
       * </pre>
       */
      public Builder setIsTrustee(boolean value) {
        bitField0_ |= 0x00000002;
        isTrustee_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_trustee = 2;</code>
       *
       * <pre>
       * 是否托管 true托管 false 取消托管
       * </pre>
       */
      public Builder clearIsTrustee() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isTrustee_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.TrusteeInfo)
    }

    static {
      defaultInstance = new TrusteeInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.TrusteeInfo)
  }

  public interface OutCardDataRequestSdhOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // repeated int32 change_cards_data = 3;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getChangeCardsDataList();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsDataCount();
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getChangeCardsData(int index);

    // optional int32 cards_count = 4;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 5;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 6;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 8;
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_change_cards_data = 9;
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrChangeCardsDataList();
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsDataCount();
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    int getPrChangeCardsData(int index);

    // optional int32 pr_cards_count = 10;
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 11;
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 12;
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 13;
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated string difen_bomb_des = 14;
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.util.List<java.lang.String>
    getDifenBombDesList();
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    int getDifenBombDesCount();
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    java.lang.String getDifenBombDes(int index);
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    com.google.protobuf.ByteString
        getDifenBombDesBytes(int index);

    // repeated int32 user_card_count = 15;
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCardCountList();
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCountCount();
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getUserCardCount(int index);

    // repeated .Int32ArrayResponse user_cards_data = 16;
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getUserCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getUserCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
        int index);

    // optional int32 out_card_type = 17;
    /**
     * <code>optional int32 out_card_type = 17;</code>
     *
     * <pre>
     *出牌数据 1002出牌 1003埋牌
     * </pre>
     */
    boolean hasOutCardType();
    /**
     * <code>optional int32 out_card_type = 17;</code>
     *
     * <pre>
     *出牌数据 1002出牌 1003埋牌
     * </pre>
     */
    int getOutCardType();
  }
  /**
   * Protobuf type {@code sdh.OutCardDataRequestSdh}
   */
  public static final class OutCardDataRequestSdh extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataRequestSdhOrBuilder {
    // Use OutCardDataRequestSdh.newBuilder() to construct.
    private OutCardDataRequestSdh(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataRequestSdh(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataRequestSdh defaultInstance;
    public static OutCardDataRequestSdh getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataRequestSdh getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataRequestSdh(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              changeCardsData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                changeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                changeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              prChangeCardsData_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                prChangeCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                difenBombDes_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00001000;
              }
              difenBombDes_.add(input.readBytes());
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                userCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              userCardCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                userCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                userCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00004000;
              }
              userCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 136: {
              bitField0_ |= 0x00000100;
              outCardType_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(difenBombDes_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          userCardCount_ = java.util.Collections.unmodifiableList(userCardCount_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_OutCardDataRequestSdh_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_OutCardDataRequestSdh_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh.class, protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataRequestSdh> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataRequestSdh>() {
      public OutCardDataRequestSdh parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataRequestSdh(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataRequestSdh> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // repeated int32 change_cards_data = 3;
    public static final int CHANGE_CARDS_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> changeCardsData_;
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChangeCardsDataList() {
      return changeCardsData_;
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsDataCount() {
      return changeCardsData_.size();
    }
    /**
     * <code>repeated int32 change_cards_data = 3;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getChangeCardsData(int index) {
      return changeCardsData_.get(index);
    }

    // optional int32 cards_count = 4;
    public static final int CARDS_COUNT_FIELD_NUMBER = 4;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 5;
    public static final int CARD_TYPE_FIELD_NUMBER = 5;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 6;
    public static final int CUR_PLAYER_FIELD_NUMBER = 6;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 8;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_change_cards_data = 9;
    public static final int PR_CHANGE_CARDS_DATA_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> prChangeCardsData_;
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrChangeCardsDataList() {
      return prChangeCardsData_;
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsDataCount() {
      return prChangeCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_change_cards_data = 9;</code>
     *
     * <pre>
     *变换之后的数据
     * </pre>
     */
    public int getPrChangeCardsData(int index) {
      return prChangeCardsData_.get(index);
    }

    // optional int32 pr_cards_count = 10;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 10;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 10;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 11;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 11;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 11;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 12;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 12;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 12;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 13;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 13;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 13;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated string difen_bomb_des = 14;
    public static final int DIFEN_BOMB_DES_FIELD_NUMBER = 14;
    private com.google.protobuf.LazyStringList difenBombDes_;
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.util.List<java.lang.String>
        getDifenBombDesList() {
      return difenBombDes_;
    }
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public int getDifenBombDesCount() {
      return difenBombDes_.size();
    }
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public java.lang.String getDifenBombDes(int index) {
      return difenBombDes_.get(index);
    }
    /**
     * <code>repeated string difen_bomb_des = 14;</code>
     *
     * <pre>
     *玩法说明
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDifenBombDesBytes(int index) {
      return difenBombDes_.getByteString(index);
    }

    // repeated int32 user_card_count = 15;
    public static final int USER_CARD_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> userCardCount_;
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCardCountList() {
      return userCardCount_;
    }
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCountCount() {
      return userCardCount_.size();
    }
    /**
     * <code>repeated int32 user_card_count = 15;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getUserCardCount(int index) {
      return userCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse user_cards_data = 16;
    public static final int USER_CARDS_DATA_FIELD_NUMBER = 16;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCardsDataList() {
      return userCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getUserCardsDataOrBuilderList() {
      return userCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getUserCardsDataCount() {
      return userCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index) {
      return userCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
        int index) {
      return userCardsData_.get(index);
    }

    // optional int32 out_card_type = 17;
    public static final int OUT_CARD_TYPE_FIELD_NUMBER = 17;
    private int outCardType_;
    /**
     * <code>optional int32 out_card_type = 17;</code>
     *
     * <pre>
     *出牌数据 1002出牌 1003埋牌
     * </pre>
     */
    public boolean hasOutCardType() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 out_card_type = 17;</code>
     *
     * <pre>
     *出牌数据 1002出牌 1003埋牌
     * </pre>
     */
    public int getOutCardType() {
      return outCardType_;
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      changeCardsData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prChangeCardsData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      userCardCount_ = java.util.Collections.emptyList();
      userCardsData_ = java.util.Collections.emptyList();
      outCardType_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      for (int i = 0; i < changeCardsData_.size(); i++) {
        output.writeInt32(3, changeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(8, prCardsData_.get(i));
      }
      for (int i = 0; i < prChangeCardsData_.size(); i++) {
        output.writeInt32(9, prChangeCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(10, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(11, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(12, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(13, displayTime_);
      }
      for (int i = 0; i < difenBombDes_.size(); i++) {
        output.writeBytes(14, difenBombDes_.getByteString(i));
      }
      for (int i = 0; i < userCardCount_.size(); i++) {
        output.writeInt32(15, userCardCount_.get(i));
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        output.writeMessage(16, userCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(17, outCardType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < changeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(changeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prChangeCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prChangeCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrChangeCardsDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < difenBombDes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(difenBombDes_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getDifenBombDesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCardCountList().size();
      }
      for (int i = 0; i < userCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, userCardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, outCardType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.OutCardDataRequestSdh}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdhOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_OutCardDataRequestSdh_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_OutCardDataRequestSdh_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh.class, protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00001000);
        userCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
        } else {
          userCardsDataBuilder_.clear();
        }
        outCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_OutCardDataRequestSdh_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh build() {
        protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh buildPartial() {
        protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh result = new protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = java.util.Collections.unmodifiableList(changeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.changeCardsData_ = changeCardsData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = java.util.Collections.unmodifiableList(prChangeCardsData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.prChangeCardsData_ = prChangeCardsData_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          difenBombDes_ = new com.google.protobuf.UnmodifiableLazyStringList(
              difenBombDes_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.difenBombDes_ = difenBombDes_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          userCardCount_ = java.util.Collections.unmodifiableList(userCardCount_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.userCardCount_ = userCardCount_;
        if (userCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000)) {
            userCardsData_ = java.util.Collections.unmodifiableList(userCardsData_);
            bitField0_ = (bitField0_ & ~0x00004000);
          }
          result.userCardsData_ = userCardsData_;
        } else {
          result.userCardsData_ = userCardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.outCardType_ = outCardType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh other) {
        if (other == protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (!other.changeCardsData_.isEmpty()) {
          if (changeCardsData_.isEmpty()) {
            changeCardsData_ = other.changeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureChangeCardsDataIsMutable();
            changeCardsData_.addAll(other.changeCardsData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prChangeCardsData_.isEmpty()) {
          if (prChangeCardsData_.isEmpty()) {
            prChangeCardsData_ = other.prChangeCardsData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePrChangeCardsDataIsMutable();
            prChangeCardsData_.addAll(other.prChangeCardsData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.difenBombDes_.isEmpty()) {
          if (difenBombDes_.isEmpty()) {
            difenBombDes_ = other.difenBombDes_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureDifenBombDesIsMutable();
            difenBombDes_.addAll(other.difenBombDes_);
          }
          onChanged();
        }
        if (!other.userCardCount_.isEmpty()) {
          if (userCardCount_.isEmpty()) {
            userCardCount_ = other.userCardCount_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureUserCardCountIsMutable();
            userCardCount_.addAll(other.userCardCount_);
          }
          onChanged();
        }
        if (userCardsDataBuilder_ == null) {
          if (!other.userCardsData_.isEmpty()) {
            if (userCardsData_.isEmpty()) {
              userCardsData_ = other.userCardsData_;
              bitField0_ = (bitField0_ & ~0x00004000);
            } else {
              ensureUserCardsDataIsMutable();
              userCardsData_.addAll(other.userCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.userCardsData_.isEmpty()) {
            if (userCardsDataBuilder_.isEmpty()) {
              userCardsDataBuilder_.dispose();
              userCardsDataBuilder_ = null;
              userCardsData_ = other.userCardsData_;
              bitField0_ = (bitField0_ & ~0x00004000);
              userCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUserCardsDataFieldBuilder() : null;
            } else {
              userCardsDataBuilder_.addAllMessages(other.userCardsData_);
            }
          }
        }
        if (other.hasOutCardType()) {
          setOutCardType(other.getOutCardType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.OutCardDataRequestSdh) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 change_cards_data = 3;
      private java.util.List<java.lang.Integer> changeCardsData_ = java.util.Collections.emptyList();
      private void ensureChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          changeCardsData_ = new java.util.ArrayList<java.lang.Integer>(changeCardsData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(changeCardsData_);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsDataCount() {
        return changeCardsData_.size();
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getChangeCardsData(int index) {
        return changeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setChangeCardsData(
          int index, int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addChangeCardsData(int value) {
        ensureChangeCardsDataIsMutable();
        changeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChangeCardsDataIsMutable();
        super.addAll(values, changeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 change_cards_data = 3;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearChangeCardsData() {
        changeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 4;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000008;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 5;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 6;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000020;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 8;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 pr_change_cards_data = 9;
      private java.util.List<java.lang.Integer> prChangeCardsData_ = java.util.Collections.emptyList();
      private void ensurePrChangeCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          prChangeCardsData_ = new java.util.ArrayList<java.lang.Integer>(prChangeCardsData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrChangeCardsDataList() {
        return java.util.Collections.unmodifiableList(prChangeCardsData_);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsDataCount() {
        return prChangeCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public int getPrChangeCardsData(int index) {
        return prChangeCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder setPrChangeCardsData(
          int index, int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addPrChangeCardsData(int value) {
        ensurePrChangeCardsDataIsMutable();
        prChangeCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder addAllPrChangeCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrChangeCardsDataIsMutable();
        super.addAll(values, prChangeCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_change_cards_data = 9;</code>
       *
       * <pre>
       *变换之后的数据
       * </pre>
       */
      public Builder clearPrChangeCardsData() {
        prChangeCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 10;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000100;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 10;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 11;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000200;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 11;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 12;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00000400;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 12;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 13;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000800;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 13;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated string difen_bomb_des = 14;
      private com.google.protobuf.LazyStringList difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDifenBombDesIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          difenBombDes_ = new com.google.protobuf.LazyStringArrayList(difenBombDes_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.util.List<java.lang.String>
          getDifenBombDesList() {
        return java.util.Collections.unmodifiableList(difenBombDes_);
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public int getDifenBombDesCount() {
        return difenBombDes_.size();
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public java.lang.String getDifenBombDes(int index) {
        return difenBombDes_.get(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDifenBombDesBytes(int index) {
        return difenBombDes_.getByteString(index);
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder setDifenBombDes(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDes(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addAllDifenBombDes(
          java.lang.Iterable<java.lang.String> values) {
        ensureDifenBombDesIsMutable();
        super.addAll(values, difenBombDes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder clearDifenBombDes() {
        difenBombDes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string difen_bomb_des = 14;</code>
       *
       * <pre>
       *玩法说明
       * </pre>
       */
      public Builder addDifenBombDesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDifenBombDesIsMutable();
        difenBombDes_.add(value);
        onChanged();
        return this;
      }

      // repeated int32 user_card_count = 15;
      private java.util.List<java.lang.Integer> userCardCount_ = java.util.Collections.emptyList();
      private void ensureUserCardCountIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          userCardCount_ = new java.util.ArrayList<java.lang.Integer>(userCardCount_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCardCountList() {
        return java.util.Collections.unmodifiableList(userCardCount_);
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCountCount() {
        return userCardCount_.size();
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getUserCardCount(int index) {
        return userCardCount_.get(index);
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setUserCardCount(
          int index, int value) {
        ensureUserCardCountIsMutable();
        userCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addUserCardCount(int value) {
        ensureUserCardCountIsMutable();
        userCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllUserCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCardCountIsMutable();
        super.addAll(values, userCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_card_count = 15;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearUserCardCount() {
        userCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse user_cards_data = 16;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> userCardsData_ =
        java.util.Collections.emptyList();
      private void ensureUserCardsDataIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          userCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(userCardsData_);
          bitField0_ |= 0x00004000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> userCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getUserCardsDataList() {
        if (userCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(userCardsData_);
        } else {
          return userCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getUserCardsDataCount() {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.size();
        } else {
          return userCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getUserCardsData(int index) {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.get(index);
        } else {
          return userCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.set(index, value);
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.add(value);
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (userCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserCardsDataIsMutable();
          userCardsData_.add(index, value);
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addUserCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          userCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllUserCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          super.addAll(values, userCardsData_);
          onChanged();
        } else {
          userCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearUserCardsData() {
        if (userCardsDataBuilder_ == null) {
          userCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
          onChanged();
        } else {
          userCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeUserCardsData(int index) {
        if (userCardsDataBuilder_ == null) {
          ensureUserCardsDataIsMutable();
          userCardsData_.remove(index);
          onChanged();
        } else {
          userCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getUserCardsDataBuilder(
          int index) {
        return getUserCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getUserCardsDataOrBuilder(
          int index) {
        if (userCardsDataBuilder_ == null) {
          return userCardsData_.get(index);  } else {
          return userCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getUserCardsDataOrBuilderList() {
        if (userCardsDataBuilder_ != null) {
          return userCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(userCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCardsDataBuilder() {
        return getUserCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addUserCardsDataBuilder(
          int index) {
        return getUserCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse user_cards_data = 16;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getUserCardsDataBuilderList() {
        return getUserCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getUserCardsDataFieldBuilder() {
        if (userCardsDataBuilder_ == null) {
          userCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  userCardsData_,
                  ((bitField0_ & 0x00004000) == 0x00004000),
                  getParentForChildren(),
                  isClean());
          userCardsData_ = null;
        }
        return userCardsDataBuilder_;
      }

      // optional int32 out_card_type = 17;
      private int outCardType_ ;
      /**
       * <code>optional int32 out_card_type = 17;</code>
       *
       * <pre>
       *出牌数据 1002出牌 1003埋牌
       * </pre>
       */
      public boolean hasOutCardType() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 out_card_type = 17;</code>
       *
       * <pre>
       *出牌数据 1002出牌 1003埋牌
       * </pre>
       */
      public int getOutCardType() {
        return outCardType_;
      }
      /**
       * <code>optional int32 out_card_type = 17;</code>
       *
       * <pre>
       *出牌数据 1002出牌 1003埋牌
       * </pre>
       */
      public Builder setOutCardType(int value) {
        bitField0_ |= 0x00008000;
        outCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_type = 17;</code>
       *
       * <pre>
       *出牌数据 1002出牌 1003埋牌
       * </pre>
       */
      public Builder clearOutCardType() {
        bitField0_ = (bitField0_ & ~0x00008000);
        outCardType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.OutCardDataRequestSdh)
    }

    static {
      defaultInstance = new OutCardDataRequestSdh(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.OutCardDataRequestSdh)
  }

  public interface GetScoreOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_score = 1;
    /**
     * <code>optional int32 cur_score = 1;</code>
     *
     * <pre>
     * 当前轮得分
     * </pre>
     */
    boolean hasCurScore();
    /**
     * <code>optional int32 cur_score = 1;</code>
     *
     * <pre>
     * 当前轮得分
     * </pre>
     */
    int getCurScore();

    // optional int32 all_score = 2;
    /**
     * <code>optional int32 all_score = 2;</code>
     *
     * <pre>
     * 总得分
     * </pre>
     */
    boolean hasAllScore();
    /**
     * <code>optional int32 all_score = 2;</code>
     *
     * <pre>
     * 总得分
     * </pre>
     */
    int getAllScore();
  }
  /**
   * Protobuf type {@code sdh.GetScore}
   *
   * <pre>
   * 闲家得分
   * </pre>
   */
  public static final class GetScore extends
      com.google.protobuf.GeneratedMessage
      implements GetScoreOrBuilder {
    // Use GetScore.newBuilder() to construct.
    private GetScore(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GetScore(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GetScore defaultInstance;
    public static GetScore getDefaultInstance() {
      return defaultInstance;
    }

    public GetScore getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GetScore(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curScore_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              allScore_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_GetScore_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_GetScore_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.GetScore.class, protobuf.clazz.sdh.SdhRsp.GetScore.Builder.class);
    }

    public static com.google.protobuf.Parser<GetScore> PARSER =
        new com.google.protobuf.AbstractParser<GetScore>() {
      public GetScore parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GetScore(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GetScore> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_score = 1;
    public static final int CUR_SCORE_FIELD_NUMBER = 1;
    private int curScore_;
    /**
     * <code>optional int32 cur_score = 1;</code>
     *
     * <pre>
     * 当前轮得分
     * </pre>
     */
    public boolean hasCurScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_score = 1;</code>
     *
     * <pre>
     * 当前轮得分
     * </pre>
     */
    public int getCurScore() {
      return curScore_;
    }

    // optional int32 all_score = 2;
    public static final int ALL_SCORE_FIELD_NUMBER = 2;
    private int allScore_;
    /**
     * <code>optional int32 all_score = 2;</code>
     *
     * <pre>
     * 总得分
     * </pre>
     */
    public boolean hasAllScore() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 all_score = 2;</code>
     *
     * <pre>
     * 总得分
     * </pre>
     */
    public int getAllScore() {
      return allScore_;
    }

    private void initFields() {
      curScore_ = 0;
      allScore_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curScore_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, allScore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curScore_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, allScore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.GetScore parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.GetScore parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.GetScore parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.GetScore parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.GetScore parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.GetScore parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.GetScore parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.GetScore parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.GetScore parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.GetScore parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.GetScore prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.GetScore}
     *
     * <pre>
     * 闲家得分
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.GetScoreOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_GetScore_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_GetScore_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.GetScore.class, protobuf.clazz.sdh.SdhRsp.GetScore.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.GetScore.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        allScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_GetScore_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.GetScore getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.GetScore.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.GetScore build() {
        protobuf.clazz.sdh.SdhRsp.GetScore result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.GetScore buildPartial() {
        protobuf.clazz.sdh.SdhRsp.GetScore result = new protobuf.clazz.sdh.SdhRsp.GetScore(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curScore_ = curScore_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.allScore_ = allScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.GetScore) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.GetScore)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.GetScore other) {
        if (other == protobuf.clazz.sdh.SdhRsp.GetScore.getDefaultInstance()) return this;
        if (other.hasCurScore()) {
          setCurScore(other.getCurScore());
        }
        if (other.hasAllScore()) {
          setAllScore(other.getAllScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.GetScore parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.GetScore) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_score = 1;
      private int curScore_ ;
      /**
       * <code>optional int32 cur_score = 1;</code>
       *
       * <pre>
       * 当前轮得分
       * </pre>
       */
      public boolean hasCurScore() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_score = 1;</code>
       *
       * <pre>
       * 当前轮得分
       * </pre>
       */
      public int getCurScore() {
        return curScore_;
      }
      /**
       * <code>optional int32 cur_score = 1;</code>
       *
       * <pre>
       * 当前轮得分
       * </pre>
       */
      public Builder setCurScore(int value) {
        bitField0_ |= 0x00000001;
        curScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_score = 1;</code>
       *
       * <pre>
       * 当前轮得分
       * </pre>
       */
      public Builder clearCurScore() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curScore_ = 0;
        onChanged();
        return this;
      }

      // optional int32 all_score = 2;
      private int allScore_ ;
      /**
       * <code>optional int32 all_score = 2;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public boolean hasAllScore() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 all_score = 2;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public int getAllScore() {
        return allScore_;
      }
      /**
       * <code>optional int32 all_score = 2;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public Builder setAllScore(int value) {
        bitField0_ |= 0x00000002;
        allScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 all_score = 2;</code>
       *
       * <pre>
       * 总得分
       * </pre>
       */
      public Builder clearAllScore() {
        bitField0_ = (bitField0_ & ~0x00000002);
        allScore_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.GetScore)
    }

    static {
      defaultInstance = new GetScore(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.GetScore)
  }

  public interface CallMainOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bool threeMain = 1;
    /**
     * <code>optional bool threeMain = 1;</code>
     *
     * <pre>
     * 能否三级主
     * </pre>
     */
    boolean hasThreeMain();
    /**
     * <code>optional bool threeMain = 1;</code>
     *
     * <pre>
     * 能否三级主
     * </pre>
     */
    boolean getThreeMain();

    // optional bool fourMian = 2;
    /**
     * <code>optional bool fourMian = 2;</code>
     *
     * <pre>
     * 能否四级主
     * </pre>
     */
    boolean hasFourMian();
    /**
     * <code>optional bool fourMian = 2;</code>
     *
     * <pre>
     * 能否四级主
     * </pre>
     */
    boolean getFourMian();

    // repeated int32 zhu_color = 3;
    /**
     * <code>repeated int32 zhu_color = 3;</code>
     *
     * <pre>
     * 花色主
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhuColorList();
    /**
     * <code>repeated int32 zhu_color = 3;</code>
     *
     * <pre>
     * 花色主
     * </pre>
     */
    int getZhuColorCount();
    /**
     * <code>repeated int32 zhu_color = 3;</code>
     *
     * <pre>
     * 花色主
     * </pre>
     */
    int getZhuColor(int index);

    // repeated .sdh.MainInfo main_info_three = 4;
    /**
     * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
     *
     * <pre>
     * 三级主信息
     * </pre>
     */
    java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> 
        getMainInfoThreeList();
    /**
     * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
     *
     * <pre>
     * 三级主信息
     * </pre>
     */
    protobuf.clazz.sdh.SdhRsp.MainInfo getMainInfoThree(int index);
    /**
     * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
     *
     * <pre>
     * 三级主信息
     * </pre>
     */
    int getMainInfoThreeCount();
    /**
     * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
     *
     * <pre>
     * 三级主信息
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
        getMainInfoThreeOrBuilderList();
    /**
     * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
     *
     * <pre>
     * 三级主信息
     * </pre>
     */
    protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder getMainInfoThreeOrBuilder(
        int index);

    // repeated .sdh.MainInfo main_info_four = 5;
    /**
     * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
     *
     * <pre>
     * 四级主信息
     * </pre>
     */
    java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> 
        getMainInfoFourList();
    /**
     * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
     *
     * <pre>
     * 四级主信息
     * </pre>
     */
    protobuf.clazz.sdh.SdhRsp.MainInfo getMainInfoFour(int index);
    /**
     * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
     *
     * <pre>
     * 四级主信息
     * </pre>
     */
    int getMainInfoFourCount();
    /**
     * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
     *
     * <pre>
     * 四级主信息
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
        getMainInfoFourOrBuilderList();
    /**
     * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
     *
     * <pre>
     * 四级主信息
     * </pre>
     */
    protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder getMainInfoFourOrBuilder(
        int index);

    // repeated .sdh.MainInfo main_info_color = 6;
    /**
     * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
     *
     * <pre>
     * 花色主信息 ：花色相当于下标
     * </pre>
     */
    java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> 
        getMainInfoColorList();
    /**
     * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
     *
     * <pre>
     * 花色主信息 ：花色相当于下标
     * </pre>
     */
    protobuf.clazz.sdh.SdhRsp.MainInfo getMainInfoColor(int index);
    /**
     * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
     *
     * <pre>
     * 花色主信息 ：花色相当于下标
     * </pre>
     */
    int getMainInfoColorCount();
    /**
     * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
     *
     * <pre>
     * 花色主信息 ：花色相当于下标
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
        getMainInfoColorOrBuilderList();
    /**
     * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
     *
     * <pre>
     * 花色主信息 ：花色相当于下标
     * </pre>
     */
    protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder getMainInfoColorOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code sdh.CallMain}
   *
   * <pre>
   *叫主:反主消息
   * </pre>
   */
  public static final class CallMain extends
      com.google.protobuf.GeneratedMessage
      implements CallMainOrBuilder {
    // Use CallMain.newBuilder() to construct.
    private CallMain(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallMain(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallMain defaultInstance;
    public static CallMain getDefaultInstance() {
      return defaultInstance;
    }

    public CallMain getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallMain(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              threeMain_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              fourMian_ = input.readBool();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                zhuColor_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              zhuColor_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                zhuColor_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhuColor_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                mainInfoThree_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.MainInfo>();
                mutable_bitField0_ |= 0x00000008;
              }
              mainInfoThree_.add(input.readMessage(protobuf.clazz.sdh.SdhRsp.MainInfo.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                mainInfoFour_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.MainInfo>();
                mutable_bitField0_ |= 0x00000010;
              }
              mainInfoFour_.add(input.readMessage(protobuf.clazz.sdh.SdhRsp.MainInfo.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                mainInfoColor_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.MainInfo>();
                mutable_bitField0_ |= 0x00000020;
              }
              mainInfoColor_.add(input.readMessage(protobuf.clazz.sdh.SdhRsp.MainInfo.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          zhuColor_ = java.util.Collections.unmodifiableList(zhuColor_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          mainInfoThree_ = java.util.Collections.unmodifiableList(mainInfoThree_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          mainInfoFour_ = java.util.Collections.unmodifiableList(mainInfoFour_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          mainInfoColor_ = java.util.Collections.unmodifiableList(mainInfoColor_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallMain_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallMain_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.CallMain.class, protobuf.clazz.sdh.SdhRsp.CallMain.Builder.class);
    }

    public static com.google.protobuf.Parser<CallMain> PARSER =
        new com.google.protobuf.AbstractParser<CallMain>() {
      public CallMain parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallMain(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallMain> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool threeMain = 1;
    public static final int THREEMAIN_FIELD_NUMBER = 1;
    private boolean threeMain_;
    /**
     * <code>optional bool threeMain = 1;</code>
     *
     * <pre>
     * 能否三级主
     * </pre>
     */
    public boolean hasThreeMain() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool threeMain = 1;</code>
     *
     * <pre>
     * 能否三级主
     * </pre>
     */
    public boolean getThreeMain() {
      return threeMain_;
    }

    // optional bool fourMian = 2;
    public static final int FOURMIAN_FIELD_NUMBER = 2;
    private boolean fourMian_;
    /**
     * <code>optional bool fourMian = 2;</code>
     *
     * <pre>
     * 能否四级主
     * </pre>
     */
    public boolean hasFourMian() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool fourMian = 2;</code>
     *
     * <pre>
     * 能否四级主
     * </pre>
     */
    public boolean getFourMian() {
      return fourMian_;
    }

    // repeated int32 zhu_color = 3;
    public static final int ZHU_COLOR_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> zhuColor_;
    /**
     * <code>repeated int32 zhu_color = 3;</code>
     *
     * <pre>
     * 花色主
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhuColorList() {
      return zhuColor_;
    }
    /**
     * <code>repeated int32 zhu_color = 3;</code>
     *
     * <pre>
     * 花色主
     * </pre>
     */
    public int getZhuColorCount() {
      return zhuColor_.size();
    }
    /**
     * <code>repeated int32 zhu_color = 3;</code>
     *
     * <pre>
     * 花色主
     * </pre>
     */
    public int getZhuColor(int index) {
      return zhuColor_.get(index);
    }

    // repeated .sdh.MainInfo main_info_three = 4;
    public static final int MAIN_INFO_THREE_FIELD_NUMBER = 4;
    private java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> mainInfoThree_;
    /**
     * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
     *
     * <pre>
     * 三级主信息
     * </pre>
     */
    public java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> getMainInfoThreeList() {
      return mainInfoThree_;
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
     *
     * <pre>
     * 三级主信息
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
        getMainInfoThreeOrBuilderList() {
      return mainInfoThree_;
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
     *
     * <pre>
     * 三级主信息
     * </pre>
     */
    public int getMainInfoThreeCount() {
      return mainInfoThree_.size();
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
     *
     * <pre>
     * 三级主信息
     * </pre>
     */
    public protobuf.clazz.sdh.SdhRsp.MainInfo getMainInfoThree(int index) {
      return mainInfoThree_.get(index);
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
     *
     * <pre>
     * 三级主信息
     * </pre>
     */
    public protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder getMainInfoThreeOrBuilder(
        int index) {
      return mainInfoThree_.get(index);
    }

    // repeated .sdh.MainInfo main_info_four = 5;
    public static final int MAIN_INFO_FOUR_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> mainInfoFour_;
    /**
     * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
     *
     * <pre>
     * 四级主信息
     * </pre>
     */
    public java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> getMainInfoFourList() {
      return mainInfoFour_;
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
     *
     * <pre>
     * 四级主信息
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
        getMainInfoFourOrBuilderList() {
      return mainInfoFour_;
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
     *
     * <pre>
     * 四级主信息
     * </pre>
     */
    public int getMainInfoFourCount() {
      return mainInfoFour_.size();
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
     *
     * <pre>
     * 四级主信息
     * </pre>
     */
    public protobuf.clazz.sdh.SdhRsp.MainInfo getMainInfoFour(int index) {
      return mainInfoFour_.get(index);
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
     *
     * <pre>
     * 四级主信息
     * </pre>
     */
    public protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder getMainInfoFourOrBuilder(
        int index) {
      return mainInfoFour_.get(index);
    }

    // repeated .sdh.MainInfo main_info_color = 6;
    public static final int MAIN_INFO_COLOR_FIELD_NUMBER = 6;
    private java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> mainInfoColor_;
    /**
     * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
     *
     * <pre>
     * 花色主信息 ：花色相当于下标
     * </pre>
     */
    public java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> getMainInfoColorList() {
      return mainInfoColor_;
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
     *
     * <pre>
     * 花色主信息 ：花色相当于下标
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
        getMainInfoColorOrBuilderList() {
      return mainInfoColor_;
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
     *
     * <pre>
     * 花色主信息 ：花色相当于下标
     * </pre>
     */
    public int getMainInfoColorCount() {
      return mainInfoColor_.size();
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
     *
     * <pre>
     * 花色主信息 ：花色相当于下标
     * </pre>
     */
    public protobuf.clazz.sdh.SdhRsp.MainInfo getMainInfoColor(int index) {
      return mainInfoColor_.get(index);
    }
    /**
     * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
     *
     * <pre>
     * 花色主信息 ：花色相当于下标
     * </pre>
     */
    public protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder getMainInfoColorOrBuilder(
        int index) {
      return mainInfoColor_.get(index);
    }

    private void initFields() {
      threeMain_ = false;
      fourMian_ = false;
      zhuColor_ = java.util.Collections.emptyList();
      mainInfoThree_ = java.util.Collections.emptyList();
      mainInfoFour_ = java.util.Collections.emptyList();
      mainInfoColor_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, threeMain_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, fourMian_);
      }
      for (int i = 0; i < zhuColor_.size(); i++) {
        output.writeInt32(3, zhuColor_.get(i));
      }
      for (int i = 0; i < mainInfoThree_.size(); i++) {
        output.writeMessage(4, mainInfoThree_.get(i));
      }
      for (int i = 0; i < mainInfoFour_.size(); i++) {
        output.writeMessage(5, mainInfoFour_.get(i));
      }
      for (int i = 0; i < mainInfoColor_.size(); i++) {
        output.writeMessage(6, mainInfoColor_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, threeMain_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, fourMian_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < zhuColor_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhuColor_.get(i));
        }
        size += dataSize;
        size += 1 * getZhuColorList().size();
      }
      for (int i = 0; i < mainInfoThree_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, mainInfoThree_.get(i));
      }
      for (int i = 0; i < mainInfoFour_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, mainInfoFour_.get(i));
      }
      for (int i = 0; i < mainInfoColor_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, mainInfoColor_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.CallMain parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMain parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMain parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMain parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMain parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMain parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMain parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMain parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMain parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.CallMain parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.CallMain prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.CallMain}
     *
     * <pre>
     *叫主:反主消息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.CallMainOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallMain_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallMain_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.CallMain.class, protobuf.clazz.sdh.SdhRsp.CallMain.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.CallMain.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMainInfoThreeFieldBuilder();
          getMainInfoFourFieldBuilder();
          getMainInfoColorFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        threeMain_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        fourMian_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        zhuColor_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        if (mainInfoThreeBuilder_ == null) {
          mainInfoThree_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          mainInfoThreeBuilder_.clear();
        }
        if (mainInfoFourBuilder_ == null) {
          mainInfoFour_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          mainInfoFourBuilder_.clear();
        }
        if (mainInfoColorBuilder_ == null) {
          mainInfoColor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          mainInfoColorBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_CallMain_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.CallMain getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.CallMain.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.CallMain build() {
        protobuf.clazz.sdh.SdhRsp.CallMain result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.CallMain buildPartial() {
        protobuf.clazz.sdh.SdhRsp.CallMain result = new protobuf.clazz.sdh.SdhRsp.CallMain(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.threeMain_ = threeMain_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fourMian_ = fourMian_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          zhuColor_ = java.util.Collections.unmodifiableList(zhuColor_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.zhuColor_ = zhuColor_;
        if (mainInfoThreeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            mainInfoThree_ = java.util.Collections.unmodifiableList(mainInfoThree_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.mainInfoThree_ = mainInfoThree_;
        } else {
          result.mainInfoThree_ = mainInfoThreeBuilder_.build();
        }
        if (mainInfoFourBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            mainInfoFour_ = java.util.Collections.unmodifiableList(mainInfoFour_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.mainInfoFour_ = mainInfoFour_;
        } else {
          result.mainInfoFour_ = mainInfoFourBuilder_.build();
        }
        if (mainInfoColorBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            mainInfoColor_ = java.util.Collections.unmodifiableList(mainInfoColor_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.mainInfoColor_ = mainInfoColor_;
        } else {
          result.mainInfoColor_ = mainInfoColorBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.CallMain) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.CallMain)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.CallMain other) {
        if (other == protobuf.clazz.sdh.SdhRsp.CallMain.getDefaultInstance()) return this;
        if (other.hasThreeMain()) {
          setThreeMain(other.getThreeMain());
        }
        if (other.hasFourMian()) {
          setFourMian(other.getFourMian());
        }
        if (!other.zhuColor_.isEmpty()) {
          if (zhuColor_.isEmpty()) {
            zhuColor_ = other.zhuColor_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureZhuColorIsMutable();
            zhuColor_.addAll(other.zhuColor_);
          }
          onChanged();
        }
        if (mainInfoThreeBuilder_ == null) {
          if (!other.mainInfoThree_.isEmpty()) {
            if (mainInfoThree_.isEmpty()) {
              mainInfoThree_ = other.mainInfoThree_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMainInfoThreeIsMutable();
              mainInfoThree_.addAll(other.mainInfoThree_);
            }
            onChanged();
          }
        } else {
          if (!other.mainInfoThree_.isEmpty()) {
            if (mainInfoThreeBuilder_.isEmpty()) {
              mainInfoThreeBuilder_.dispose();
              mainInfoThreeBuilder_ = null;
              mainInfoThree_ = other.mainInfoThree_;
              bitField0_ = (bitField0_ & ~0x00000008);
              mainInfoThreeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMainInfoThreeFieldBuilder() : null;
            } else {
              mainInfoThreeBuilder_.addAllMessages(other.mainInfoThree_);
            }
          }
        }
        if (mainInfoFourBuilder_ == null) {
          if (!other.mainInfoFour_.isEmpty()) {
            if (mainInfoFour_.isEmpty()) {
              mainInfoFour_ = other.mainInfoFour_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureMainInfoFourIsMutable();
              mainInfoFour_.addAll(other.mainInfoFour_);
            }
            onChanged();
          }
        } else {
          if (!other.mainInfoFour_.isEmpty()) {
            if (mainInfoFourBuilder_.isEmpty()) {
              mainInfoFourBuilder_.dispose();
              mainInfoFourBuilder_ = null;
              mainInfoFour_ = other.mainInfoFour_;
              bitField0_ = (bitField0_ & ~0x00000010);
              mainInfoFourBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMainInfoFourFieldBuilder() : null;
            } else {
              mainInfoFourBuilder_.addAllMessages(other.mainInfoFour_);
            }
          }
        }
        if (mainInfoColorBuilder_ == null) {
          if (!other.mainInfoColor_.isEmpty()) {
            if (mainInfoColor_.isEmpty()) {
              mainInfoColor_ = other.mainInfoColor_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureMainInfoColorIsMutable();
              mainInfoColor_.addAll(other.mainInfoColor_);
            }
            onChanged();
          }
        } else {
          if (!other.mainInfoColor_.isEmpty()) {
            if (mainInfoColorBuilder_.isEmpty()) {
              mainInfoColorBuilder_.dispose();
              mainInfoColorBuilder_ = null;
              mainInfoColor_ = other.mainInfoColor_;
              bitField0_ = (bitField0_ & ~0x00000020);
              mainInfoColorBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMainInfoColorFieldBuilder() : null;
            } else {
              mainInfoColorBuilder_.addAllMessages(other.mainInfoColor_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.CallMain parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.CallMain) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool threeMain = 1;
      private boolean threeMain_ ;
      /**
       * <code>optional bool threeMain = 1;</code>
       *
       * <pre>
       * 能否三级主
       * </pre>
       */
      public boolean hasThreeMain() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool threeMain = 1;</code>
       *
       * <pre>
       * 能否三级主
       * </pre>
       */
      public boolean getThreeMain() {
        return threeMain_;
      }
      /**
       * <code>optional bool threeMain = 1;</code>
       *
       * <pre>
       * 能否三级主
       * </pre>
       */
      public Builder setThreeMain(boolean value) {
        bitField0_ |= 0x00000001;
        threeMain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool threeMain = 1;</code>
       *
       * <pre>
       * 能否三级主
       * </pre>
       */
      public Builder clearThreeMain() {
        bitField0_ = (bitField0_ & ~0x00000001);
        threeMain_ = false;
        onChanged();
        return this;
      }

      // optional bool fourMian = 2;
      private boolean fourMian_ ;
      /**
       * <code>optional bool fourMian = 2;</code>
       *
       * <pre>
       * 能否四级主
       * </pre>
       */
      public boolean hasFourMian() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool fourMian = 2;</code>
       *
       * <pre>
       * 能否四级主
       * </pre>
       */
      public boolean getFourMian() {
        return fourMian_;
      }
      /**
       * <code>optional bool fourMian = 2;</code>
       *
       * <pre>
       * 能否四级主
       * </pre>
       */
      public Builder setFourMian(boolean value) {
        bitField0_ |= 0x00000002;
        fourMian_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool fourMian = 2;</code>
       *
       * <pre>
       * 能否四级主
       * </pre>
       */
      public Builder clearFourMian() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fourMian_ = false;
        onChanged();
        return this;
      }

      // repeated int32 zhu_color = 3;
      private java.util.List<java.lang.Integer> zhuColor_ = java.util.Collections.emptyList();
      private void ensureZhuColorIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          zhuColor_ = new java.util.ArrayList<java.lang.Integer>(zhuColor_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 zhu_color = 3;</code>
       *
       * <pre>
       * 花色主
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhuColorList() {
        return java.util.Collections.unmodifiableList(zhuColor_);
      }
      /**
       * <code>repeated int32 zhu_color = 3;</code>
       *
       * <pre>
       * 花色主
       * </pre>
       */
      public int getZhuColorCount() {
        return zhuColor_.size();
      }
      /**
       * <code>repeated int32 zhu_color = 3;</code>
       *
       * <pre>
       * 花色主
       * </pre>
       */
      public int getZhuColor(int index) {
        return zhuColor_.get(index);
      }
      /**
       * <code>repeated int32 zhu_color = 3;</code>
       *
       * <pre>
       * 花色主
       * </pre>
       */
      public Builder setZhuColor(
          int index, int value) {
        ensureZhuColorIsMutable();
        zhuColor_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_color = 3;</code>
       *
       * <pre>
       * 花色主
       * </pre>
       */
      public Builder addZhuColor(int value) {
        ensureZhuColorIsMutable();
        zhuColor_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_color = 3;</code>
       *
       * <pre>
       * 花色主
       * </pre>
       */
      public Builder addAllZhuColor(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhuColorIsMutable();
        super.addAll(values, zhuColor_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhu_color = 3;</code>
       *
       * <pre>
       * 花色主
       * </pre>
       */
      public Builder clearZhuColor() {
        zhuColor_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated .sdh.MainInfo main_info_three = 4;
      private java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> mainInfoThree_ =
        java.util.Collections.emptyList();
      private void ensureMainInfoThreeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          mainInfoThree_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.MainInfo>(mainInfoThree_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.MainInfo, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder, protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> mainInfoThreeBuilder_;

      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> getMainInfoThreeList() {
        if (mainInfoThreeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mainInfoThree_);
        } else {
          return mainInfoThreeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public int getMainInfoThreeCount() {
        if (mainInfoThreeBuilder_ == null) {
          return mainInfoThree_.size();
        } else {
          return mainInfoThreeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo getMainInfoThree(int index) {
        if (mainInfoThreeBuilder_ == null) {
          return mainInfoThree_.get(index);
        } else {
          return mainInfoThreeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public Builder setMainInfoThree(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo value) {
        if (mainInfoThreeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainInfoThreeIsMutable();
          mainInfoThree_.set(index, value);
          onChanged();
        } else {
          mainInfoThreeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public Builder setMainInfoThree(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder builderForValue) {
        if (mainInfoThreeBuilder_ == null) {
          ensureMainInfoThreeIsMutable();
          mainInfoThree_.set(index, builderForValue.build());
          onChanged();
        } else {
          mainInfoThreeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public Builder addMainInfoThree(protobuf.clazz.sdh.SdhRsp.MainInfo value) {
        if (mainInfoThreeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainInfoThreeIsMutable();
          mainInfoThree_.add(value);
          onChanged();
        } else {
          mainInfoThreeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public Builder addMainInfoThree(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo value) {
        if (mainInfoThreeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainInfoThreeIsMutable();
          mainInfoThree_.add(index, value);
          onChanged();
        } else {
          mainInfoThreeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public Builder addMainInfoThree(
          protobuf.clazz.sdh.SdhRsp.MainInfo.Builder builderForValue) {
        if (mainInfoThreeBuilder_ == null) {
          ensureMainInfoThreeIsMutable();
          mainInfoThree_.add(builderForValue.build());
          onChanged();
        } else {
          mainInfoThreeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public Builder addMainInfoThree(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder builderForValue) {
        if (mainInfoThreeBuilder_ == null) {
          ensureMainInfoThreeIsMutable();
          mainInfoThree_.add(index, builderForValue.build());
          onChanged();
        } else {
          mainInfoThreeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public Builder addAllMainInfoThree(
          java.lang.Iterable<? extends protobuf.clazz.sdh.SdhRsp.MainInfo> values) {
        if (mainInfoThreeBuilder_ == null) {
          ensureMainInfoThreeIsMutable();
          super.addAll(values, mainInfoThree_);
          onChanged();
        } else {
          mainInfoThreeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public Builder clearMainInfoThree() {
        if (mainInfoThreeBuilder_ == null) {
          mainInfoThree_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          mainInfoThreeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public Builder removeMainInfoThree(int index) {
        if (mainInfoThreeBuilder_ == null) {
          ensureMainInfoThreeIsMutable();
          mainInfoThree_.remove(index);
          onChanged();
        } else {
          mainInfoThreeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo.Builder getMainInfoThreeBuilder(
          int index) {
        return getMainInfoThreeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder getMainInfoThreeOrBuilder(
          int index) {
        if (mainInfoThreeBuilder_ == null) {
          return mainInfoThree_.get(index);  } else {
          return mainInfoThreeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
           getMainInfoThreeOrBuilderList() {
        if (mainInfoThreeBuilder_ != null) {
          return mainInfoThreeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mainInfoThree_);
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo.Builder addMainInfoThreeBuilder() {
        return getMainInfoThreeFieldBuilder().addBuilder(
            protobuf.clazz.sdh.SdhRsp.MainInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo.Builder addMainInfoThreeBuilder(
          int index) {
        return getMainInfoThreeFieldBuilder().addBuilder(
            index, protobuf.clazz.sdh.SdhRsp.MainInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_three = 4;</code>
       *
       * <pre>
       * 三级主信息
       * </pre>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo.Builder> 
           getMainInfoThreeBuilderList() {
        return getMainInfoThreeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.MainInfo, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder, protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
          getMainInfoThreeFieldBuilder() {
        if (mainInfoThreeBuilder_ == null) {
          mainInfoThreeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.sdh.SdhRsp.MainInfo, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder, protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder>(
                  mainInfoThree_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          mainInfoThree_ = null;
        }
        return mainInfoThreeBuilder_;
      }

      // repeated .sdh.MainInfo main_info_four = 5;
      private java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> mainInfoFour_ =
        java.util.Collections.emptyList();
      private void ensureMainInfoFourIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          mainInfoFour_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.MainInfo>(mainInfoFour_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.MainInfo, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder, protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> mainInfoFourBuilder_;

      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> getMainInfoFourList() {
        if (mainInfoFourBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mainInfoFour_);
        } else {
          return mainInfoFourBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public int getMainInfoFourCount() {
        if (mainInfoFourBuilder_ == null) {
          return mainInfoFour_.size();
        } else {
          return mainInfoFourBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo getMainInfoFour(int index) {
        if (mainInfoFourBuilder_ == null) {
          return mainInfoFour_.get(index);
        } else {
          return mainInfoFourBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public Builder setMainInfoFour(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo value) {
        if (mainInfoFourBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainInfoFourIsMutable();
          mainInfoFour_.set(index, value);
          onChanged();
        } else {
          mainInfoFourBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public Builder setMainInfoFour(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder builderForValue) {
        if (mainInfoFourBuilder_ == null) {
          ensureMainInfoFourIsMutable();
          mainInfoFour_.set(index, builderForValue.build());
          onChanged();
        } else {
          mainInfoFourBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public Builder addMainInfoFour(protobuf.clazz.sdh.SdhRsp.MainInfo value) {
        if (mainInfoFourBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainInfoFourIsMutable();
          mainInfoFour_.add(value);
          onChanged();
        } else {
          mainInfoFourBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public Builder addMainInfoFour(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo value) {
        if (mainInfoFourBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainInfoFourIsMutable();
          mainInfoFour_.add(index, value);
          onChanged();
        } else {
          mainInfoFourBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public Builder addMainInfoFour(
          protobuf.clazz.sdh.SdhRsp.MainInfo.Builder builderForValue) {
        if (mainInfoFourBuilder_ == null) {
          ensureMainInfoFourIsMutable();
          mainInfoFour_.add(builderForValue.build());
          onChanged();
        } else {
          mainInfoFourBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public Builder addMainInfoFour(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder builderForValue) {
        if (mainInfoFourBuilder_ == null) {
          ensureMainInfoFourIsMutable();
          mainInfoFour_.add(index, builderForValue.build());
          onChanged();
        } else {
          mainInfoFourBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public Builder addAllMainInfoFour(
          java.lang.Iterable<? extends protobuf.clazz.sdh.SdhRsp.MainInfo> values) {
        if (mainInfoFourBuilder_ == null) {
          ensureMainInfoFourIsMutable();
          super.addAll(values, mainInfoFour_);
          onChanged();
        } else {
          mainInfoFourBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public Builder clearMainInfoFour() {
        if (mainInfoFourBuilder_ == null) {
          mainInfoFour_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          mainInfoFourBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public Builder removeMainInfoFour(int index) {
        if (mainInfoFourBuilder_ == null) {
          ensureMainInfoFourIsMutable();
          mainInfoFour_.remove(index);
          onChanged();
        } else {
          mainInfoFourBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo.Builder getMainInfoFourBuilder(
          int index) {
        return getMainInfoFourFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder getMainInfoFourOrBuilder(
          int index) {
        if (mainInfoFourBuilder_ == null) {
          return mainInfoFour_.get(index);  } else {
          return mainInfoFourBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
           getMainInfoFourOrBuilderList() {
        if (mainInfoFourBuilder_ != null) {
          return mainInfoFourBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mainInfoFour_);
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo.Builder addMainInfoFourBuilder() {
        return getMainInfoFourFieldBuilder().addBuilder(
            protobuf.clazz.sdh.SdhRsp.MainInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo.Builder addMainInfoFourBuilder(
          int index) {
        return getMainInfoFourFieldBuilder().addBuilder(
            index, protobuf.clazz.sdh.SdhRsp.MainInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_four = 5;</code>
       *
       * <pre>
       * 四级主信息
       * </pre>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo.Builder> 
           getMainInfoFourBuilderList() {
        return getMainInfoFourFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.MainInfo, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder, protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
          getMainInfoFourFieldBuilder() {
        if (mainInfoFourBuilder_ == null) {
          mainInfoFourBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.sdh.SdhRsp.MainInfo, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder, protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder>(
                  mainInfoFour_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          mainInfoFour_ = null;
        }
        return mainInfoFourBuilder_;
      }

      // repeated .sdh.MainInfo main_info_color = 6;
      private java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> mainInfoColor_ =
        java.util.Collections.emptyList();
      private void ensureMainInfoColorIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          mainInfoColor_ = new java.util.ArrayList<protobuf.clazz.sdh.SdhRsp.MainInfo>(mainInfoColor_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.MainInfo, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder, protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> mainInfoColorBuilder_;

      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo> getMainInfoColorList() {
        if (mainInfoColorBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mainInfoColor_);
        } else {
          return mainInfoColorBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public int getMainInfoColorCount() {
        if (mainInfoColorBuilder_ == null) {
          return mainInfoColor_.size();
        } else {
          return mainInfoColorBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo getMainInfoColor(int index) {
        if (mainInfoColorBuilder_ == null) {
          return mainInfoColor_.get(index);
        } else {
          return mainInfoColorBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public Builder setMainInfoColor(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo value) {
        if (mainInfoColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainInfoColorIsMutable();
          mainInfoColor_.set(index, value);
          onChanged();
        } else {
          mainInfoColorBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public Builder setMainInfoColor(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder builderForValue) {
        if (mainInfoColorBuilder_ == null) {
          ensureMainInfoColorIsMutable();
          mainInfoColor_.set(index, builderForValue.build());
          onChanged();
        } else {
          mainInfoColorBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public Builder addMainInfoColor(protobuf.clazz.sdh.SdhRsp.MainInfo value) {
        if (mainInfoColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainInfoColorIsMutable();
          mainInfoColor_.add(value);
          onChanged();
        } else {
          mainInfoColorBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public Builder addMainInfoColor(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo value) {
        if (mainInfoColorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMainInfoColorIsMutable();
          mainInfoColor_.add(index, value);
          onChanged();
        } else {
          mainInfoColorBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public Builder addMainInfoColor(
          protobuf.clazz.sdh.SdhRsp.MainInfo.Builder builderForValue) {
        if (mainInfoColorBuilder_ == null) {
          ensureMainInfoColorIsMutable();
          mainInfoColor_.add(builderForValue.build());
          onChanged();
        } else {
          mainInfoColorBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public Builder addMainInfoColor(
          int index, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder builderForValue) {
        if (mainInfoColorBuilder_ == null) {
          ensureMainInfoColorIsMutable();
          mainInfoColor_.add(index, builderForValue.build());
          onChanged();
        } else {
          mainInfoColorBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public Builder addAllMainInfoColor(
          java.lang.Iterable<? extends protobuf.clazz.sdh.SdhRsp.MainInfo> values) {
        if (mainInfoColorBuilder_ == null) {
          ensureMainInfoColorIsMutable();
          super.addAll(values, mainInfoColor_);
          onChanged();
        } else {
          mainInfoColorBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public Builder clearMainInfoColor() {
        if (mainInfoColorBuilder_ == null) {
          mainInfoColor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          mainInfoColorBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public Builder removeMainInfoColor(int index) {
        if (mainInfoColorBuilder_ == null) {
          ensureMainInfoColorIsMutable();
          mainInfoColor_.remove(index);
          onChanged();
        } else {
          mainInfoColorBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo.Builder getMainInfoColorBuilder(
          int index) {
        return getMainInfoColorFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder getMainInfoColorOrBuilder(
          int index) {
        if (mainInfoColorBuilder_ == null) {
          return mainInfoColor_.get(index);  } else {
          return mainInfoColorBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
           getMainInfoColorOrBuilderList() {
        if (mainInfoColorBuilder_ != null) {
          return mainInfoColorBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mainInfoColor_);
        }
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo.Builder addMainInfoColorBuilder() {
        return getMainInfoColorFieldBuilder().addBuilder(
            protobuf.clazz.sdh.SdhRsp.MainInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public protobuf.clazz.sdh.SdhRsp.MainInfo.Builder addMainInfoColorBuilder(
          int index) {
        return getMainInfoColorFieldBuilder().addBuilder(
            index, protobuf.clazz.sdh.SdhRsp.MainInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .sdh.MainInfo main_info_color = 6;</code>
       *
       * <pre>
       * 花色主信息 ：花色相当于下标
       * </pre>
       */
      public java.util.List<protobuf.clazz.sdh.SdhRsp.MainInfo.Builder> 
           getMainInfoColorBuilderList() {
        return getMainInfoColorFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.sdh.SdhRsp.MainInfo, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder, protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder> 
          getMainInfoColorFieldBuilder() {
        if (mainInfoColorBuilder_ == null) {
          mainInfoColorBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.sdh.SdhRsp.MainInfo, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder, protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder>(
                  mainInfoColor_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          mainInfoColor_ = null;
        }
        return mainInfoColorBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:sdh.CallMain)
    }

    static {
      defaultInstance = new CallMain(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.CallMain)
  }

  public interface MainInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 main_card = 1;
    /**
     * <code>repeated int32 main_card = 1;</code>
     *
     * <pre>
     *主消息
     * </pre>
     */
    java.util.List<java.lang.Integer> getMainCardList();
    /**
     * <code>repeated int32 main_card = 1;</code>
     *
     * <pre>
     *主消息
     * </pre>
     */
    int getMainCardCount();
    /**
     * <code>repeated int32 main_card = 1;</code>
     *
     * <pre>
     *主消息
     * </pre>
     */
    int getMainCard(int index);
  }
  /**
   * Protobuf type {@code sdh.MainInfo}
   */
  public static final class MainInfo extends
      com.google.protobuf.GeneratedMessage
      implements MainInfoOrBuilder {
    // Use MainInfo.newBuilder() to construct.
    private MainInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MainInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MainInfo defaultInstance;
    public static MainInfo getDefaultInstance() {
      return defaultInstance;
    }

    public MainInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MainInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                mainCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              mainCard_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                mainCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                mainCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          mainCard_ = java.util.Collections.unmodifiableList(mainCard_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_MainInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_MainInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.MainInfo.class, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<MainInfo> PARSER =
        new com.google.protobuf.AbstractParser<MainInfo>() {
      public MainInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MainInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MainInfo> getParserForType() {
      return PARSER;
    }

    // repeated int32 main_card = 1;
    public static final int MAIN_CARD_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> mainCard_;
    /**
     * <code>repeated int32 main_card = 1;</code>
     *
     * <pre>
     *主消息
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMainCardList() {
      return mainCard_;
    }
    /**
     * <code>repeated int32 main_card = 1;</code>
     *
     * <pre>
     *主消息
     * </pre>
     */
    public int getMainCardCount() {
      return mainCard_.size();
    }
    /**
     * <code>repeated int32 main_card = 1;</code>
     *
     * <pre>
     *主消息
     * </pre>
     */
    public int getMainCard(int index) {
      return mainCard_.get(index);
    }

    private void initFields() {
      mainCard_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < mainCard_.size(); i++) {
        output.writeInt32(1, mainCard_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < mainCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mainCard_.get(i));
        }
        size += dataSize;
        size += 1 * getMainCardList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.MainInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.MainInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.MainInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.MainInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.MainInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.MainInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.MainInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.MainInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.MainInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.MainInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.MainInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.MainInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.MainInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_MainInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_MainInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.MainInfo.class, protobuf.clazz.sdh.SdhRsp.MainInfo.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.MainInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        mainCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_MainInfo_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.MainInfo getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.MainInfo.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.MainInfo build() {
        protobuf.clazz.sdh.SdhRsp.MainInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.MainInfo buildPartial() {
        protobuf.clazz.sdh.SdhRsp.MainInfo result = new protobuf.clazz.sdh.SdhRsp.MainInfo(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          mainCard_ = java.util.Collections.unmodifiableList(mainCard_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.mainCard_ = mainCard_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.MainInfo) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.MainInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.MainInfo other) {
        if (other == protobuf.clazz.sdh.SdhRsp.MainInfo.getDefaultInstance()) return this;
        if (!other.mainCard_.isEmpty()) {
          if (mainCard_.isEmpty()) {
            mainCard_ = other.mainCard_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureMainCardIsMutable();
            mainCard_.addAll(other.mainCard_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.MainInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.MainInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 main_card = 1;
      private java.util.List<java.lang.Integer> mainCard_ = java.util.Collections.emptyList();
      private void ensureMainCardIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          mainCard_ = new java.util.ArrayList<java.lang.Integer>(mainCard_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 main_card = 1;</code>
       *
       * <pre>
       *主消息
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMainCardList() {
        return java.util.Collections.unmodifiableList(mainCard_);
      }
      /**
       * <code>repeated int32 main_card = 1;</code>
       *
       * <pre>
       *主消息
       * </pre>
       */
      public int getMainCardCount() {
        return mainCard_.size();
      }
      /**
       * <code>repeated int32 main_card = 1;</code>
       *
       * <pre>
       *主消息
       * </pre>
       */
      public int getMainCard(int index) {
        return mainCard_.get(index);
      }
      /**
       * <code>repeated int32 main_card = 1;</code>
       *
       * <pre>
       *主消息
       * </pre>
       */
      public Builder setMainCard(
          int index, int value) {
        ensureMainCardIsMutable();
        mainCard_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_card = 1;</code>
       *
       * <pre>
       *主消息
       * </pre>
       */
      public Builder addMainCard(int value) {
        ensureMainCardIsMutable();
        mainCard_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_card = 1;</code>
       *
       * <pre>
       *主消息
       * </pre>
       */
      public Builder addAllMainCard(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMainCardIsMutable();
        super.addAll(values, mainCard_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 main_card = 1;</code>
       *
       * <pre>
       *主消息
       * </pre>
       */
      public Builder clearMainCard() {
        mainCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.MainInfo)
    }

    static {
      defaultInstance = new MainInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.MainInfo)
  }

  public interface OrganizeTeamRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 chosen_player = 1;
    /**
     * <code>optional int32 chosen_player = 1;</code>
     *
     * <pre>
     *请求用户
     * </pre>
     */
    boolean hasChosenPlayer();
    /**
     * <code>optional int32 chosen_player = 1;</code>
     *
     * <pre>
     *请求用户
     * </pre>
     */
    int getChosenPlayer();

    // optional int32 chosen_type = 2;
    /**
     * <code>optional int32 chosen_type = 2;</code>
     *
     * <pre>
     *请求类型 //1打三 1023 //找朋友1024
     * </pre>
     */
    boolean hasChosenType();
    /**
     * <code>optional int32 chosen_type = 2;</code>
     *
     * <pre>
     *请求类型 //1打三 1023 //找朋友1024
     * </pre>
     */
    int getChosenType();
  }
  /**
   * Protobuf type {@code sdh.OrganizeTeamRequest}
   *
   * <pre>
   *组队请求
   * </pre>
   */
  public static final class OrganizeTeamRequest extends
      com.google.protobuf.GeneratedMessage
      implements OrganizeTeamRequestOrBuilder {
    // Use OrganizeTeamRequest.newBuilder() to construct.
    private OrganizeTeamRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OrganizeTeamRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OrganizeTeamRequest defaultInstance;
    public static OrganizeTeamRequest getDefaultInstance() {
      return defaultInstance;
    }

    public OrganizeTeamRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OrganizeTeamRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              chosenPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              chosenType_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_OrganizeTeamRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_OrganizeTeamRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest.class, protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest.Builder.class);
    }

    public static com.google.protobuf.Parser<OrganizeTeamRequest> PARSER =
        new com.google.protobuf.AbstractParser<OrganizeTeamRequest>() {
      public OrganizeTeamRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OrganizeTeamRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OrganizeTeamRequest> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 chosen_player = 1;
    public static final int CHOSEN_PLAYER_FIELD_NUMBER = 1;
    private int chosenPlayer_;
    /**
     * <code>optional int32 chosen_player = 1;</code>
     *
     * <pre>
     *请求用户
     * </pre>
     */
    public boolean hasChosenPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 chosen_player = 1;</code>
     *
     * <pre>
     *请求用户
     * </pre>
     */
    public int getChosenPlayer() {
      return chosenPlayer_;
    }

    // optional int32 chosen_type = 2;
    public static final int CHOSEN_TYPE_FIELD_NUMBER = 2;
    private int chosenType_;
    /**
     * <code>optional int32 chosen_type = 2;</code>
     *
     * <pre>
     *请求类型 //1打三 1023 //找朋友1024
     * </pre>
     */
    public boolean hasChosenType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 chosen_type = 2;</code>
     *
     * <pre>
     *请求类型 //1打三 1023 //找朋友1024
     * </pre>
     */
    public int getChosenType() {
      return chosenType_;
    }

    private void initFields() {
      chosenPlayer_ = 0;
      chosenType_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, chosenPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, chosenType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, chosenPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, chosenType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.OrganizeTeamRequest}
     *
     * <pre>
     *组队请求
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_OrganizeTeamRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_OrganizeTeamRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest.class, protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        chosenPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        chosenType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_OrganizeTeamRequest_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest build() {
        protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest buildPartial() {
        protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest result = new protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.chosenPlayer_ = chosenPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.chosenType_ = chosenType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest other) {
        if (other == protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest.getDefaultInstance()) return this;
        if (other.hasChosenPlayer()) {
          setChosenPlayer(other.getChosenPlayer());
        }
        if (other.hasChosenType()) {
          setChosenType(other.getChosenType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.OrganizeTeamRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 chosen_player = 1;
      private int chosenPlayer_ ;
      /**
       * <code>optional int32 chosen_player = 1;</code>
       *
       * <pre>
       *请求用户
       * </pre>
       */
      public boolean hasChosenPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 chosen_player = 1;</code>
       *
       * <pre>
       *请求用户
       * </pre>
       */
      public int getChosenPlayer() {
        return chosenPlayer_;
      }
      /**
       * <code>optional int32 chosen_player = 1;</code>
       *
       * <pre>
       *请求用户
       * </pre>
       */
      public Builder setChosenPlayer(int value) {
        bitField0_ |= 0x00000001;
        chosenPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 chosen_player = 1;</code>
       *
       * <pre>
       *请求用户
       * </pre>
       */
      public Builder clearChosenPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        chosenPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 chosen_type = 2;
      private int chosenType_ ;
      /**
       * <code>optional int32 chosen_type = 2;</code>
       *
       * <pre>
       *请求类型 //1打三 1023 //找朋友1024
       * </pre>
       */
      public boolean hasChosenType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 chosen_type = 2;</code>
       *
       * <pre>
       *请求类型 //1打三 1023 //找朋友1024
       * </pre>
       */
      public int getChosenType() {
        return chosenType_;
      }
      /**
       * <code>optional int32 chosen_type = 2;</code>
       *
       * <pre>
       *请求类型 //1打三 1023 //找朋友1024
       * </pre>
       */
      public Builder setChosenType(int value) {
        bitField0_ |= 0x00000002;
        chosenType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 chosen_type = 2;</code>
       *
       * <pre>
       *请求类型 //1打三 1023 //找朋友1024
       * </pre>
       */
      public Builder clearChosenType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        chosenType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.OrganizeTeamRequest)
    }

    static {
      defaultInstance = new OrganizeTeamRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.OrganizeTeamRequest)
  }

  public interface playerOutCardsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 out_card_data = 1;
    /**
     * <code>repeated int32 out_card_data = 1;</code>
     *
     * <pre>
     *每个回合的出牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardDataList();
    /**
     * <code>repeated int32 out_card_data = 1;</code>
     *
     * <pre>
     *每个回合的出牌
     * </pre>
     */
    int getOutCardDataCount();
    /**
     * <code>repeated int32 out_card_data = 1;</code>
     *
     * <pre>
     *每个回合的出牌
     * </pre>
     */
    int getOutCardData(int index);
  }
  /**
   * Protobuf type {@code sdh.playerOutCards}
   */
  public static final class playerOutCards extends
      com.google.protobuf.GeneratedMessage
      implements playerOutCardsOrBuilder {
    // Use playerOutCards.newBuilder() to construct.
    private playerOutCards(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private playerOutCards(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final playerOutCards defaultInstance;
    public static playerOutCards getDefaultInstance() {
      return defaultInstance;
    }

    public playerOutCards getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private playerOutCards(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                outCardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              outCardData_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                outCardData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          outCardData_ = java.util.Collections.unmodifiableList(outCardData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_playerOutCards_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_playerOutCards_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.sdh.SdhRsp.playerOutCards.class, protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder.class);
    }

    public static com.google.protobuf.Parser<playerOutCards> PARSER =
        new com.google.protobuf.AbstractParser<playerOutCards>() {
      public playerOutCards parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new playerOutCards(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<playerOutCards> getParserForType() {
      return PARSER;
    }

    // repeated int32 out_card_data = 1;
    public static final int OUT_CARD_DATA_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> outCardData_;
    /**
     * <code>repeated int32 out_card_data = 1;</code>
     *
     * <pre>
     *每个回合的出牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardDataList() {
      return outCardData_;
    }
    /**
     * <code>repeated int32 out_card_data = 1;</code>
     *
     * <pre>
     *每个回合的出牌
     * </pre>
     */
    public int getOutCardDataCount() {
      return outCardData_.size();
    }
    /**
     * <code>repeated int32 out_card_data = 1;</code>
     *
     * <pre>
     *每个回合的出牌
     * </pre>
     */
    public int getOutCardData(int index) {
      return outCardData_.get(index);
    }

    private void initFields() {
      outCardData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < outCardData_.size(); i++) {
        output.writeInt32(1, outCardData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < outCardData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardData_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardDataList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.sdh.SdhRsp.playerOutCards parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.playerOutCards parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.playerOutCards parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.sdh.SdhRsp.playerOutCards parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.playerOutCards parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.playerOutCards parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.playerOutCards parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.playerOutCards parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.sdh.SdhRsp.playerOutCards parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.sdh.SdhRsp.playerOutCards parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.sdh.SdhRsp.playerOutCards prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code sdh.playerOutCards}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.sdh.SdhRsp.playerOutCardsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_playerOutCards_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_playerOutCards_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.sdh.SdhRsp.playerOutCards.class, protobuf.clazz.sdh.SdhRsp.playerOutCards.Builder.class);
      }

      // Construct using protobuf.clazz.sdh.SdhRsp.playerOutCards.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.sdh.SdhRsp.internal_static_sdh_playerOutCards_descriptor;
      }

      public protobuf.clazz.sdh.SdhRsp.playerOutCards getDefaultInstanceForType() {
        return protobuf.clazz.sdh.SdhRsp.playerOutCards.getDefaultInstance();
      }

      public protobuf.clazz.sdh.SdhRsp.playerOutCards build() {
        protobuf.clazz.sdh.SdhRsp.playerOutCards result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.sdh.SdhRsp.playerOutCards buildPartial() {
        protobuf.clazz.sdh.SdhRsp.playerOutCards result = new protobuf.clazz.sdh.SdhRsp.playerOutCards(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          outCardData_ = java.util.Collections.unmodifiableList(outCardData_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.outCardData_ = outCardData_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.sdh.SdhRsp.playerOutCards) {
          return mergeFrom((protobuf.clazz.sdh.SdhRsp.playerOutCards)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.sdh.SdhRsp.playerOutCards other) {
        if (other == protobuf.clazz.sdh.SdhRsp.playerOutCards.getDefaultInstance()) return this;
        if (!other.outCardData_.isEmpty()) {
          if (outCardData_.isEmpty()) {
            outCardData_ = other.outCardData_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureOutCardDataIsMutable();
            outCardData_.addAll(other.outCardData_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.sdh.SdhRsp.playerOutCards parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.sdh.SdhRsp.playerOutCards) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 out_card_data = 1;
      private java.util.List<java.lang.Integer> outCardData_ = java.util.Collections.emptyList();
      private void ensureOutCardDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          outCardData_ = new java.util.ArrayList<java.lang.Integer>(outCardData_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 out_card_data = 1;</code>
       *
       * <pre>
       *每个回合的出牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardDataList() {
        return java.util.Collections.unmodifiableList(outCardData_);
      }
      /**
       * <code>repeated int32 out_card_data = 1;</code>
       *
       * <pre>
       *每个回合的出牌
       * </pre>
       */
      public int getOutCardDataCount() {
        return outCardData_.size();
      }
      /**
       * <code>repeated int32 out_card_data = 1;</code>
       *
       * <pre>
       *每个回合的出牌
       * </pre>
       */
      public int getOutCardData(int index) {
        return outCardData_.get(index);
      }
      /**
       * <code>repeated int32 out_card_data = 1;</code>
       *
       * <pre>
       *每个回合的出牌
       * </pre>
       */
      public Builder setOutCardData(
          int index, int value) {
        ensureOutCardDataIsMutable();
        outCardData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_card_data = 1;</code>
       *
       * <pre>
       *每个回合的出牌
       * </pre>
       */
      public Builder addOutCardData(int value) {
        ensureOutCardDataIsMutable();
        outCardData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_card_data = 1;</code>
       *
       * <pre>
       *每个回合的出牌
       * </pre>
       */
      public Builder addAllOutCardData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardDataIsMutable();
        super.addAll(values, outCardData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_card_data = 1;</code>
       *
       * <pre>
       *每个回合的出牌
       * </pre>
       */
      public Builder clearOutCardData() {
        outCardData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sdh.playerOutCards)
    }

    static {
      defaultInstance = new playerOutCards(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:sdh.playerOutCards)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_RoomInfoSdh_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_RoomInfoSdh_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_RoomPlayerResponseSdh_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_RoomPlayerResponseSdh_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_PukeGameEndSdh_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_PukeGameEndSdh_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_StallRate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_StallRate_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_TableResponseSdh_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_TableResponseSdh_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_GameStartSdh_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_GameStartSdh_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_CallBankerResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_CallBankerResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_CallMainResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_CallMainResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_CallBankerRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_CallBankerRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_TrusteeInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_TrusteeInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_OutCardDataRequestSdh_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_OutCardDataRequestSdh_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_GetScore_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_GetScore_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_CallMain_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_CallMain_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_MainInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_MainInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_OrganizeTeamRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_OrganizeTeamRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_sdh_playerOutCards_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_sdh_playerOutCards_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022sdh/sdhProto.proto\022\003sdh\032\024basic/protoco" +
      "l.proto\"\237\002\n\013RoomInfoSdh\022\017\n\007room_id\030\001 \001(\005" +
      "\022\027\n\017game_type_index\030\004 \001(\005\022\027\n\017game_rule_i" +
      "ndex\030\002 \001(\005\022\032\n\022game_rule_index_ex\030\014 \003(\005\022\025" +
      "\n\rgame_rule_des\030\003 \001(\t\022\022\n\ngame_round\030\005 \001(" +
      "\005\022\021\n\tcur_round\030\006 \001(\005\022\023\n\013game_status\030\007 \001(" +
      "\005\022\030\n\020create_player_id\030\010 \001(\003\022\027\n\017begin_lef" +
      "t_card\030\t \001(\005\022\026\n\016_banker_player\030\n \001(\005\022\023\n\013" +
      "create_name\030\013 \001(\t\"\320\004\n\025RoomPlayerResponse" +
      "Sdh\022\022\n\naccount_id\030\001 \001(\003\022\021\n\tuser_name\030\002 \001",
      "(\t\022\024\n\014head_img_url\030\003 \001(\t\022\022\n\nseat_index\030\004" +
      " \001(\005\022\n\n\002ip\030\005 \001(\t\022\016\n\006online\030\006 \001(\005\022\013\n\003sex\030" +
      "\007 \001(\005\022\r\n\005score\030\010 \001(\005\022\r\n\005ready\030\t \001(\005\022\017\n\007i" +
      "p_addr\030\n \001(\t\022%\n\rlocationInfor\030\013 \001(\0132\016.Lo" +
      "cationInfor\022\022\n\nis_trustee\030\014 \001(\010\022\r\n\005money" +
      "\030\r \001(\003\022\014\n\004gold\030\016 \001(\003\022\026\n\016out_cards_data\030\017" +
      " \003(\005\022\027\n\017out_cards_count\030\020 \001(\005\022\030\n\020score_c" +
      "ards_data\030\021 \003(\005\022\031\n\021score_cards_count\030\022 \001" +
      "(\005\022\032\n\022cur_out_cards_data\030\023 \003(\005\022\033\n\023cur_ou" +
      "t_cards_count\030\024 \001(\005\022\020\n\010has_main\030\025 \001(\010\022\r\n",
      "\005jifen\030\026 \001(\005\022\020\n\010max_card\030\027 \003(\005\022(\n\013max_ca" +
      "rd_xt\030\030 \003(\0132\023.Int32ArrayResponse\022\r\n\005guar" +
      "d\030\031 \001(\005\022+\n\016playerOutCards\030\032 \003(\0132\023.sdh.pl" +
      "ayerOutCards\"\203\004\n\016PukeGameEndSdh\022#\n\troom_" +
      "info\030\001 \001(\0132\020.sdh.RoomInfoSdh\022\021\n\tcur_roun" +
      "d\030\002 \001(\005\022\022\n\ngame_round\030\003 \001(\005\022\022\n\ncard_coun" +
      "t\030\004 \003(\005\022\'\n\ncards_data\030\005 \003(\0132\023.Int32Array" +
      "Response\022\021\n\tend_score\030\006 \003(\005\022\022\n\nplayer_nu" +
      "m\030\007 \001(\005\022\016\n\006reason\030\010 \001(\005\022+\n\007players\030\t \003(\013" +
      "2\032.sdh.RoomPlayerResponseSdh\022\025\n\rall_end_",
      "score\030\n \003(\005\022\025\n\rend_score_max\030\013 \003(\005\022\026\n\016wi" +
      "n_banker_num\030\014 \003(\005\022\024\n\014win_free_num\030\r \003(\005" +
      "\022\020\n\010fail_num\030\022 \003(\005\022\016\n\006winner\030\016 \001(\005\022\r\n\005di" +
      "fen\030\017 \001(\005\022\r\n\005score\030\020 \001(\005\022\014\n\004desc\030\021 \001(\t\022\r" +
      "\n\005stall\030\023 \001(\005\022\014\n\004rate\030\024 \001(\005\022\017\n\007max_win\030\025" +
      " \003(\005\022\025\n\rdi_card_count\030\026 \001(\005\022\025\n\rdi_cards_" +
      "data\030\027 \003(\005\"\255\001\n\tStallRate\022\022\n\ncur_player\030\021" +
      " \001(\005\022\022\n\ncur_banker\030\022 \001(\005\022\r\n\005stall\030\023 \001(\005\022" +
      "\014\n\004rate\030\024 \001(\005\022\r\n\005difen\030\025 \001(\005\022\027\n\017main_col" +
      "or_list\030\026 \003(\005\022\031\n\021main_color_number\030\027 \003(\005",
      "\022\030\n\020main_color_count\030\030 \001(\005\"\310\007\n\020TableResp" +
      "onseSdh\022\025\n\rbanker_player\030\001 \001(\005\022\026\n\016curren" +
      "t_player\030\002 \001(\005\022\023\n\013prev_player\030\003 \001(\005\022\017\n\007t" +
      "rustee\030\004 \003(\010\022+\n\016out_cards_data\030\005 \003(\0132\023.I" +
      "nt32ArrayResponse\022.\n\021change_cards_data\030\006" +
      " \003(\0132\023.Int32ArrayResponse\022\027\n\017out_cards_c" +
      "ount\030\007 \003(\005\022\025\n\rplayer_status\030\010 \003(\005\022\021\n\tcar" +
      "d_type\030\t \003(\005\022\032\n\022pr_out_card_player\030\n \001(\005" +
      "\022\034\n\024pr_change_cards_data\030\013 \003(\005\022\025\n\rpr_car" +
      "ds_data\030\014 \003(\005\022\026\n\016pr_cards_count\030\r \001(\005\022\030\n",
      "\020pr_out_card_type\030\016 \001(\005\022\024\n\014is_first_out\030" +
      "\017 \001(\005\022\024\n\014display_time\030\020 \001(\005\022\022\n\ncard_coun" +
      "t\030\021 \003(\005\022\'\n\ncards_data\030\022 \003(\0132\023.Int32Array" +
      "Response\022#\n\troom_info\030\023 \001(\0132\020.sdh.RoomIn" +
      "foSdh\022+\n\007players\030\024 \003(\0132\032.sdh.RoomPlayerR" +
      "esponseSdh\022\023\n\013call_banker\030\025 \003(\005\022\023\n\013call_" +
      "action\030\026 \003(\005\022\025\n\rdi_card_count\030\027 \001(\005\022\025\n\rd" +
      "i_cards_data\030\030 \003(\005\022\026\n\016difen_bomb_des\030\031 \003" +
      "(\t\022\r\n\005difen\030\032 \001(\005\022\r\n\005score\030\033 \001(\005\022\022\n\nmain" +
      "_color\030\034 \001(\005\022\031\n\021call_banker_score\030\035 \003(\005\022",
      "\r\n\005stall\030\036 \001(\005\022\014\n\004rate\030\037 \001(\005\022\027\n\017big_play" +
      "er_seat\030  \001(\005\022\027\n\017main_color_list\030! \003(\005\022\031" +
      "\n\021main_color_number\030\" \003(\005\022\030\n\020main_color_" +
      "count\030# \001(\005\022\023\n\013game_status\030$ \001(\005\022\030\n\020firs" +
      "t_out_player\030% \001(\005\022\021\n\tcur_score\030& \001(\005\"\243\002" +
      "\n\014GameStartSdh\022\022\n\nsice_index\030\001 \001(\005\022\025\n\rba" +
      "nker_player\030\002 \001(\005\022\026\n\016current_player\030\003 \001(" +
      "\005\022\023\n\013cards_count\030\004 \003(\005\022\025\n\rplayer_action\030" +
      "\005 \001(\005\022\021\n\tcard_data\030\006 \003(\005\022\027\n\017left_card_co" +
      "unt\030\007 \001(\005\022\023\n\013xiao_hu_tag\030\010 \001(\005\022\022\n\ngame_r",
      "ound\030\t \001(\005\022\021\n\tcur_round\030\n \001(\005\022\'\n\ncards_d" +
      "ata\030\013 \003(\0132\023.Int32ArrayResponse\022\023\n\013other_" +
      "cards\030\014 \003(\005\"f\n\022CallBankerResponse\022\033\n\023cal" +
      "l_current_player\030\001 \001(\005\022\r\n\005score\030\002 \003(\005\022\021\n" +
      "\tmin_score\030\003 \001(\005\022\021\n\tmax_score\030\004 \001(\005\"\202\001\n\020" +
      "CallMainResponse\022\022\n\ncur_banker\030\001 \001(\005\022\022\n\n" +
      "main_color\030\002 \001(\005\022\021\n\tmain_card\030\003 \003(\005\022\022\n\nm" +
      "ain_score\030\004 \001(\005\022\017\n\007di_type\030\005 \001(\005\022\016\n\006numb" +
      "er\030\006 \001(\005\"\213\001\n\021CallBankerRequest\022\033\n\023call_c" +
      "urrent_player\030\001 \001(\005\022\024\n\014opreate_type\030\002 \001(",
      "\005\022\r\n\005score\030\003 \001(\005\022\022\n\nmain_color\030\004 \001(\005\022\021\n\t" +
      "main_card\030\005 \003(\005\022\r\n\005round\030\006 \001(\005\"5\n\013Truste" +
      "eInfo\022\022\n\ncur_player\030\001 \001(\005\022\022\n\nis_trustee\030" +
      "\002 \001(\010\"\244\003\n\025OutCardDataRequestSdh\022\027\n\017out_c" +
      "ard_player\030\001 \001(\005\022\022\n\ncards_data\030\002 \003(\005\022\031\n\021" +
      "change_cards_data\030\003 \003(\005\022\023\n\013cards_count\030\004" +
      " \001(\005\022\021\n\tcard_type\030\005 \001(\005\022\022\n\ncur_player\030\006 " +
      "\001(\005\022\025\n\rpr_cards_data\030\010 \003(\005\022\034\n\024pr_change_" +
      "cards_data\030\t \003(\005\022\026\n\016pr_cards_count\030\n \001(\005" +
      "\022\030\n\020pr_out_card_type\030\013 \001(\005\022\024\n\014is_first_o",
      "ut\030\014 \001(\005\022\024\n\014display_time\030\r \001(\005\022\026\n\016difen_" +
      "bomb_des\030\016 \003(\t\022\027\n\017user_card_count\030\017 \003(\005\022" +
      ",\n\017user_cards_data\030\020 \003(\0132\023.Int32ArrayRes" +
      "ponse\022\025\n\rout_card_type\030\021 \001(\005\"0\n\010GetScore" +
      "\022\021\n\tcur_score\030\001 \001(\005\022\021\n\tall_score\030\002 \001(\005\"\271" +
      "\001\n\010CallMain\022\021\n\tthreeMain\030\001 \001(\010\022\020\n\010fourMi" +
      "an\030\002 \001(\010\022\021\n\tzhu_color\030\003 \003(\005\022&\n\017main_info" +
      "_three\030\004 \003(\0132\r.sdh.MainInfo\022%\n\016main_info" +
      "_four\030\005 \003(\0132\r.sdh.MainInfo\022&\n\017main_info_" +
      "color\030\006 \003(\0132\r.sdh.MainInfo\"\035\n\010MainInfo\022\021",
      "\n\tmain_card\030\001 \003(\005\"A\n\023OrganizeTeamRequest" +
      "\022\025\n\rchosen_player\030\001 \001(\005\022\023\n\013chosen_type\030\002" +
      " \001(\005\"\'\n\016playerOutCards\022\025\n\rout_card_data\030" +
      "\001 \003(\005B\034\n\022protobuf.clazz.sdhB\006SdhRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_sdh_RoomInfoSdh_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_sdh_RoomInfoSdh_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_RoomInfoSdh_descriptor,
              new java.lang.String[] { "RoomId", "GameTypeIndex", "GameRuleIndex", "GameRuleIndexEx", "GameRuleDes", "GameRound", "CurRound", "GameStatus", "CreatePlayerId", "BeginLeftCard", "BankerPlayer", "CreateName", });
          internal_static_sdh_RoomPlayerResponseSdh_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_sdh_RoomPlayerResponseSdh_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_RoomPlayerResponseSdh_descriptor,
              new java.lang.String[] { "AccountId", "UserName", "HeadImgUrl", "SeatIndex", "Ip", "Online", "Sex", "Score", "Ready", "IpAddr", "LocationInfor", "IsTrustee", "Money", "Gold", "OutCardsData", "OutCardsCount", "ScoreCardsData", "ScoreCardsCount", "CurOutCardsData", "CurOutCardsCount", "HasMain", "Jifen", "MaxCard", "MaxCardXt", "Guard", "PlayerOutCards", });
          internal_static_sdh_PukeGameEndSdh_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_sdh_PukeGameEndSdh_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_PukeGameEndSdh_descriptor,
              new java.lang.String[] { "RoomInfo", "CurRound", "GameRound", "CardCount", "CardsData", "EndScore", "PlayerNum", "Reason", "Players", "AllEndScore", "EndScoreMax", "WinBankerNum", "WinFreeNum", "FailNum", "Winner", "Difen", "Score", "Desc", "Stall", "Rate", "MaxWin", "DiCardCount", "DiCardsData", });
          internal_static_sdh_StallRate_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_sdh_StallRate_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_StallRate_descriptor,
              new java.lang.String[] { "CurPlayer", "CurBanker", "Stall", "Rate", "Difen", "MainColorList", "MainColorNumber", "MainColorCount", });
          internal_static_sdh_TableResponseSdh_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_sdh_TableResponseSdh_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_TableResponseSdh_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "ChangeCardsData", "OutCardsCount", "PlayerStatus", "CardType", "PrOutCardPlayer", "PrChangeCardsData", "PrCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "CallBanker", "CallAction", "DiCardCount", "DiCardsData", "DifenBombDes", "Difen", "Score", "MainColor", "CallBankerScore", "Stall", "Rate", "BigPlayerSeat", "MainColorList", "MainColorNumber", "MainColorCount", "GameStatus", "FirstOutPlayer", "CurScore", });
          internal_static_sdh_GameStartSdh_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_sdh_GameStartSdh_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_GameStartSdh_descriptor,
              new java.lang.String[] { "SiceIndex", "BankerPlayer", "CurrentPlayer", "CardsCount", "PlayerAction", "CardData", "LeftCardCount", "XiaoHuTag", "GameRound", "CurRound", "CardsData", "OtherCards", });
          internal_static_sdh_CallBankerResponse_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_sdh_CallBankerResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_CallBankerResponse_descriptor,
              new java.lang.String[] { "CallCurrentPlayer", "Score", "MinScore", "MaxScore", });
          internal_static_sdh_CallMainResponse_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_sdh_CallMainResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_CallMainResponse_descriptor,
              new java.lang.String[] { "CurBanker", "MainColor", "MainCard", "MainScore", "DiType", "Number", });
          internal_static_sdh_CallBankerRequest_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_sdh_CallBankerRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_CallBankerRequest_descriptor,
              new java.lang.String[] { "CallCurrentPlayer", "OpreateType", "Score", "MainColor", "MainCard", "Round", });
          internal_static_sdh_TrusteeInfo_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_sdh_TrusteeInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_TrusteeInfo_descriptor,
              new java.lang.String[] { "CurPlayer", "IsTrustee", });
          internal_static_sdh_OutCardDataRequestSdh_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_sdh_OutCardDataRequestSdh_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_OutCardDataRequestSdh_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "ChangeCardsData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrChangeCardsData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "DifenBombDes", "UserCardCount", "UserCardsData", "OutCardType", });
          internal_static_sdh_GetScore_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_sdh_GetScore_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_GetScore_descriptor,
              new java.lang.String[] { "CurScore", "AllScore", });
          internal_static_sdh_CallMain_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_sdh_CallMain_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_CallMain_descriptor,
              new java.lang.String[] { "ThreeMain", "FourMian", "ZhuColor", "MainInfoThree", "MainInfoFour", "MainInfoColor", });
          internal_static_sdh_MainInfo_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_sdh_MainInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_MainInfo_descriptor,
              new java.lang.String[] { "MainCard", });
          internal_static_sdh_OrganizeTeamRequest_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_sdh_OrganizeTeamRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_OrganizeTeamRequest_descriptor,
              new java.lang.String[] { "ChosenPlayer", "ChosenType", });
          internal_static_sdh_playerOutCards_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_sdh_playerOutCards_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_sdh_playerOutCards_descriptor,
              new java.lang.String[] { "OutCardData", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
