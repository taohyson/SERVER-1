// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gzcg/gzcgProto.proto

package protobuf.clazz.gzcg;

public final class GZCGRsp {
  private GZCGRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface FanJing_GZCGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 zheng_jing = 1;
    /**
     * <code>repeated int32 zheng_jing = 1;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhengJingList();
    /**
     * <code>repeated int32 zheng_jing = 1;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    int getZhengJingCount();
    /**
     * <code>repeated int32 zheng_jing = 1;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    int getZhengJing(int index);

    // optional int32 xia_jing = 2;
    /**
     * <code>optional int32 xia_jing = 2;</code>
     *
     * <pre>
     * 下精的数量[即右上角盖几张牌]
     * </pre>
     */
    boolean hasXiaJing();
    /**
     * <code>optional int32 xia_jing = 2;</code>
     *
     * <pre>
     * 下精的数量[即右上角盖几张牌]
     * </pre>
     */
    int getXiaJing();
  }
  /**
   * Protobuf type {@code czbg.FanJing_GZCG}
   *
   * <pre>
   *房间的玩家
   * </pre>
   */
  public static final class FanJing_GZCG extends
      com.google.protobuf.GeneratedMessage
      implements FanJing_GZCGOrBuilder {
    // Use FanJing_GZCG.newBuilder() to construct.
    private FanJing_GZCG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FanJing_GZCG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FanJing_GZCG defaultInstance;
    public static FanJing_GZCG getDefaultInstance() {
      return defaultInstance;
    }

    public FanJing_GZCG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FanJing_GZCG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                zhengJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              zhengJing_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                zhengJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhengJing_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              xiaJing_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          zhengJing_ = java.util.Collections.unmodifiableList(zhengJing_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_FanJing_GZCG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_FanJing_GZCG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG.class, protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG.Builder.class);
    }

    public static com.google.protobuf.Parser<FanJing_GZCG> PARSER =
        new com.google.protobuf.AbstractParser<FanJing_GZCG>() {
      public FanJing_GZCG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FanJing_GZCG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FanJing_GZCG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 zheng_jing = 1;
    public static final int ZHENG_JING_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> zhengJing_;
    /**
     * <code>repeated int32 zheng_jing = 1;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhengJingList() {
      return zhengJing_;
    }
    /**
     * <code>repeated int32 zheng_jing = 1;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    public int getZhengJingCount() {
      return zhengJing_.size();
    }
    /**
     * <code>repeated int32 zheng_jing = 1;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    public int getZhengJing(int index) {
      return zhengJing_.get(index);
    }

    // optional int32 xia_jing = 2;
    public static final int XIA_JING_FIELD_NUMBER = 2;
    private int xiaJing_;
    /**
     * <code>optional int32 xia_jing = 2;</code>
     *
     * <pre>
     * 下精的数量[即右上角盖几张牌]
     * </pre>
     */
    public boolean hasXiaJing() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 xia_jing = 2;</code>
     *
     * <pre>
     * 下精的数量[即右上角盖几张牌]
     * </pre>
     */
    public int getXiaJing() {
      return xiaJing_;
    }

    private void initFields() {
      zhengJing_ = java.util.Collections.emptyList();
      xiaJing_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < zhengJing_.size(); i++) {
        output.writeInt32(1, zhengJing_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, xiaJing_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < zhengJing_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhengJing_.get(i));
        }
        size += dataSize;
        size += 1 * getZhengJingList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, xiaJing_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.FanJing_GZCG}
     *
     * <pre>
     *房间的玩家
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_FanJing_GZCG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_FanJing_GZCG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG.class, protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG.Builder.class);
      }

      // Construct using protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        zhengJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        xiaJing_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_FanJing_GZCG_descriptor;
      }

      public protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG getDefaultInstanceForType() {
        return protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG.getDefaultInstance();
      }

      public protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG build() {
        protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG buildPartial() {
        protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG result = new protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          zhengJing_ = java.util.Collections.unmodifiableList(zhengJing_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.zhengJing_ = zhengJing_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.xiaJing_ = xiaJing_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG) {
          return mergeFrom((protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG other) {
        if (other == protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG.getDefaultInstance()) return this;
        if (!other.zhengJing_.isEmpty()) {
          if (zhengJing_.isEmpty()) {
            zhengJing_ = other.zhengJing_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureZhengJingIsMutable();
            zhengJing_.addAll(other.zhengJing_);
          }
          onChanged();
        }
        if (other.hasXiaJing()) {
          setXiaJing(other.getXiaJing());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzcg.GZCGRsp.FanJing_GZCG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 zheng_jing = 1;
      private java.util.List<java.lang.Integer> zhengJing_ = java.util.Collections.emptyList();
      private void ensureZhengJingIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          zhengJing_ = new java.util.ArrayList<java.lang.Integer>(zhengJing_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 zheng_jing = 1;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhengJingList() {
        return java.util.Collections.unmodifiableList(zhengJing_);
      }
      /**
       * <code>repeated int32 zheng_jing = 1;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public int getZhengJingCount() {
        return zhengJing_.size();
      }
      /**
       * <code>repeated int32 zheng_jing = 1;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public int getZhengJing(int index) {
        return zhengJing_.get(index);
      }
      /**
       * <code>repeated int32 zheng_jing = 1;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public Builder setZhengJing(
          int index, int value) {
        ensureZhengJingIsMutable();
        zhengJing_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing = 1;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public Builder addZhengJing(int value) {
        ensureZhengJingIsMutable();
        zhengJing_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing = 1;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public Builder addAllZhengJing(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhengJingIsMutable();
        super.addAll(values, zhengJing_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing = 1;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public Builder clearZhengJing() {
        zhengJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 xia_jing = 2;
      private int xiaJing_ ;
      /**
       * <code>optional int32 xia_jing = 2;</code>
       *
       * <pre>
       * 下精的数量[即右上角盖几张牌]
       * </pre>
       */
      public boolean hasXiaJing() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 xia_jing = 2;</code>
       *
       * <pre>
       * 下精的数量[即右上角盖几张牌]
       * </pre>
       */
      public int getXiaJing() {
        return xiaJing_;
      }
      /**
       * <code>optional int32 xia_jing = 2;</code>
       *
       * <pre>
       * 下精的数量[即右上角盖几张牌]
       * </pre>
       */
      public Builder setXiaJing(int value) {
        bitField0_ |= 0x00000002;
        xiaJing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 xia_jing = 2;</code>
       *
       * <pre>
       * 下精的数量[即右上角盖几张牌]
       * </pre>
       */
      public Builder clearXiaJing() {
        bitField0_ = (bitField0_ & ~0x00000002);
        xiaJing_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.FanJing_GZCG)
    }

    static {
      defaultInstance = new FanJing_GZCG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.FanJing_GZCG)
  }

  public interface GameEndResponse_GZCGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .GameEndResponse game_end = 1;
    /**
     * <code>optional .GameEndResponse game_end = 1;</code>
     *
     * <pre>
     * 结算
     * </pre>
     */
    boolean hasGameEnd();
    /**
     * <code>optional .GameEndResponse game_end = 1;</code>
     *
     * <pre>
     * 结算
     * </pre>
     */
    protobuf.clazz.Protocol.GameEndResponse getGameEnd();
    /**
     * <code>optional .GameEndResponse game_end = 1;</code>
     *
     * <pre>
     * 结算
     * </pre>
     */
    protobuf.clazz.Protocol.GameEndResponseOrBuilder getGameEndOrBuilder();

    // repeated int32 zheng_jing = 2;
    /**
     * <code>repeated int32 zheng_jing = 2;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhengJingList();
    /**
     * <code>repeated int32 zheng_jing = 2;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    int getZhengJingCount();
    /**
     * <code>repeated int32 zheng_jing = 2;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    int getZhengJing(int index);

    // optional int32 other_jing_number = 3;
    /**
     * <code>optional int32 other_jing_number = 3;</code>
     *
     * <pre>
     * 其他精牌数量
     * </pre>
     */
    boolean hasOtherJingNumber();
    /**
     * <code>optional int32 other_jing_number = 3;</code>
     *
     * <pre>
     * 其他精牌数量
     * </pre>
     */
    int getOtherJingNumber();

    // repeated int32 other_jing = 4;
    /**
     * <code>repeated int32 other_jing = 4;</code>
     *
     * <pre>
     * 其他精牌数值 该数组长度为other_jing_number的2倍
     * </pre>
     */
    java.util.List<java.lang.Integer> getOtherJingList();
    /**
     * <code>repeated int32 other_jing = 4;</code>
     *
     * <pre>
     * 其他精牌数值 该数组长度为other_jing_number的2倍
     * </pre>
     */
    int getOtherJingCount();
    /**
     * <code>repeated int32 other_jing = 4;</code>
     *
     * <pre>
     * 其他精牌数值 该数组长度为other_jing_number的2倍
     * </pre>
     */
    int getOtherJing(int index);

    // repeated int32 jing_score = 5;
    /**
     * <code>repeated int32 jing_score = 5;</code>
     *
     * <pre>
     * 精牌分
     * </pre>
     */
    java.util.List<java.lang.Integer> getJingScoreList();
    /**
     * <code>repeated int32 jing_score = 5;</code>
     *
     * <pre>
     * 精牌分
     * </pre>
     */
    int getJingScoreCount();
    /**
     * <code>repeated int32 jing_score = 5;</code>
     *
     * <pre>
     * 精牌分
     * </pre>
     */
    int getJingScore(int index);

    // repeated int32 hu_pai_score = 6;
    /**
     * <code>repeated int32 hu_pai_score = 6;</code>
     *
     * <pre>
     * 胡牌分
     * </pre>
     */
    java.util.List<java.lang.Integer> getHuPaiScoreList();
    /**
     * <code>repeated int32 hu_pai_score = 6;</code>
     *
     * <pre>
     * 胡牌分
     * </pre>
     */
    int getHuPaiScoreCount();
    /**
     * <code>repeated int32 hu_pai_score = 6;</code>
     *
     * <pre>
     * 胡牌分
     * </pre>
     */
    int getHuPaiScore(int index);

    // repeated int32 jiang_li_score = 7;
    /**
     * <code>repeated int32 jiang_li_score = 7;</code>
     *
     * <pre>
     * 奖励分
     * </pre>
     */
    java.util.List<java.lang.Integer> getJiangLiScoreList();
    /**
     * <code>repeated int32 jiang_li_score = 7;</code>
     *
     * <pre>
     * 奖励分
     * </pre>
     */
    int getJiangLiScoreCount();
    /**
     * <code>repeated int32 jiang_li_score = 7;</code>
     *
     * <pre>
     * 奖励分
     * </pre>
     */
    int getJiangLiScore(int index);

    // repeated int32 ming_gang = 8;
    /**
     * <code>repeated int32 ming_gang = 8;</code>
     *
     * <pre>
     * 明杠
     * </pre>
     */
    java.util.List<java.lang.Integer> getMingGangList();
    /**
     * <code>repeated int32 ming_gang = 8;</code>
     *
     * <pre>
     * 明杠
     * </pre>
     */
    int getMingGangCount();
    /**
     * <code>repeated int32 ming_gang = 8;</code>
     *
     * <pre>
     * 明杠
     * </pre>
     */
    int getMingGang(int index);

    // repeated int32 an_gang = 9;
    /**
     * <code>repeated int32 an_gang = 9;</code>
     *
     * <pre>
     *暗杠
     * </pre>
     */
    java.util.List<java.lang.Integer> getAnGangList();
    /**
     * <code>repeated int32 an_gang = 9;</code>
     *
     * <pre>
     *暗杠
     * </pre>
     */
    int getAnGangCount();
    /**
     * <code>repeated int32 an_gang = 9;</code>
     *
     * <pre>
     *暗杠
     * </pre>
     */
    int getAnGang(int index);

    // repeated int32 gang_jing = 10;
    /**
     * <code>repeated int32 gang_jing = 10;</code>
     *
     * <pre>
     * 杠精
     * </pre>
     */
    java.util.List<java.lang.Integer> getGangJingList();
    /**
     * <code>repeated int32 gang_jing = 10;</code>
     *
     * <pre>
     * 杠精
     * </pre>
     */
    int getGangJingCount();
    /**
     * <code>repeated int32 gang_jing = 10;</code>
     *
     * <pre>
     * 杠精
     * </pre>
     */
    int getGangJing(int index);

    // repeated int32 chao_zhuang = 11;
    /**
     * <code>repeated int32 chao_zhuang = 11;</code>
     *
     * <pre>
     * 抄庄
     * </pre>
     */
    java.util.List<java.lang.Integer> getChaoZhuangList();
    /**
     * <code>repeated int32 chao_zhuang = 11;</code>
     *
     * <pre>
     * 抄庄
     * </pre>
     */
    int getChaoZhuangCount();
    /**
     * <code>repeated int32 chao_zhuang = 11;</code>
     *
     * <pre>
     * 抄庄
     * </pre>
     */
    int getChaoZhuang(int index);

    // repeated int32 total_score = 12;
    /**
     * <code>repeated int32 total_score = 12;</code>
     *
     * <pre>
     * 总成绩
     * </pre>
     */
    java.util.List<java.lang.Integer> getTotalScoreList();
    /**
     * <code>repeated int32 total_score = 12;</code>
     *
     * <pre>
     * 总成绩
     * </pre>
     */
    int getTotalScoreCount();
    /**
     * <code>repeated int32 total_score = 12;</code>
     *
     * <pre>
     * 总成绩
     * </pre>
     */
    int getTotalScore(int index);

    // optional string result_desc = 13;
    /**
     * <code>optional string result_desc = 13;</code>
     *
     * <pre>
     * 胡牌描述
     * </pre>
     */
    boolean hasResultDesc();
    /**
     * <code>optional string result_desc = 13;</code>
     *
     * <pre>
     * 胡牌描述
     * </pre>
     */
    java.lang.String getResultDesc();
    /**
     * <code>optional string result_desc = 13;</code>
     *
     * <pre>
     * 胡牌描述
     * </pre>
     */
    com.google.protobuf.ByteString
        getResultDescBytes();

    // repeated int32 zheng_jing_count = 14;
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhengJingCountList();
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    int getZhengJingCountCount();
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    int getZhengJingCount(int index);

    // repeated int32 fu_jing_count = 15;
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    java.util.List<java.lang.Integer> getFuJingCountList();
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    int getFuJingCountCount();
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    int getFuJingCount(int index);

    // repeated bool is_ba_wang_jing = 16;
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    java.util.List<java.lang.Boolean> getIsBaWangJingList();
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    int getIsBaWangJingCount();
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    boolean getIsBaWangJing(int index);

    // repeated int32 chong_guan_score = 17;
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    java.util.List<java.lang.Integer> getChongGuanScoreList();
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    int getChongGuanScoreCount();
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    int getChongGuanScore(int index);

    // repeated int32 every_jing_score = 18;
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEveryJingScoreList();
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    int getEveryJingScoreCount();
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    int getEveryJingScore(int index);

    // repeated .czbg.EveryJingInfo_GZCG jing_info = 19;
    /**
     * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
     *
     * <pre>
     * 每个玩家的精分信息
     * </pre>
     */
    java.util.List<protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG> 
        getJingInfoList();
    /**
     * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
     *
     * <pre>
     * 每个玩家的精分信息
     * </pre>
     */
    protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG getJingInfo(int index);
    /**
     * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
     *
     * <pre>
     * 每个玩家的精分信息
     * </pre>
     */
    int getJingInfoCount();
    /**
     * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
     *
     * <pre>
     * 每个玩家的精分信息
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCGOrBuilder> 
        getJingInfoOrBuilderList();
    /**
     * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
     *
     * <pre>
     * 每个玩家的精分信息
     * </pre>
     */
    protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCGOrBuilder getJingInfoOrBuilder(
        int index);

    // repeated int32 piao_zheng_jing = 20;
    /**
     * <code>repeated int32 piao_zheng_jing = 20;</code>
     *
     * <pre>
     * 正精飘分
     * </pre>
     */
    java.util.List<java.lang.Integer> getPiaoZhengJingList();
    /**
     * <code>repeated int32 piao_zheng_jing = 20;</code>
     *
     * <pre>
     * 正精飘分
     * </pre>
     */
    int getPiaoZhengJingCount();
    /**
     * <code>repeated int32 piao_zheng_jing = 20;</code>
     *
     * <pre>
     * 正精飘分
     * </pre>
     */
    int getPiaoZhengJing(int index);

    // repeated int32 piao_fu_jing = 21;
    /**
     * <code>repeated int32 piao_fu_jing = 21;</code>
     *
     * <pre>
     * 副精飘分
     * </pre>
     */
    java.util.List<java.lang.Integer> getPiaoFuJingList();
    /**
     * <code>repeated int32 piao_fu_jing = 21;</code>
     *
     * <pre>
     * 副精飘分
     * </pre>
     */
    int getPiaoFuJingCount();
    /**
     * <code>repeated int32 piao_fu_jing = 21;</code>
     *
     * <pre>
     * 副精飘分
     * </pre>
     */
    int getPiaoFuJing(int index);
  }
  /**
   * Protobuf type {@code czbg.GameEndResponse_GZCG}
   */
  public static final class GameEndResponse_GZCG extends
      com.google.protobuf.GeneratedMessage
      implements GameEndResponse_GZCGOrBuilder {
    // Use GameEndResponse_GZCG.newBuilder() to construct.
    private GameEndResponse_GZCG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameEndResponse_GZCG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameEndResponse_GZCG defaultInstance;
    public static GameEndResponse_GZCG getDefaultInstance() {
      return defaultInstance;
    }

    public GameEndResponse_GZCG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameEndResponse_GZCG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.GameEndResponse.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = gameEnd_.toBuilder();
              }
              gameEnd_ = input.readMessage(protobuf.clazz.Protocol.GameEndResponse.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gameEnd_);
                gameEnd_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                zhengJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              zhengJing_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                zhengJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhengJing_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              otherJingNumber_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                otherJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              otherJing_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                otherJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                otherJing_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                jingScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              jingScore_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                jingScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                jingScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                huPaiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              huPaiScore_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                huPaiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                huPaiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                jiangLiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              jiangLiScore_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                jiangLiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                jiangLiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                mingGang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              mingGang_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                mingGang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                mingGang_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                anGang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              anGang_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                anGang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                anGang_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                gangJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              gangJing_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                gangJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                gangJing_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                chaoZhuang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              chaoZhuang_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                chaoZhuang_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                chaoZhuang_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                totalScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              totalScore_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                totalScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                totalScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 106: {
              bitField0_ |= 0x00000004;
              resultDesc_ = input.readBytes();
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                zhengJingCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              zhengJingCount_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                zhengJingCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhengJingCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                fuJingCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              fuJingCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                fuJingCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                fuJingCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                isBaWangJing_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00008000;
              }
              isBaWangJing_.add(input.readBool());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                isBaWangJing_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                isBaWangJing_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                chongGuanScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              chongGuanScore_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                chongGuanScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                chongGuanScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                everyJingScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              everyJingScore_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                everyJingScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                everyJingScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                jingInfo_ = new java.util.ArrayList<protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG>();
                mutable_bitField0_ |= 0x00040000;
              }
              jingInfo_.add(input.readMessage(protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.PARSER, extensionRegistry));
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                piaoZhengJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              piaoZhengJing_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                piaoZhengJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                piaoZhengJing_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                piaoFuJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              piaoFuJing_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                piaoFuJing_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                piaoFuJing_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          zhengJing_ = java.util.Collections.unmodifiableList(zhengJing_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          otherJing_ = java.util.Collections.unmodifiableList(otherJing_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          jingScore_ = java.util.Collections.unmodifiableList(jingScore_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          huPaiScore_ = java.util.Collections.unmodifiableList(huPaiScore_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          jiangLiScore_ = java.util.Collections.unmodifiableList(jiangLiScore_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          mingGang_ = java.util.Collections.unmodifiableList(mingGang_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          anGang_ = java.util.Collections.unmodifiableList(anGang_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          gangJing_ = java.util.Collections.unmodifiableList(gangJing_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          chaoZhuang_ = java.util.Collections.unmodifiableList(chaoZhuang_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          totalScore_ = java.util.Collections.unmodifiableList(totalScore_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          zhengJingCount_ = java.util.Collections.unmodifiableList(zhengJingCount_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          fuJingCount_ = java.util.Collections.unmodifiableList(fuJingCount_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          isBaWangJing_ = java.util.Collections.unmodifiableList(isBaWangJing_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          chongGuanScore_ = java.util.Collections.unmodifiableList(chongGuanScore_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          everyJingScore_ = java.util.Collections.unmodifiableList(everyJingScore_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          jingInfo_ = java.util.Collections.unmodifiableList(jingInfo_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          piaoZhengJing_ = java.util.Collections.unmodifiableList(piaoZhengJing_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          piaoFuJing_ = java.util.Collections.unmodifiableList(piaoFuJing_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_GameEndResponse_GZCG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_GameEndResponse_GZCG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG.class, protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG.Builder.class);
    }

    public static com.google.protobuf.Parser<GameEndResponse_GZCG> PARSER =
        new com.google.protobuf.AbstractParser<GameEndResponse_GZCG>() {
      public GameEndResponse_GZCG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameEndResponse_GZCG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameEndResponse_GZCG> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .GameEndResponse game_end = 1;
    public static final int GAME_END_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.GameEndResponse gameEnd_;
    /**
     * <code>optional .GameEndResponse game_end = 1;</code>
     *
     * <pre>
     * 结算
     * </pre>
     */
    public boolean hasGameEnd() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .GameEndResponse game_end = 1;</code>
     *
     * <pre>
     * 结算
     * </pre>
     */
    public protobuf.clazz.Protocol.GameEndResponse getGameEnd() {
      return gameEnd_;
    }
    /**
     * <code>optional .GameEndResponse game_end = 1;</code>
     *
     * <pre>
     * 结算
     * </pre>
     */
    public protobuf.clazz.Protocol.GameEndResponseOrBuilder getGameEndOrBuilder() {
      return gameEnd_;
    }

    // repeated int32 zheng_jing = 2;
    public static final int ZHENG_JING_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> zhengJing_;
    /**
     * <code>repeated int32 zheng_jing = 2;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhengJingList() {
      return zhengJing_;
    }
    /**
     * <code>repeated int32 zheng_jing = 2;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    public int getZhengJingCount() {
      return zhengJing_.size();
    }
    /**
     * <code>repeated int32 zheng_jing = 2;</code>
     *
     * <pre>
     * 第一个表示上精中的正精  第二个表示副精
     * </pre>
     */
    public int getZhengJing(int index) {
      return zhengJing_.get(index);
    }

    // optional int32 other_jing_number = 3;
    public static final int OTHER_JING_NUMBER_FIELD_NUMBER = 3;
    private int otherJingNumber_;
    /**
     * <code>optional int32 other_jing_number = 3;</code>
     *
     * <pre>
     * 其他精牌数量
     * </pre>
     */
    public boolean hasOtherJingNumber() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 other_jing_number = 3;</code>
     *
     * <pre>
     * 其他精牌数量
     * </pre>
     */
    public int getOtherJingNumber() {
      return otherJingNumber_;
    }

    // repeated int32 other_jing = 4;
    public static final int OTHER_JING_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> otherJing_;
    /**
     * <code>repeated int32 other_jing = 4;</code>
     *
     * <pre>
     * 其他精牌数值 该数组长度为other_jing_number的2倍
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOtherJingList() {
      return otherJing_;
    }
    /**
     * <code>repeated int32 other_jing = 4;</code>
     *
     * <pre>
     * 其他精牌数值 该数组长度为other_jing_number的2倍
     * </pre>
     */
    public int getOtherJingCount() {
      return otherJing_.size();
    }
    /**
     * <code>repeated int32 other_jing = 4;</code>
     *
     * <pre>
     * 其他精牌数值 该数组长度为other_jing_number的2倍
     * </pre>
     */
    public int getOtherJing(int index) {
      return otherJing_.get(index);
    }

    // repeated int32 jing_score = 5;
    public static final int JING_SCORE_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> jingScore_;
    /**
     * <code>repeated int32 jing_score = 5;</code>
     *
     * <pre>
     * 精牌分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJingScoreList() {
      return jingScore_;
    }
    /**
     * <code>repeated int32 jing_score = 5;</code>
     *
     * <pre>
     * 精牌分
     * </pre>
     */
    public int getJingScoreCount() {
      return jingScore_.size();
    }
    /**
     * <code>repeated int32 jing_score = 5;</code>
     *
     * <pre>
     * 精牌分
     * </pre>
     */
    public int getJingScore(int index) {
      return jingScore_.get(index);
    }

    // repeated int32 hu_pai_score = 6;
    public static final int HU_PAI_SCORE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> huPaiScore_;
    /**
     * <code>repeated int32 hu_pai_score = 6;</code>
     *
     * <pre>
     * 胡牌分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHuPaiScoreList() {
      return huPaiScore_;
    }
    /**
     * <code>repeated int32 hu_pai_score = 6;</code>
     *
     * <pre>
     * 胡牌分
     * </pre>
     */
    public int getHuPaiScoreCount() {
      return huPaiScore_.size();
    }
    /**
     * <code>repeated int32 hu_pai_score = 6;</code>
     *
     * <pre>
     * 胡牌分
     * </pre>
     */
    public int getHuPaiScore(int index) {
      return huPaiScore_.get(index);
    }

    // repeated int32 jiang_li_score = 7;
    public static final int JIANG_LI_SCORE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> jiangLiScore_;
    /**
     * <code>repeated int32 jiang_li_score = 7;</code>
     *
     * <pre>
     * 奖励分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJiangLiScoreList() {
      return jiangLiScore_;
    }
    /**
     * <code>repeated int32 jiang_li_score = 7;</code>
     *
     * <pre>
     * 奖励分
     * </pre>
     */
    public int getJiangLiScoreCount() {
      return jiangLiScore_.size();
    }
    /**
     * <code>repeated int32 jiang_li_score = 7;</code>
     *
     * <pre>
     * 奖励分
     * </pre>
     */
    public int getJiangLiScore(int index) {
      return jiangLiScore_.get(index);
    }

    // repeated int32 ming_gang = 8;
    public static final int MING_GANG_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> mingGang_;
    /**
     * <code>repeated int32 ming_gang = 8;</code>
     *
     * <pre>
     * 明杠
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getMingGangList() {
      return mingGang_;
    }
    /**
     * <code>repeated int32 ming_gang = 8;</code>
     *
     * <pre>
     * 明杠
     * </pre>
     */
    public int getMingGangCount() {
      return mingGang_.size();
    }
    /**
     * <code>repeated int32 ming_gang = 8;</code>
     *
     * <pre>
     * 明杠
     * </pre>
     */
    public int getMingGang(int index) {
      return mingGang_.get(index);
    }

    // repeated int32 an_gang = 9;
    public static final int AN_GANG_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> anGang_;
    /**
     * <code>repeated int32 an_gang = 9;</code>
     *
     * <pre>
     *暗杠
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAnGangList() {
      return anGang_;
    }
    /**
     * <code>repeated int32 an_gang = 9;</code>
     *
     * <pre>
     *暗杠
     * </pre>
     */
    public int getAnGangCount() {
      return anGang_.size();
    }
    /**
     * <code>repeated int32 an_gang = 9;</code>
     *
     * <pre>
     *暗杠
     * </pre>
     */
    public int getAnGang(int index) {
      return anGang_.get(index);
    }

    // repeated int32 gang_jing = 10;
    public static final int GANG_JING_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> gangJing_;
    /**
     * <code>repeated int32 gang_jing = 10;</code>
     *
     * <pre>
     * 杠精
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getGangJingList() {
      return gangJing_;
    }
    /**
     * <code>repeated int32 gang_jing = 10;</code>
     *
     * <pre>
     * 杠精
     * </pre>
     */
    public int getGangJingCount() {
      return gangJing_.size();
    }
    /**
     * <code>repeated int32 gang_jing = 10;</code>
     *
     * <pre>
     * 杠精
     * </pre>
     */
    public int getGangJing(int index) {
      return gangJing_.get(index);
    }

    // repeated int32 chao_zhuang = 11;
    public static final int CHAO_ZHUANG_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> chaoZhuang_;
    /**
     * <code>repeated int32 chao_zhuang = 11;</code>
     *
     * <pre>
     * 抄庄
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChaoZhuangList() {
      return chaoZhuang_;
    }
    /**
     * <code>repeated int32 chao_zhuang = 11;</code>
     *
     * <pre>
     * 抄庄
     * </pre>
     */
    public int getChaoZhuangCount() {
      return chaoZhuang_.size();
    }
    /**
     * <code>repeated int32 chao_zhuang = 11;</code>
     *
     * <pre>
     * 抄庄
     * </pre>
     */
    public int getChaoZhuang(int index) {
      return chaoZhuang_.get(index);
    }

    // repeated int32 total_score = 12;
    public static final int TOTAL_SCORE_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> totalScore_;
    /**
     * <code>repeated int32 total_score = 12;</code>
     *
     * <pre>
     * 总成绩
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTotalScoreList() {
      return totalScore_;
    }
    /**
     * <code>repeated int32 total_score = 12;</code>
     *
     * <pre>
     * 总成绩
     * </pre>
     */
    public int getTotalScoreCount() {
      return totalScore_.size();
    }
    /**
     * <code>repeated int32 total_score = 12;</code>
     *
     * <pre>
     * 总成绩
     * </pre>
     */
    public int getTotalScore(int index) {
      return totalScore_.get(index);
    }

    // optional string result_desc = 13;
    public static final int RESULT_DESC_FIELD_NUMBER = 13;
    private java.lang.Object resultDesc_;
    /**
     * <code>optional string result_desc = 13;</code>
     *
     * <pre>
     * 胡牌描述
     * </pre>
     */
    public boolean hasResultDesc() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string result_desc = 13;</code>
     *
     * <pre>
     * 胡牌描述
     * </pre>
     */
    public java.lang.String getResultDesc() {
      java.lang.Object ref = resultDesc_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          resultDesc_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string result_desc = 13;</code>
     *
     * <pre>
     * 胡牌描述
     * </pre>
     */
    public com.google.protobuf.ByteString
        getResultDescBytes() {
      java.lang.Object ref = resultDesc_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        resultDesc_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated int32 zheng_jing_count = 14;
    public static final int ZHENG_JING_COUNT_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> zhengJingCount_;
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhengJingCountList() {
      return zhengJingCount_;
    }
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    public int getZhengJingCountCount() {
      return zhengJingCount_.size();
    }
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    public int getZhengJingCount(int index) {
      return zhengJingCount_.get(index);
    }

    // repeated int32 fu_jing_count = 15;
    public static final int FU_JING_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> fuJingCount_;
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getFuJingCountList() {
      return fuJingCount_;
    }
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    public int getFuJingCountCount() {
      return fuJingCount_.size();
    }
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    public int getFuJingCount(int index) {
      return fuJingCount_.get(index);
    }

    // repeated bool is_ba_wang_jing = 16;
    public static final int IS_BA_WANG_JING_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Boolean> isBaWangJing_;
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getIsBaWangJingList() {
      return isBaWangJing_;
    }
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    public int getIsBaWangJingCount() {
      return isBaWangJing_.size();
    }
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    public boolean getIsBaWangJing(int index) {
      return isBaWangJing_.get(index);
    }

    // repeated int32 chong_guan_score = 17;
    public static final int CHONG_GUAN_SCORE_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> chongGuanScore_;
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChongGuanScoreList() {
      return chongGuanScore_;
    }
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    public int getChongGuanScoreCount() {
      return chongGuanScore_.size();
    }
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    public int getChongGuanScore(int index) {
      return chongGuanScore_.get(index);
    }

    // repeated int32 every_jing_score = 18;
    public static final int EVERY_JING_SCORE_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> everyJingScore_;
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEveryJingScoreList() {
      return everyJingScore_;
    }
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    public int getEveryJingScoreCount() {
      return everyJingScore_.size();
    }
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    public int getEveryJingScore(int index) {
      return everyJingScore_.get(index);
    }

    // repeated .czbg.EveryJingInfo_GZCG jing_info = 19;
    public static final int JING_INFO_FIELD_NUMBER = 19;
    private java.util.List<protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG> jingInfo_;
    /**
     * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
     *
     * <pre>
     * 每个玩家的精分信息
     * </pre>
     */
    public java.util.List<protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG> getJingInfoList() {
      return jingInfo_;
    }
    /**
     * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
     *
     * <pre>
     * 每个玩家的精分信息
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCGOrBuilder> 
        getJingInfoOrBuilderList() {
      return jingInfo_;
    }
    /**
     * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
     *
     * <pre>
     * 每个玩家的精分信息
     * </pre>
     */
    public int getJingInfoCount() {
      return jingInfo_.size();
    }
    /**
     * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
     *
     * <pre>
     * 每个玩家的精分信息
     * </pre>
     */
    public protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG getJingInfo(int index) {
      return jingInfo_.get(index);
    }
    /**
     * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
     *
     * <pre>
     * 每个玩家的精分信息
     * </pre>
     */
    public protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCGOrBuilder getJingInfoOrBuilder(
        int index) {
      return jingInfo_.get(index);
    }

    // repeated int32 piao_zheng_jing = 20;
    public static final int PIAO_ZHENG_JING_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> piaoZhengJing_;
    /**
     * <code>repeated int32 piao_zheng_jing = 20;</code>
     *
     * <pre>
     * 正精飘分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPiaoZhengJingList() {
      return piaoZhengJing_;
    }
    /**
     * <code>repeated int32 piao_zheng_jing = 20;</code>
     *
     * <pre>
     * 正精飘分
     * </pre>
     */
    public int getPiaoZhengJingCount() {
      return piaoZhengJing_.size();
    }
    /**
     * <code>repeated int32 piao_zheng_jing = 20;</code>
     *
     * <pre>
     * 正精飘分
     * </pre>
     */
    public int getPiaoZhengJing(int index) {
      return piaoZhengJing_.get(index);
    }

    // repeated int32 piao_fu_jing = 21;
    public static final int PIAO_FU_JING_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> piaoFuJing_;
    /**
     * <code>repeated int32 piao_fu_jing = 21;</code>
     *
     * <pre>
     * 副精飘分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPiaoFuJingList() {
      return piaoFuJing_;
    }
    /**
     * <code>repeated int32 piao_fu_jing = 21;</code>
     *
     * <pre>
     * 副精飘分
     * </pre>
     */
    public int getPiaoFuJingCount() {
      return piaoFuJing_.size();
    }
    /**
     * <code>repeated int32 piao_fu_jing = 21;</code>
     *
     * <pre>
     * 副精飘分
     * </pre>
     */
    public int getPiaoFuJing(int index) {
      return piaoFuJing_.get(index);
    }

    private void initFields() {
      gameEnd_ = protobuf.clazz.Protocol.GameEndResponse.getDefaultInstance();
      zhengJing_ = java.util.Collections.emptyList();
      otherJingNumber_ = 0;
      otherJing_ = java.util.Collections.emptyList();
      jingScore_ = java.util.Collections.emptyList();
      huPaiScore_ = java.util.Collections.emptyList();
      jiangLiScore_ = java.util.Collections.emptyList();
      mingGang_ = java.util.Collections.emptyList();
      anGang_ = java.util.Collections.emptyList();
      gangJing_ = java.util.Collections.emptyList();
      chaoZhuang_ = java.util.Collections.emptyList();
      totalScore_ = java.util.Collections.emptyList();
      resultDesc_ = "";
      zhengJingCount_ = java.util.Collections.emptyList();
      fuJingCount_ = java.util.Collections.emptyList();
      isBaWangJing_ = java.util.Collections.emptyList();
      chongGuanScore_ = java.util.Collections.emptyList();
      everyJingScore_ = java.util.Collections.emptyList();
      jingInfo_ = java.util.Collections.emptyList();
      piaoZhengJing_ = java.util.Collections.emptyList();
      piaoFuJing_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, gameEnd_);
      }
      for (int i = 0; i < zhengJing_.size(); i++) {
        output.writeInt32(2, zhengJing_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, otherJingNumber_);
      }
      for (int i = 0; i < otherJing_.size(); i++) {
        output.writeInt32(4, otherJing_.get(i));
      }
      for (int i = 0; i < jingScore_.size(); i++) {
        output.writeInt32(5, jingScore_.get(i));
      }
      for (int i = 0; i < huPaiScore_.size(); i++) {
        output.writeInt32(6, huPaiScore_.get(i));
      }
      for (int i = 0; i < jiangLiScore_.size(); i++) {
        output.writeInt32(7, jiangLiScore_.get(i));
      }
      for (int i = 0; i < mingGang_.size(); i++) {
        output.writeInt32(8, mingGang_.get(i));
      }
      for (int i = 0; i < anGang_.size(); i++) {
        output.writeInt32(9, anGang_.get(i));
      }
      for (int i = 0; i < gangJing_.size(); i++) {
        output.writeInt32(10, gangJing_.get(i));
      }
      for (int i = 0; i < chaoZhuang_.size(); i++) {
        output.writeInt32(11, chaoZhuang_.get(i));
      }
      for (int i = 0; i < totalScore_.size(); i++) {
        output.writeInt32(12, totalScore_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(13, getResultDescBytes());
      }
      for (int i = 0; i < zhengJingCount_.size(); i++) {
        output.writeInt32(14, zhengJingCount_.get(i));
      }
      for (int i = 0; i < fuJingCount_.size(); i++) {
        output.writeInt32(15, fuJingCount_.get(i));
      }
      for (int i = 0; i < isBaWangJing_.size(); i++) {
        output.writeBool(16, isBaWangJing_.get(i));
      }
      for (int i = 0; i < chongGuanScore_.size(); i++) {
        output.writeInt32(17, chongGuanScore_.get(i));
      }
      for (int i = 0; i < everyJingScore_.size(); i++) {
        output.writeInt32(18, everyJingScore_.get(i));
      }
      for (int i = 0; i < jingInfo_.size(); i++) {
        output.writeMessage(19, jingInfo_.get(i));
      }
      for (int i = 0; i < piaoZhengJing_.size(); i++) {
        output.writeInt32(20, piaoZhengJing_.get(i));
      }
      for (int i = 0; i < piaoFuJing_.size(); i++) {
        output.writeInt32(21, piaoFuJing_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, gameEnd_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < zhengJing_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhengJing_.get(i));
        }
        size += dataSize;
        size += 1 * getZhengJingList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, otherJingNumber_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < otherJing_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(otherJing_.get(i));
        }
        size += dataSize;
        size += 1 * getOtherJingList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jingScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jingScore_.get(i));
        }
        size += dataSize;
        size += 1 * getJingScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < huPaiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(huPaiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getHuPaiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jiangLiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jiangLiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getJiangLiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mingGang_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(mingGang_.get(i));
        }
        size += dataSize;
        size += 1 * getMingGangList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < anGang_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(anGang_.get(i));
        }
        size += dataSize;
        size += 1 * getAnGangList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < gangJing_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(gangJing_.get(i));
        }
        size += dataSize;
        size += 1 * getGangJingList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chaoZhuang_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chaoZhuang_.get(i));
        }
        size += dataSize;
        size += 1 * getChaoZhuangList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < totalScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(totalScore_.get(i));
        }
        size += dataSize;
        size += 1 * getTotalScoreList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, getResultDescBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < zhengJingCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhengJingCount_.get(i));
        }
        size += dataSize;
        size += 1 * getZhengJingCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < fuJingCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(fuJingCount_.get(i));
        }
        size += dataSize;
        size += 1 * getFuJingCountList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getIsBaWangJingList().size();
        size += dataSize;
        size += 2 * getIsBaWangJingList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chongGuanScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chongGuanScore_.get(i));
        }
        size += dataSize;
        size += 2 * getChongGuanScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < everyJingScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(everyJingScore_.get(i));
        }
        size += dataSize;
        size += 2 * getEveryJingScoreList().size();
      }
      for (int i = 0; i < jingInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, jingInfo_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < piaoZhengJing_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(piaoZhengJing_.get(i));
        }
        size += dataSize;
        size += 2 * getPiaoZhengJingList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < piaoFuJing_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(piaoFuJing_.get(i));
        }
        size += dataSize;
        size += 2 * getPiaoFuJingList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.GameEndResponse_GZCG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_GameEndResponse_GZCG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_GameEndResponse_GZCG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG.class, protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG.Builder.class);
      }

      // Construct using protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGameEndFieldBuilder();
          getJingInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (gameEndBuilder_ == null) {
          gameEnd_ = protobuf.clazz.Protocol.GameEndResponse.getDefaultInstance();
        } else {
          gameEndBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        zhengJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        otherJingNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        otherJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        jingScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        huPaiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        jiangLiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        mingGang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        anGang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        gangJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        chaoZhuang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        totalScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        resultDesc_ = "";
        bitField0_ = (bitField0_ & ~0x00001000);
        zhengJingCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        fuJingCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        isBaWangJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        chongGuanScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        everyJingScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        if (jingInfoBuilder_ == null) {
          jingInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
        } else {
          jingInfoBuilder_.clear();
        }
        piaoZhengJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        piaoFuJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_GameEndResponse_GZCG_descriptor;
      }

      public protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG getDefaultInstanceForType() {
        return protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG.getDefaultInstance();
      }

      public protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG build() {
        protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG buildPartial() {
        protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG result = new protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (gameEndBuilder_ == null) {
          result.gameEnd_ = gameEnd_;
        } else {
          result.gameEnd_ = gameEndBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          zhengJing_ = java.util.Collections.unmodifiableList(zhengJing_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.zhengJing_ = zhengJing_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.otherJingNumber_ = otherJingNumber_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          otherJing_ = java.util.Collections.unmodifiableList(otherJing_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.otherJing_ = otherJing_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          jingScore_ = java.util.Collections.unmodifiableList(jingScore_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.jingScore_ = jingScore_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          huPaiScore_ = java.util.Collections.unmodifiableList(huPaiScore_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.huPaiScore_ = huPaiScore_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          jiangLiScore_ = java.util.Collections.unmodifiableList(jiangLiScore_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.jiangLiScore_ = jiangLiScore_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          mingGang_ = java.util.Collections.unmodifiableList(mingGang_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.mingGang_ = mingGang_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          anGang_ = java.util.Collections.unmodifiableList(anGang_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.anGang_ = anGang_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          gangJing_ = java.util.Collections.unmodifiableList(gangJing_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.gangJing_ = gangJing_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          chaoZhuang_ = java.util.Collections.unmodifiableList(chaoZhuang_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.chaoZhuang_ = chaoZhuang_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          totalScore_ = java.util.Collections.unmodifiableList(totalScore_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.totalScore_ = totalScore_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000004;
        }
        result.resultDesc_ = resultDesc_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          zhengJingCount_ = java.util.Collections.unmodifiableList(zhengJingCount_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.zhengJingCount_ = zhengJingCount_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          fuJingCount_ = java.util.Collections.unmodifiableList(fuJingCount_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.fuJingCount_ = fuJingCount_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          isBaWangJing_ = java.util.Collections.unmodifiableList(isBaWangJing_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.isBaWangJing_ = isBaWangJing_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          chongGuanScore_ = java.util.Collections.unmodifiableList(chongGuanScore_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.chongGuanScore_ = chongGuanScore_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          everyJingScore_ = java.util.Collections.unmodifiableList(everyJingScore_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.everyJingScore_ = everyJingScore_;
        if (jingInfoBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000)) {
            jingInfo_ = java.util.Collections.unmodifiableList(jingInfo_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.jingInfo_ = jingInfo_;
        } else {
          result.jingInfo_ = jingInfoBuilder_.build();
        }
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          piaoZhengJing_ = java.util.Collections.unmodifiableList(piaoZhengJing_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.piaoZhengJing_ = piaoZhengJing_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          piaoFuJing_ = java.util.Collections.unmodifiableList(piaoFuJing_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.piaoFuJing_ = piaoFuJing_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG) {
          return mergeFrom((protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG other) {
        if (other == protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG.getDefaultInstance()) return this;
        if (other.hasGameEnd()) {
          mergeGameEnd(other.getGameEnd());
        }
        if (!other.zhengJing_.isEmpty()) {
          if (zhengJing_.isEmpty()) {
            zhengJing_ = other.zhengJing_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureZhengJingIsMutable();
            zhengJing_.addAll(other.zhengJing_);
          }
          onChanged();
        }
        if (other.hasOtherJingNumber()) {
          setOtherJingNumber(other.getOtherJingNumber());
        }
        if (!other.otherJing_.isEmpty()) {
          if (otherJing_.isEmpty()) {
            otherJing_ = other.otherJing_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureOtherJingIsMutable();
            otherJing_.addAll(other.otherJing_);
          }
          onChanged();
        }
        if (!other.jingScore_.isEmpty()) {
          if (jingScore_.isEmpty()) {
            jingScore_ = other.jingScore_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureJingScoreIsMutable();
            jingScore_.addAll(other.jingScore_);
          }
          onChanged();
        }
        if (!other.huPaiScore_.isEmpty()) {
          if (huPaiScore_.isEmpty()) {
            huPaiScore_ = other.huPaiScore_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureHuPaiScoreIsMutable();
            huPaiScore_.addAll(other.huPaiScore_);
          }
          onChanged();
        }
        if (!other.jiangLiScore_.isEmpty()) {
          if (jiangLiScore_.isEmpty()) {
            jiangLiScore_ = other.jiangLiScore_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureJiangLiScoreIsMutable();
            jiangLiScore_.addAll(other.jiangLiScore_);
          }
          onChanged();
        }
        if (!other.mingGang_.isEmpty()) {
          if (mingGang_.isEmpty()) {
            mingGang_ = other.mingGang_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureMingGangIsMutable();
            mingGang_.addAll(other.mingGang_);
          }
          onChanged();
        }
        if (!other.anGang_.isEmpty()) {
          if (anGang_.isEmpty()) {
            anGang_ = other.anGang_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureAnGangIsMutable();
            anGang_.addAll(other.anGang_);
          }
          onChanged();
        }
        if (!other.gangJing_.isEmpty()) {
          if (gangJing_.isEmpty()) {
            gangJing_ = other.gangJing_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureGangJingIsMutable();
            gangJing_.addAll(other.gangJing_);
          }
          onChanged();
        }
        if (!other.chaoZhuang_.isEmpty()) {
          if (chaoZhuang_.isEmpty()) {
            chaoZhuang_ = other.chaoZhuang_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureChaoZhuangIsMutable();
            chaoZhuang_.addAll(other.chaoZhuang_);
          }
          onChanged();
        }
        if (!other.totalScore_.isEmpty()) {
          if (totalScore_.isEmpty()) {
            totalScore_ = other.totalScore_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureTotalScoreIsMutable();
            totalScore_.addAll(other.totalScore_);
          }
          onChanged();
        }
        if (other.hasResultDesc()) {
          bitField0_ |= 0x00001000;
          resultDesc_ = other.resultDesc_;
          onChanged();
        }
        if (!other.zhengJingCount_.isEmpty()) {
          if (zhengJingCount_.isEmpty()) {
            zhengJingCount_ = other.zhengJingCount_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureZhengJingCountIsMutable();
            zhengJingCount_.addAll(other.zhengJingCount_);
          }
          onChanged();
        }
        if (!other.fuJingCount_.isEmpty()) {
          if (fuJingCount_.isEmpty()) {
            fuJingCount_ = other.fuJingCount_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureFuJingCountIsMutable();
            fuJingCount_.addAll(other.fuJingCount_);
          }
          onChanged();
        }
        if (!other.isBaWangJing_.isEmpty()) {
          if (isBaWangJing_.isEmpty()) {
            isBaWangJing_ = other.isBaWangJing_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureIsBaWangJingIsMutable();
            isBaWangJing_.addAll(other.isBaWangJing_);
          }
          onChanged();
        }
        if (!other.chongGuanScore_.isEmpty()) {
          if (chongGuanScore_.isEmpty()) {
            chongGuanScore_ = other.chongGuanScore_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureChongGuanScoreIsMutable();
            chongGuanScore_.addAll(other.chongGuanScore_);
          }
          onChanged();
        }
        if (!other.everyJingScore_.isEmpty()) {
          if (everyJingScore_.isEmpty()) {
            everyJingScore_ = other.everyJingScore_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureEveryJingScoreIsMutable();
            everyJingScore_.addAll(other.everyJingScore_);
          }
          onChanged();
        }
        if (jingInfoBuilder_ == null) {
          if (!other.jingInfo_.isEmpty()) {
            if (jingInfo_.isEmpty()) {
              jingInfo_ = other.jingInfo_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensureJingInfoIsMutable();
              jingInfo_.addAll(other.jingInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.jingInfo_.isEmpty()) {
            if (jingInfoBuilder_.isEmpty()) {
              jingInfoBuilder_.dispose();
              jingInfoBuilder_ = null;
              jingInfo_ = other.jingInfo_;
              bitField0_ = (bitField0_ & ~0x00040000);
              jingInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getJingInfoFieldBuilder() : null;
            } else {
              jingInfoBuilder_.addAllMessages(other.jingInfo_);
            }
          }
        }
        if (!other.piaoZhengJing_.isEmpty()) {
          if (piaoZhengJing_.isEmpty()) {
            piaoZhengJing_ = other.piaoZhengJing_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensurePiaoZhengJingIsMutable();
            piaoZhengJing_.addAll(other.piaoZhengJing_);
          }
          onChanged();
        }
        if (!other.piaoFuJing_.isEmpty()) {
          if (piaoFuJing_.isEmpty()) {
            piaoFuJing_ = other.piaoFuJing_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensurePiaoFuJingIsMutable();
            piaoFuJing_.addAll(other.piaoFuJing_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzcg.GZCGRsp.GameEndResponse_GZCG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .GameEndResponse game_end = 1;
      private protobuf.clazz.Protocol.GameEndResponse gameEnd_ = protobuf.clazz.Protocol.GameEndResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.GameEndResponse, protobuf.clazz.Protocol.GameEndResponse.Builder, protobuf.clazz.Protocol.GameEndResponseOrBuilder> gameEndBuilder_;
      /**
       * <code>optional .GameEndResponse game_end = 1;</code>
       *
       * <pre>
       * 结算
       * </pre>
       */
      public boolean hasGameEnd() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .GameEndResponse game_end = 1;</code>
       *
       * <pre>
       * 结算
       * </pre>
       */
      public protobuf.clazz.Protocol.GameEndResponse getGameEnd() {
        if (gameEndBuilder_ == null) {
          return gameEnd_;
        } else {
          return gameEndBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .GameEndResponse game_end = 1;</code>
       *
       * <pre>
       * 结算
       * </pre>
       */
      public Builder setGameEnd(protobuf.clazz.Protocol.GameEndResponse value) {
        if (gameEndBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gameEnd_ = value;
          onChanged();
        } else {
          gameEndBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .GameEndResponse game_end = 1;</code>
       *
       * <pre>
       * 结算
       * </pre>
       */
      public Builder setGameEnd(
          protobuf.clazz.Protocol.GameEndResponse.Builder builderForValue) {
        if (gameEndBuilder_ == null) {
          gameEnd_ = builderForValue.build();
          onChanged();
        } else {
          gameEndBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .GameEndResponse game_end = 1;</code>
       *
       * <pre>
       * 结算
       * </pre>
       */
      public Builder mergeGameEnd(protobuf.clazz.Protocol.GameEndResponse value) {
        if (gameEndBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              gameEnd_ != protobuf.clazz.Protocol.GameEndResponse.getDefaultInstance()) {
            gameEnd_ =
              protobuf.clazz.Protocol.GameEndResponse.newBuilder(gameEnd_).mergeFrom(value).buildPartial();
          } else {
            gameEnd_ = value;
          }
          onChanged();
        } else {
          gameEndBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .GameEndResponse game_end = 1;</code>
       *
       * <pre>
       * 结算
       * </pre>
       */
      public Builder clearGameEnd() {
        if (gameEndBuilder_ == null) {
          gameEnd_ = protobuf.clazz.Protocol.GameEndResponse.getDefaultInstance();
          onChanged();
        } else {
          gameEndBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .GameEndResponse game_end = 1;</code>
       *
       * <pre>
       * 结算
       * </pre>
       */
      public protobuf.clazz.Protocol.GameEndResponse.Builder getGameEndBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getGameEndFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .GameEndResponse game_end = 1;</code>
       *
       * <pre>
       * 结算
       * </pre>
       */
      public protobuf.clazz.Protocol.GameEndResponseOrBuilder getGameEndOrBuilder() {
        if (gameEndBuilder_ != null) {
          return gameEndBuilder_.getMessageOrBuilder();
        } else {
          return gameEnd_;
        }
      }
      /**
       * <code>optional .GameEndResponse game_end = 1;</code>
       *
       * <pre>
       * 结算
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.GameEndResponse, protobuf.clazz.Protocol.GameEndResponse.Builder, protobuf.clazz.Protocol.GameEndResponseOrBuilder> 
          getGameEndFieldBuilder() {
        if (gameEndBuilder_ == null) {
          gameEndBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.GameEndResponse, protobuf.clazz.Protocol.GameEndResponse.Builder, protobuf.clazz.Protocol.GameEndResponseOrBuilder>(
                  gameEnd_,
                  getParentForChildren(),
                  isClean());
          gameEnd_ = null;
        }
        return gameEndBuilder_;
      }

      // repeated int32 zheng_jing = 2;
      private java.util.List<java.lang.Integer> zhengJing_ = java.util.Collections.emptyList();
      private void ensureZhengJingIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          zhengJing_ = new java.util.ArrayList<java.lang.Integer>(zhengJing_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 zheng_jing = 2;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhengJingList() {
        return java.util.Collections.unmodifiableList(zhengJing_);
      }
      /**
       * <code>repeated int32 zheng_jing = 2;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public int getZhengJingCount() {
        return zhengJing_.size();
      }
      /**
       * <code>repeated int32 zheng_jing = 2;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public int getZhengJing(int index) {
        return zhengJing_.get(index);
      }
      /**
       * <code>repeated int32 zheng_jing = 2;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public Builder setZhengJing(
          int index, int value) {
        ensureZhengJingIsMutable();
        zhengJing_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing = 2;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public Builder addZhengJing(int value) {
        ensureZhengJingIsMutable();
        zhengJing_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing = 2;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public Builder addAllZhengJing(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhengJingIsMutable();
        super.addAll(values, zhengJing_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing = 2;</code>
       *
       * <pre>
       * 第一个表示上精中的正精  第二个表示副精
       * </pre>
       */
      public Builder clearZhengJing() {
        zhengJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 other_jing_number = 3;
      private int otherJingNumber_ ;
      /**
       * <code>optional int32 other_jing_number = 3;</code>
       *
       * <pre>
       * 其他精牌数量
       * </pre>
       */
      public boolean hasOtherJingNumber() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 other_jing_number = 3;</code>
       *
       * <pre>
       * 其他精牌数量
       * </pre>
       */
      public int getOtherJingNumber() {
        return otherJingNumber_;
      }
      /**
       * <code>optional int32 other_jing_number = 3;</code>
       *
       * <pre>
       * 其他精牌数量
       * </pre>
       */
      public Builder setOtherJingNumber(int value) {
        bitField0_ |= 0x00000004;
        otherJingNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 other_jing_number = 3;</code>
       *
       * <pre>
       * 其他精牌数量
       * </pre>
       */
      public Builder clearOtherJingNumber() {
        bitField0_ = (bitField0_ & ~0x00000004);
        otherJingNumber_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 other_jing = 4;
      private java.util.List<java.lang.Integer> otherJing_ = java.util.Collections.emptyList();
      private void ensureOtherJingIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          otherJing_ = new java.util.ArrayList<java.lang.Integer>(otherJing_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 other_jing = 4;</code>
       *
       * <pre>
       * 其他精牌数值 该数组长度为other_jing_number的2倍
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOtherJingList() {
        return java.util.Collections.unmodifiableList(otherJing_);
      }
      /**
       * <code>repeated int32 other_jing = 4;</code>
       *
       * <pre>
       * 其他精牌数值 该数组长度为other_jing_number的2倍
       * </pre>
       */
      public int getOtherJingCount() {
        return otherJing_.size();
      }
      /**
       * <code>repeated int32 other_jing = 4;</code>
       *
       * <pre>
       * 其他精牌数值 该数组长度为other_jing_number的2倍
       * </pre>
       */
      public int getOtherJing(int index) {
        return otherJing_.get(index);
      }
      /**
       * <code>repeated int32 other_jing = 4;</code>
       *
       * <pre>
       * 其他精牌数值 该数组长度为other_jing_number的2倍
       * </pre>
       */
      public Builder setOtherJing(
          int index, int value) {
        ensureOtherJingIsMutable();
        otherJing_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 other_jing = 4;</code>
       *
       * <pre>
       * 其他精牌数值 该数组长度为other_jing_number的2倍
       * </pre>
       */
      public Builder addOtherJing(int value) {
        ensureOtherJingIsMutable();
        otherJing_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 other_jing = 4;</code>
       *
       * <pre>
       * 其他精牌数值 该数组长度为other_jing_number的2倍
       * </pre>
       */
      public Builder addAllOtherJing(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOtherJingIsMutable();
        super.addAll(values, otherJing_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 other_jing = 4;</code>
       *
       * <pre>
       * 其他精牌数值 该数组长度为other_jing_number的2倍
       * </pre>
       */
      public Builder clearOtherJing() {
        otherJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated int32 jing_score = 5;
      private java.util.List<java.lang.Integer> jingScore_ = java.util.Collections.emptyList();
      private void ensureJingScoreIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          jingScore_ = new java.util.ArrayList<java.lang.Integer>(jingScore_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 jing_score = 5;</code>
       *
       * <pre>
       * 精牌分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJingScoreList() {
        return java.util.Collections.unmodifiableList(jingScore_);
      }
      /**
       * <code>repeated int32 jing_score = 5;</code>
       *
       * <pre>
       * 精牌分
       * </pre>
       */
      public int getJingScoreCount() {
        return jingScore_.size();
      }
      /**
       * <code>repeated int32 jing_score = 5;</code>
       *
       * <pre>
       * 精牌分
       * </pre>
       */
      public int getJingScore(int index) {
        return jingScore_.get(index);
      }
      /**
       * <code>repeated int32 jing_score = 5;</code>
       *
       * <pre>
       * 精牌分
       * </pre>
       */
      public Builder setJingScore(
          int index, int value) {
        ensureJingScoreIsMutable();
        jingScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jing_score = 5;</code>
       *
       * <pre>
       * 精牌分
       * </pre>
       */
      public Builder addJingScore(int value) {
        ensureJingScoreIsMutable();
        jingScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jing_score = 5;</code>
       *
       * <pre>
       * 精牌分
       * </pre>
       */
      public Builder addAllJingScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJingScoreIsMutable();
        super.addAll(values, jingScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jing_score = 5;</code>
       *
       * <pre>
       * 精牌分
       * </pre>
       */
      public Builder clearJingScore() {
        jingScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated int32 hu_pai_score = 6;
      private java.util.List<java.lang.Integer> huPaiScore_ = java.util.Collections.emptyList();
      private void ensureHuPaiScoreIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          huPaiScore_ = new java.util.ArrayList<java.lang.Integer>(huPaiScore_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 hu_pai_score = 6;</code>
       *
       * <pre>
       * 胡牌分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHuPaiScoreList() {
        return java.util.Collections.unmodifiableList(huPaiScore_);
      }
      /**
       * <code>repeated int32 hu_pai_score = 6;</code>
       *
       * <pre>
       * 胡牌分
       * </pre>
       */
      public int getHuPaiScoreCount() {
        return huPaiScore_.size();
      }
      /**
       * <code>repeated int32 hu_pai_score = 6;</code>
       *
       * <pre>
       * 胡牌分
       * </pre>
       */
      public int getHuPaiScore(int index) {
        return huPaiScore_.get(index);
      }
      /**
       * <code>repeated int32 hu_pai_score = 6;</code>
       *
       * <pre>
       * 胡牌分
       * </pre>
       */
      public Builder setHuPaiScore(
          int index, int value) {
        ensureHuPaiScoreIsMutable();
        huPaiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hu_pai_score = 6;</code>
       *
       * <pre>
       * 胡牌分
       * </pre>
       */
      public Builder addHuPaiScore(int value) {
        ensureHuPaiScoreIsMutable();
        huPaiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hu_pai_score = 6;</code>
       *
       * <pre>
       * 胡牌分
       * </pre>
       */
      public Builder addAllHuPaiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHuPaiScoreIsMutable();
        super.addAll(values, huPaiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hu_pai_score = 6;</code>
       *
       * <pre>
       * 胡牌分
       * </pre>
       */
      public Builder clearHuPaiScore() {
        huPaiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 jiang_li_score = 7;
      private java.util.List<java.lang.Integer> jiangLiScore_ = java.util.Collections.emptyList();
      private void ensureJiangLiScoreIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          jiangLiScore_ = new java.util.ArrayList<java.lang.Integer>(jiangLiScore_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 jiang_li_score = 7;</code>
       *
       * <pre>
       * 奖励分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJiangLiScoreList() {
        return java.util.Collections.unmodifiableList(jiangLiScore_);
      }
      /**
       * <code>repeated int32 jiang_li_score = 7;</code>
       *
       * <pre>
       * 奖励分
       * </pre>
       */
      public int getJiangLiScoreCount() {
        return jiangLiScore_.size();
      }
      /**
       * <code>repeated int32 jiang_li_score = 7;</code>
       *
       * <pre>
       * 奖励分
       * </pre>
       */
      public int getJiangLiScore(int index) {
        return jiangLiScore_.get(index);
      }
      /**
       * <code>repeated int32 jiang_li_score = 7;</code>
       *
       * <pre>
       * 奖励分
       * </pre>
       */
      public Builder setJiangLiScore(
          int index, int value) {
        ensureJiangLiScoreIsMutable();
        jiangLiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jiang_li_score = 7;</code>
       *
       * <pre>
       * 奖励分
       * </pre>
       */
      public Builder addJiangLiScore(int value) {
        ensureJiangLiScoreIsMutable();
        jiangLiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jiang_li_score = 7;</code>
       *
       * <pre>
       * 奖励分
       * </pre>
       */
      public Builder addAllJiangLiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJiangLiScoreIsMutable();
        super.addAll(values, jiangLiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jiang_li_score = 7;</code>
       *
       * <pre>
       * 奖励分
       * </pre>
       */
      public Builder clearJiangLiScore() {
        jiangLiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 ming_gang = 8;
      private java.util.List<java.lang.Integer> mingGang_ = java.util.Collections.emptyList();
      private void ensureMingGangIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          mingGang_ = new java.util.ArrayList<java.lang.Integer>(mingGang_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 ming_gang = 8;</code>
       *
       * <pre>
       * 明杠
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMingGangList() {
        return java.util.Collections.unmodifiableList(mingGang_);
      }
      /**
       * <code>repeated int32 ming_gang = 8;</code>
       *
       * <pre>
       * 明杠
       * </pre>
       */
      public int getMingGangCount() {
        return mingGang_.size();
      }
      /**
       * <code>repeated int32 ming_gang = 8;</code>
       *
       * <pre>
       * 明杠
       * </pre>
       */
      public int getMingGang(int index) {
        return mingGang_.get(index);
      }
      /**
       * <code>repeated int32 ming_gang = 8;</code>
       *
       * <pre>
       * 明杠
       * </pre>
       */
      public Builder setMingGang(
          int index, int value) {
        ensureMingGangIsMutable();
        mingGang_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ming_gang = 8;</code>
       *
       * <pre>
       * 明杠
       * </pre>
       */
      public Builder addMingGang(int value) {
        ensureMingGangIsMutable();
        mingGang_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ming_gang = 8;</code>
       *
       * <pre>
       * 明杠
       * </pre>
       */
      public Builder addAllMingGang(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMingGangIsMutable();
        super.addAll(values, mingGang_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ming_gang = 8;</code>
       *
       * <pre>
       * 明杠
       * </pre>
       */
      public Builder clearMingGang() {
        mingGang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // repeated int32 an_gang = 9;
      private java.util.List<java.lang.Integer> anGang_ = java.util.Collections.emptyList();
      private void ensureAnGangIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          anGang_ = new java.util.ArrayList<java.lang.Integer>(anGang_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 an_gang = 9;</code>
       *
       * <pre>
       *暗杠
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAnGangList() {
        return java.util.Collections.unmodifiableList(anGang_);
      }
      /**
       * <code>repeated int32 an_gang = 9;</code>
       *
       * <pre>
       *暗杠
       * </pre>
       */
      public int getAnGangCount() {
        return anGang_.size();
      }
      /**
       * <code>repeated int32 an_gang = 9;</code>
       *
       * <pre>
       *暗杠
       * </pre>
       */
      public int getAnGang(int index) {
        return anGang_.get(index);
      }
      /**
       * <code>repeated int32 an_gang = 9;</code>
       *
       * <pre>
       *暗杠
       * </pre>
       */
      public Builder setAnGang(
          int index, int value) {
        ensureAnGangIsMutable();
        anGang_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 an_gang = 9;</code>
       *
       * <pre>
       *暗杠
       * </pre>
       */
      public Builder addAnGang(int value) {
        ensureAnGangIsMutable();
        anGang_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 an_gang = 9;</code>
       *
       * <pre>
       *暗杠
       * </pre>
       */
      public Builder addAllAnGang(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAnGangIsMutable();
        super.addAll(values, anGang_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 an_gang = 9;</code>
       *
       * <pre>
       *暗杠
       * </pre>
       */
      public Builder clearAnGang() {
        anGang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // repeated int32 gang_jing = 10;
      private java.util.List<java.lang.Integer> gangJing_ = java.util.Collections.emptyList();
      private void ensureGangJingIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          gangJing_ = new java.util.ArrayList<java.lang.Integer>(gangJing_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 gang_jing = 10;</code>
       *
       * <pre>
       * 杠精
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getGangJingList() {
        return java.util.Collections.unmodifiableList(gangJing_);
      }
      /**
       * <code>repeated int32 gang_jing = 10;</code>
       *
       * <pre>
       * 杠精
       * </pre>
       */
      public int getGangJingCount() {
        return gangJing_.size();
      }
      /**
       * <code>repeated int32 gang_jing = 10;</code>
       *
       * <pre>
       * 杠精
       * </pre>
       */
      public int getGangJing(int index) {
        return gangJing_.get(index);
      }
      /**
       * <code>repeated int32 gang_jing = 10;</code>
       *
       * <pre>
       * 杠精
       * </pre>
       */
      public Builder setGangJing(
          int index, int value) {
        ensureGangJingIsMutable();
        gangJing_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 gang_jing = 10;</code>
       *
       * <pre>
       * 杠精
       * </pre>
       */
      public Builder addGangJing(int value) {
        ensureGangJingIsMutable();
        gangJing_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 gang_jing = 10;</code>
       *
       * <pre>
       * 杠精
       * </pre>
       */
      public Builder addAllGangJing(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGangJingIsMutable();
        super.addAll(values, gangJing_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 gang_jing = 10;</code>
       *
       * <pre>
       * 杠精
       * </pre>
       */
      public Builder clearGangJing() {
        gangJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 chao_zhuang = 11;
      private java.util.List<java.lang.Integer> chaoZhuang_ = java.util.Collections.emptyList();
      private void ensureChaoZhuangIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          chaoZhuang_ = new java.util.ArrayList<java.lang.Integer>(chaoZhuang_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 chao_zhuang = 11;</code>
       *
       * <pre>
       * 抄庄
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChaoZhuangList() {
        return java.util.Collections.unmodifiableList(chaoZhuang_);
      }
      /**
       * <code>repeated int32 chao_zhuang = 11;</code>
       *
       * <pre>
       * 抄庄
       * </pre>
       */
      public int getChaoZhuangCount() {
        return chaoZhuang_.size();
      }
      /**
       * <code>repeated int32 chao_zhuang = 11;</code>
       *
       * <pre>
       * 抄庄
       * </pre>
       */
      public int getChaoZhuang(int index) {
        return chaoZhuang_.get(index);
      }
      /**
       * <code>repeated int32 chao_zhuang = 11;</code>
       *
       * <pre>
       * 抄庄
       * </pre>
       */
      public Builder setChaoZhuang(
          int index, int value) {
        ensureChaoZhuangIsMutable();
        chaoZhuang_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chao_zhuang = 11;</code>
       *
       * <pre>
       * 抄庄
       * </pre>
       */
      public Builder addChaoZhuang(int value) {
        ensureChaoZhuangIsMutable();
        chaoZhuang_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chao_zhuang = 11;</code>
       *
       * <pre>
       * 抄庄
       * </pre>
       */
      public Builder addAllChaoZhuang(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChaoZhuangIsMutable();
        super.addAll(values, chaoZhuang_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chao_zhuang = 11;</code>
       *
       * <pre>
       * 抄庄
       * </pre>
       */
      public Builder clearChaoZhuang() {
        chaoZhuang_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 total_score = 12;
      private java.util.List<java.lang.Integer> totalScore_ = java.util.Collections.emptyList();
      private void ensureTotalScoreIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          totalScore_ = new java.util.ArrayList<java.lang.Integer>(totalScore_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 total_score = 12;</code>
       *
       * <pre>
       * 总成绩
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTotalScoreList() {
        return java.util.Collections.unmodifiableList(totalScore_);
      }
      /**
       * <code>repeated int32 total_score = 12;</code>
       *
       * <pre>
       * 总成绩
       * </pre>
       */
      public int getTotalScoreCount() {
        return totalScore_.size();
      }
      /**
       * <code>repeated int32 total_score = 12;</code>
       *
       * <pre>
       * 总成绩
       * </pre>
       */
      public int getTotalScore(int index) {
        return totalScore_.get(index);
      }
      /**
       * <code>repeated int32 total_score = 12;</code>
       *
       * <pre>
       * 总成绩
       * </pre>
       */
      public Builder setTotalScore(
          int index, int value) {
        ensureTotalScoreIsMutable();
        totalScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 total_score = 12;</code>
       *
       * <pre>
       * 总成绩
       * </pre>
       */
      public Builder addTotalScore(int value) {
        ensureTotalScoreIsMutable();
        totalScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 total_score = 12;</code>
       *
       * <pre>
       * 总成绩
       * </pre>
       */
      public Builder addAllTotalScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTotalScoreIsMutable();
        super.addAll(values, totalScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 total_score = 12;</code>
       *
       * <pre>
       * 总成绩
       * </pre>
       */
      public Builder clearTotalScore() {
        totalScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // optional string result_desc = 13;
      private java.lang.Object resultDesc_ = "";
      /**
       * <code>optional string result_desc = 13;</code>
       *
       * <pre>
       * 胡牌描述
       * </pre>
       */
      public boolean hasResultDesc() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional string result_desc = 13;</code>
       *
       * <pre>
       * 胡牌描述
       * </pre>
       */
      public java.lang.String getResultDesc() {
        java.lang.Object ref = resultDesc_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          resultDesc_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string result_desc = 13;</code>
       *
       * <pre>
       * 胡牌描述
       * </pre>
       */
      public com.google.protobuf.ByteString
          getResultDescBytes() {
        java.lang.Object ref = resultDesc_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          resultDesc_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string result_desc = 13;</code>
       *
       * <pre>
       * 胡牌描述
       * </pre>
       */
      public Builder setResultDesc(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        resultDesc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string result_desc = 13;</code>
       *
       * <pre>
       * 胡牌描述
       * </pre>
       */
      public Builder clearResultDesc() {
        bitField0_ = (bitField0_ & ~0x00001000);
        resultDesc_ = getDefaultInstance().getResultDesc();
        onChanged();
        return this;
      }
      /**
       * <code>optional string result_desc = 13;</code>
       *
       * <pre>
       * 胡牌描述
       * </pre>
       */
      public Builder setResultDescBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        resultDesc_ = value;
        onChanged();
        return this;
      }

      // repeated int32 zheng_jing_count = 14;
      private java.util.List<java.lang.Integer> zhengJingCount_ = java.util.Collections.emptyList();
      private void ensureZhengJingCountIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          zhengJingCount_ = new java.util.ArrayList<java.lang.Integer>(zhengJingCount_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhengJingCountList() {
        return java.util.Collections.unmodifiableList(zhengJingCount_);
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public int getZhengJingCountCount() {
        return zhengJingCount_.size();
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public int getZhengJingCount(int index) {
        return zhengJingCount_.get(index);
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public Builder setZhengJingCount(
          int index, int value) {
        ensureZhengJingCountIsMutable();
        zhengJingCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public Builder addZhengJingCount(int value) {
        ensureZhengJingCountIsMutable();
        zhengJingCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public Builder addAllZhengJingCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhengJingCountIsMutable();
        super.addAll(values, zhengJingCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public Builder clearZhengJingCount() {
        zhengJingCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 fu_jing_count = 15;
      private java.util.List<java.lang.Integer> fuJingCount_ = java.util.Collections.emptyList();
      private void ensureFuJingCountIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          fuJingCount_ = new java.util.ArrayList<java.lang.Integer>(fuJingCount_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getFuJingCountList() {
        return java.util.Collections.unmodifiableList(fuJingCount_);
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public int getFuJingCountCount() {
        return fuJingCount_.size();
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public int getFuJingCount(int index) {
        return fuJingCount_.get(index);
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public Builder setFuJingCount(
          int index, int value) {
        ensureFuJingCountIsMutable();
        fuJingCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public Builder addFuJingCount(int value) {
        ensureFuJingCountIsMutable();
        fuJingCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public Builder addAllFuJingCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFuJingCountIsMutable();
        super.addAll(values, fuJingCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public Builder clearFuJingCount() {
        fuJingCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated bool is_ba_wang_jing = 16;
      private java.util.List<java.lang.Boolean> isBaWangJing_ = java.util.Collections.emptyList();
      private void ensureIsBaWangJingIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          isBaWangJing_ = new java.util.ArrayList<java.lang.Boolean>(isBaWangJing_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getIsBaWangJingList() {
        return java.util.Collections.unmodifiableList(isBaWangJing_);
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public int getIsBaWangJingCount() {
        return isBaWangJing_.size();
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public boolean getIsBaWangJing(int index) {
        return isBaWangJing_.get(index);
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public Builder setIsBaWangJing(
          int index, boolean value) {
        ensureIsBaWangJingIsMutable();
        isBaWangJing_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public Builder addIsBaWangJing(boolean value) {
        ensureIsBaWangJingIsMutable();
        isBaWangJing_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public Builder addAllIsBaWangJing(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureIsBaWangJingIsMutable();
        super.addAll(values, isBaWangJing_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public Builder clearIsBaWangJing() {
        isBaWangJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated int32 chong_guan_score = 17;
      private java.util.List<java.lang.Integer> chongGuanScore_ = java.util.Collections.emptyList();
      private void ensureChongGuanScoreIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          chongGuanScore_ = new java.util.ArrayList<java.lang.Integer>(chongGuanScore_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChongGuanScoreList() {
        return java.util.Collections.unmodifiableList(chongGuanScore_);
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public int getChongGuanScoreCount() {
        return chongGuanScore_.size();
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public int getChongGuanScore(int index) {
        return chongGuanScore_.get(index);
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public Builder setChongGuanScore(
          int index, int value) {
        ensureChongGuanScoreIsMutable();
        chongGuanScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public Builder addChongGuanScore(int value) {
        ensureChongGuanScoreIsMutable();
        chongGuanScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public Builder addAllChongGuanScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChongGuanScoreIsMutable();
        super.addAll(values, chongGuanScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public Builder clearChongGuanScore() {
        chongGuanScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      // repeated int32 every_jing_score = 18;
      private java.util.List<java.lang.Integer> everyJingScore_ = java.util.Collections.emptyList();
      private void ensureEveryJingScoreIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          everyJingScore_ = new java.util.ArrayList<java.lang.Integer>(everyJingScore_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEveryJingScoreList() {
        return java.util.Collections.unmodifiableList(everyJingScore_);
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public int getEveryJingScoreCount() {
        return everyJingScore_.size();
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public int getEveryJingScore(int index) {
        return everyJingScore_.get(index);
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public Builder setEveryJingScore(
          int index, int value) {
        ensureEveryJingScoreIsMutable();
        everyJingScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public Builder addEveryJingScore(int value) {
        ensureEveryJingScoreIsMutable();
        everyJingScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public Builder addAllEveryJingScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEveryJingScoreIsMutable();
        super.addAll(values, everyJingScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public Builder clearEveryJingScore() {
        everyJingScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // repeated .czbg.EveryJingInfo_GZCG jing_info = 19;
      private java.util.List<protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG> jingInfo_ =
        java.util.Collections.emptyList();
      private void ensureJingInfoIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          jingInfo_ = new java.util.ArrayList<protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG>(jingInfo_);
          bitField0_ |= 0x00040000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCGOrBuilder> jingInfoBuilder_;

      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public java.util.List<protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG> getJingInfoList() {
        if (jingInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(jingInfo_);
        } else {
          return jingInfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public int getJingInfoCount() {
        if (jingInfoBuilder_ == null) {
          return jingInfo_.size();
        } else {
          return jingInfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG getJingInfo(int index) {
        if (jingInfoBuilder_ == null) {
          return jingInfo_.get(index);
        } else {
          return jingInfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public Builder setJingInfo(
          int index, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG value) {
        if (jingInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJingInfoIsMutable();
          jingInfo_.set(index, value);
          onChanged();
        } else {
          jingInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public Builder setJingInfo(
          int index, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder builderForValue) {
        if (jingInfoBuilder_ == null) {
          ensureJingInfoIsMutable();
          jingInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          jingInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public Builder addJingInfo(protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG value) {
        if (jingInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJingInfoIsMutable();
          jingInfo_.add(value);
          onChanged();
        } else {
          jingInfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public Builder addJingInfo(
          int index, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG value) {
        if (jingInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJingInfoIsMutable();
          jingInfo_.add(index, value);
          onChanged();
        } else {
          jingInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public Builder addJingInfo(
          protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder builderForValue) {
        if (jingInfoBuilder_ == null) {
          ensureJingInfoIsMutable();
          jingInfo_.add(builderForValue.build());
          onChanged();
        } else {
          jingInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public Builder addJingInfo(
          int index, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder builderForValue) {
        if (jingInfoBuilder_ == null) {
          ensureJingInfoIsMutable();
          jingInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          jingInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public Builder addAllJingInfo(
          java.lang.Iterable<? extends protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG> values) {
        if (jingInfoBuilder_ == null) {
          ensureJingInfoIsMutable();
          super.addAll(values, jingInfo_);
          onChanged();
        } else {
          jingInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public Builder clearJingInfo() {
        if (jingInfoBuilder_ == null) {
          jingInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
        } else {
          jingInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public Builder removeJingInfo(int index) {
        if (jingInfoBuilder_ == null) {
          ensureJingInfoIsMutable();
          jingInfo_.remove(index);
          onChanged();
        } else {
          jingInfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder getJingInfoBuilder(
          int index) {
        return getJingInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCGOrBuilder getJingInfoOrBuilder(
          int index) {
        if (jingInfoBuilder_ == null) {
          return jingInfo_.get(index);  } else {
          return jingInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCGOrBuilder> 
           getJingInfoOrBuilderList() {
        if (jingInfoBuilder_ != null) {
          return jingInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(jingInfo_);
        }
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder addJingInfoBuilder() {
        return getJingInfoFieldBuilder().addBuilder(
            protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.getDefaultInstance());
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder addJingInfoBuilder(
          int index) {
        return getJingInfoFieldBuilder().addBuilder(
            index, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.getDefaultInstance());
      }
      /**
       * <code>repeated .czbg.EveryJingInfo_GZCG jing_info = 19;</code>
       *
       * <pre>
       * 每个玩家的精分信息
       * </pre>
       */
      public java.util.List<protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder> 
           getJingInfoBuilderList() {
        return getJingInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCGOrBuilder> 
          getJingInfoFieldBuilder() {
        if (jingInfoBuilder_ == null) {
          jingInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCGOrBuilder>(
                  jingInfo_,
                  ((bitField0_ & 0x00040000) == 0x00040000),
                  getParentForChildren(),
                  isClean());
          jingInfo_ = null;
        }
        return jingInfoBuilder_;
      }

      // repeated int32 piao_zheng_jing = 20;
      private java.util.List<java.lang.Integer> piaoZhengJing_ = java.util.Collections.emptyList();
      private void ensurePiaoZhengJingIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          piaoZhengJing_ = new java.util.ArrayList<java.lang.Integer>(piaoZhengJing_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 piao_zheng_jing = 20;</code>
       *
       * <pre>
       * 正精飘分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPiaoZhengJingList() {
        return java.util.Collections.unmodifiableList(piaoZhengJing_);
      }
      /**
       * <code>repeated int32 piao_zheng_jing = 20;</code>
       *
       * <pre>
       * 正精飘分
       * </pre>
       */
      public int getPiaoZhengJingCount() {
        return piaoZhengJing_.size();
      }
      /**
       * <code>repeated int32 piao_zheng_jing = 20;</code>
       *
       * <pre>
       * 正精飘分
       * </pre>
       */
      public int getPiaoZhengJing(int index) {
        return piaoZhengJing_.get(index);
      }
      /**
       * <code>repeated int32 piao_zheng_jing = 20;</code>
       *
       * <pre>
       * 正精飘分
       * </pre>
       */
      public Builder setPiaoZhengJing(
          int index, int value) {
        ensurePiaoZhengJingIsMutable();
        piaoZhengJing_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 piao_zheng_jing = 20;</code>
       *
       * <pre>
       * 正精飘分
       * </pre>
       */
      public Builder addPiaoZhengJing(int value) {
        ensurePiaoZhengJingIsMutable();
        piaoZhengJing_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 piao_zheng_jing = 20;</code>
       *
       * <pre>
       * 正精飘分
       * </pre>
       */
      public Builder addAllPiaoZhengJing(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePiaoZhengJingIsMutable();
        super.addAll(values, piaoZhengJing_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 piao_zheng_jing = 20;</code>
       *
       * <pre>
       * 正精飘分
       * </pre>
       */
      public Builder clearPiaoZhengJing() {
        piaoZhengJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // repeated int32 piao_fu_jing = 21;
      private java.util.List<java.lang.Integer> piaoFuJing_ = java.util.Collections.emptyList();
      private void ensurePiaoFuJingIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          piaoFuJing_ = new java.util.ArrayList<java.lang.Integer>(piaoFuJing_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 piao_fu_jing = 21;</code>
       *
       * <pre>
       * 副精飘分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPiaoFuJingList() {
        return java.util.Collections.unmodifiableList(piaoFuJing_);
      }
      /**
       * <code>repeated int32 piao_fu_jing = 21;</code>
       *
       * <pre>
       * 副精飘分
       * </pre>
       */
      public int getPiaoFuJingCount() {
        return piaoFuJing_.size();
      }
      /**
       * <code>repeated int32 piao_fu_jing = 21;</code>
       *
       * <pre>
       * 副精飘分
       * </pre>
       */
      public int getPiaoFuJing(int index) {
        return piaoFuJing_.get(index);
      }
      /**
       * <code>repeated int32 piao_fu_jing = 21;</code>
       *
       * <pre>
       * 副精飘分
       * </pre>
       */
      public Builder setPiaoFuJing(
          int index, int value) {
        ensurePiaoFuJingIsMutable();
        piaoFuJing_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 piao_fu_jing = 21;</code>
       *
       * <pre>
       * 副精飘分
       * </pre>
       */
      public Builder addPiaoFuJing(int value) {
        ensurePiaoFuJingIsMutable();
        piaoFuJing_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 piao_fu_jing = 21;</code>
       *
       * <pre>
       * 副精飘分
       * </pre>
       */
      public Builder addAllPiaoFuJing(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePiaoFuJingIsMutable();
        super.addAll(values, piaoFuJing_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 piao_fu_jing = 21;</code>
       *
       * <pre>
       * 副精飘分
       * </pre>
       */
      public Builder clearPiaoFuJing() {
        piaoFuJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.GameEndResponse_GZCG)
    }

    static {
      defaultInstance = new GameEndResponse_GZCG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.GameEndResponse_GZCG)
  }

  public interface EveryJingInfo_GZCGOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 zheng_jing_count = 14;
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhengJingCountList();
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    int getZhengJingCountCount();
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    int getZhengJingCount(int index);

    // repeated int32 fu_jing_count = 15;
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    java.util.List<java.lang.Integer> getFuJingCountList();
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    int getFuJingCountCount();
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    int getFuJingCount(int index);

    // repeated bool is_ba_wang_jing = 16;
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    java.util.List<java.lang.Boolean> getIsBaWangJingList();
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    int getIsBaWangJingCount();
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    boolean getIsBaWangJing(int index);

    // repeated int32 chong_guan_score = 17;
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    java.util.List<java.lang.Integer> getChongGuanScoreList();
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    int getChongGuanScoreCount();
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    int getChongGuanScore(int index);

    // repeated int32 every_jing_score = 18;
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEveryJingScoreList();
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    int getEveryJingScoreCount();
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    int getEveryJingScore(int index);

    // repeated int32 jing_socre = 19;
    /**
     * <code>repeated int32 jing_socre = 19;</code>
     *
     * <pre>
     * 玩家每一组精的分数
     * </pre>
     */
    java.util.List<java.lang.Integer> getJingSocreList();
    /**
     * <code>repeated int32 jing_socre = 19;</code>
     *
     * <pre>
     * 玩家每一组精的分数
     * </pre>
     */
    int getJingSocreCount();
    /**
     * <code>repeated int32 jing_socre = 19;</code>
     *
     * <pre>
     * 玩家每一组精的分数
     * </pre>
     */
    int getJingSocre(int index);
  }
  /**
   * Protobuf type {@code czbg.EveryJingInfo_GZCG}
   */
  public static final class EveryJingInfo_GZCG extends
      com.google.protobuf.GeneratedMessage
      implements EveryJingInfo_GZCGOrBuilder {
    // Use EveryJingInfo_GZCG.newBuilder() to construct.
    private EveryJingInfo_GZCG(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EveryJingInfo_GZCG(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EveryJingInfo_GZCG defaultInstance;
    public static EveryJingInfo_GZCG getDefaultInstance() {
      return defaultInstance;
    }

    public EveryJingInfo_GZCG getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EveryJingInfo_GZCG(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                zhengJingCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              zhengJingCount_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                zhengJingCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhengJingCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                fuJingCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              fuJingCount_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                fuJingCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                fuJingCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                isBaWangJing_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000004;
              }
              isBaWangJing_.add(input.readBool());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                isBaWangJing_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                isBaWangJing_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                chongGuanScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              chongGuanScore_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                chongGuanScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                chongGuanScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                everyJingScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              everyJingScore_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                everyJingScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                everyJingScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                jingSocre_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              jingSocre_.add(input.readInt32());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                jingSocre_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                jingSocre_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          zhengJingCount_ = java.util.Collections.unmodifiableList(zhengJingCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          fuJingCount_ = java.util.Collections.unmodifiableList(fuJingCount_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          isBaWangJing_ = java.util.Collections.unmodifiableList(isBaWangJing_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          chongGuanScore_ = java.util.Collections.unmodifiableList(chongGuanScore_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          everyJingScore_ = java.util.Collections.unmodifiableList(everyJingScore_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          jingSocre_ = java.util.Collections.unmodifiableList(jingSocre_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_EveryJingInfo_GZCG_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_EveryJingInfo_GZCG_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.class, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder.class);
    }

    public static com.google.protobuf.Parser<EveryJingInfo_GZCG> PARSER =
        new com.google.protobuf.AbstractParser<EveryJingInfo_GZCG>() {
      public EveryJingInfo_GZCG parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EveryJingInfo_GZCG(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EveryJingInfo_GZCG> getParserForType() {
      return PARSER;
    }

    // repeated int32 zheng_jing_count = 14;
    public static final int ZHENG_JING_COUNT_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> zhengJingCount_;
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhengJingCountList() {
      return zhengJingCount_;
    }
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    public int getZhengJingCountCount() {
      return zhengJingCount_.size();
    }
    /**
     * <code>repeated int32 zheng_jing_count = 14;</code>
     *
     * <pre>
     * 每个玩家每一组精中正精的个数
     * </pre>
     */
    public int getZhengJingCount(int index) {
      return zhengJingCount_.get(index);
    }

    // repeated int32 fu_jing_count = 15;
    public static final int FU_JING_COUNT_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> fuJingCount_;
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getFuJingCountList() {
      return fuJingCount_;
    }
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    public int getFuJingCountCount() {
      return fuJingCount_.size();
    }
    /**
     * <code>repeated int32 fu_jing_count = 15;</code>
     *
     * <pre>
     * 每个玩家每一组精中副精的个数
     * </pre>
     */
    public int getFuJingCount(int index) {
      return fuJingCount_.get(index);
    }

    // repeated bool is_ba_wang_jing = 16;
    public static final int IS_BA_WANG_JING_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Boolean> isBaWangJing_;
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getIsBaWangJingList() {
      return isBaWangJing_;
    }
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    public int getIsBaWangJingCount() {
      return isBaWangJing_.size();
    }
    /**
     * <code>repeated bool is_ba_wang_jing = 16;</code>
     *
     * <pre>
     * 每个玩家每一组精是否霸王精
     * </pre>
     */
    public boolean getIsBaWangJing(int index) {
      return isBaWangJing_.get(index);
    }

    // repeated int32 chong_guan_score = 17;
    public static final int CHONG_GUAN_SCORE_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> chongGuanScore_;
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChongGuanScoreList() {
      return chongGuanScore_;
    }
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    public int getChongGuanScoreCount() {
      return chongGuanScore_.size();
    }
    /**
     * <code>repeated int32 chong_guan_score = 17;</code>
     *
     * <pre>
     * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
     * </pre>
     */
    public int getChongGuanScore(int index) {
      return chongGuanScore_.get(index);
    }

    // repeated int32 every_jing_score = 18;
    public static final int EVERY_JING_SCORE_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> everyJingScore_;
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEveryJingScoreList() {
      return everyJingScore_;
    }
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    public int getEveryJingScoreCount() {
      return everyJingScore_.size();
    }
    /**
     * <code>repeated int32 every_jing_score = 18;</code>
     *
     * <pre>
     * 每个玩家每一组精的得分
     * </pre>
     */
    public int getEveryJingScore(int index) {
      return everyJingScore_.get(index);
    }

    // repeated int32 jing_socre = 19;
    public static final int JING_SOCRE_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Integer> jingSocre_;
    /**
     * <code>repeated int32 jing_socre = 19;</code>
     *
     * <pre>
     * 玩家每一组精的分数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJingSocreList() {
      return jingSocre_;
    }
    /**
     * <code>repeated int32 jing_socre = 19;</code>
     *
     * <pre>
     * 玩家每一组精的分数
     * </pre>
     */
    public int getJingSocreCount() {
      return jingSocre_.size();
    }
    /**
     * <code>repeated int32 jing_socre = 19;</code>
     *
     * <pre>
     * 玩家每一组精的分数
     * </pre>
     */
    public int getJingSocre(int index) {
      return jingSocre_.get(index);
    }

    private void initFields() {
      zhengJingCount_ = java.util.Collections.emptyList();
      fuJingCount_ = java.util.Collections.emptyList();
      isBaWangJing_ = java.util.Collections.emptyList();
      chongGuanScore_ = java.util.Collections.emptyList();
      everyJingScore_ = java.util.Collections.emptyList();
      jingSocre_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < zhengJingCount_.size(); i++) {
        output.writeInt32(14, zhengJingCount_.get(i));
      }
      for (int i = 0; i < fuJingCount_.size(); i++) {
        output.writeInt32(15, fuJingCount_.get(i));
      }
      for (int i = 0; i < isBaWangJing_.size(); i++) {
        output.writeBool(16, isBaWangJing_.get(i));
      }
      for (int i = 0; i < chongGuanScore_.size(); i++) {
        output.writeInt32(17, chongGuanScore_.get(i));
      }
      for (int i = 0; i < everyJingScore_.size(); i++) {
        output.writeInt32(18, everyJingScore_.get(i));
      }
      for (int i = 0; i < jingSocre_.size(); i++) {
        output.writeInt32(19, jingSocre_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < zhengJingCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhengJingCount_.get(i));
        }
        size += dataSize;
        size += 1 * getZhengJingCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < fuJingCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(fuJingCount_.get(i));
        }
        size += dataSize;
        size += 1 * getFuJingCountList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getIsBaWangJingList().size();
        size += dataSize;
        size += 2 * getIsBaWangJingList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chongGuanScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chongGuanScore_.get(i));
        }
        size += dataSize;
        size += 2 * getChongGuanScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < everyJingScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(everyJingScore_.get(i));
        }
        size += dataSize;
        size += 2 * getEveryJingScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jingSocre_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jingSocre_.get(i));
        }
        size += dataSize;
        size += 2 * getJingSocreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code czbg.EveryJingInfo_GZCG}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCGOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_EveryJingInfo_GZCG_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_EveryJingInfo_GZCG_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.class, protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.Builder.class);
      }

      // Construct using protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        zhengJingCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        fuJingCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        isBaWangJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        chongGuanScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        everyJingScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        jingSocre_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.gzcg.GZCGRsp.internal_static_czbg_EveryJingInfo_GZCG_descriptor;
      }

      public protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG getDefaultInstanceForType() {
        return protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.getDefaultInstance();
      }

      public protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG build() {
        protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG buildPartial() {
        protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG result = new protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          zhengJingCount_ = java.util.Collections.unmodifiableList(zhengJingCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.zhengJingCount_ = zhengJingCount_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          fuJingCount_ = java.util.Collections.unmodifiableList(fuJingCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.fuJingCount_ = fuJingCount_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          isBaWangJing_ = java.util.Collections.unmodifiableList(isBaWangJing_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.isBaWangJing_ = isBaWangJing_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          chongGuanScore_ = java.util.Collections.unmodifiableList(chongGuanScore_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.chongGuanScore_ = chongGuanScore_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          everyJingScore_ = java.util.Collections.unmodifiableList(everyJingScore_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.everyJingScore_ = everyJingScore_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          jingSocre_ = java.util.Collections.unmodifiableList(jingSocre_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.jingSocre_ = jingSocre_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG) {
          return mergeFrom((protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG other) {
        if (other == protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG.getDefaultInstance()) return this;
        if (!other.zhengJingCount_.isEmpty()) {
          if (zhengJingCount_.isEmpty()) {
            zhengJingCount_ = other.zhengJingCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureZhengJingCountIsMutable();
            zhengJingCount_.addAll(other.zhengJingCount_);
          }
          onChanged();
        }
        if (!other.fuJingCount_.isEmpty()) {
          if (fuJingCount_.isEmpty()) {
            fuJingCount_ = other.fuJingCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureFuJingCountIsMutable();
            fuJingCount_.addAll(other.fuJingCount_);
          }
          onChanged();
        }
        if (!other.isBaWangJing_.isEmpty()) {
          if (isBaWangJing_.isEmpty()) {
            isBaWangJing_ = other.isBaWangJing_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureIsBaWangJingIsMutable();
            isBaWangJing_.addAll(other.isBaWangJing_);
          }
          onChanged();
        }
        if (!other.chongGuanScore_.isEmpty()) {
          if (chongGuanScore_.isEmpty()) {
            chongGuanScore_ = other.chongGuanScore_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureChongGuanScoreIsMutable();
            chongGuanScore_.addAll(other.chongGuanScore_);
          }
          onChanged();
        }
        if (!other.everyJingScore_.isEmpty()) {
          if (everyJingScore_.isEmpty()) {
            everyJingScore_ = other.everyJingScore_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureEveryJingScoreIsMutable();
            everyJingScore_.addAll(other.everyJingScore_);
          }
          onChanged();
        }
        if (!other.jingSocre_.isEmpty()) {
          if (jingSocre_.isEmpty()) {
            jingSocre_ = other.jingSocre_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureJingSocreIsMutable();
            jingSocre_.addAll(other.jingSocre_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.gzcg.GZCGRsp.EveryJingInfo_GZCG) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 zheng_jing_count = 14;
      private java.util.List<java.lang.Integer> zhengJingCount_ = java.util.Collections.emptyList();
      private void ensureZhengJingCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          zhengJingCount_ = new java.util.ArrayList<java.lang.Integer>(zhengJingCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhengJingCountList() {
        return java.util.Collections.unmodifiableList(zhengJingCount_);
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public int getZhengJingCountCount() {
        return zhengJingCount_.size();
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public int getZhengJingCount(int index) {
        return zhengJingCount_.get(index);
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public Builder setZhengJingCount(
          int index, int value) {
        ensureZhengJingCountIsMutable();
        zhengJingCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public Builder addZhengJingCount(int value) {
        ensureZhengJingCountIsMutable();
        zhengJingCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public Builder addAllZhengJingCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhengJingCountIsMutable();
        super.addAll(values, zhengJingCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zheng_jing_count = 14;</code>
       *
       * <pre>
       * 每个玩家每一组精中正精的个数
       * </pre>
       */
      public Builder clearZhengJingCount() {
        zhengJingCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated int32 fu_jing_count = 15;
      private java.util.List<java.lang.Integer> fuJingCount_ = java.util.Collections.emptyList();
      private void ensureFuJingCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          fuJingCount_ = new java.util.ArrayList<java.lang.Integer>(fuJingCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getFuJingCountList() {
        return java.util.Collections.unmodifiableList(fuJingCount_);
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public int getFuJingCountCount() {
        return fuJingCount_.size();
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public int getFuJingCount(int index) {
        return fuJingCount_.get(index);
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public Builder setFuJingCount(
          int index, int value) {
        ensureFuJingCountIsMutable();
        fuJingCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public Builder addFuJingCount(int value) {
        ensureFuJingCountIsMutable();
        fuJingCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public Builder addAllFuJingCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFuJingCountIsMutable();
        super.addAll(values, fuJingCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 fu_jing_count = 15;</code>
       *
       * <pre>
       * 每个玩家每一组精中副精的个数
       * </pre>
       */
      public Builder clearFuJingCount() {
        fuJingCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated bool is_ba_wang_jing = 16;
      private java.util.List<java.lang.Boolean> isBaWangJing_ = java.util.Collections.emptyList();
      private void ensureIsBaWangJingIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          isBaWangJing_ = new java.util.ArrayList<java.lang.Boolean>(isBaWangJing_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getIsBaWangJingList() {
        return java.util.Collections.unmodifiableList(isBaWangJing_);
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public int getIsBaWangJingCount() {
        return isBaWangJing_.size();
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public boolean getIsBaWangJing(int index) {
        return isBaWangJing_.get(index);
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public Builder setIsBaWangJing(
          int index, boolean value) {
        ensureIsBaWangJingIsMutable();
        isBaWangJing_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public Builder addIsBaWangJing(boolean value) {
        ensureIsBaWangJingIsMutable();
        isBaWangJing_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public Builder addAllIsBaWangJing(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureIsBaWangJingIsMutable();
        super.addAll(values, isBaWangJing_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_ba_wang_jing = 16;</code>
       *
       * <pre>
       * 每个玩家每一组精是否霸王精
       * </pre>
       */
      public Builder clearIsBaWangJing() {
        isBaWangJing_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // repeated int32 chong_guan_score = 17;
      private java.util.List<java.lang.Integer> chongGuanScore_ = java.util.Collections.emptyList();
      private void ensureChongGuanScoreIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          chongGuanScore_ = new java.util.ArrayList<java.lang.Integer>(chongGuanScore_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChongGuanScoreList() {
        return java.util.Collections.unmodifiableList(chongGuanScore_);
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public int getChongGuanScoreCount() {
        return chongGuanScore_.size();
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public int getChongGuanScore(int index) {
        return chongGuanScore_.get(index);
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public Builder setChongGuanScore(
          int index, int value) {
        ensureChongGuanScoreIsMutable();
        chongGuanScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public Builder addChongGuanScore(int value) {
        ensureChongGuanScoreIsMutable();
        chongGuanScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public Builder addAllChongGuanScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChongGuanScoreIsMutable();
        super.addAll(values, chongGuanScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 chong_guan_score = 17;</code>
       *
       * <pre>
       * 每个玩家每一组精的冲关(0表示没有冲关, &gt;1 表示冲关情况)
       * </pre>
       */
      public Builder clearChongGuanScore() {
        chongGuanScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated int32 every_jing_score = 18;
      private java.util.List<java.lang.Integer> everyJingScore_ = java.util.Collections.emptyList();
      private void ensureEveryJingScoreIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          everyJingScore_ = new java.util.ArrayList<java.lang.Integer>(everyJingScore_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEveryJingScoreList() {
        return java.util.Collections.unmodifiableList(everyJingScore_);
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public int getEveryJingScoreCount() {
        return everyJingScore_.size();
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public int getEveryJingScore(int index) {
        return everyJingScore_.get(index);
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public Builder setEveryJingScore(
          int index, int value) {
        ensureEveryJingScoreIsMutable();
        everyJingScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public Builder addEveryJingScore(int value) {
        ensureEveryJingScoreIsMutable();
        everyJingScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public Builder addAllEveryJingScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEveryJingScoreIsMutable();
        super.addAll(values, everyJingScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 every_jing_score = 18;</code>
       *
       * <pre>
       * 每个玩家每一组精的得分
       * </pre>
       */
      public Builder clearEveryJingScore() {
        everyJingScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated int32 jing_socre = 19;
      private java.util.List<java.lang.Integer> jingSocre_ = java.util.Collections.emptyList();
      private void ensureJingSocreIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          jingSocre_ = new java.util.ArrayList<java.lang.Integer>(jingSocre_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 jing_socre = 19;</code>
       *
       * <pre>
       * 玩家每一组精的分数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJingSocreList() {
        return java.util.Collections.unmodifiableList(jingSocre_);
      }
      /**
       * <code>repeated int32 jing_socre = 19;</code>
       *
       * <pre>
       * 玩家每一组精的分数
       * </pre>
       */
      public int getJingSocreCount() {
        return jingSocre_.size();
      }
      /**
       * <code>repeated int32 jing_socre = 19;</code>
       *
       * <pre>
       * 玩家每一组精的分数
       * </pre>
       */
      public int getJingSocre(int index) {
        return jingSocre_.get(index);
      }
      /**
       * <code>repeated int32 jing_socre = 19;</code>
       *
       * <pre>
       * 玩家每一组精的分数
       * </pre>
       */
      public Builder setJingSocre(
          int index, int value) {
        ensureJingSocreIsMutable();
        jingSocre_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jing_socre = 19;</code>
       *
       * <pre>
       * 玩家每一组精的分数
       * </pre>
       */
      public Builder addJingSocre(int value) {
        ensureJingSocreIsMutable();
        jingSocre_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jing_socre = 19;</code>
       *
       * <pre>
       * 玩家每一组精的分数
       * </pre>
       */
      public Builder addAllJingSocre(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJingSocreIsMutable();
        super.addAll(values, jingSocre_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jing_socre = 19;</code>
       *
       * <pre>
       * 玩家每一组精的分数
       * </pre>
       */
      public Builder clearJingSocre() {
        jingSocre_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:czbg.EveryJingInfo_GZCG)
    }

    static {
      defaultInstance = new EveryJingInfo_GZCG(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:czbg.EveryJingInfo_GZCG)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_FanJing_GZCG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_FanJing_GZCG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_GameEndResponse_GZCG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_GameEndResponse_GZCG_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_czbg_EveryJingInfo_GZCG_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_czbg_EveryJingInfo_GZCG_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024gzcg/gzcgProto.proto\022\004czbg\032\024basic/prot" +
      "ocol.proto\"4\n\014FanJing_GZCG\022\022\n\nzheng_jing" +
      "\030\001 \003(\005\022\020\n\010xia_jing\030\002 \001(\005\"\217\004\n\024GameEndResp" +
      "onse_GZCG\022\"\n\010game_end\030\001 \001(\0132\020.GameEndRes" +
      "ponse\022\022\n\nzheng_jing\030\002 \003(\005\022\031\n\021other_jing_" +
      "number\030\003 \001(\005\022\022\n\nother_jing\030\004 \003(\005\022\022\n\njing" +
      "_score\030\005 \003(\005\022\024\n\014hu_pai_score\030\006 \003(\005\022\026\n\016ji" +
      "ang_li_score\030\007 \003(\005\022\021\n\tming_gang\030\010 \003(\005\022\017\n" +
      "\007an_gang\030\t \003(\005\022\021\n\tgang_jing\030\n \003(\005\022\023\n\013cha" +
      "o_zhuang\030\013 \003(\005\022\023\n\013total_score\030\014 \003(\005\022\023\n\013r",
      "esult_desc\030\r \001(\t\022\030\n\020zheng_jing_count\030\016 \003" +
      "(\005\022\025\n\rfu_jing_count\030\017 \003(\005\022\027\n\017is_ba_wang_" +
      "jing\030\020 \003(\010\022\030\n\020chong_guan_score\030\021 \003(\005\022\030\n\020" +
      "every_jing_score\030\022 \003(\005\022+\n\tjing_info\030\023 \003(" +
      "\0132\030.czbg.EveryJingInfo_GZCG\022\027\n\017piao_zhen" +
      "g_jing\030\024 \003(\005\022\024\n\014piao_fu_jing\030\025 \003(\005\"\246\001\n\022E" +
      "veryJingInfo_GZCG\022\030\n\020zheng_jing_count\030\016 " +
      "\003(\005\022\025\n\rfu_jing_count\030\017 \003(\005\022\027\n\017is_ba_wang" +
      "_jing\030\020 \003(\010\022\030\n\020chong_guan_score\030\021 \003(\005\022\030\n" +
      "\020every_jing_score\030\022 \003(\005\022\022\n\njing_socre\030\023 ",
      "\003(\005B\036\n\023protobuf.clazz.gzcgB\007GZCGRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_czbg_FanJing_GZCG_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_czbg_FanJing_GZCG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_FanJing_GZCG_descriptor,
              new java.lang.String[] { "ZhengJing", "XiaJing", });
          internal_static_czbg_GameEndResponse_GZCG_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_czbg_GameEndResponse_GZCG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_GameEndResponse_GZCG_descriptor,
              new java.lang.String[] { "GameEnd", "ZhengJing", "OtherJingNumber", "OtherJing", "JingScore", "HuPaiScore", "JiangLiScore", "MingGang", "AnGang", "GangJing", "ChaoZhuang", "TotalScore", "ResultDesc", "ZhengJingCount", "FuJingCount", "IsBaWangJing", "ChongGuanScore", "EveryJingScore", "JingInfo", "PiaoZhengJing", "PiaoFuJing", });
          internal_static_czbg_EveryJingInfo_GZCG_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_czbg_EveryJingInfo_GZCG_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_czbg_EveryJingInfo_GZCG_descriptor,
              new java.lang.String[] { "ZhengJingCount", "FuJingCount", "IsBaWangJing", "ChongGuanScore", "EveryJingScore", "JingSocre", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
