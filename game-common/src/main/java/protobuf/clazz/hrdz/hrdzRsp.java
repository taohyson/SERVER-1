// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wsk/huarongdazhadan.proto

package protobuf.clazz.hrdz;

public final class hrdzRsp {
  private hrdzRsp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GameStart_Wsk_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 2;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // optional int32 cur_banker = 3;
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    boolean hasCurBanker();
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    int getCurBanker();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional int32 display_time = 6;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code hrdz.GameStart_Wsk_hrdz}
   *
   * <pre>
   *1001 游戏开始
   * </pre>
   */
  public static final class GameStart_Wsk_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements GameStart_Wsk_hrdzOrBuilder {
    // Use GameStart_Wsk_hrdz.newBuilder() to construct.
    private GameStart_Wsk_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameStart_Wsk_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameStart_Wsk_hrdz defaultInstance;
    public static GameStart_Wsk_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public GameStart_Wsk_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameStart_Wsk_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              curBanker_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_GameStart_Wsk_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_GameStart_Wsk_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<GameStart_Wsk_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<GameStart_Wsk_hrdz>() {
      public GameStart_Wsk_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameStart_Wsk_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameStart_Wsk_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 2;
    public static final int PLAYERS_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 2;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // optional int32 cur_banker = 3;
    public static final int CUR_BANKER_FIELD_NUMBER = 3;
    private int curBanker_;
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public boolean hasCurBanker() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_banker = 3;</code>
     *
     * <pre>
     *庄家用户，也是出首牌的用户
     * </pre>
     */
    public int getCurBanker() {
      return curBanker_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional int32 display_time = 6;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 6;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 display_time = 6;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      curBanker_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(2, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, curBanker_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(6, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, players_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, curBanker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.GameStart_Wsk_hrdz}
     *
     * <pre>
     *1001 游戏开始
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_GameStart_Wsk_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_GameStart_Wsk_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        curBanker_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_GameStart_Wsk_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curBanker_ = curBanker_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (other.hasCurBanker()) {
          setCurBanker(other.getCurBanker());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.GameStart_Wsk_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 2;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 2;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // optional int32 cur_banker = 3;
      private int curBanker_ ;
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public boolean hasCurBanker() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public int getCurBanker() {
        return curBanker_;
      }
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder setCurBanker(int value) {
        bitField0_ |= 0x00000004;
        curBanker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_banker = 3;</code>
       *
       * <pre>
       *庄家用户，也是出首牌的用户
       * </pre>
       */
      public Builder clearCurBanker() {
        bitField0_ = (bitField0_ & ~0x00000004);
        curBanker_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional int32 display_time = 6;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000020;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 6;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000020);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.GameStart_Wsk_hrdz)
    }

    static {
      defaultInstance = new GameStart_Wsk_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.GameStart_Wsk_hrdz)
  }

  public interface TableResponse_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 banker_player = 1;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 current_player = 2;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 prev_player = 3;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    boolean hasPrevPlayer();
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    int getPrevPlayer();

    // repeated bool trustee = 4;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    java.util.List<java.lang.Boolean> getTrusteeList();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    int getTrusteeCount();
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    boolean getTrustee(int index);

    // repeated .Int32ArrayResponse out_cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getOutCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    int getOutCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index);

    // repeated int32 out_cards_count = 6;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getOutCardsCountList();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCountCount();
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    int getOutCardsCount(int index);

    // repeated int32 player_pass = 7;
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPlayerPassList();
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPassCount();
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    int getPlayerPass(int index);

    // repeated int32 card_type = 8;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardTypeList();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardTypeCount();
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType(int index);

    // optional int32 pr_out_card_player = 9;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    boolean hasPrOutCardPlayer();
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    int getPrOutCardPlayer();

    // repeated int32 pr_cards_data = 10;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_cards_change_data = 11;
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsChangeDataList();
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getPrCardsChangeDataCount();
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getPrCardsChangeData(int index);

    // optional int32 pr_cards_count = 12;
    /**
     * <code>optional int32 pr_cards_count = 12;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 12;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 13;
    /**
     * <code>optional int32 pr_out_card_type = 13;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 13;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional int32 is_first_out = 14;
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    int getIsFirstOut();

    // optional int32 display_time = 15;
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 card_count = 16;
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 17;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // optional .RoomInfo room_info = 18;
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // repeated .RoomPlayerResponse players = 19;
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 user_can_out_data = 20;
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 21;
    /**
     * <code>optional int32 user_can_out_count = 21;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 21;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCount();

    // repeated int32 user_get_score = 22;
    /**
     * <code>repeated int32 user_get_score = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetScoreList();
    /**
     * <code>repeated int32 user_get_score = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScoreCount();
    /**
     * <code>repeated int32 user_get_score = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScore(int index);

    // repeated int32 win_order = 23;
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // optional bool is_yi_da_san = 24;
    /**
     * <code>optional bool is_yi_da_san = 24;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    boolean hasIsYiDaSan();
    /**
     * <code>optional bool is_yi_da_san = 24;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    boolean getIsYiDaSan();

    // optional int32 jiao_card_data = 25;
    /**
     * <code>optional int32 jiao_card_data = 25;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    boolean hasJiaoCardData();
    /**
     * <code>optional int32 jiao_card_data = 25;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    int getJiaoCardData();

    // repeated bool is_call_banker = 26;
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    java.util.List<java.lang.Boolean> getIsCallBankerList();
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    int getIsCallBankerCount();
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    boolean getIsCallBanker(int index);

    // optional int32 banker_friend_seat = 27;
    /**
     * <code>optional int32 banker_friend_seat = 27;</code>
     *
     * <pre>
     * 庄家的队友 用来处理明鸡
     * </pre>
     */
    boolean hasBankerFriendSeat();
    /**
     * <code>optional int32 banker_friend_seat = 27;</code>
     *
     * <pre>
     * 庄家的队友 用来处理明鸡
     * </pre>
     */
    int getBankerFriendSeat();

    // optional int32 friend_seat_index = 28;
    /**
     * <code>optional int32 friend_seat_index = 28;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    boolean hasFriendSeatIndex();
    /**
     * <code>optional int32 friend_seat_index = 28;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    int getFriendSeatIndex();
  }
  /**
   * Protobuf type {@code hrdz.TableResponse_hrdz}
   *
   * <pre>
   *1002 断线重连
   * </pre>
   */
  public static final class TableResponse_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements TableResponse_hrdzOrBuilder {
    // Use TableResponse_hrdz.newBuilder() to construct.
    private TableResponse_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TableResponse_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TableResponse_hrdz defaultInstance;
    public static TableResponse_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public TableResponse_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TableResponse_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              prevPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              trustee_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                trustee_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                trustee_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              outCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              outCardsCount_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                outCardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                outCardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              playerPass_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                playerPass_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerPass_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardType_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardType_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000008;
              prOutCardPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              prCardsChangeData_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsChangeData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00010000;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 146: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00040000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              bitField0_ |= 0x00000200;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              userGetScore_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              bitField0_ |= 0x00000400;
              isYiDaSan_ = input.readBool();
              break;
            }
            case 200: {
              bitField0_ |= 0x00000800;
              jiaoCardData_ = input.readInt32();
              break;
            }
            case 208: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                isCallBanker_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x02000000;
              }
              isCallBanker_.add(input.readBool());
              break;
            }
            case 210: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                isCallBanker_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                isCallBanker_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 216: {
              bitField0_ |= 0x00001000;
              bankerFriendSeat_ = input.readInt32();
              break;
            }
            case 224: {
              bitField0_ |= 0x00002000;
              friendSeatIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsChangeData_ = java.util.Collections.unmodifiableList(prCardsChangeData_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          isCallBanker_ = java.util.Collections.unmodifiableList(isCallBanker_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_TableResponse_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_TableResponse_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<TableResponse_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<TableResponse_hrdz>() {
      public TableResponse_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TableResponse_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TableResponse_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 banker_player = 1;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 1;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 banker_player = 1;</code>
     *
     * <pre>
     *庄家玩家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 current_player = 2;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 2;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 current_player = 2;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 prev_player = 3;
    public static final int PREV_PLAYER_FIELD_NUMBER = 3;
    private int prevPlayer_;
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public boolean hasPrevPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 prev_player = 3;</code>
     *
     * <pre>
     *上一玩家
     * </pre>
     */
    public int getPrevPlayer() {
      return prevPlayer_;
    }

    // repeated bool trustee = 4;
    public static final int TRUSTEE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> trustee_;
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getTrusteeList() {
      return trustee_;
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    public int getTrusteeCount() {
      return trustee_.size();
    }
    /**
     * <code>repeated bool trustee = 4;</code>
     *
     * <pre>
     *是否托管
     * </pre>
     */
    public boolean getTrustee(int index) {
      return trustee_.get(index);
    }

    // repeated .Int32ArrayResponse out_cards_data = 5;
    public static final int OUT_CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getOutCardsDataOrBuilderList() {
      return outCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public int getOutCardsDataCount() {
      return outCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
      return outCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
     *
     * <pre>
     *本轮出牌数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
        int index) {
      return outCardsData_.get(index);
    }

    // repeated int32 out_cards_count = 6;
    public static final int OUT_CARDS_COUNT_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> outCardsCount_;
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getOutCardsCountList() {
      return outCardsCount_;
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCountCount() {
      return outCardsCount_.size();
    }
    /**
     * <code>repeated int32 out_cards_count = 6;</code>
     *
     * <pre>
     *本轮牌数量
     * </pre>
     */
    public int getOutCardsCount(int index) {
      return outCardsCount_.get(index);
    }

    // repeated int32 player_pass = 7;
    public static final int PLAYER_PASS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> playerPass_;
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPlayerPassList() {
      return playerPass_;
    }
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPassCount() {
      return playerPass_.size();
    }
    /**
     * <code>repeated int32 player_pass = 7;</code>
     *
     * <pre>
     *本轮不出数据
     * </pre>
     */
    public int getPlayerPass(int index) {
      return playerPass_.get(index);
    }

    // repeated int32 card_type = 8;
    public static final int CARD_TYPE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> cardType_;
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardTypeList() {
      return cardType_;
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardTypeCount() {
      return cardType_.size();
    }
    /**
     * <code>repeated int32 card_type = 8;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType(int index) {
      return cardType_.get(index);
    }

    // optional int32 pr_out_card_player = 9;
    public static final int PR_OUT_CARD_PLAYER_FIELD_NUMBER = 9;
    private int prOutCardPlayer_;
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public boolean hasPrOutCardPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pr_out_card_player = 9;</code>
     *
     * <pre>
     *上一出牌玩家
     * </pre>
     */
    public int getPrOutCardPlayer() {
      return prOutCardPlayer_;
    }

    // repeated int32 pr_cards_data = 10;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 10;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_cards_change_data = 11;
    public static final int PR_CARDS_CHANGE_DATA_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> prCardsChangeData_;
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsChangeDataList() {
      return prCardsChangeData_;
    }
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getPrCardsChangeDataCount() {
      return prCardsChangeData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_change_data = 11;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getPrCardsChangeData(int index) {
      return prCardsChangeData_.get(index);
    }

    // optional int32 pr_cards_count = 12;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 12;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 12;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 12;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 13;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 13;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 13;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 13;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional int32 is_first_out = 14;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 14;
    private int isFirstOut_;
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 is_first_out = 14;</code>
     *
     * <pre>
     *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
     * </pre>
     */
    public int getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 15;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 15;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 15;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 card_count = 16;
    public static final int CARD_COUNT_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 17;
    public static final int CARDS_DATA_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // optional .RoomInfo room_info = 18;
    public static final int ROOM_INFO_FIELD_NUMBER = 18;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 18;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // repeated .RoomPlayerResponse players = 19;
    public static final int PLAYERS_FIELD_NUMBER = 19;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 user_can_out_data = 20;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 20;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 21;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 21;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 21;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 user_can_out_count = 21;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // repeated int32 user_get_score = 22;
    public static final int USER_GET_SCORE_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> userGetScore_;
    /**
     * <code>repeated int32 user_get_score = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetScoreList() {
      return userGetScore_;
    }
    /**
     * <code>repeated int32 user_get_score = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScoreCount() {
      return userGetScore_.size();
    }
    /**
     * <code>repeated int32 user_get_score = 22;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScore(int index) {
      return userGetScore_.get(index);
    }

    // repeated int32 win_order = 23;
    public static final int WIN_ORDER_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 23;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // optional bool is_yi_da_san = 24;
    public static final int IS_YI_DA_SAN_FIELD_NUMBER = 24;
    private boolean isYiDaSan_;
    /**
     * <code>optional bool is_yi_da_san = 24;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    public boolean hasIsYiDaSan() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool is_yi_da_san = 24;</code>
     *
     * <pre>
     *是否一打三
     * </pre>
     */
    public boolean getIsYiDaSan() {
      return isYiDaSan_;
    }

    // optional int32 jiao_card_data = 25;
    public static final int JIAO_CARD_DATA_FIELD_NUMBER = 25;
    private int jiaoCardData_;
    /**
     * <code>optional int32 jiao_card_data = 25;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    public boolean hasJiaoCardData() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 jiao_card_data = 25;</code>
     *
     * <pre>
     *叫牌数值
     * </pre>
     */
    public int getJiaoCardData() {
      return jiaoCardData_;
    }

    // repeated bool is_call_banker = 26;
    public static final int IS_CALL_BANKER_FIELD_NUMBER = 26;
    private java.util.List<java.lang.Boolean> isCallBanker_;
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    public java.util.List<java.lang.Boolean>
        getIsCallBankerList() {
      return isCallBanker_;
    }
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    public int getIsCallBankerCount() {
      return isCallBanker_.size();
    }
    /**
     * <code>repeated bool is_call_banker = 26;</code>
     *
     * <pre>
     * 是否已经点击独牌
     * </pre>
     */
    public boolean getIsCallBanker(int index) {
      return isCallBanker_.get(index);
    }

    // optional int32 banker_friend_seat = 27;
    public static final int BANKER_FRIEND_SEAT_FIELD_NUMBER = 27;
    private int bankerFriendSeat_;
    /**
     * <code>optional int32 banker_friend_seat = 27;</code>
     *
     * <pre>
     * 庄家的队友 用来处理明鸡
     * </pre>
     */
    public boolean hasBankerFriendSeat() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 banker_friend_seat = 27;</code>
     *
     * <pre>
     * 庄家的队友 用来处理明鸡
     * </pre>
     */
    public int getBankerFriendSeat() {
      return bankerFriendSeat_;
    }

    // optional int32 friend_seat_index = 28;
    public static final int FRIEND_SEAT_INDEX_FIELD_NUMBER = 28;
    private int friendSeatIndex_;
    /**
     * <code>optional int32 friend_seat_index = 28;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    public boolean hasFriendSeatIndex() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 friend_seat_index = 28;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    public int getFriendSeatIndex() {
      return friendSeatIndex_;
    }

    private void initFields() {
      bankerPlayer_ = 0;
      currentPlayer_ = 0;
      prevPlayer_ = 0;
      trustee_ = java.util.Collections.emptyList();
      outCardsData_ = java.util.Collections.emptyList();
      outCardsCount_ = java.util.Collections.emptyList();
      playerPass_ = java.util.Collections.emptyList();
      cardType_ = java.util.Collections.emptyList();
      prOutCardPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsChangeData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = 0;
      displayTime_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      players_ = java.util.Collections.emptyList();
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      userGetScore_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
      isYiDaSan_ = false;
      jiaoCardData_ = 0;
      isCallBanker_ = java.util.Collections.emptyList();
      bankerFriendSeat_ = 0;
      friendSeatIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, prevPlayer_);
      }
      for (int i = 0; i < trustee_.size(); i++) {
        output.writeBool(4, trustee_.get(i));
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        output.writeMessage(5, outCardsData_.get(i));
      }
      for (int i = 0; i < outCardsCount_.size(); i++) {
        output.writeInt32(6, outCardsCount_.get(i));
      }
      for (int i = 0; i < playerPass_.size(); i++) {
        output.writeInt32(7, playerPass_.get(i));
      }
      for (int i = 0; i < cardType_.size(); i++) {
        output.writeInt32(8, cardType_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(9, prOutCardPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(10, prCardsData_.get(i));
      }
      for (int i = 0; i < prCardsChangeData_.size(); i++) {
        output.writeInt32(11, prCardsChangeData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(12, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(13, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(14, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(15, displayTime_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(16, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(17, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(18, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(19, players_.get(i));
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(20, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(21, userCanOutCount_);
      }
      for (int i = 0; i < userGetScore_.size(); i++) {
        output.writeInt32(22, userGetScore_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(23, winOrder_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(24, isYiDaSan_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(25, jiaoCardData_);
      }
      for (int i = 0; i < isCallBanker_.size(); i++) {
        output.writeBool(26, isCallBanker_.get(i));
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(27, bankerFriendSeat_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(28, friendSeatIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, currentPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, prevPlayer_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getTrusteeList().size();
        size += dataSize;
        size += 1 * getTrusteeList().size();
      }
      for (int i = 0; i < outCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < outCardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(outCardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getOutCardsCountList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerPass_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerPass_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerPassList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardType_.get(i));
        }
        size += dataSize;
        size += 1 * getCardTypeList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prOutCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsChangeData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsChangeData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsChangeDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, cardsData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, roomInfo_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 2 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, userCanOutCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userGetScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetScore_.get(i));
        }
        size += dataSize;
        size += 2 * getUserGetScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 2 * getWinOrderList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(24, isYiDaSan_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, jiaoCardData_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getIsCallBankerList().size();
        size += dataSize;
        size += 2 * getIsCallBankerList().size();
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(27, bankerFriendSeat_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, friendSeatIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.TableResponse_hrdz}
     *
     * <pre>
     *1002 断线重连
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_TableResponse_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_TableResponse_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOutCardsDataFieldBuilder();
          getCardsDataFieldBuilder();
          getRoomInfoFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prevPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outCardsDataBuilder_.clear();
        }
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prOutCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        prCardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        isFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
        } else {
          cardsDataBuilder_.clear();
        }
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
        } else {
          playersBuilder_.clear();
        }
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        isYiDaSan_ = false;
        bitField0_ = (bitField0_ & ~0x00800000);
        jiaoCardData_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        isCallBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        bankerFriendSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        friendSeatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_TableResponse_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prevPlayer_ = prevPlayer_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = java.util.Collections.unmodifiableList(trustee_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.trustee_ = trustee_;
        if (outCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            outCardsData_ = java.util.Collections.unmodifiableList(outCardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outCardsData_ = outCardsData_;
        } else {
          result.outCardsData_ = outCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = java.util.Collections.unmodifiableList(outCardsCount_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.outCardsCount_ = outCardsCount_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = java.util.Collections.unmodifiableList(playerPass_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.playerPass_ = playerPass_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = java.util.Collections.unmodifiableList(cardType_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000008;
        }
        result.prOutCardPlayer_ = prOutCardPlayer_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsChangeData_ = java.util.Collections.unmodifiableList(prCardsChangeData_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.prCardsChangeData_ = prCardsChangeData_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.userGetScore_ = userGetScore_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.winOrder_ = winOrder_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isYiDaSan_ = isYiDaSan_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.jiaoCardData_ = jiaoCardData_;
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          isCallBanker_ = java.util.Collections.unmodifiableList(isCallBanker_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.isCallBanker_ = isCallBanker_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.bankerFriendSeat_ = bankerFriendSeat_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.friendSeatIndex_ = friendSeatIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz.getDefaultInstance()) return this;
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasPrevPlayer()) {
          setPrevPlayer(other.getPrevPlayer());
        }
        if (!other.trustee_.isEmpty()) {
          if (trustee_.isEmpty()) {
            trustee_ = other.trustee_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTrusteeIsMutable();
            trustee_.addAll(other.trustee_);
          }
          onChanged();
        }
        if (outCardsDataBuilder_ == null) {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsData_.isEmpty()) {
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutCardsDataIsMutable();
              outCardsData_.addAll(other.outCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.outCardsData_.isEmpty()) {
            if (outCardsDataBuilder_.isEmpty()) {
              outCardsDataBuilder_.dispose();
              outCardsDataBuilder_ = null;
              outCardsData_ = other.outCardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutCardsDataFieldBuilder() : null;
            } else {
              outCardsDataBuilder_.addAllMessages(other.outCardsData_);
            }
          }
        }
        if (!other.outCardsCount_.isEmpty()) {
          if (outCardsCount_.isEmpty()) {
            outCardsCount_ = other.outCardsCount_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureOutCardsCountIsMutable();
            outCardsCount_.addAll(other.outCardsCount_);
          }
          onChanged();
        }
        if (!other.playerPass_.isEmpty()) {
          if (playerPass_.isEmpty()) {
            playerPass_ = other.playerPass_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePlayerPassIsMutable();
            playerPass_.addAll(other.playerPass_);
          }
          onChanged();
        }
        if (!other.cardType_.isEmpty()) {
          if (cardType_.isEmpty()) {
            cardType_ = other.cardType_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardTypeIsMutable();
            cardType_.addAll(other.cardType_);
          }
          onChanged();
        }
        if (other.hasPrOutCardPlayer()) {
          setPrOutCardPlayer(other.getPrOutCardPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prCardsChangeData_.isEmpty()) {
          if (prCardsChangeData_.isEmpty()) {
            prCardsChangeData_ = other.prCardsChangeData_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensurePrCardsChangeDataIsMutable();
            prCardsChangeData_.addAll(other.prCardsChangeData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00010000);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00040000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (!other.userGetScore_.isEmpty()) {
          if (userGetScore_.isEmpty()) {
            userGetScore_ = other.userGetScore_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureUserGetScoreIsMutable();
            userGetScore_.addAll(other.userGetScore_);
          }
          onChanged();
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (other.hasIsYiDaSan()) {
          setIsYiDaSan(other.getIsYiDaSan());
        }
        if (other.hasJiaoCardData()) {
          setJiaoCardData(other.getJiaoCardData());
        }
        if (!other.isCallBanker_.isEmpty()) {
          if (isCallBanker_.isEmpty()) {
            isCallBanker_ = other.isCallBanker_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureIsCallBankerIsMutable();
            isCallBanker_.addAll(other.isCallBanker_);
          }
          onChanged();
        }
        if (other.hasBankerFriendSeat()) {
          setBankerFriendSeat(other.getBankerFriendSeat());
        }
        if (other.hasFriendSeatIndex()) {
          setFriendSeatIndex(other.getFriendSeatIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.TableResponse_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 banker_player = 1;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000001;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 1;</code>
       *
       * <pre>
       *庄家玩家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 2;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000002;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 2;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 prev_player = 3;
      private int prevPlayer_ ;
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public boolean hasPrevPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public int getPrevPlayer() {
        return prevPlayer_;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder setPrevPlayer(int value) {
        bitField0_ |= 0x00000004;
        prevPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 prev_player = 3;</code>
       *
       * <pre>
       *上一玩家
       * </pre>
       */
      public Builder clearPrevPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prevPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated bool trustee = 4;
      private java.util.List<java.lang.Boolean> trustee_ = java.util.Collections.emptyList();
      private void ensureTrusteeIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          trustee_ = new java.util.ArrayList<java.lang.Boolean>(trustee_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getTrusteeList() {
        return java.util.Collections.unmodifiableList(trustee_);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public int getTrusteeCount() {
        return trustee_.size();
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public boolean getTrustee(int index) {
        return trustee_.get(index);
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public Builder setTrustee(
          int index, boolean value) {
        ensureTrusteeIsMutable();
        trustee_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public Builder addTrustee(boolean value) {
        ensureTrusteeIsMutable();
        trustee_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public Builder addAllTrustee(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureTrusteeIsMutable();
        super.addAll(values, trustee_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool trustee = 4;</code>
       *
       * <pre>
       *是否托管
       * </pre>
       */
      public Builder clearTrustee() {
        trustee_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse out_cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> outCardsData_ =
        java.util.Collections.emptyList();
      private void ensureOutCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          outCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(outCardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> outCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getOutCardsDataList() {
        if (outCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outCardsData_);
        } else {
          return outCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public int getOutCardsDataCount() {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.size();
        } else {
          return outCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);
        } else {
          return outCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder setOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (outCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, value);
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addOutCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          outCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder addAllOutCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          super.addAll(values, outCardsData_);
          onChanged();
        } else {
          outCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder clearOutCardsData() {
        if (outCardsDataBuilder_ == null) {
          outCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public Builder removeOutCardsData(int index) {
        if (outCardsDataBuilder_ == null) {
          ensureOutCardsDataIsMutable();
          outCardsData_.remove(index);
          onChanged();
        } else {
          outCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getOutCardsDataOrBuilder(
          int index) {
        if (outCardsDataBuilder_ == null) {
          return outCardsData_.get(index);  } else {
          return outCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getOutCardsDataOrBuilderList() {
        if (outCardsDataBuilder_ != null) {
          return outCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder() {
        return getOutCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addOutCardsDataBuilder(
          int index) {
        return getOutCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse out_cards_data = 5;</code>
       *
       * <pre>
       *本轮出牌数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getOutCardsDataBuilderList() {
        return getOutCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getOutCardsDataFieldBuilder() {
        if (outCardsDataBuilder_ == null) {
          outCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  outCardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          outCardsData_ = null;
        }
        return outCardsDataBuilder_;
      }

      // repeated int32 out_cards_count = 6;
      private java.util.List<java.lang.Integer> outCardsCount_ = java.util.Collections.emptyList();
      private void ensureOutCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          outCardsCount_ = new java.util.ArrayList<java.lang.Integer>(outCardsCount_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getOutCardsCountList() {
        return java.util.Collections.unmodifiableList(outCardsCount_);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCountCount() {
        return outCardsCount_.size();
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public int getOutCardsCount(int index) {
        return outCardsCount_.get(index);
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder setOutCardsCount(
          int index, int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addOutCardsCount(int value) {
        ensureOutCardsCountIsMutable();
        outCardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder addAllOutCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureOutCardsCountIsMutable();
        super.addAll(values, outCardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 out_cards_count = 6;</code>
       *
       * <pre>
       *本轮牌数量
       * </pre>
       */
      public Builder clearOutCardsCount() {
        outCardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 player_pass = 7;
      private java.util.List<java.lang.Integer> playerPass_ = java.util.Collections.emptyList();
      private void ensurePlayerPassIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          playerPass_ = new java.util.ArrayList<java.lang.Integer>(playerPass_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPlayerPassList() {
        return java.util.Collections.unmodifiableList(playerPass_);
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPassCount() {
        return playerPass_.size();
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public int getPlayerPass(int index) {
        return playerPass_.get(index);
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder setPlayerPass(
          int index, int value) {
        ensurePlayerPassIsMutable();
        playerPass_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addPlayerPass(int value) {
        ensurePlayerPassIsMutable();
        playerPass_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder addAllPlayerPass(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerPassIsMutable();
        super.addAll(values, playerPass_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 player_pass = 7;</code>
       *
       * <pre>
       *本轮不出数据
       * </pre>
       */
      public Builder clearPlayerPass() {
        playerPass_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 card_type = 8;
      private java.util.List<java.lang.Integer> cardType_ = java.util.Collections.emptyList();
      private void ensureCardTypeIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardType_ = new java.util.ArrayList<java.lang.Integer>(cardType_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardTypeList() {
        return java.util.Collections.unmodifiableList(cardType_);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardTypeCount() {
        return cardType_.size();
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType(int index) {
        return cardType_.get(index);
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(
          int index, int value) {
        ensureCardTypeIsMutable();
        cardType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addCardType(int value) {
        ensureCardTypeIsMutable();
        cardType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder addAllCardType(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardTypeIsMutable();
        super.addAll(values, cardType_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_type = 8;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        cardType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_player = 9;
      private int prOutCardPlayer_ ;
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public boolean hasPrOutCardPlayer() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public int getPrOutCardPlayer() {
        return prOutCardPlayer_;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder setPrOutCardPlayer(int value) {
        bitField0_ |= 0x00000100;
        prOutCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_player = 9;</code>
       *
       * <pre>
       *上一出牌玩家
       * </pre>
       */
      public Builder clearPrOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 10;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 10;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_change_data = 11;
      private java.util.List<java.lang.Integer> prCardsChangeData_ = java.util.Collections.emptyList();
      private void ensurePrCardsChangeDataIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>(prCardsChangeData_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsChangeDataList() {
        return java.util.Collections.unmodifiableList(prCardsChangeData_);
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getPrCardsChangeDataCount() {
        return prCardsChangeData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getPrCardsChangeData(int index) {
        return prCardsChangeData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder setPrCardsChangeData(
          int index, int value) {
        ensurePrCardsChangeDataIsMutable();
        prCardsChangeData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addPrCardsChangeData(int value) {
        ensurePrCardsChangeDataIsMutable();
        prCardsChangeData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addAllPrCardsChangeData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsChangeDataIsMutable();
        super.addAll(values, prCardsChangeData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 11;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder clearPrCardsChangeData() {
        prCardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 12;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 12;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 pr_cards_count = 12;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 12;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000800;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 12;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000800);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 13;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 13;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 pr_out_card_type = 13;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 13;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00001000;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 13;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00001000);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_first_out = 14;
      private int isFirstOut_ ;
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public int getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder setIsFirstOut(int value) {
        bitField0_ |= 0x00002000;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_first_out = 14;</code>
       *
       * <pre>
       *是否首出 //0不是首出 1已经出过牌的首出 2还未出牌的首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00002000);
        isFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 15;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00004000;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 15;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00004000);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 16;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 17;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00010000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00010000) == 0x00010000),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // optional .RoomInfo room_info = 18;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // repeated .RoomPlayerResponse players = 19;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00040000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00040000) == 0x00040000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 user_can_out_data = 20;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 20;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 21;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 21;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 user_can_out_count = 21;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 21;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00100000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 21;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00100000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_get_score = 22;
      private java.util.List<java.lang.Integer> userGetScore_ = java.util.Collections.emptyList();
      private void ensureUserGetScoreIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          userGetScore_ = new java.util.ArrayList<java.lang.Integer>(userGetScore_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 user_get_score = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetScoreList() {
        return java.util.Collections.unmodifiableList(userGetScore_);
      }
      /**
       * <code>repeated int32 user_get_score = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScoreCount() {
        return userGetScore_.size();
      }
      /**
       * <code>repeated int32 user_get_score = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScore(int index) {
        return userGetScore_.get(index);
      }
      /**
       * <code>repeated int32 user_get_score = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder setUserGetScore(
          int index, int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addUserGetScore(int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addAllUserGetScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetScoreIsMutable();
        super.addAll(values, userGetScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 22;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder clearUserGetScore() {
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 win_order = 23;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 23;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // optional bool is_yi_da_san = 24;
      private boolean isYiDaSan_ ;
      /**
       * <code>optional bool is_yi_da_san = 24;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public boolean hasIsYiDaSan() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional bool is_yi_da_san = 24;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public boolean getIsYiDaSan() {
        return isYiDaSan_;
      }
      /**
       * <code>optional bool is_yi_da_san = 24;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public Builder setIsYiDaSan(boolean value) {
        bitField0_ |= 0x00800000;
        isYiDaSan_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_yi_da_san = 24;</code>
       *
       * <pre>
       *是否一打三
       * </pre>
       */
      public Builder clearIsYiDaSan() {
        bitField0_ = (bitField0_ & ~0x00800000);
        isYiDaSan_ = false;
        onChanged();
        return this;
      }

      // optional int32 jiao_card_data = 25;
      private int jiaoCardData_ ;
      /**
       * <code>optional int32 jiao_card_data = 25;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public boolean hasJiaoCardData() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional int32 jiao_card_data = 25;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public int getJiaoCardData() {
        return jiaoCardData_;
      }
      /**
       * <code>optional int32 jiao_card_data = 25;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public Builder setJiaoCardData(int value) {
        bitField0_ |= 0x01000000;
        jiaoCardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 jiao_card_data = 25;</code>
       *
       * <pre>
       *叫牌数值
       * </pre>
       */
      public Builder clearJiaoCardData() {
        bitField0_ = (bitField0_ & ~0x01000000);
        jiaoCardData_ = 0;
        onChanged();
        return this;
      }

      // repeated bool is_call_banker = 26;
      private java.util.List<java.lang.Boolean> isCallBanker_ = java.util.Collections.emptyList();
      private void ensureIsCallBankerIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          isCallBanker_ = new java.util.ArrayList<java.lang.Boolean>(isCallBanker_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public java.util.List<java.lang.Boolean>
          getIsCallBankerList() {
        return java.util.Collections.unmodifiableList(isCallBanker_);
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public int getIsCallBankerCount() {
        return isCallBanker_.size();
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public boolean getIsCallBanker(int index) {
        return isCallBanker_.get(index);
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public Builder setIsCallBanker(
          int index, boolean value) {
        ensureIsCallBankerIsMutable();
        isCallBanker_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public Builder addIsCallBanker(boolean value) {
        ensureIsCallBankerIsMutable();
        isCallBanker_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public Builder addAllIsCallBanker(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureIsCallBankerIsMutable();
        super.addAll(values, isCallBanker_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bool is_call_banker = 26;</code>
       *
       * <pre>
       * 是否已经点击独牌
       * </pre>
       */
      public Builder clearIsCallBanker() {
        isCallBanker_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      // optional int32 banker_friend_seat = 27;
      private int bankerFriendSeat_ ;
      /**
       * <code>optional int32 banker_friend_seat = 27;</code>
       *
       * <pre>
       * 庄家的队友 用来处理明鸡
       * </pre>
       */
      public boolean hasBankerFriendSeat() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 banker_friend_seat = 27;</code>
       *
       * <pre>
       * 庄家的队友 用来处理明鸡
       * </pre>
       */
      public int getBankerFriendSeat() {
        return bankerFriendSeat_;
      }
      /**
       * <code>optional int32 banker_friend_seat = 27;</code>
       *
       * <pre>
       * 庄家的队友 用来处理明鸡
       * </pre>
       */
      public Builder setBankerFriendSeat(int value) {
        bitField0_ |= 0x04000000;
        bankerFriendSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_friend_seat = 27;</code>
       *
       * <pre>
       * 庄家的队友 用来处理明鸡
       * </pre>
       */
      public Builder clearBankerFriendSeat() {
        bitField0_ = (bitField0_ & ~0x04000000);
        bankerFriendSeat_ = 0;
        onChanged();
        return this;
      }

      // optional int32 friend_seat_index = 28;
      private int friendSeatIndex_ ;
      /**
       * <code>optional int32 friend_seat_index = 28;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public boolean hasFriendSeatIndex() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 friend_seat_index = 28;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public int getFriendSeatIndex() {
        return friendSeatIndex_;
      }
      /**
       * <code>optional int32 friend_seat_index = 28;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public Builder setFriendSeatIndex(int value) {
        bitField0_ |= 0x08000000;
        friendSeatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 friend_seat_index = 28;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public Builder clearFriendSeatIndex() {
        bitField0_ = (bitField0_ & ~0x08000000);
        friendSeatIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.TableResponse_hrdz)
    }

    static {
      defaultInstance = new TableResponse_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.TableResponse_hrdz)
  }

  public interface OutCardDataWsk_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 out_card_player = 1;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    boolean hasOutCardPlayer();
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    int getOutCardPlayer();

    // repeated int32 cards_data = 2;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsDataList();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getCardsData(int index);

    // repeated int32 cards_change_data = 3;
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsChangeDataList();
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getCardsChangeDataCount();
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getCardsChangeData(int index);

    // optional int32 cards_count = 4;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasCardsCount();
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getCardsCount();

    // optional int32 card_type = 5;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasCardType();
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getCardType();

    // optional int32 cur_player = 6;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // repeated int32 pr_cards_data = 7;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsDataList();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsDataCount();
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    int getPrCardsData(int index);

    // repeated int32 pr_cards_change_data = 8;
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    java.util.List<java.lang.Integer> getPrCardsChangeDataList();
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getPrCardsChangeDataCount();
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    int getPrCardsChangeData(int index);

    // optional int32 pr_cards_count = 9;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    boolean hasPrCardsCount();
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    int getPrCardsCount();

    // optional int32 pr_out_card_type = 10;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    boolean hasPrOutCardType();
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    int getPrOutCardType();

    // optional bool is_first_out = 11;
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean hasIsFirstOut();
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    boolean getIsFirstOut();

    // optional int32 display_time = 12;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // repeated int32 user_can_out_data = 13;
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserCanOutDataList();
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutDataCount();
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    int getUserCanOutData(int index);

    // optional int32 user_can_out_count = 14;
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    boolean hasUserCanOutCount();
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    int getUserCanOutCount();

    // repeated int32 user_get_score = 15;
    /**
     * <code>repeated int32 user_get_score = 15;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetScoreList();
    /**
     * <code>repeated int32 user_get_score = 15;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScoreCount();
    /**
     * <code>repeated int32 user_get_score = 15;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    int getUserGetScore(int index);

    // repeated int32 hand_card_count = 16;
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 17;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);

    // repeated int32 win_order = 18;
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // optional int32 is_current_first_out = 19;
    /**
     * <code>optional int32 is_current_first_out = 19;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    boolean hasIsCurrentFirstOut();
    /**
     * <code>optional int32 is_current_first_out = 19;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    int getIsCurrentFirstOut();

    // optional int32 is_have_not_card = 20;
    /**
     * <code>optional int32 is_have_not_card = 20;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    boolean hasIsHaveNotCard();
    /**
     * <code>optional int32 is_have_not_card = 20;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    int getIsHaveNotCard();

    // optional int32 is_bao_jing = 21;
    /**
     * <code>optional int32 is_bao_jing = 21;</code>
     */
    boolean hasIsBaoJing();
    /**
     * <code>optional int32 is_bao_jing = 21;</code>
     */
    int getIsBaoJing();

    // optional int32 friend_seat_index = 22;
    /**
     * <code>optional int32 friend_seat_index = 22;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    boolean hasFriendSeatIndex();
    /**
     * <code>optional int32 friend_seat_index = 22;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    int getFriendSeatIndex();
  }
  /**
   * Protobuf type {@code hrdz.OutCardDataWsk_hrdz}
   *
   * <pre>
   *1003 用户出牌
   * </pre>
   */
  public static final class OutCardDataWsk_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements OutCardDataWsk_hrdzOrBuilder {
    // Use OutCardDataWsk_hrdz.newBuilder() to construct.
    private OutCardDataWsk_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OutCardDataWsk_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OutCardDataWsk_hrdz defaultInstance;
    public static OutCardDataWsk_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public OutCardDataWsk_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OutCardDataWsk_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              outCardPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsData_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cardsChangeData_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsChangeData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              cardsCount_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              cardType_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              curPlayer_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              prCardsData_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                prCardsData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              prCardsChangeData_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                prCardsChangeData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              prCardsCount_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              prOutCardType_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000040;
              isFirstOut_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000080;
              displayTime_ = input.readInt32();
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              userCanOutData_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                userCanOutData_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userCanOutData_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              bitField0_ |= 0x00000100;
              userCanOutCount_ = input.readInt32();
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              userGetScore_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 138: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00010000;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 152: {
              bitField0_ |= 0x00000200;
              isCurrentFirstOut_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00000400;
              isHaveNotCard_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00000800;
              isBaoJing_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00001000;
              friendSeatIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cardsChangeData_ = java.util.Collections.unmodifiableList(cardsChangeData_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsChangeData_ = java.util.Collections.unmodifiableList(prCardsChangeData_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_OutCardDataWsk_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_OutCardDataWsk_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<OutCardDataWsk_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<OutCardDataWsk_hrdz>() {
      public OutCardDataWsk_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OutCardDataWsk_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OutCardDataWsk_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 out_card_player = 1;
    public static final int OUT_CARD_PLAYER_FIELD_NUMBER = 1;
    private int outCardPlayer_;
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public boolean hasOutCardPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 out_card_player = 1;</code>
     *
     * <pre>
     *出牌玩家
     * </pre>
     */
    public int getOutCardPlayer() {
      return outCardPlayer_;
    }

    // repeated int32 cards_data = 2;
    public static final int CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsData_;
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated int32 cards_data = 2;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getCardsData(int index) {
      return cardsData_.get(index);
    }

    // repeated int32 cards_change_data = 3;
    public static final int CARDS_CHANGE_DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cardsChangeData_;
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsChangeDataList() {
      return cardsChangeData_;
    }
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getCardsChangeDataCount() {
      return cardsChangeData_.size();
    }
    /**
     * <code>repeated int32 cards_change_data = 3;</code>
     *
     * <pre>
     *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getCardsChangeData(int index) {
      return cardsChangeData_.get(index);
    }

    // optional int32 cards_count = 4;
    public static final int CARDS_COUNT_FIELD_NUMBER = 4;
    private int cardsCount_;
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasCardsCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cards_count = 4;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getCardsCount() {
      return cardsCount_;
    }

    // optional int32 card_type = 5;
    public static final int CARD_TYPE_FIELD_NUMBER = 5;
    private int cardType_;
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasCardType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 card_type = 5;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getCardType() {
      return cardType_;
    }

    // optional int32 cur_player = 6;
    public static final int CUR_PLAYER_FIELD_NUMBER = 6;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cur_player = 6;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // repeated int32 pr_cards_data = 7;
    public static final int PR_CARDS_DATA_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> prCardsData_;
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsDataList() {
      return prCardsData_;
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsDataCount() {
      return prCardsData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_data = 7;</code>
     *
     * <pre>
     *上一玩家出牌数据
     * </pre>
     */
    public int getPrCardsData(int index) {
      return prCardsData_.get(index);
    }

    // repeated int32 pr_cards_change_data = 8;
    public static final int PR_CARDS_CHANGE_DATA_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> prCardsChangeData_;
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPrCardsChangeDataList() {
      return prCardsChangeData_;
    }
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getPrCardsChangeDataCount() {
      return prCardsChangeData_.size();
    }
    /**
     * <code>repeated int32 pr_cards_change_data = 8;</code>
     *
     * <pre>
     *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
     * </pre>
     */
    public int getPrCardsChangeData(int index) {
      return prCardsChangeData_.get(index);
    }

    // optional int32 pr_cards_count = 9;
    public static final int PR_CARDS_COUNT_FIELD_NUMBER = 9;
    private int prCardsCount_;
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public boolean hasPrCardsCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pr_cards_count = 9;</code>
     *
     * <pre>
     *上一玩家出牌数量
     * </pre>
     */
    public int getPrCardsCount() {
      return prCardsCount_;
    }

    // optional int32 pr_out_card_type = 10;
    public static final int PR_OUT_CARD_TYPE_FIELD_NUMBER = 10;
    private int prOutCardType_;
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public boolean hasPrOutCardType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pr_out_card_type = 10;</code>
     *
     * <pre>
     *出牌类型
     * </pre>
     */
    public int getPrOutCardType() {
      return prOutCardType_;
    }

    // optional bool is_first_out = 11;
    public static final int IS_FIRST_OUT_FIELD_NUMBER = 11;
    private boolean isFirstOut_;
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean hasIsFirstOut() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool is_first_out = 11;</code>
     *
     * <pre>
     *出牌玩家是否首出
     * </pre>
     */
    public boolean getIsFirstOut() {
      return isFirstOut_;
    }

    // optional int32 display_time = 12;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 12;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 display_time = 12;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // repeated int32 user_can_out_data = 13;
    public static final int USER_CAN_OUT_DATA_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> userCanOutData_;
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserCanOutDataList() {
      return userCanOutData_;
    }
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutDataCount() {
      return userCanOutData_.size();
    }
    /**
     * <code>repeated int32 user_can_out_data = 13;</code>
     *
     * <pre>
     *出牌数据
     * </pre>
     */
    public int getUserCanOutData(int index) {
      return userCanOutData_.get(index);
    }

    // optional int32 user_can_out_count = 14;
    public static final int USER_CAN_OUT_COUNT_FIELD_NUMBER = 14;
    private int userCanOutCount_;
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public boolean hasUserCanOutCount() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 user_can_out_count = 14;</code>
     *
     * <pre>
     *出牌数量
     * </pre>
     */
    public int getUserCanOutCount() {
      return userCanOutCount_;
    }

    // repeated int32 user_get_score = 15;
    public static final int USER_GET_SCORE_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> userGetScore_;
    /**
     * <code>repeated int32 user_get_score = 15;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetScoreList() {
      return userGetScore_;
    }
    /**
     * <code>repeated int32 user_get_score = 15;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScoreCount() {
      return userGetScore_.size();
    }
    /**
     * <code>repeated int32 user_get_score = 15;</code>
     *
     * <pre>
     *玩家抓分
     * </pre>
     */
    public int getUserGetScore(int index) {
      return userGetScore_.get(index);
    }

    // repeated int32 hand_card_count = 16;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 16;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 17;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 17;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    // repeated int32 win_order = 18;
    public static final int WIN_ORDER_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 18;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // optional int32 is_current_first_out = 19;
    public static final int IS_CURRENT_FIRST_OUT_FIELD_NUMBER = 19;
    private int isCurrentFirstOut_;
    /**
     * <code>optional int32 is_current_first_out = 19;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    public boolean hasIsCurrentFirstOut() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 is_current_first_out = 19;</code>
     *
     * <pre>
     *当前操作玩家是否首出
     * </pre>
     */
    public int getIsCurrentFirstOut() {
      return isCurrentFirstOut_;
    }

    // optional int32 is_have_not_card = 20;
    public static final int IS_HAVE_NOT_CARD_FIELD_NUMBER = 20;
    private int isHaveNotCard_;
    /**
     * <code>optional int32 is_have_not_card = 20;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    public boolean hasIsHaveNotCard() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 is_have_not_card = 20;</code>
     *
     * <pre>
     *当前玩家是否没牌
     * </pre>
     */
    public int getIsHaveNotCard() {
      return isHaveNotCard_;
    }

    // optional int32 is_bao_jing = 21;
    public static final int IS_BAO_JING_FIELD_NUMBER = 21;
    private int isBaoJing_;
    /**
     * <code>optional int32 is_bao_jing = 21;</code>
     */
    public boolean hasIsBaoJing() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 is_bao_jing = 21;</code>
     */
    public int getIsBaoJing() {
      return isBaoJing_;
    }

    // optional int32 friend_seat_index = 22;
    public static final int FRIEND_SEAT_INDEX_FIELD_NUMBER = 22;
    private int friendSeatIndex_;
    /**
     * <code>optional int32 friend_seat_index = 22;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    public boolean hasFriendSeatIndex() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 friend_seat_index = 22;</code>
     *
     * <pre>
     * -1 不显示队友的牌 0-3 队友的座位号
     * </pre>
     */
    public int getFriendSeatIndex() {
      return friendSeatIndex_;
    }

    private void initFields() {
      outCardPlayer_ = 0;
      cardsData_ = java.util.Collections.emptyList();
      cardsChangeData_ = java.util.Collections.emptyList();
      cardsCount_ = 0;
      cardType_ = 0;
      curPlayer_ = 0;
      prCardsData_ = java.util.Collections.emptyList();
      prCardsChangeData_ = java.util.Collections.emptyList();
      prCardsCount_ = 0;
      prOutCardType_ = 0;
      isFirstOut_ = false;
      displayTime_ = 0;
      userCanOutData_ = java.util.Collections.emptyList();
      userCanOutCount_ = 0;
      userGetScore_ = java.util.Collections.emptyList();
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
      winOrder_ = java.util.Collections.emptyList();
      isCurrentFirstOut_ = 0;
      isHaveNotCard_ = 0;
      isBaoJing_ = 0;
      friendSeatIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, outCardPlayer_);
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeInt32(2, cardsData_.get(i));
      }
      for (int i = 0; i < cardsChangeData_.size(); i++) {
        output.writeInt32(3, cardsChangeData_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, curPlayer_);
      }
      for (int i = 0; i < prCardsData_.size(); i++) {
        output.writeInt32(7, prCardsData_.get(i));
      }
      for (int i = 0; i < prCardsChangeData_.size(); i++) {
        output.writeInt32(8, prCardsChangeData_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(11, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(12, displayTime_);
      }
      for (int i = 0; i < userCanOutData_.size(); i++) {
        output.writeInt32(13, userCanOutData_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(14, userCanOutCount_);
      }
      for (int i = 0; i < userGetScore_.size(); i++) {
        output.writeInt32(15, userGetScore_.get(i));
      }
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(16, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(17, handCardsData_.get(i));
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(18, winOrder_.get(i));
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(19, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(20, isHaveNotCard_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(21, isBaoJing_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(22, friendSeatIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, outCardPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsChangeData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsChangeData_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsChangeDataList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, cardsCount_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, cardType_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, curPlayer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsDataList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prCardsChangeData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prCardsChangeData_.get(i));
        }
        size += dataSize;
        size += 1 * getPrCardsChangeDataList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, prCardsCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, prOutCardType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isFirstOut_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, displayTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userCanOutData_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userCanOutData_.get(i));
        }
        size += dataSize;
        size += 1 * getUserCanOutDataList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, userCanOutCount_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < userGetScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetScore_.get(i));
        }
        size += dataSize;
        size += 1 * getUserGetScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 2 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, handCardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 2 * getWinOrderList().size();
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, isCurrentFirstOut_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, isHaveNotCard_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, isBaoJing_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, friendSeatIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.OutCardDataWsk_hrdz}
     *
     * <pre>
     *1003 用户出牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_OutCardDataWsk_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_OutCardDataWsk_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outCardPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        prCardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        prCardsCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        prOutCardType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        isFirstOut_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        userCanOutCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
        } else {
          handCardsDataBuilder_.clear();
        }
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        isCurrentFirstOut_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        isHaveNotCard_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        isBaoJing_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        friendSeatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_OutCardDataWsk_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outCardPlayer_ = outCardPlayer_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsData_ = cardsData_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsChangeData_ = java.util.Collections.unmodifiableList(cardsChangeData_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cardsChangeData_ = cardsChangeData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cardType_ = cardType_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curPlayer_ = curPlayer_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = java.util.Collections.unmodifiableList(prCardsData_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.prCardsData_ = prCardsData_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsChangeData_ = java.util.Collections.unmodifiableList(prCardsChangeData_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.prCardsChangeData_ = prCardsChangeData_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.prCardsCount_ = prCardsCount_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.prOutCardType_ = prOutCardType_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000040;
        }
        result.isFirstOut_ = isFirstOut_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000080;
        }
        result.displayTime_ = displayTime_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = java.util.Collections.unmodifiableList(userCanOutData_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.userCanOutData_ = userCanOutData_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.userCanOutCount_ = userCanOutCount_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.userGetScore_ = userGetScore_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.winOrder_ = winOrder_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.isCurrentFirstOut_ = isCurrentFirstOut_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isHaveNotCard_ = isHaveNotCard_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.isBaoJing_ = isBaoJing_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.friendSeatIndex_ = friendSeatIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz.getDefaultInstance()) return this;
        if (other.hasOutCardPlayer()) {
          setOutCardPlayer(other.getOutCardPlayer());
        }
        if (!other.cardsData_.isEmpty()) {
          if (cardsData_.isEmpty()) {
            cardsData_ = other.cardsData_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsDataIsMutable();
            cardsData_.addAll(other.cardsData_);
          }
          onChanged();
        }
        if (!other.cardsChangeData_.isEmpty()) {
          if (cardsChangeData_.isEmpty()) {
            cardsChangeData_ = other.cardsChangeData_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardsChangeDataIsMutable();
            cardsChangeData_.addAll(other.cardsChangeData_);
          }
          onChanged();
        }
        if (other.hasCardsCount()) {
          setCardsCount(other.getCardsCount());
        }
        if (other.hasCardType()) {
          setCardType(other.getCardType());
        }
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (!other.prCardsData_.isEmpty()) {
          if (prCardsData_.isEmpty()) {
            prCardsData_ = other.prCardsData_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensurePrCardsDataIsMutable();
            prCardsData_.addAll(other.prCardsData_);
          }
          onChanged();
        }
        if (!other.prCardsChangeData_.isEmpty()) {
          if (prCardsChangeData_.isEmpty()) {
            prCardsChangeData_ = other.prCardsChangeData_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensurePrCardsChangeDataIsMutable();
            prCardsChangeData_.addAll(other.prCardsChangeData_);
          }
          onChanged();
        }
        if (other.hasPrCardsCount()) {
          setPrCardsCount(other.getPrCardsCount());
        }
        if (other.hasPrOutCardType()) {
          setPrOutCardType(other.getPrOutCardType());
        }
        if (other.hasIsFirstOut()) {
          setIsFirstOut(other.getIsFirstOut());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (!other.userCanOutData_.isEmpty()) {
          if (userCanOutData_.isEmpty()) {
            userCanOutData_ = other.userCanOutData_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureUserCanOutDataIsMutable();
            userCanOutData_.addAll(other.userCanOutData_);
          }
          onChanged();
        }
        if (other.hasUserCanOutCount()) {
          setUserCanOutCount(other.getUserCanOutCount());
        }
        if (!other.userGetScore_.isEmpty()) {
          if (userGetScore_.isEmpty()) {
            userGetScore_ = other.userGetScore_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureUserGetScoreIsMutable();
            userGetScore_.addAll(other.userGetScore_);
          }
          onChanged();
        }
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00010000);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (other.hasIsCurrentFirstOut()) {
          setIsCurrentFirstOut(other.getIsCurrentFirstOut());
        }
        if (other.hasIsHaveNotCard()) {
          setIsHaveNotCard(other.getIsHaveNotCard());
        }
        if (other.hasIsBaoJing()) {
          setIsBaoJing(other.getIsBaoJing());
        }
        if (other.hasFriendSeatIndex()) {
          setFriendSeatIndex(other.getFriendSeatIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.OutCardDataWsk_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 out_card_player = 1;
      private int outCardPlayer_ ;
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public boolean hasOutCardPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public int getOutCardPlayer() {
        return outCardPlayer_;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder setOutCardPlayer(int value) {
        bitField0_ |= 0x00000001;
        outCardPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 out_card_player = 1;</code>
       *
       * <pre>
       *出牌玩家
       * </pre>
       */
      public Builder clearOutCardPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outCardPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 cards_data = 2;
      private java.util.List<java.lang.Integer> cardsData_ = java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsData_ = new java.util.ArrayList<java.lang.Integer>(cardsData_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsDataList() {
        return java.util.Collections.unmodifiableList(cardsData_);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsDataCount() {
        return cardsData_.size();
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getCardsData(int index) {
        return cardsData_.get(index);
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setCardsData(
          int index, int value) {
        ensureCardsDataIsMutable();
        cardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addCardsData(int value) {
        ensureCardsDataIsMutable();
        cardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsDataIsMutable();
        super.addAll(values, cardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_data = 2;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearCardsData() {
        cardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated int32 cards_change_data = 3;
      private java.util.List<java.lang.Integer> cardsChangeData_ = java.util.Collections.emptyList();
      private void ensureCardsChangeDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cardsChangeData_ = new java.util.ArrayList<java.lang.Integer>(cardsChangeData_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsChangeDataList() {
        return java.util.Collections.unmodifiableList(cardsChangeData_);
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getCardsChangeDataCount() {
        return cardsChangeData_.size();
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getCardsChangeData(int index) {
        return cardsChangeData_.get(index);
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder setCardsChangeData(
          int index, int value) {
        ensureCardsChangeDataIsMutable();
        cardsChangeData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addCardsChangeData(int value) {
        ensureCardsChangeDataIsMutable();
        cardsChangeData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addAllCardsChangeData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsChangeDataIsMutable();
        super.addAll(values, cardsChangeData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_change_data = 3;</code>
       *
       * <pre>
       *出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder clearCardsChangeData() {
        cardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 cards_count = 4;
      private int cardsCount_ ;
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasCardsCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getCardsCount() {
        return cardsCount_;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setCardsCount(int value) {
        bitField0_ |= 0x00000008;
        cardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cards_count = 4;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_type = 5;
      private int cardType_ ;
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasCardType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getCardType() {
        return cardType_;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setCardType(int value) {
        bitField0_ |= 0x00000010;
        cardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_type = 5;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearCardType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cardType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 cur_player = 6;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000020;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 6;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000020);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_data = 7;
      private java.util.List<java.lang.Integer> prCardsData_ = java.util.Collections.emptyList();
      private void ensurePrCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          prCardsData_ = new java.util.ArrayList<java.lang.Integer>(prCardsData_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsDataList() {
        return java.util.Collections.unmodifiableList(prCardsData_);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsDataCount() {
        return prCardsData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public int getPrCardsData(int index) {
        return prCardsData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder setPrCardsData(
          int index, int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addPrCardsData(int value) {
        ensurePrCardsDataIsMutable();
        prCardsData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder addAllPrCardsData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsDataIsMutable();
        super.addAll(values, prCardsData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_data = 7;</code>
       *
       * <pre>
       *上一玩家出牌数据
       * </pre>
       */
      public Builder clearPrCardsData() {
        prCardsData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // repeated int32 pr_cards_change_data = 8;
      private java.util.List<java.lang.Integer> prCardsChangeData_ = java.util.Collections.emptyList();
      private void ensurePrCardsChangeDataIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          prCardsChangeData_ = new java.util.ArrayList<java.lang.Integer>(prCardsChangeData_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPrCardsChangeDataList() {
        return java.util.Collections.unmodifiableList(prCardsChangeData_);
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getPrCardsChangeDataCount() {
        return prCardsChangeData_.size();
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public int getPrCardsChangeData(int index) {
        return prCardsChangeData_.get(index);
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder setPrCardsChangeData(
          int index, int value) {
        ensurePrCardsChangeDataIsMutable();
        prCardsChangeData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addPrCardsChangeData(int value) {
        ensurePrCardsChangeDataIsMutable();
        prCardsChangeData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder addAllPrCardsChangeData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrCardsChangeDataIsMutable();
        super.addAll(values, prCardsChangeData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 pr_cards_change_data = 8;</code>
       *
       * <pre>
       *上一玩家出牌数据 带赖子 是变换之后的牌 无赖子就不转换
       * </pre>
       */
      public Builder clearPrCardsChangeData() {
        prCardsChangeData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // optional int32 pr_cards_count = 9;
      private int prCardsCount_ ;
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public boolean hasPrCardsCount() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public int getPrCardsCount() {
        return prCardsCount_;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder setPrCardsCount(int value) {
        bitField0_ |= 0x00000100;
        prCardsCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_cards_count = 9;</code>
       *
       * <pre>
       *上一玩家出牌数量
       * </pre>
       */
      public Builder clearPrCardsCount() {
        bitField0_ = (bitField0_ & ~0x00000100);
        prCardsCount_ = 0;
        onChanged();
        return this;
      }

      // optional int32 pr_out_card_type = 10;
      private int prOutCardType_ ;
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public boolean hasPrOutCardType() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public int getPrOutCardType() {
        return prOutCardType_;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder setPrOutCardType(int value) {
        bitField0_ |= 0x00000200;
        prOutCardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pr_out_card_type = 10;</code>
       *
       * <pre>
       *出牌类型
       * </pre>
       */
      public Builder clearPrOutCardType() {
        bitField0_ = (bitField0_ & ~0x00000200);
        prOutCardType_ = 0;
        onChanged();
        return this;
      }

      // optional bool is_first_out = 11;
      private boolean isFirstOut_ ;
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean hasIsFirstOut() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public boolean getIsFirstOut() {
        return isFirstOut_;
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder setIsFirstOut(boolean value) {
        bitField0_ |= 0x00000400;
        isFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_first_out = 11;</code>
       *
       * <pre>
       *出牌玩家是否首出
       * </pre>
       */
      public Builder clearIsFirstOut() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isFirstOut_ = false;
        onChanged();
        return this;
      }

      // optional int32 display_time = 12;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000800;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 12;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_can_out_data = 13;
      private java.util.List<java.lang.Integer> userCanOutData_ = java.util.Collections.emptyList();
      private void ensureUserCanOutDataIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          userCanOutData_ = new java.util.ArrayList<java.lang.Integer>(userCanOutData_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserCanOutDataList() {
        return java.util.Collections.unmodifiableList(userCanOutData_);
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutDataCount() {
        return userCanOutData_.size();
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public int getUserCanOutData(int index) {
        return userCanOutData_.get(index);
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder setUserCanOutData(
          int index, int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addUserCanOutData(int value) {
        ensureUserCanOutDataIsMutable();
        userCanOutData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder addAllUserCanOutData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserCanOutDataIsMutable();
        super.addAll(values, userCanOutData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_can_out_data = 13;</code>
       *
       * <pre>
       *出牌数据
       * </pre>
       */
      public Builder clearUserCanOutData() {
        userCanOutData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // optional int32 user_can_out_count = 14;
      private int userCanOutCount_ ;
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public boolean hasUserCanOutCount() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public int getUserCanOutCount() {
        return userCanOutCount_;
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder setUserCanOutCount(int value) {
        bitField0_ |= 0x00002000;
        userCanOutCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 user_can_out_count = 14;</code>
       *
       * <pre>
       *出牌数量
       * </pre>
       */
      public Builder clearUserCanOutCount() {
        bitField0_ = (bitField0_ & ~0x00002000);
        userCanOutCount_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 user_get_score = 15;
      private java.util.List<java.lang.Integer> userGetScore_ = java.util.Collections.emptyList();
      private void ensureUserGetScoreIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          userGetScore_ = new java.util.ArrayList<java.lang.Integer>(userGetScore_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 user_get_score = 15;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetScoreList() {
        return java.util.Collections.unmodifiableList(userGetScore_);
      }
      /**
       * <code>repeated int32 user_get_score = 15;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScoreCount() {
        return userGetScore_.size();
      }
      /**
       * <code>repeated int32 user_get_score = 15;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public int getUserGetScore(int index) {
        return userGetScore_.get(index);
      }
      /**
       * <code>repeated int32 user_get_score = 15;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder setUserGetScore(
          int index, int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 15;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addUserGetScore(int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 15;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder addAllUserGetScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetScoreIsMutable();
        super.addAll(values, userGetScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 15;</code>
       *
       * <pre>
       *玩家抓分
       * </pre>
       */
      public Builder clearUserGetScore() {
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated int32 hand_card_count = 16;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 16;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 17;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00010000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 17;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00010000) == 0x00010000),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // repeated int32 win_order = 18;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 18;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      // optional int32 is_current_first_out = 19;
      private int isCurrentFirstOut_ ;
      /**
       * <code>optional int32 is_current_first_out = 19;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public boolean hasIsCurrentFirstOut() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 is_current_first_out = 19;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public int getIsCurrentFirstOut() {
        return isCurrentFirstOut_;
      }
      /**
       * <code>optional int32 is_current_first_out = 19;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public Builder setIsCurrentFirstOut(int value) {
        bitField0_ |= 0x00040000;
        isCurrentFirstOut_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_current_first_out = 19;</code>
       *
       * <pre>
       *当前操作玩家是否首出
       * </pre>
       */
      public Builder clearIsCurrentFirstOut() {
        bitField0_ = (bitField0_ & ~0x00040000);
        isCurrentFirstOut_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_have_not_card = 20;
      private int isHaveNotCard_ ;
      /**
       * <code>optional int32 is_have_not_card = 20;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public boolean hasIsHaveNotCard() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 is_have_not_card = 20;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public int getIsHaveNotCard() {
        return isHaveNotCard_;
      }
      /**
       * <code>optional int32 is_have_not_card = 20;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public Builder setIsHaveNotCard(int value) {
        bitField0_ |= 0x00080000;
        isHaveNotCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_have_not_card = 20;</code>
       *
       * <pre>
       *当前玩家是否没牌
       * </pre>
       */
      public Builder clearIsHaveNotCard() {
        bitField0_ = (bitField0_ & ~0x00080000);
        isHaveNotCard_ = 0;
        onChanged();
        return this;
      }

      // optional int32 is_bao_jing = 21;
      private int isBaoJing_ ;
      /**
       * <code>optional int32 is_bao_jing = 21;</code>
       */
      public boolean hasIsBaoJing() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 is_bao_jing = 21;</code>
       */
      public int getIsBaoJing() {
        return isBaoJing_;
      }
      /**
       * <code>optional int32 is_bao_jing = 21;</code>
       */
      public Builder setIsBaoJing(int value) {
        bitField0_ |= 0x00100000;
        isBaoJing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_bao_jing = 21;</code>
       */
      public Builder clearIsBaoJing() {
        bitField0_ = (bitField0_ & ~0x00100000);
        isBaoJing_ = 0;
        onChanged();
        return this;
      }

      // optional int32 friend_seat_index = 22;
      private int friendSeatIndex_ ;
      /**
       * <code>optional int32 friend_seat_index = 22;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public boolean hasFriendSeatIndex() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 friend_seat_index = 22;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public int getFriendSeatIndex() {
        return friendSeatIndex_;
      }
      /**
       * <code>optional int32 friend_seat_index = 22;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public Builder setFriendSeatIndex(int value) {
        bitField0_ |= 0x00200000;
        friendSeatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 friend_seat_index = 22;</code>
       *
       * <pre>
       * -1 不显示队友的牌 0-3 队友的座位号
       * </pre>
       */
      public Builder clearFriendSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00200000);
        friendSeatIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.OutCardDataWsk_hrdz)
    }

    static {
      defaultInstance = new OutCardDataWsk_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.OutCardDataWsk_hrdz)
  }

  public interface PukeGameEndWsk_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .RoomInfo room_info = 1;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();

    // optional int32 cur_round = 2;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    boolean hasCurRound();
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    int getCurRound();

    // optional int32 game_round = 3;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    boolean hasGameRound();
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    int getGameRound();

    // repeated int32 card_count = 4;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardCountList();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCountCount();
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getCardCount(int index);

    // repeated .Int32ArrayResponse cards_data = 5;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 boom_card_num = 6;
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getBoomCardNumList();
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    int getBoomCardNumCount();
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    int getBoomCardNum(int index);

    // repeated int32 end_score = 7;
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreList();
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    int getEndScoreCount();
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    int getEndScore(int index);

    // optional int32 player_num = 8;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    boolean hasPlayerNum();
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    int getPlayerNum();

    // optional int32 banker_player = 9;
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 reason = 10;
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    boolean hasReason();
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    int getReason();

    // repeated int32 win_order = 11;
    /**
     * <code>repeated int32 win_order = 11;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    java.util.List<java.lang.Integer> getWinOrderList();
    /**
     * <code>repeated int32 win_order = 11;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrderCount();
    /**
     * <code>repeated int32 win_order = 11;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    int getWinOrder(int index);

    // repeated int32 jiang_fa_score = 12;
    /**
     * <code>repeated int32 jiang_fa_score = 12;</code>
     *
     * <pre>
     *奖罚分
     * </pre>
     */
    java.util.List<java.lang.Integer> getJiangFaScoreList();
    /**
     * <code>repeated int32 jiang_fa_score = 12;</code>
     *
     * <pre>
     *奖罚分
     * </pre>
     */
    int getJiangFaScoreCount();
    /**
     * <code>repeated int32 jiang_fa_score = 12;</code>
     *
     * <pre>
     *奖罚分
     * </pre>
     */
    int getJiangFaScore(int index);

    // repeated int32 zhua_score = 13;
    /**
     * <code>repeated int32 zhua_score = 13;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getZhuaScoreList();
    /**
     * <code>repeated int32 zhua_score = 13;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getZhuaScoreCount();
    /**
     * <code>repeated int32 zhua_score = 13;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getZhuaScore(int index);

    // repeated int32 xi_score = 14;
    /**
     * <code>repeated int32 xi_score = 14;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    java.util.List<java.lang.Integer> getXiScoreList();
    /**
     * <code>repeated int32 xi_score = 14;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    int getXiScoreCount();
    /**
     * <code>repeated int32 xi_score = 14;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    int getXiScore(int index);

    // repeated int32 hong_pai = 15;
    /**
     * <code>repeated int32 hong_pai = 15;</code>
     *
     * <pre>
     *红牌
     * </pre>
     */
    java.util.List<java.lang.Integer> getHongPaiList();
    /**
     * <code>repeated int32 hong_pai = 15;</code>
     *
     * <pre>
     *红牌
     * </pre>
     */
    int getHongPaiCount();
    /**
     * <code>repeated int32 hong_pai = 15;</code>
     *
     * <pre>
     *红牌
     * </pre>
     */
    int getHongPai(int index);

    // repeated int32 dang_ju_score = 16;
    /**
     * <code>repeated int32 dang_ju_score = 16;</code>
     *
     * <pre>
     *当局分
     * </pre>
     */
    java.util.List<java.lang.Integer> getDangJuScoreList();
    /**
     * <code>repeated int32 dang_ju_score = 16;</code>
     *
     * <pre>
     *当局分
     * </pre>
     */
    int getDangJuScoreCount();
    /**
     * <code>repeated int32 dang_ju_score = 16;</code>
     *
     * <pre>
     *当局分
     * </pre>
     */
    int getDangJuScore(int index);

    // optional int32 bao_player = 25;
    /**
     * <code>optional int32 bao_player = 25;</code>
     *
     * <pre>
     *包牌玩家
     * </pre>
     */
    boolean hasBaoPlayer();
    /**
     * <code>optional int32 bao_player = 25;</code>
     *
     * <pre>
     *包牌玩家
     * </pre>
     */
    int getBaoPlayer();

    // optional int32 ban_player = 26;
    /**
     * <code>optional int32 ban_player = 26;</code>
     *
     * <pre>
     *伴玩家
     * </pre>
     */
    boolean hasBanPlayer();
    /**
     * <code>optional int32 ban_player = 26;</code>
     *
     * <pre>
     *伴玩家
     * </pre>
     */
    int getBanPlayer();

    // repeated int32 all_end_score = 17;
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    java.util.List<java.lang.Integer> getAllEndScoreList();
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScoreCount();
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    int getAllEndScore(int index);

    // repeated int32 end_score_zhua = 18;
    /**
     * <code>repeated int32 end_score_zhua = 18;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getEndScoreZhuaList();
    /**
     * <code>repeated int32 end_score_zhua = 18;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    int getEndScoreZhuaCount();
    /**
     * <code>repeated int32 end_score_zhua = 18;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    int getEndScoreZhua(int index);

    // repeated .RoomPlayerResponse players = 19;
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> 
        getPlayersList();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index);
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    int getPlayersCount();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index);

    // repeated int32 yi_yao_times = 20;
    /**
     * <code>repeated int32 yi_yao_times = 20;</code>
     *
     * <pre>
     *一游次数
     * </pre>
     */
    java.util.List<java.lang.Integer> getYiYaoTimesList();
    /**
     * <code>repeated int32 yi_yao_times = 20;</code>
     *
     * <pre>
     *一游次数
     * </pre>
     */
    int getYiYaoTimesCount();
    /**
     * <code>repeated int32 yi_yao_times = 20;</code>
     *
     * <pre>
     *一游次数
     * </pre>
     */
    int getYiYaoTimes(int index);

    // repeated int32 er_yao_times = 21;
    /**
     * <code>repeated int32 er_yao_times = 21;</code>
     *
     * <pre>
     *二游次数
     * </pre>
     */
    java.util.List<java.lang.Integer> getErYaoTimesList();
    /**
     * <code>repeated int32 er_yao_times = 21;</code>
     *
     * <pre>
     *二游次数
     * </pre>
     */
    int getErYaoTimesCount();
    /**
     * <code>repeated int32 er_yao_times = 21;</code>
     *
     * <pre>
     *二游次数
     * </pre>
     */
    int getErYaoTimes(int index);

    // repeated int32 san_yao_times = 22;
    /**
     * <code>repeated int32 san_yao_times = 22;</code>
     *
     * <pre>
     *三游次数
     * </pre>
     */
    java.util.List<java.lang.Integer> getSanYaoTimesList();
    /**
     * <code>repeated int32 san_yao_times = 22;</code>
     *
     * <pre>
     *三游次数
     * </pre>
     */
    int getSanYaoTimesCount();
    /**
     * <code>repeated int32 san_yao_times = 22;</code>
     *
     * <pre>
     *三游次数
     * </pre>
     */
    int getSanYaoTimes(int index);

    // repeated int32 si_yao_times = 23;
    /**
     * <code>repeated int32 si_yao_times = 23;</code>
     *
     * <pre>
     *四游次数
     * </pre>
     */
    java.util.List<java.lang.Integer> getSiYaoTimesList();
    /**
     * <code>repeated int32 si_yao_times = 23;</code>
     *
     * <pre>
     *四游次数
     * </pre>
     */
    int getSiYaoTimesCount();
    /**
     * <code>repeated int32 si_yao_times = 23;</code>
     *
     * <pre>
     *四游次数
     * </pre>
     */
    int getSiYaoTimes(int index);

    // repeated int32 qi_fen_times = 24;
    /**
     * <code>repeated int32 qi_fen_times = 24;</code>
     *
     * <pre>
     *喜分次数
     * </pre>
     */
    java.util.List<java.lang.Integer> getQiFenTimesList();
    /**
     * <code>repeated int32 qi_fen_times = 24;</code>
     *
     * <pre>
     *喜分次数
     * </pre>
     */
    int getQiFenTimesCount();
    /**
     * <code>repeated int32 qi_fen_times = 24;</code>
     *
     * <pre>
     *喜分次数
     * </pre>
     */
    int getQiFenTimes(int index);
  }
  /**
   * Protobuf type {@code hrdz.PukeGameEndWsk_hrdz}
   *
   * <pre>
   *1004  游戏结束
   * </pre>
   */
  public static final class PukeGameEndWsk_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements PukeGameEndWsk_hrdzOrBuilder {
    // Use PukeGameEndWsk_hrdz.newBuilder() to construct.
    private PukeGameEndWsk_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PukeGameEndWsk_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PukeGameEndWsk_hrdz defaultInstance;
    public static PukeGameEndWsk_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public PukeGameEndWsk_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PukeGameEndWsk_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              curRound_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameRound_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cardCount_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000010;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              boomCardNum_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                boomCardNum_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                boomCardNum_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              endScore_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                endScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              playerNum_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000010;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000020;
              reason_ = input.readInt32();
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              winOrder_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                winOrder_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                winOrder_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                jiangFaScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              jiangFaScore_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                jiangFaScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                jiangFaScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                zhuaScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              zhuaScore_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                zhuaScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                zhuaScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                xiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              xiScore_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                xiScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                xiScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                hongPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              hongPai_.add(input.readInt32());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                hongPai_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                hongPai_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                dangJuScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              dangJuScore_.add(input.readInt32());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                dangJuScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                dangJuScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              allEndScore_.add(input.readInt32());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                allEndScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                allEndScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 144: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                endScoreZhua_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              endScoreZhua_.add(input.readInt32());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                endScoreZhua_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                endScoreZhua_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>();
                mutable_bitField0_ |= 0x00100000;
              }
              players_.add(input.readMessage(protobuf.clazz.Protocol.RoomPlayerResponse.PARSER, extensionRegistry));
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                yiYaoTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              yiYaoTimes_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                yiYaoTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                yiYaoTimes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                erYaoTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              erYaoTimes_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                erYaoTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                erYaoTimes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                sanYaoTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              sanYaoTimes_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                sanYaoTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                sanYaoTimes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                siYaoTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              siYaoTimes_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                siYaoTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                siYaoTimes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
                qiFenTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              qiFenTimes_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x02000000) == 0x02000000) && input.getBytesUntilLimit() > 0) {
                qiFenTimes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x02000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                qiFenTimes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 200: {
              bitField0_ |= 0x00000040;
              baoPlayer_ = input.readInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x00000080;
              banPlayer_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          jiangFaScore_ = java.util.Collections.unmodifiableList(jiangFaScore_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          zhuaScore_ = java.util.Collections.unmodifiableList(zhuaScore_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          xiScore_ = java.util.Collections.unmodifiableList(xiScore_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          hongPai_ = java.util.Collections.unmodifiableList(hongPai_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          dangJuScore_ = java.util.Collections.unmodifiableList(dangJuScore_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          endScoreZhua_ = java.util.Collections.unmodifiableList(endScoreZhua_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          yiYaoTimes_ = java.util.Collections.unmodifiableList(yiYaoTimes_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          erYaoTimes_ = java.util.Collections.unmodifiableList(erYaoTimes_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          sanYaoTimes_ = java.util.Collections.unmodifiableList(sanYaoTimes_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          siYaoTimes_ = java.util.Collections.unmodifiableList(siYaoTimes_);
        }
        if (((mutable_bitField0_ & 0x02000000) == 0x02000000)) {
          qiFenTimes_ = java.util.Collections.unmodifiableList(qiFenTimes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_PukeGameEndWsk_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_PukeGameEndWsk_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<PukeGameEndWsk_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<PukeGameEndWsk_hrdz>() {
      public PukeGameEndWsk_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PukeGameEndWsk_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PukeGameEndWsk_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .RoomInfo room_info = 1;
    public static final int ROOM_INFO_FIELD_NUMBER = 1;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 1;</code>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    // optional int32 cur_round = 2;
    public static final int CUR_ROUND_FIELD_NUMBER = 2;
    private int curRound_;
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public boolean hasCurRound() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 cur_round = 2;</code>
     *
     * <pre>
     *当前圈数
     * </pre>
     */
    public int getCurRound() {
      return curRound_;
    }

    // optional int32 game_round = 3;
    public static final int GAME_ROUND_FIELD_NUMBER = 3;
    private int gameRound_;
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public boolean hasGameRound() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 game_round = 3;</code>
     *
     * <pre>
     *游戏圈数
     * </pre>
     */
    public int getGameRound() {
      return gameRound_;
    }

    // repeated int32 card_count = 4;
    public static final int CARD_COUNT_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cardCount_;
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardCountList() {
      return cardCount_;
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCountCount() {
      return cardCount_.size();
    }
    /**
     * <code>repeated int32 card_count = 4;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getCardCount(int index) {
      return cardCount_.get(index);
    }

    // repeated .Int32ArrayResponse cards_data = 5;
    public static final int CARDS_DATA_FIELD_NUMBER = 5;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 boom_card_num = 6;
    public static final int BOOM_CARD_NUM_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> boomCardNum_;
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getBoomCardNumList() {
      return boomCardNum_;
    }
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public int getBoomCardNumCount() {
      return boomCardNum_.size();
    }
    /**
     * <code>repeated int32 boom_card_num = 6;</code>
     *
     * <pre>
     *炸弹数量
     * </pre>
     */
    public int getBoomCardNum(int index) {
      return boomCardNum_.get(index);
    }

    // repeated int32 end_score = 7;
    public static final int END_SCORE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> endScore_;
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreList() {
      return endScore_;
    }
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public int getEndScoreCount() {
      return endScore_.size();
    }
    /**
     * <code>repeated int32 end_score = 7;</code>
     *
     * <pre>
     *总分
     * </pre>
     */
    public int getEndScore(int index) {
      return endScore_.get(index);
    }

    // optional int32 player_num = 8;
    public static final int PLAYER_NUM_FIELD_NUMBER = 8;
    private int playerNum_;
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public boolean hasPlayerNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 player_num = 8;</code>
     *
     * <pre>
     *游戏人数
     * </pre>
     */
    public int getPlayerNum() {
      return playerNum_;
    }

    // optional int32 banker_player = 9;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 9;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 banker_player = 9;</code>
     *
     * <pre>
     *庄家
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 reason = 10;
    public static final int REASON_FIELD_NUMBER = 10;
    private int reason_;
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public boolean hasReason() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 reason = 10;</code>
     *
     * <pre>
     *结束类型
     * </pre>
     */
    public int getReason() {
      return reason_;
    }

    // repeated int32 win_order = 11;
    public static final int WIN_ORDER_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> winOrder_;
    /**
     * <code>repeated int32 win_order = 11;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getWinOrderList() {
      return winOrder_;
    }
    /**
     * <code>repeated int32 win_order = 11;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrderCount() {
      return winOrder_.size();
    }
    /**
     * <code>repeated int32 win_order = 11;</code>
     *
     * <pre>
     *输赢排序
     * </pre>
     */
    public int getWinOrder(int index) {
      return winOrder_.get(index);
    }

    // repeated int32 jiang_fa_score = 12;
    public static final int JIANG_FA_SCORE_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> jiangFaScore_;
    /**
     * <code>repeated int32 jiang_fa_score = 12;</code>
     *
     * <pre>
     *奖罚分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getJiangFaScoreList() {
      return jiangFaScore_;
    }
    /**
     * <code>repeated int32 jiang_fa_score = 12;</code>
     *
     * <pre>
     *奖罚分
     * </pre>
     */
    public int getJiangFaScoreCount() {
      return jiangFaScore_.size();
    }
    /**
     * <code>repeated int32 jiang_fa_score = 12;</code>
     *
     * <pre>
     *奖罚分
     * </pre>
     */
    public int getJiangFaScore(int index) {
      return jiangFaScore_.get(index);
    }

    // repeated int32 zhua_score = 13;
    public static final int ZHUA_SCORE_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> zhuaScore_;
    /**
     * <code>repeated int32 zhua_score = 13;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getZhuaScoreList() {
      return zhuaScore_;
    }
    /**
     * <code>repeated int32 zhua_score = 13;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getZhuaScoreCount() {
      return zhuaScore_.size();
    }
    /**
     * <code>repeated int32 zhua_score = 13;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getZhuaScore(int index) {
      return zhuaScore_.get(index);
    }

    // repeated int32 xi_score = 14;
    public static final int XI_SCORE_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> xiScore_;
    /**
     * <code>repeated int32 xi_score = 14;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getXiScoreList() {
      return xiScore_;
    }
    /**
     * <code>repeated int32 xi_score = 14;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    public int getXiScoreCount() {
      return xiScore_.size();
    }
    /**
     * <code>repeated int32 xi_score = 14;</code>
     *
     * <pre>
     *喜分
     * </pre>
     */
    public int getXiScore(int index) {
      return xiScore_.get(index);
    }

    // repeated int32 hong_pai = 15;
    public static final int HONG_PAI_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Integer> hongPai_;
    /**
     * <code>repeated int32 hong_pai = 15;</code>
     *
     * <pre>
     *红牌
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHongPaiList() {
      return hongPai_;
    }
    /**
     * <code>repeated int32 hong_pai = 15;</code>
     *
     * <pre>
     *红牌
     * </pre>
     */
    public int getHongPaiCount() {
      return hongPai_.size();
    }
    /**
     * <code>repeated int32 hong_pai = 15;</code>
     *
     * <pre>
     *红牌
     * </pre>
     */
    public int getHongPai(int index) {
      return hongPai_.get(index);
    }

    // repeated int32 dang_ju_score = 16;
    public static final int DANG_JU_SCORE_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Integer> dangJuScore_;
    /**
     * <code>repeated int32 dang_ju_score = 16;</code>
     *
     * <pre>
     *当局分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDangJuScoreList() {
      return dangJuScore_;
    }
    /**
     * <code>repeated int32 dang_ju_score = 16;</code>
     *
     * <pre>
     *当局分
     * </pre>
     */
    public int getDangJuScoreCount() {
      return dangJuScore_.size();
    }
    /**
     * <code>repeated int32 dang_ju_score = 16;</code>
     *
     * <pre>
     *当局分
     * </pre>
     */
    public int getDangJuScore(int index) {
      return dangJuScore_.get(index);
    }

    // optional int32 bao_player = 25;
    public static final int BAO_PLAYER_FIELD_NUMBER = 25;
    private int baoPlayer_;
    /**
     * <code>optional int32 bao_player = 25;</code>
     *
     * <pre>
     *包牌玩家
     * </pre>
     */
    public boolean hasBaoPlayer() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 bao_player = 25;</code>
     *
     * <pre>
     *包牌玩家
     * </pre>
     */
    public int getBaoPlayer() {
      return baoPlayer_;
    }

    // optional int32 ban_player = 26;
    public static final int BAN_PLAYER_FIELD_NUMBER = 26;
    private int banPlayer_;
    /**
     * <code>optional int32 ban_player = 26;</code>
     *
     * <pre>
     *伴玩家
     * </pre>
     */
    public boolean hasBanPlayer() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 ban_player = 26;</code>
     *
     * <pre>
     *伴玩家
     * </pre>
     */
    public int getBanPlayer() {
      return banPlayer_;
    }

    // repeated int32 all_end_score = 17;
    public static final int ALL_END_SCORE_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Integer> allEndScore_;
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getAllEndScoreList() {
      return allEndScore_;
    }
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScoreCount() {
      return allEndScore_.size();
    }
    /**
     * <code>repeated int32 all_end_score = 17;</code>
     *
     * <pre>
     *总结算
     * </pre>
     */
    public int getAllEndScore(int index) {
      return allEndScore_.get(index);
    }

    // repeated int32 end_score_zhua = 18;
    public static final int END_SCORE_ZHUA_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Integer> endScoreZhua_;
    /**
     * <code>repeated int32 end_score_zhua = 18;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getEndScoreZhuaList() {
      return endScoreZhua_;
    }
    /**
     * <code>repeated int32 end_score_zhua = 18;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    public int getEndScoreZhuaCount() {
      return endScoreZhua_.size();
    }
    /**
     * <code>repeated int32 end_score_zhua = 18;</code>
     *
     * <pre>
     *单句最高抓分
     * </pre>
     */
    public int getEndScoreZhua(int index) {
      return endScoreZhua_.get(index);
    }

    // repeated .RoomPlayerResponse players = 19;
    public static final int PLAYERS_FIELD_NUMBER = 19;
    private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_;
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <code>repeated .RoomPlayerResponse players = 19;</code>
     */
    public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    // repeated int32 yi_yao_times = 20;
    public static final int YI_YAO_TIMES_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> yiYaoTimes_;
    /**
     * <code>repeated int32 yi_yao_times = 20;</code>
     *
     * <pre>
     *一游次数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getYiYaoTimesList() {
      return yiYaoTimes_;
    }
    /**
     * <code>repeated int32 yi_yao_times = 20;</code>
     *
     * <pre>
     *一游次数
     * </pre>
     */
    public int getYiYaoTimesCount() {
      return yiYaoTimes_.size();
    }
    /**
     * <code>repeated int32 yi_yao_times = 20;</code>
     *
     * <pre>
     *一游次数
     * </pre>
     */
    public int getYiYaoTimes(int index) {
      return yiYaoTimes_.get(index);
    }

    // repeated int32 er_yao_times = 21;
    public static final int ER_YAO_TIMES_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> erYaoTimes_;
    /**
     * <code>repeated int32 er_yao_times = 21;</code>
     *
     * <pre>
     *二游次数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getErYaoTimesList() {
      return erYaoTimes_;
    }
    /**
     * <code>repeated int32 er_yao_times = 21;</code>
     *
     * <pre>
     *二游次数
     * </pre>
     */
    public int getErYaoTimesCount() {
      return erYaoTimes_.size();
    }
    /**
     * <code>repeated int32 er_yao_times = 21;</code>
     *
     * <pre>
     *二游次数
     * </pre>
     */
    public int getErYaoTimes(int index) {
      return erYaoTimes_.get(index);
    }

    // repeated int32 san_yao_times = 22;
    public static final int SAN_YAO_TIMES_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> sanYaoTimes_;
    /**
     * <code>repeated int32 san_yao_times = 22;</code>
     *
     * <pre>
     *三游次数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSanYaoTimesList() {
      return sanYaoTimes_;
    }
    /**
     * <code>repeated int32 san_yao_times = 22;</code>
     *
     * <pre>
     *三游次数
     * </pre>
     */
    public int getSanYaoTimesCount() {
      return sanYaoTimes_.size();
    }
    /**
     * <code>repeated int32 san_yao_times = 22;</code>
     *
     * <pre>
     *三游次数
     * </pre>
     */
    public int getSanYaoTimes(int index) {
      return sanYaoTimes_.get(index);
    }

    // repeated int32 si_yao_times = 23;
    public static final int SI_YAO_TIMES_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> siYaoTimes_;
    /**
     * <code>repeated int32 si_yao_times = 23;</code>
     *
     * <pre>
     *四游次数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getSiYaoTimesList() {
      return siYaoTimes_;
    }
    /**
     * <code>repeated int32 si_yao_times = 23;</code>
     *
     * <pre>
     *四游次数
     * </pre>
     */
    public int getSiYaoTimesCount() {
      return siYaoTimes_.size();
    }
    /**
     * <code>repeated int32 si_yao_times = 23;</code>
     *
     * <pre>
     *四游次数
     * </pre>
     */
    public int getSiYaoTimes(int index) {
      return siYaoTimes_.get(index);
    }

    // repeated int32 qi_fen_times = 24;
    public static final int QI_FEN_TIMES_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> qiFenTimes_;
    /**
     * <code>repeated int32 qi_fen_times = 24;</code>
     *
     * <pre>
     *喜分次数
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getQiFenTimesList() {
      return qiFenTimes_;
    }
    /**
     * <code>repeated int32 qi_fen_times = 24;</code>
     *
     * <pre>
     *喜分次数
     * </pre>
     */
    public int getQiFenTimesCount() {
      return qiFenTimes_.size();
    }
    /**
     * <code>repeated int32 qi_fen_times = 24;</code>
     *
     * <pre>
     *喜分次数
     * </pre>
     */
    public int getQiFenTimes(int index) {
      return qiFenTimes_.get(index);
    }

    private void initFields() {
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      curRound_ = 0;
      gameRound_ = 0;
      cardCount_ = java.util.Collections.emptyList();
      cardsData_ = java.util.Collections.emptyList();
      boomCardNum_ = java.util.Collections.emptyList();
      endScore_ = java.util.Collections.emptyList();
      playerNum_ = 0;
      bankerPlayer_ = 0;
      reason_ = 0;
      winOrder_ = java.util.Collections.emptyList();
      jiangFaScore_ = java.util.Collections.emptyList();
      zhuaScore_ = java.util.Collections.emptyList();
      xiScore_ = java.util.Collections.emptyList();
      hongPai_ = java.util.Collections.emptyList();
      dangJuScore_ = java.util.Collections.emptyList();
      baoPlayer_ = 0;
      banPlayer_ = 0;
      allEndScore_ = java.util.Collections.emptyList();
      endScoreZhua_ = java.util.Collections.emptyList();
      players_ = java.util.Collections.emptyList();
      yiYaoTimes_ = java.util.Collections.emptyList();
      erYaoTimes_ = java.util.Collections.emptyList();
      sanYaoTimes_ = java.util.Collections.emptyList();
      siYaoTimes_ = java.util.Collections.emptyList();
      qiFenTimes_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameRound_);
      }
      for (int i = 0; i < cardCount_.size(); i++) {
        output.writeInt32(4, cardCount_.get(i));
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(5, cardsData_.get(i));
      }
      for (int i = 0; i < boomCardNum_.size(); i++) {
        output.writeInt32(6, boomCardNum_.get(i));
      }
      for (int i = 0; i < endScore_.size(); i++) {
        output.writeInt32(7, endScore_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(10, reason_);
      }
      for (int i = 0; i < winOrder_.size(); i++) {
        output.writeInt32(11, winOrder_.get(i));
      }
      for (int i = 0; i < jiangFaScore_.size(); i++) {
        output.writeInt32(12, jiangFaScore_.get(i));
      }
      for (int i = 0; i < zhuaScore_.size(); i++) {
        output.writeInt32(13, zhuaScore_.get(i));
      }
      for (int i = 0; i < xiScore_.size(); i++) {
        output.writeInt32(14, xiScore_.get(i));
      }
      for (int i = 0; i < hongPai_.size(); i++) {
        output.writeInt32(15, hongPai_.get(i));
      }
      for (int i = 0; i < dangJuScore_.size(); i++) {
        output.writeInt32(16, dangJuScore_.get(i));
      }
      for (int i = 0; i < allEndScore_.size(); i++) {
        output.writeInt32(17, allEndScore_.get(i));
      }
      for (int i = 0; i < endScoreZhua_.size(); i++) {
        output.writeInt32(18, endScoreZhua_.get(i));
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(19, players_.get(i));
      }
      for (int i = 0; i < yiYaoTimes_.size(); i++) {
        output.writeInt32(20, yiYaoTimes_.get(i));
      }
      for (int i = 0; i < erYaoTimes_.size(); i++) {
        output.writeInt32(21, erYaoTimes_.get(i));
      }
      for (int i = 0; i < sanYaoTimes_.size(); i++) {
        output.writeInt32(22, sanYaoTimes_.get(i));
      }
      for (int i = 0; i < siYaoTimes_.size(); i++) {
        output.writeInt32(23, siYaoTimes_.get(i));
      }
      for (int i = 0; i < qiFenTimes_.size(); i++) {
        output.writeInt32(24, qiFenTimes_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(25, baoPlayer_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(26, banPlayer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, curRound_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameRound_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardCountList().size();
      }
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < boomCardNum_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(boomCardNum_.get(i));
        }
        size += dataSize;
        size += 1 * getBoomCardNumList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScore_.get(i));
        }
        size += dataSize;
        size += 1 * getEndScoreList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, playerNum_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, reason_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < winOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(winOrder_.get(i));
        }
        size += dataSize;
        size += 1 * getWinOrderList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < jiangFaScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(jiangFaScore_.get(i));
        }
        size += dataSize;
        size += 1 * getJiangFaScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < zhuaScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(zhuaScore_.get(i));
        }
        size += dataSize;
        size += 1 * getZhuaScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xiScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(xiScore_.get(i));
        }
        size += dataSize;
        size += 1 * getXiScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < hongPai_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(hongPai_.get(i));
        }
        size += dataSize;
        size += 1 * getHongPaiList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dangJuScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dangJuScore_.get(i));
        }
        size += dataSize;
        size += 2 * getDangJuScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allEndScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allEndScore_.get(i));
        }
        size += dataSize;
        size += 2 * getAllEndScoreList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < endScoreZhua_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(endScoreZhua_.get(i));
        }
        size += dataSize;
        size += 2 * getEndScoreZhuaList().size();
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, players_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < yiYaoTimes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(yiYaoTimes_.get(i));
        }
        size += dataSize;
        size += 2 * getYiYaoTimesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < erYaoTimes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(erYaoTimes_.get(i));
        }
        size += dataSize;
        size += 2 * getErYaoTimesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < sanYaoTimes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(sanYaoTimes_.get(i));
        }
        size += dataSize;
        size += 2 * getSanYaoTimesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < siYaoTimes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(siYaoTimes_.get(i));
        }
        size += dataSize;
        size += 2 * getSiYaoTimesList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < qiFenTimes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(qiFenTimes_.get(i));
        }
        size += dataSize;
        size += 2 * getQiFenTimesList().size();
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, baoPlayer_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(26, banPlayer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.PukeGameEndWsk_hrdz}
     *
     * <pre>
     *1004  游戏结束
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_PukeGameEndWsk_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_PukeGameEndWsk_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
          getCardsDataFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        curRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameRound_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          cardsDataBuilder_.clear();
        }
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        playerNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        reason_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        jiangFaScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        zhuaScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        xiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        hongPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        dangJuScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        baoPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        banPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        endScoreZhua_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
        } else {
          playersBuilder_.clear();
        }
        yiYaoTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        erYaoTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        sanYaoTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        siYaoTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        qiFenTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_PukeGameEndWsk_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.curRound_ = curRound_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameRound_ = gameRound_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = java.util.Collections.unmodifiableList(cardCount_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cardCount_ = cardCount_;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = java.util.Collections.unmodifiableList(boomCardNum_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.boomCardNum_ = boomCardNum_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = java.util.Collections.unmodifiableList(endScore_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.endScore_ = endScore_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerNum_ = playerNum_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000020;
        }
        result.reason_ = reason_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          winOrder_ = java.util.Collections.unmodifiableList(winOrder_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.winOrder_ = winOrder_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          jiangFaScore_ = java.util.Collections.unmodifiableList(jiangFaScore_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.jiangFaScore_ = jiangFaScore_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          zhuaScore_ = java.util.Collections.unmodifiableList(zhuaScore_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.zhuaScore_ = zhuaScore_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          xiScore_ = java.util.Collections.unmodifiableList(xiScore_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.xiScore_ = xiScore_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          hongPai_ = java.util.Collections.unmodifiableList(hongPai_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.hongPai_ = hongPai_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          dangJuScore_ = java.util.Collections.unmodifiableList(dangJuScore_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.dangJuScore_ = dangJuScore_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.baoPlayer_ = baoPlayer_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.banPlayer_ = banPlayer_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          allEndScore_ = java.util.Collections.unmodifiableList(allEndScore_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.allEndScore_ = allEndScore_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          endScoreZhua_ = java.util.Collections.unmodifiableList(endScoreZhua_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.endScoreZhua_ = endScoreZhua_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00100000);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          yiYaoTimes_ = java.util.Collections.unmodifiableList(yiYaoTimes_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.yiYaoTimes_ = yiYaoTimes_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          erYaoTimes_ = java.util.Collections.unmodifiableList(erYaoTimes_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.erYaoTimes_ = erYaoTimes_;
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          sanYaoTimes_ = java.util.Collections.unmodifiableList(sanYaoTimes_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.sanYaoTimes_ = sanYaoTimes_;
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          siYaoTimes_ = java.util.Collections.unmodifiableList(siYaoTimes_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.siYaoTimes_ = siYaoTimes_;
        if (((bitField0_ & 0x02000000) == 0x02000000)) {
          qiFenTimes_ = java.util.Collections.unmodifiableList(qiFenTimes_);
          bitField0_ = (bitField0_ & ~0x02000000);
        }
        result.qiFenTimes_ = qiFenTimes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz.getDefaultInstance()) return this;
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        if (other.hasCurRound()) {
          setCurRound(other.getCurRound());
        }
        if (other.hasGameRound()) {
          setGameRound(other.getGameRound());
        }
        if (!other.cardCount_.isEmpty()) {
          if (cardCount_.isEmpty()) {
            cardCount_ = other.cardCount_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardCountIsMutable();
            cardCount_.addAll(other.cardCount_);
          }
          onChanged();
        }
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000010);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.boomCardNum_.isEmpty()) {
          if (boomCardNum_.isEmpty()) {
            boomCardNum_ = other.boomCardNum_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureBoomCardNumIsMutable();
            boomCardNum_.addAll(other.boomCardNum_);
          }
          onChanged();
        }
        if (!other.endScore_.isEmpty()) {
          if (endScore_.isEmpty()) {
            endScore_ = other.endScore_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureEndScoreIsMutable();
            endScore_.addAll(other.endScore_);
          }
          onChanged();
        }
        if (other.hasPlayerNum()) {
          setPlayerNum(other.getPlayerNum());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasReason()) {
          setReason(other.getReason());
        }
        if (!other.winOrder_.isEmpty()) {
          if (winOrder_.isEmpty()) {
            winOrder_ = other.winOrder_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureWinOrderIsMutable();
            winOrder_.addAll(other.winOrder_);
          }
          onChanged();
        }
        if (!other.jiangFaScore_.isEmpty()) {
          if (jiangFaScore_.isEmpty()) {
            jiangFaScore_ = other.jiangFaScore_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureJiangFaScoreIsMutable();
            jiangFaScore_.addAll(other.jiangFaScore_);
          }
          onChanged();
        }
        if (!other.zhuaScore_.isEmpty()) {
          if (zhuaScore_.isEmpty()) {
            zhuaScore_ = other.zhuaScore_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureZhuaScoreIsMutable();
            zhuaScore_.addAll(other.zhuaScore_);
          }
          onChanged();
        }
        if (!other.xiScore_.isEmpty()) {
          if (xiScore_.isEmpty()) {
            xiScore_ = other.xiScore_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureXiScoreIsMutable();
            xiScore_.addAll(other.xiScore_);
          }
          onChanged();
        }
        if (!other.hongPai_.isEmpty()) {
          if (hongPai_.isEmpty()) {
            hongPai_ = other.hongPai_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureHongPaiIsMutable();
            hongPai_.addAll(other.hongPai_);
          }
          onChanged();
        }
        if (!other.dangJuScore_.isEmpty()) {
          if (dangJuScore_.isEmpty()) {
            dangJuScore_ = other.dangJuScore_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureDangJuScoreIsMutable();
            dangJuScore_.addAll(other.dangJuScore_);
          }
          onChanged();
        }
        if (other.hasBaoPlayer()) {
          setBaoPlayer(other.getBaoPlayer());
        }
        if (other.hasBanPlayer()) {
          setBanPlayer(other.getBanPlayer());
        }
        if (!other.allEndScore_.isEmpty()) {
          if (allEndScore_.isEmpty()) {
            allEndScore_ = other.allEndScore_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureAllEndScoreIsMutable();
            allEndScore_.addAll(other.allEndScore_);
          }
          onChanged();
        }
        if (!other.endScoreZhua_.isEmpty()) {
          if (endScoreZhua_.isEmpty()) {
            endScoreZhua_ = other.endScoreZhua_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureEndScoreZhuaIsMutable();
            endScoreZhua_.addAll(other.endScoreZhua_);
          }
          onChanged();
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00100000);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00100000);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        if (!other.yiYaoTimes_.isEmpty()) {
          if (yiYaoTimes_.isEmpty()) {
            yiYaoTimes_ = other.yiYaoTimes_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureYiYaoTimesIsMutable();
            yiYaoTimes_.addAll(other.yiYaoTimes_);
          }
          onChanged();
        }
        if (!other.erYaoTimes_.isEmpty()) {
          if (erYaoTimes_.isEmpty()) {
            erYaoTimes_ = other.erYaoTimes_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureErYaoTimesIsMutable();
            erYaoTimes_.addAll(other.erYaoTimes_);
          }
          onChanged();
        }
        if (!other.sanYaoTimes_.isEmpty()) {
          if (sanYaoTimes_.isEmpty()) {
            sanYaoTimes_ = other.sanYaoTimes_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureSanYaoTimesIsMutable();
            sanYaoTimes_.addAll(other.sanYaoTimes_);
          }
          onChanged();
        }
        if (!other.siYaoTimes_.isEmpty()) {
          if (siYaoTimes_.isEmpty()) {
            siYaoTimes_ = other.siYaoTimes_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureSiYaoTimesIsMutable();
            siYaoTimes_.addAll(other.siYaoTimes_);
          }
          onChanged();
        }
        if (!other.qiFenTimes_.isEmpty()) {
          if (qiFenTimes_.isEmpty()) {
            qiFenTimes_ = other.qiFenTimes_;
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            ensureQiFenTimesIsMutable();
            qiFenTimes_.addAll(other.qiFenTimes_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.PukeGameEndWsk_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .RoomInfo room_info = 1;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // optional int32 cur_round = 2;
      private int curRound_ ;
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public boolean hasCurRound() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public int getCurRound() {
        return curRound_;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder setCurRound(int value) {
        bitField0_ |= 0x00000002;
        curRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_round = 2;</code>
       *
       * <pre>
       *当前圈数
       * </pre>
       */
      public Builder clearCurRound() {
        bitField0_ = (bitField0_ & ~0x00000002);
        curRound_ = 0;
        onChanged();
        return this;
      }

      // optional int32 game_round = 3;
      private int gameRound_ ;
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public boolean hasGameRound() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public int getGameRound() {
        return gameRound_;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder setGameRound(int value) {
        bitField0_ |= 0x00000004;
        gameRound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 game_round = 3;</code>
       *
       * <pre>
       *游戏圈数
       * </pre>
       */
      public Builder clearGameRound() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameRound_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 card_count = 4;
      private java.util.List<java.lang.Integer> cardCount_ = java.util.Collections.emptyList();
      private void ensureCardCountIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cardCount_ = new java.util.ArrayList<java.lang.Integer>(cardCount_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardCountList() {
        return java.util.Collections.unmodifiableList(cardCount_);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCountCount() {
        return cardCount_.size();
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getCardCount(int index) {
        return cardCount_.get(index);
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setCardCount(
          int index, int value) {
        ensureCardCountIsMutable();
        cardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addCardCount(int value) {
        ensureCardCountIsMutable();
        cardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardCountIsMutable();
        super.addAll(values, cardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 card_count = 4;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearCardCount() {
        cardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse cards_data = 5;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 5;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 boom_card_num = 6;
      private java.util.List<java.lang.Integer> boomCardNum_ = java.util.Collections.emptyList();
      private void ensureBoomCardNumIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          boomCardNum_ = new java.util.ArrayList<java.lang.Integer>(boomCardNum_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBoomCardNumList() {
        return java.util.Collections.unmodifiableList(boomCardNum_);
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public int getBoomCardNumCount() {
        return boomCardNum_.size();
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public int getBoomCardNum(int index) {
        return boomCardNum_.get(index);
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder setBoomCardNum(
          int index, int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder addBoomCardNum(int value) {
        ensureBoomCardNumIsMutable();
        boomCardNum_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder addAllBoomCardNum(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBoomCardNumIsMutable();
        super.addAll(values, boomCardNum_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 boom_card_num = 6;</code>
       *
       * <pre>
       *炸弹数量
       * </pre>
       */
      public Builder clearBoomCardNum() {
        boomCardNum_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated int32 end_score = 7;
      private java.util.List<java.lang.Integer> endScore_ = java.util.Collections.emptyList();
      private void ensureEndScoreIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          endScore_ = new java.util.ArrayList<java.lang.Integer>(endScore_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreList() {
        return java.util.Collections.unmodifiableList(endScore_);
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public int getEndScoreCount() {
        return endScore_.size();
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public int getEndScore(int index) {
        return endScore_.get(index);
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder setEndScore(
          int index, int value) {
        ensureEndScoreIsMutable();
        endScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder addEndScore(int value) {
        ensureEndScoreIsMutable();
        endScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder addAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreIsMutable();
        super.addAll(values, endScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score = 7;</code>
       *
       * <pre>
       *总分
       * </pre>
       */
      public Builder clearEndScore() {
        endScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // optional int32 player_num = 8;
      private int playerNum_ ;
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public boolean hasPlayerNum() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public int getPlayerNum() {
        return playerNum_;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder setPlayerNum(int value) {
        bitField0_ |= 0x00000080;
        playerNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_num = 8;</code>
       *
       * <pre>
       *游戏人数
       * </pre>
       */
      public Builder clearPlayerNum() {
        bitField0_ = (bitField0_ & ~0x00000080);
        playerNum_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 9;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000100;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 9;</code>
       *
       * <pre>
       *庄家
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000100);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 reason = 10;
      private int reason_ ;
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public boolean hasReason() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public int getReason() {
        return reason_;
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder setReason(int value) {
        bitField0_ |= 0x00000200;
        reason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reason = 10;</code>
       *
       * <pre>
       *结束类型
       * </pre>
       */
      public Builder clearReason() {
        bitField0_ = (bitField0_ & ~0x00000200);
        reason_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 win_order = 11;
      private java.util.List<java.lang.Integer> winOrder_ = java.util.Collections.emptyList();
      private void ensureWinOrderIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          winOrder_ = new java.util.ArrayList<java.lang.Integer>(winOrder_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 win_order = 11;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getWinOrderList() {
        return java.util.Collections.unmodifiableList(winOrder_);
      }
      /**
       * <code>repeated int32 win_order = 11;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrderCount() {
        return winOrder_.size();
      }
      /**
       * <code>repeated int32 win_order = 11;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public int getWinOrder(int index) {
        return winOrder_.get(index);
      }
      /**
       * <code>repeated int32 win_order = 11;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder setWinOrder(
          int index, int value) {
        ensureWinOrderIsMutable();
        winOrder_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 11;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addWinOrder(int value) {
        ensureWinOrderIsMutable();
        winOrder_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 11;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder addAllWinOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWinOrderIsMutable();
        super.addAll(values, winOrder_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 win_order = 11;</code>
       *
       * <pre>
       *输赢排序
       * </pre>
       */
      public Builder clearWinOrder() {
        winOrder_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      // repeated int32 jiang_fa_score = 12;
      private java.util.List<java.lang.Integer> jiangFaScore_ = java.util.Collections.emptyList();
      private void ensureJiangFaScoreIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          jiangFaScore_ = new java.util.ArrayList<java.lang.Integer>(jiangFaScore_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 jiang_fa_score = 12;</code>
       *
       * <pre>
       *奖罚分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getJiangFaScoreList() {
        return java.util.Collections.unmodifiableList(jiangFaScore_);
      }
      /**
       * <code>repeated int32 jiang_fa_score = 12;</code>
       *
       * <pre>
       *奖罚分
       * </pre>
       */
      public int getJiangFaScoreCount() {
        return jiangFaScore_.size();
      }
      /**
       * <code>repeated int32 jiang_fa_score = 12;</code>
       *
       * <pre>
       *奖罚分
       * </pre>
       */
      public int getJiangFaScore(int index) {
        return jiangFaScore_.get(index);
      }
      /**
       * <code>repeated int32 jiang_fa_score = 12;</code>
       *
       * <pre>
       *奖罚分
       * </pre>
       */
      public Builder setJiangFaScore(
          int index, int value) {
        ensureJiangFaScoreIsMutable();
        jiangFaScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jiang_fa_score = 12;</code>
       *
       * <pre>
       *奖罚分
       * </pre>
       */
      public Builder addJiangFaScore(int value) {
        ensureJiangFaScoreIsMutable();
        jiangFaScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jiang_fa_score = 12;</code>
       *
       * <pre>
       *奖罚分
       * </pre>
       */
      public Builder addAllJiangFaScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureJiangFaScoreIsMutable();
        super.addAll(values, jiangFaScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 jiang_fa_score = 12;</code>
       *
       * <pre>
       *奖罚分
       * </pre>
       */
      public Builder clearJiangFaScore() {
        jiangFaScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // repeated int32 zhua_score = 13;
      private java.util.List<java.lang.Integer> zhuaScore_ = java.util.Collections.emptyList();
      private void ensureZhuaScoreIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          zhuaScore_ = new java.util.ArrayList<java.lang.Integer>(zhuaScore_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 zhua_score = 13;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZhuaScoreList() {
        return java.util.Collections.unmodifiableList(zhuaScore_);
      }
      /**
       * <code>repeated int32 zhua_score = 13;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getZhuaScoreCount() {
        return zhuaScore_.size();
      }
      /**
       * <code>repeated int32 zhua_score = 13;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getZhuaScore(int index) {
        return zhuaScore_.get(index);
      }
      /**
       * <code>repeated int32 zhua_score = 13;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder setZhuaScore(
          int index, int value) {
        ensureZhuaScoreIsMutable();
        zhuaScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhua_score = 13;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder addZhuaScore(int value) {
        ensureZhuaScoreIsMutable();
        zhuaScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhua_score = 13;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder addAllZhuaScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureZhuaScoreIsMutable();
        super.addAll(values, zhuaScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 zhua_score = 13;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder clearZhuaScore() {
        zhuaScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 xi_score = 14;
      private java.util.List<java.lang.Integer> xiScore_ = java.util.Collections.emptyList();
      private void ensureXiScoreIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          xiScore_ = new java.util.ArrayList<java.lang.Integer>(xiScore_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 xi_score = 14;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXiScoreList() {
        return java.util.Collections.unmodifiableList(xiScore_);
      }
      /**
       * <code>repeated int32 xi_score = 14;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public int getXiScoreCount() {
        return xiScore_.size();
      }
      /**
       * <code>repeated int32 xi_score = 14;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public int getXiScore(int index) {
        return xiScore_.get(index);
      }
      /**
       * <code>repeated int32 xi_score = 14;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public Builder setXiScore(
          int index, int value) {
        ensureXiScoreIsMutable();
        xiScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xi_score = 14;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public Builder addXiScore(int value) {
        ensureXiScoreIsMutable();
        xiScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xi_score = 14;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public Builder addAllXiScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureXiScoreIsMutable();
        super.addAll(values, xiScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xi_score = 14;</code>
       *
       * <pre>
       *喜分
       * </pre>
       */
      public Builder clearXiScore() {
        xiScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // repeated int32 hong_pai = 15;
      private java.util.List<java.lang.Integer> hongPai_ = java.util.Collections.emptyList();
      private void ensureHongPaiIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          hongPai_ = new java.util.ArrayList<java.lang.Integer>(hongPai_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated int32 hong_pai = 15;</code>
       *
       * <pre>
       *红牌
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHongPaiList() {
        return java.util.Collections.unmodifiableList(hongPai_);
      }
      /**
       * <code>repeated int32 hong_pai = 15;</code>
       *
       * <pre>
       *红牌
       * </pre>
       */
      public int getHongPaiCount() {
        return hongPai_.size();
      }
      /**
       * <code>repeated int32 hong_pai = 15;</code>
       *
       * <pre>
       *红牌
       * </pre>
       */
      public int getHongPai(int index) {
        return hongPai_.get(index);
      }
      /**
       * <code>repeated int32 hong_pai = 15;</code>
       *
       * <pre>
       *红牌
       * </pre>
       */
      public Builder setHongPai(
          int index, int value) {
        ensureHongPaiIsMutable();
        hongPai_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hong_pai = 15;</code>
       *
       * <pre>
       *红牌
       * </pre>
       */
      public Builder addHongPai(int value) {
        ensureHongPaiIsMutable();
        hongPai_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hong_pai = 15;</code>
       *
       * <pre>
       *红牌
       * </pre>
       */
      public Builder addAllHongPai(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHongPaiIsMutable();
        super.addAll(values, hongPai_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hong_pai = 15;</code>
       *
       * <pre>
       *红牌
       * </pre>
       */
      public Builder clearHongPai() {
        hongPai_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
        return this;
      }

      // repeated int32 dang_ju_score = 16;
      private java.util.List<java.lang.Integer> dangJuScore_ = java.util.Collections.emptyList();
      private void ensureDangJuScoreIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          dangJuScore_ = new java.util.ArrayList<java.lang.Integer>(dangJuScore_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated int32 dang_ju_score = 16;</code>
       *
       * <pre>
       *当局分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDangJuScoreList() {
        return java.util.Collections.unmodifiableList(dangJuScore_);
      }
      /**
       * <code>repeated int32 dang_ju_score = 16;</code>
       *
       * <pre>
       *当局分
       * </pre>
       */
      public int getDangJuScoreCount() {
        return dangJuScore_.size();
      }
      /**
       * <code>repeated int32 dang_ju_score = 16;</code>
       *
       * <pre>
       *当局分
       * </pre>
       */
      public int getDangJuScore(int index) {
        return dangJuScore_.get(index);
      }
      /**
       * <code>repeated int32 dang_ju_score = 16;</code>
       *
       * <pre>
       *当局分
       * </pre>
       */
      public Builder setDangJuScore(
          int index, int value) {
        ensureDangJuScoreIsMutable();
        dangJuScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dang_ju_score = 16;</code>
       *
       * <pre>
       *当局分
       * </pre>
       */
      public Builder addDangJuScore(int value) {
        ensureDangJuScoreIsMutable();
        dangJuScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dang_ju_score = 16;</code>
       *
       * <pre>
       *当局分
       * </pre>
       */
      public Builder addAllDangJuScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDangJuScoreIsMutable();
        super.addAll(values, dangJuScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dang_ju_score = 16;</code>
       *
       * <pre>
       *当局分
       * </pre>
       */
      public Builder clearDangJuScore() {
        dangJuScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        onChanged();
        return this;
      }

      // optional int32 bao_player = 25;
      private int baoPlayer_ ;
      /**
       * <code>optional int32 bao_player = 25;</code>
       *
       * <pre>
       *包牌玩家
       * </pre>
       */
      public boolean hasBaoPlayer() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 bao_player = 25;</code>
       *
       * <pre>
       *包牌玩家
       * </pre>
       */
      public int getBaoPlayer() {
        return baoPlayer_;
      }
      /**
       * <code>optional int32 bao_player = 25;</code>
       *
       * <pre>
       *包牌玩家
       * </pre>
       */
      public Builder setBaoPlayer(int value) {
        bitField0_ |= 0x00010000;
        baoPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bao_player = 25;</code>
       *
       * <pre>
       *包牌玩家
       * </pre>
       */
      public Builder clearBaoPlayer() {
        bitField0_ = (bitField0_ & ~0x00010000);
        baoPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 ban_player = 26;
      private int banPlayer_ ;
      /**
       * <code>optional int32 ban_player = 26;</code>
       *
       * <pre>
       *伴玩家
       * </pre>
       */
      public boolean hasBanPlayer() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 ban_player = 26;</code>
       *
       * <pre>
       *伴玩家
       * </pre>
       */
      public int getBanPlayer() {
        return banPlayer_;
      }
      /**
       * <code>optional int32 ban_player = 26;</code>
       *
       * <pre>
       *伴玩家
       * </pre>
       */
      public Builder setBanPlayer(int value) {
        bitField0_ |= 0x00020000;
        banPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 ban_player = 26;</code>
       *
       * <pre>
       *伴玩家
       * </pre>
       */
      public Builder clearBanPlayer() {
        bitField0_ = (bitField0_ & ~0x00020000);
        banPlayer_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 all_end_score = 17;
      private java.util.List<java.lang.Integer> allEndScore_ = java.util.Collections.emptyList();
      private void ensureAllEndScoreIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          allEndScore_ = new java.util.ArrayList<java.lang.Integer>(allEndScore_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getAllEndScoreList() {
        return java.util.Collections.unmodifiableList(allEndScore_);
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScoreCount() {
        return allEndScore_.size();
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public int getAllEndScore(int index) {
        return allEndScore_.get(index);
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder setAllEndScore(
          int index, int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllEndScore(int value) {
        ensureAllEndScoreIsMutable();
        allEndScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder addAllAllEndScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAllEndScoreIsMutable();
        super.addAll(values, allEndScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 all_end_score = 17;</code>
       *
       * <pre>
       *总结算
       * </pre>
       */
      public Builder clearAllEndScore() {
        allEndScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      // repeated int32 end_score_zhua = 18;
      private java.util.List<java.lang.Integer> endScoreZhua_ = java.util.Collections.emptyList();
      private void ensureEndScoreZhuaIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          endScoreZhua_ = new java.util.ArrayList<java.lang.Integer>(endScoreZhua_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 end_score_zhua = 18;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEndScoreZhuaList() {
        return java.util.Collections.unmodifiableList(endScoreZhua_);
      }
      /**
       * <code>repeated int32 end_score_zhua = 18;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public int getEndScoreZhuaCount() {
        return endScoreZhua_.size();
      }
      /**
       * <code>repeated int32 end_score_zhua = 18;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public int getEndScoreZhua(int index) {
        return endScoreZhua_.get(index);
      }
      /**
       * <code>repeated int32 end_score_zhua = 18;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public Builder setEndScoreZhua(
          int index, int value) {
        ensureEndScoreZhuaIsMutable();
        endScoreZhua_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_zhua = 18;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public Builder addEndScoreZhua(int value) {
        ensureEndScoreZhuaIsMutable();
        endScoreZhua_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_zhua = 18;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public Builder addAllEndScoreZhua(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEndScoreZhuaIsMutable();
        super.addAll(values, endScoreZhua_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 end_score_zhua = 18;</code>
       *
       * <pre>
       *单句最高抓分
       * </pre>
       */
      public Builder clearEndScoreZhua() {
        endScoreZhua_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      // repeated .RoomPlayerResponse players = 19;
      private java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          players_ = new java.util.ArrayList<protobuf.clazz.Protocol.RoomPlayerResponse>(players_);
          bitField0_ |= 0x00100000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> playersBuilder_;

      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder setPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addPlayers(
          int index, protobuf.clazz.Protocol.RoomPlayerResponse.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.RoomPlayerResponse> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          super.addAll(values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public protobuf.clazz.Protocol.RoomPlayerResponse.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.RoomPlayerResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .RoomPlayerResponse players = 19;</code>
       */
      public java.util.List<protobuf.clazz.Protocol.RoomPlayerResponse.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.RoomPlayerResponse, protobuf.clazz.Protocol.RoomPlayerResponse.Builder, protobuf.clazz.Protocol.RoomPlayerResponseOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00100000) == 0x00100000),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }

      // repeated int32 yi_yao_times = 20;
      private java.util.List<java.lang.Integer> yiYaoTimes_ = java.util.Collections.emptyList();
      private void ensureYiYaoTimesIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          yiYaoTimes_ = new java.util.ArrayList<java.lang.Integer>(yiYaoTimes_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 yi_yao_times = 20;</code>
       *
       * <pre>
       *一游次数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getYiYaoTimesList() {
        return java.util.Collections.unmodifiableList(yiYaoTimes_);
      }
      /**
       * <code>repeated int32 yi_yao_times = 20;</code>
       *
       * <pre>
       *一游次数
       * </pre>
       */
      public int getYiYaoTimesCount() {
        return yiYaoTimes_.size();
      }
      /**
       * <code>repeated int32 yi_yao_times = 20;</code>
       *
       * <pre>
       *一游次数
       * </pre>
       */
      public int getYiYaoTimes(int index) {
        return yiYaoTimes_.get(index);
      }
      /**
       * <code>repeated int32 yi_yao_times = 20;</code>
       *
       * <pre>
       *一游次数
       * </pre>
       */
      public Builder setYiYaoTimes(
          int index, int value) {
        ensureYiYaoTimesIsMutable();
        yiYaoTimes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 yi_yao_times = 20;</code>
       *
       * <pre>
       *一游次数
       * </pre>
       */
      public Builder addYiYaoTimes(int value) {
        ensureYiYaoTimesIsMutable();
        yiYaoTimes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 yi_yao_times = 20;</code>
       *
       * <pre>
       *一游次数
       * </pre>
       */
      public Builder addAllYiYaoTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureYiYaoTimesIsMutable();
        super.addAll(values, yiYaoTimes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 yi_yao_times = 20;</code>
       *
       * <pre>
       *一游次数
       * </pre>
       */
      public Builder clearYiYaoTimes() {
        yiYaoTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }

      // repeated int32 er_yao_times = 21;
      private java.util.List<java.lang.Integer> erYaoTimes_ = java.util.Collections.emptyList();
      private void ensureErYaoTimesIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          erYaoTimes_ = new java.util.ArrayList<java.lang.Integer>(erYaoTimes_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 er_yao_times = 21;</code>
       *
       * <pre>
       *二游次数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getErYaoTimesList() {
        return java.util.Collections.unmodifiableList(erYaoTimes_);
      }
      /**
       * <code>repeated int32 er_yao_times = 21;</code>
       *
       * <pre>
       *二游次数
       * </pre>
       */
      public int getErYaoTimesCount() {
        return erYaoTimes_.size();
      }
      /**
       * <code>repeated int32 er_yao_times = 21;</code>
       *
       * <pre>
       *二游次数
       * </pre>
       */
      public int getErYaoTimes(int index) {
        return erYaoTimes_.get(index);
      }
      /**
       * <code>repeated int32 er_yao_times = 21;</code>
       *
       * <pre>
       *二游次数
       * </pre>
       */
      public Builder setErYaoTimes(
          int index, int value) {
        ensureErYaoTimesIsMutable();
        erYaoTimes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 er_yao_times = 21;</code>
       *
       * <pre>
       *二游次数
       * </pre>
       */
      public Builder addErYaoTimes(int value) {
        ensureErYaoTimesIsMutable();
        erYaoTimes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 er_yao_times = 21;</code>
       *
       * <pre>
       *二游次数
       * </pre>
       */
      public Builder addAllErYaoTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureErYaoTimesIsMutable();
        super.addAll(values, erYaoTimes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 er_yao_times = 21;</code>
       *
       * <pre>
       *二游次数
       * </pre>
       */
      public Builder clearErYaoTimes() {
        erYaoTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      // repeated int32 san_yao_times = 22;
      private java.util.List<java.lang.Integer> sanYaoTimes_ = java.util.Collections.emptyList();
      private void ensureSanYaoTimesIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          sanYaoTimes_ = new java.util.ArrayList<java.lang.Integer>(sanYaoTimes_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated int32 san_yao_times = 22;</code>
       *
       * <pre>
       *三游次数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSanYaoTimesList() {
        return java.util.Collections.unmodifiableList(sanYaoTimes_);
      }
      /**
       * <code>repeated int32 san_yao_times = 22;</code>
       *
       * <pre>
       *三游次数
       * </pre>
       */
      public int getSanYaoTimesCount() {
        return sanYaoTimes_.size();
      }
      /**
       * <code>repeated int32 san_yao_times = 22;</code>
       *
       * <pre>
       *三游次数
       * </pre>
       */
      public int getSanYaoTimes(int index) {
        return sanYaoTimes_.get(index);
      }
      /**
       * <code>repeated int32 san_yao_times = 22;</code>
       *
       * <pre>
       *三游次数
       * </pre>
       */
      public Builder setSanYaoTimes(
          int index, int value) {
        ensureSanYaoTimesIsMutable();
        sanYaoTimes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 san_yao_times = 22;</code>
       *
       * <pre>
       *三游次数
       * </pre>
       */
      public Builder addSanYaoTimes(int value) {
        ensureSanYaoTimesIsMutable();
        sanYaoTimes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 san_yao_times = 22;</code>
       *
       * <pre>
       *三游次数
       * </pre>
       */
      public Builder addAllSanYaoTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSanYaoTimesIsMutable();
        super.addAll(values, sanYaoTimes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 san_yao_times = 22;</code>
       *
       * <pre>
       *三游次数
       * </pre>
       */
      public Builder clearSanYaoTimes() {
        sanYaoTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      // repeated int32 si_yao_times = 23;
      private java.util.List<java.lang.Integer> siYaoTimes_ = java.util.Collections.emptyList();
      private void ensureSiYaoTimesIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          siYaoTimes_ = new java.util.ArrayList<java.lang.Integer>(siYaoTimes_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated int32 si_yao_times = 23;</code>
       *
       * <pre>
       *四游次数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getSiYaoTimesList() {
        return java.util.Collections.unmodifiableList(siYaoTimes_);
      }
      /**
       * <code>repeated int32 si_yao_times = 23;</code>
       *
       * <pre>
       *四游次数
       * </pre>
       */
      public int getSiYaoTimesCount() {
        return siYaoTimes_.size();
      }
      /**
       * <code>repeated int32 si_yao_times = 23;</code>
       *
       * <pre>
       *四游次数
       * </pre>
       */
      public int getSiYaoTimes(int index) {
        return siYaoTimes_.get(index);
      }
      /**
       * <code>repeated int32 si_yao_times = 23;</code>
       *
       * <pre>
       *四游次数
       * </pre>
       */
      public Builder setSiYaoTimes(
          int index, int value) {
        ensureSiYaoTimesIsMutable();
        siYaoTimes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 si_yao_times = 23;</code>
       *
       * <pre>
       *四游次数
       * </pre>
       */
      public Builder addSiYaoTimes(int value) {
        ensureSiYaoTimesIsMutable();
        siYaoTimes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 si_yao_times = 23;</code>
       *
       * <pre>
       *四游次数
       * </pre>
       */
      public Builder addAllSiYaoTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSiYaoTimesIsMutable();
        super.addAll(values, siYaoTimes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 si_yao_times = 23;</code>
       *
       * <pre>
       *四游次数
       * </pre>
       */
      public Builder clearSiYaoTimes() {
        siYaoTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      // repeated int32 qi_fen_times = 24;
      private java.util.List<java.lang.Integer> qiFenTimes_ = java.util.Collections.emptyList();
      private void ensureQiFenTimesIsMutable() {
        if (!((bitField0_ & 0x02000000) == 0x02000000)) {
          qiFenTimes_ = new java.util.ArrayList<java.lang.Integer>(qiFenTimes_);
          bitField0_ |= 0x02000000;
         }
      }
      /**
       * <code>repeated int32 qi_fen_times = 24;</code>
       *
       * <pre>
       *喜分次数
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getQiFenTimesList() {
        return java.util.Collections.unmodifiableList(qiFenTimes_);
      }
      /**
       * <code>repeated int32 qi_fen_times = 24;</code>
       *
       * <pre>
       *喜分次数
       * </pre>
       */
      public int getQiFenTimesCount() {
        return qiFenTimes_.size();
      }
      /**
       * <code>repeated int32 qi_fen_times = 24;</code>
       *
       * <pre>
       *喜分次数
       * </pre>
       */
      public int getQiFenTimes(int index) {
        return qiFenTimes_.get(index);
      }
      /**
       * <code>repeated int32 qi_fen_times = 24;</code>
       *
       * <pre>
       *喜分次数
       * </pre>
       */
      public Builder setQiFenTimes(
          int index, int value) {
        ensureQiFenTimesIsMutable();
        qiFenTimes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qi_fen_times = 24;</code>
       *
       * <pre>
       *喜分次数
       * </pre>
       */
      public Builder addQiFenTimes(int value) {
        ensureQiFenTimesIsMutable();
        qiFenTimes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qi_fen_times = 24;</code>
       *
       * <pre>
       *喜分次数
       * </pre>
       */
      public Builder addAllQiFenTimes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureQiFenTimesIsMutable();
        super.addAll(values, qiFenTimes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 qi_fen_times = 24;</code>
       *
       * <pre>
       *喜分次数
       * </pre>
       */
      public Builder clearQiFenTimes() {
        qiFenTimes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x02000000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.PukeGameEndWsk_hrdz)
    }

    static {
      defaultInstance = new PukeGameEndWsk_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.PukeGameEndWsk_hrdz)
  }

  public interface RefreshScore_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 user_get_score = 1;
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    java.util.List<java.lang.Integer> getUserGetScoreList();
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getUserGetScoreCount();
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    int getUserGetScore(int index);

    // optional int32 table_score = 2;
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    boolean hasTableScore();
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    int getTableScore();

    // repeated int32 xian_qian_score = 3;
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    java.util.List<java.lang.Integer> getXianQianScoreList();
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    int getXianQianScoreCount();
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    int getXianQianScore(int index);
  }
  /**
   * Protobuf type {@code hrdz.RefreshScore_hrdz}
   *
   * <pre>
   *1005 刷新用户抓分
   * </pre>
   */
  public static final class RefreshScore_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements RefreshScore_hrdzOrBuilder {
    // Use RefreshScore_hrdz.newBuilder() to construct.
    private RefreshScore_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshScore_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshScore_hrdz defaultInstance;
    public static RefreshScore_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshScore_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshScore_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              userGetScore_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                userGetScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                userGetScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              tableScore_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                xianQianScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              xianQianScore_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                xianQianScore_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                xianQianScore_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          xianQianScore_ = java.util.Collections.unmodifiableList(xianQianScore_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshScore_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshScore_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshScore_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<RefreshScore_hrdz>() {
      public RefreshScore_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshScore_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshScore_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int32 user_get_score = 1;
    public static final int USER_GET_SCORE_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> userGetScore_;
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getUserGetScoreList() {
      return userGetScore_;
    }
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getUserGetScoreCount() {
      return userGetScore_.size();
    }
    /**
     * <code>repeated int32 user_get_score = 1;</code>
     *
     * <pre>
     *抓分
     * </pre>
     */
    public int getUserGetScore(int index) {
      return userGetScore_.get(index);
    }

    // optional int32 table_score = 2;
    public static final int TABLE_SCORE_FIELD_NUMBER = 2;
    private int tableScore_;
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    public boolean hasTableScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 table_score = 2;</code>
     *
     * <pre>
     *桌面分
     * </pre>
     */
    public int getTableScore() {
      return tableScore_;
    }

    // repeated int32 xian_qian_score = 3;
    public static final int XIAN_QIAN_SCORE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> xianQianScore_;
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getXianQianScoreList() {
      return xianQianScore_;
    }
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    public int getXianQianScoreCount() {
      return xianQianScore_.size();
    }
    /**
     * <code>repeated int32 xian_qian_score = 3;</code>
     *
     * <pre>
     *喜钱分
     * </pre>
     */
    public int getXianQianScore(int index) {
      return xianQianScore_.get(index);
    }

    private void initFields() {
      userGetScore_ = java.util.Collections.emptyList();
      tableScore_ = 0;
      xianQianScore_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < userGetScore_.size(); i++) {
        output.writeInt32(1, userGetScore_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, tableScore_);
      }
      for (int i = 0; i < xianQianScore_.size(); i++) {
        output.writeInt32(3, xianQianScore_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < userGetScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(userGetScore_.get(i));
        }
        size += dataSize;
        size += 1 * getUserGetScoreList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, tableScore_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xianQianScore_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(xianQianScore_.get(i));
        }
        size += dataSize;
        size += 1 * getXianQianScoreList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.RefreshScore_hrdz}
     *
     * <pre>
     *1005 刷新用户抓分
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshScore_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshScore_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        tableScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        xianQianScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshScore_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          userGetScore_ = java.util.Collections.unmodifiableList(userGetScore_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.userGetScore_ = userGetScore_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tableScore_ = tableScore_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          xianQianScore_ = java.util.Collections.unmodifiableList(xianQianScore_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.xianQianScore_ = xianQianScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz.getDefaultInstance()) return this;
        if (!other.userGetScore_.isEmpty()) {
          if (userGetScore_.isEmpty()) {
            userGetScore_ = other.userGetScore_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureUserGetScoreIsMutable();
            userGetScore_.addAll(other.userGetScore_);
          }
          onChanged();
        }
        if (other.hasTableScore()) {
          setTableScore(other.getTableScore());
        }
        if (!other.xianQianScore_.isEmpty()) {
          if (xianQianScore_.isEmpty()) {
            xianQianScore_ = other.xianQianScore_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureXianQianScoreIsMutable();
            xianQianScore_.addAll(other.xianQianScore_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.RefreshScore_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 user_get_score = 1;
      private java.util.List<java.lang.Integer> userGetScore_ = java.util.Collections.emptyList();
      private void ensureUserGetScoreIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          userGetScore_ = new java.util.ArrayList<java.lang.Integer>(userGetScore_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getUserGetScoreList() {
        return java.util.Collections.unmodifiableList(userGetScore_);
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getUserGetScoreCount() {
        return userGetScore_.size();
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public int getUserGetScore(int index) {
        return userGetScore_.get(index);
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder setUserGetScore(
          int index, int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder addUserGetScore(int value) {
        ensureUserGetScoreIsMutable();
        userGetScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder addAllUserGetScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureUserGetScoreIsMutable();
        super.addAll(values, userGetScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 user_get_score = 1;</code>
       *
       * <pre>
       *抓分
       * </pre>
       */
      public Builder clearUserGetScore() {
        userGetScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional int32 table_score = 2;
      private int tableScore_ ;
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public boolean hasTableScore() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public int getTableScore() {
        return tableScore_;
      }
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public Builder setTableScore(int value) {
        bitField0_ |= 0x00000002;
        tableScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 table_score = 2;</code>
       *
       * <pre>
       *桌面分
       * </pre>
       */
      public Builder clearTableScore() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tableScore_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 xian_qian_score = 3;
      private java.util.List<java.lang.Integer> xianQianScore_ = java.util.Collections.emptyList();
      private void ensureXianQianScoreIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          xianQianScore_ = new java.util.ArrayList<java.lang.Integer>(xianQianScore_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXianQianScoreList() {
        return java.util.Collections.unmodifiableList(xianQianScore_);
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public int getXianQianScoreCount() {
        return xianQianScore_.size();
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public int getXianQianScore(int index) {
        return xianQianScore_.get(index);
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder setXianQianScore(
          int index, int value) {
        ensureXianQianScoreIsMutable();
        xianQianScore_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder addXianQianScore(int value) {
        ensureXianQianScoreIsMutable();
        xianQianScore_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder addAllXianQianScore(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureXianQianScoreIsMutable();
        super.addAll(values, xianQianScore_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 xian_qian_score = 3;</code>
       *
       * <pre>
       *喜钱分
       * </pre>
       */
      public Builder clearXianQianScore() {
        xianQianScore_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.RefreshScore_hrdz)
    }

    static {
      defaultInstance = new RefreshScore_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.RefreshScore_hrdz)
  }

  public interface PaiFenData_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Int32ArrayResponse cards_data = 1;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    int getCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index);

    // repeated int32 cards_count = 2;
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    java.util.List<java.lang.Integer> getCardsCountList();
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    int getCardsCountCount();
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    int getCardsCount(int index);

    // optional int32 yu_score = 3;
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    boolean hasYuScore();
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    int getYuScore();
  }
  /**
   * Protobuf type {@code hrdz.PaiFenData_hrdz}
   *
   * <pre>
   *1006 刷新剩余牌分
   * </pre>
   */
  public static final class PaiFenData_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements PaiFenData_hrdzOrBuilder {
    // Use PaiFenData_hrdz.newBuilder() to construct.
    private PaiFenData_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PaiFenData_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PaiFenData_hrdz defaultInstance;
    public static PaiFenData_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public PaiFenData_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PaiFenData_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000001;
              }
              cardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              cardsCount_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                cardsCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              yuScore_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cardsCount_ = java.util.Collections.unmodifiableList(cardsCount_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_PaiFenData_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_PaiFenData_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<PaiFenData_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<PaiFenData_hrdz>() {
      public PaiFenData_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PaiFenData_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PaiFenData_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .Int32ArrayResponse cards_data = 1;
    public static final int CARDS_DATA_FIELD_NUMBER = 1;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_;
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getCardsDataOrBuilderList() {
      return cardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public int getCardsDataCount() {
      return cardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
      return cardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
     *
     * <pre>
     *牌分数据
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
        int index) {
      return cardsData_.get(index);
    }

    // repeated int32 cards_count = 2;
    public static final int CARDS_COUNT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> cardsCount_;
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getCardsCountList() {
      return cardsCount_;
    }
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public int getCardsCountCount() {
      return cardsCount_.size();
    }
    /**
     * <code>repeated int32 cards_count = 2;</code>
     *
     * <pre>
     *牌分数量
     * </pre>
     */
    public int getCardsCount(int index) {
      return cardsCount_.get(index);
    }

    // optional int32 yu_score = 3;
    public static final int YU_SCORE_FIELD_NUMBER = 3;
    private int yuScore_;
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    public boolean hasYuScore() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 yu_score = 3;</code>
     *
     * <pre>
     *余分
     * </pre>
     */
    public int getYuScore() {
      return yuScore_;
    }

    private void initFields() {
      cardsData_ = java.util.Collections.emptyList();
      cardsCount_ = java.util.Collections.emptyList();
      yuScore_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < cardsData_.size(); i++) {
        output.writeMessage(1, cardsData_.get(i));
      }
      for (int i = 0; i < cardsCount_.size(); i++) {
        output.writeInt32(2, cardsCount_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, yuScore_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < cardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cardsData_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsCount_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsCountList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, yuScore_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.PaiFenData_hrdz}
     *
     * <pre>
     *1006 刷新剩余牌分
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_PaiFenData_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_PaiFenData_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cardsDataBuilder_.clear();
        }
        cardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        yuScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_PaiFenData_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (cardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            cardsData_ = java.util.Collections.unmodifiableList(cardsData_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cardsData_ = cardsData_;
        } else {
          result.cardsData_ = cardsDataBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsCount_ = java.util.Collections.unmodifiableList(cardsCount_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.cardsCount_ = cardsCount_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.yuScore_ = yuScore_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz.getDefaultInstance()) return this;
        if (cardsDataBuilder_ == null) {
          if (!other.cardsData_.isEmpty()) {
            if (cardsData_.isEmpty()) {
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCardsDataIsMutable();
              cardsData_.addAll(other.cardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.cardsData_.isEmpty()) {
            if (cardsDataBuilder_.isEmpty()) {
              cardsDataBuilder_.dispose();
              cardsDataBuilder_ = null;
              cardsData_ = other.cardsData_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCardsDataFieldBuilder() : null;
            } else {
              cardsDataBuilder_.addAllMessages(other.cardsData_);
            }
          }
        }
        if (!other.cardsCount_.isEmpty()) {
          if (cardsCount_.isEmpty()) {
            cardsCount_ = other.cardsCount_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCardsCountIsMutable();
            cardsCount_.addAll(other.cardsCount_);
          }
          onChanged();
        }
        if (other.hasYuScore()) {
          setYuScore(other.getYuScore());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.PaiFenData_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Int32ArrayResponse cards_data = 1;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> cardsData_ =
        java.util.Collections.emptyList();
      private void ensureCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(cardsData_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> cardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getCardsDataList() {
        if (cardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cardsData_);
        } else {
          return cardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public int getCardsDataCount() {
        if (cardsDataBuilder_ == null) {
          return cardsData_.size();
        } else {
          return cardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);
        } else {
          return cardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.set(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder setCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (cardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsDataIsMutable();
          cardsData_.add(index, value);
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder addAllCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          super.addAll(values, cardsData_);
          onChanged();
        } else {
          cardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder clearCardsData() {
        if (cardsDataBuilder_ == null) {
          cardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public Builder removeCardsData(int index) {
        if (cardsDataBuilder_ == null) {
          ensureCardsDataIsMutable();
          cardsData_.remove(index);
          onChanged();
        } else {
          cardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getCardsDataOrBuilder(
          int index) {
        if (cardsDataBuilder_ == null) {
          return cardsData_.get(index);  } else {
          return cardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getCardsDataOrBuilderList() {
        if (cardsDataBuilder_ != null) {
          return cardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder() {
        return getCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addCardsDataBuilder(
          int index) {
        return getCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse cards_data = 1;</code>
       *
       * <pre>
       *牌分数据
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getCardsDataBuilderList() {
        return getCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getCardsDataFieldBuilder() {
        if (cardsDataBuilder_ == null) {
          cardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  cardsData_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          cardsData_ = null;
        }
        return cardsDataBuilder_;
      }

      // repeated int32 cards_count = 2;
      private java.util.List<java.lang.Integer> cardsCount_ = java.util.Collections.emptyList();
      private void ensureCardsCountIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cardsCount_ = new java.util.ArrayList<java.lang.Integer>(cardsCount_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getCardsCountList() {
        return java.util.Collections.unmodifiableList(cardsCount_);
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public int getCardsCountCount() {
        return cardsCount_.size();
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public int getCardsCount(int index) {
        return cardsCount_.get(index);
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder setCardsCount(
          int index, int value) {
        ensureCardsCountIsMutable();
        cardsCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder addCardsCount(int value) {
        ensureCardsCountIsMutable();
        cardsCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder addAllCardsCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsCountIsMutable();
        super.addAll(values, cardsCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards_count = 2;</code>
       *
       * <pre>
       *牌分数量
       * </pre>
       */
      public Builder clearCardsCount() {
        cardsCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 yu_score = 3;
      private int yuScore_ ;
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public boolean hasYuScore() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public int getYuScore() {
        return yuScore_;
      }
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public Builder setYuScore(int value) {
        bitField0_ |= 0x00000004;
        yuScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 yu_score = 3;</code>
       *
       * <pre>
       *余分
       * </pre>
       */
      public Builder clearYuScore() {
        bitField0_ = (bitField0_ & ~0x00000004);
        yuScore_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.PaiFenData_hrdz)
    }

    static {
      defaultInstance = new PaiFenData_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.PaiFenData_hrdz)
  }

  public interface LiangPai_Begin_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 cur_player = 1;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    boolean hasCurPlayer();
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    int getCurPlayer();

    // optional int32 display_time = 2;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();
  }
  /**
   * Protobuf type {@code hrdz.LiangPai_Begin_hrdz}
   *
   * <pre>
   *1007 亮牌开始
   * </pre>
   */
  public static final class LiangPai_Begin_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements LiangPai_Begin_hrdzOrBuilder {
    // Use LiangPai_Begin_hrdz.newBuilder() to construct.
    private LiangPai_Begin_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LiangPai_Begin_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LiangPai_Begin_hrdz defaultInstance;
    public static LiangPai_Begin_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public LiangPai_Begin_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LiangPai_Begin_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              curPlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              displayTime_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_LiangPai_Begin_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_LiangPai_Begin_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<LiangPai_Begin_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<LiangPai_Begin_hrdz>() {
      public LiangPai_Begin_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LiangPai_Begin_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LiangPai_Begin_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 cur_player = 1;
    public static final int CUR_PLAYER_FIELD_NUMBER = 1;
    private int curPlayer_;
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public boolean hasCurPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 cur_player = 1;</code>
     *
     * <pre>
     *当前玩家
     * </pre>
     */
    public int getCurPlayer() {
      return curPlayer_;
    }

    // optional int32 display_time = 2;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 2;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 display_time = 2;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    private void initFields() {
      curPlayer_ = 0;
      displayTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, curPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, displayTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, curPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, displayTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.LiangPai_Begin_hrdz}
     *
     * <pre>
     *1007 亮牌开始
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_LiangPai_Begin_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_LiangPai_Begin_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        curPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_LiangPai_Begin_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.curPlayer_ = curPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.displayTime_ = displayTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz.getDefaultInstance()) return this;
        if (other.hasCurPlayer()) {
          setCurPlayer(other.getCurPlayer());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.LiangPai_Begin_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 cur_player = 1;
      private int curPlayer_ ;
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public boolean hasCurPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public int getCurPlayer() {
        return curPlayer_;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder setCurPlayer(int value) {
        bitField0_ |= 0x00000001;
        curPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cur_player = 1;</code>
       *
       * <pre>
       *当前玩家
       * </pre>
       */
      public Builder clearCurPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 2;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000002;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 2;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.LiangPai_Begin_hrdz)
    }

    static {
      defaultInstance = new LiangPai_Begin_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.LiangPai_Begin_hrdz)
  }

  public interface LiangPai_Result_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_player = 1;
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    boolean hasOpreatePlayer();
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    int getOpreatePlayer();

    // optional int32 card_data = 2;
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    boolean hasCardData();
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    int getCardData();
  }
  /**
   * Protobuf type {@code hrdz.LiangPai_Result_hrdz}
   *
   * <pre>
   *1008 亮牌回复
   * </pre>
   */
  public static final class LiangPai_Result_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements LiangPai_Result_hrdzOrBuilder {
    // Use LiangPai_Result_hrdz.newBuilder() to construct.
    private LiangPai_Result_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LiangPai_Result_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LiangPai_Result_hrdz defaultInstance;
    public static LiangPai_Result_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public LiangPai_Result_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LiangPai_Result_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreatePlayer_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cardData_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_LiangPai_Result_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_LiangPai_Result_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<LiangPai_Result_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<LiangPai_Result_hrdz>() {
      public LiangPai_Result_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LiangPai_Result_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LiangPai_Result_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_player = 1;
    public static final int OPREATE_PLAYER_FIELD_NUMBER = 1;
    private int opreatePlayer_;
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public boolean hasOpreatePlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_player = 1;</code>
     *
     * <pre>
     *操作玩家
     * </pre>
     */
    public int getOpreatePlayer() {
      return opreatePlayer_;
    }

    // optional int32 card_data = 2;
    public static final int CARD_DATA_FIELD_NUMBER = 2;
    private int cardData_;
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    public boolean hasCardData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 card_data = 2;</code>
     *
     * <pre>
     *操作扑克
     * </pre>
     */
    public int getCardData() {
      return cardData_;
    }

    private void initFields() {
      opreatePlayer_ = 0;
      cardData_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreatePlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, cardData_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreatePlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, cardData_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.LiangPai_Result_hrdz}
     *
     * <pre>
     *1008 亮牌回复
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_LiangPai_Result_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_LiangPai_Result_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreatePlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cardData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_LiangPai_Result_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreatePlayer_ = opreatePlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cardData_ = cardData_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz.getDefaultInstance()) return this;
        if (other.hasOpreatePlayer()) {
          setOpreatePlayer(other.getOpreatePlayer());
        }
        if (other.hasCardData()) {
          setCardData(other.getCardData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.LiangPai_Result_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_player = 1;
      private int opreatePlayer_ ;
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public boolean hasOpreatePlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public int getOpreatePlayer() {
        return opreatePlayer_;
      }
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder setOpreatePlayer(int value) {
        bitField0_ |= 0x00000001;
        opreatePlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_player = 1;</code>
       *
       * <pre>
       *操作玩家
       * </pre>
       */
      public Builder clearOpreatePlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreatePlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 card_data = 2;
      private int cardData_ ;
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public boolean hasCardData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public int getCardData() {
        return cardData_;
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public Builder setCardData(int value) {
        bitField0_ |= 0x00000002;
        cardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_data = 2;</code>
       *
       * <pre>
       *操作扑克
       * </pre>
       */
      public Builder clearCardData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cardData_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.LiangPai_Result_hrdz)
    }

    static {
      defaultInstance = new LiangPai_Result_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.LiangPai_Result_hrdz)
  }

  public interface CallBankerResponse_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_action = 1;
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不包 1：包
     * </pre>
     */
    boolean hasOpreateAction();
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不包 1：包
     * </pre>
     */
    int getOpreateAction();

    // optional int32 call_player = 2;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    boolean hasCallPlayer();
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    int getCallPlayer();

    // optional int32 current_player = 3;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    boolean hasCurrentPlayer();
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    int getCurrentPlayer();

    // optional int32 banker_player = 4;
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    boolean hasBankerPlayer();
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    int getBankerPlayer();

    // optional int32 display_time = 5;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    boolean hasDisplayTime();
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    int getDisplayTime();

    // optional .RoomInfo room_info = 6;
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    protobuf.clazz.Protocol.RoomInfo getRoomInfo();
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder();
  }
  /**
   * Protobuf type {@code hrdz.CallBankerResponse_hrdz}
   *
   * <pre>
   *1009 叫庄结果
   * </pre>
   */
  public static final class CallBankerResponse_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements CallBankerResponse_hrdzOrBuilder {
    // Use CallBankerResponse_hrdz.newBuilder() to construct.
    private CallBankerResponse_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CallBankerResponse_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CallBankerResponse_hrdz defaultInstance;
    public static CallBankerResponse_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public CallBankerResponse_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CallBankerResponse_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateAction_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              callPlayer_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              currentPlayer_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              bankerPlayer_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              displayTime_ = input.readInt32();
              break;
            }
            case 50: {
              protobuf.clazz.Protocol.RoomInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = roomInfo_.toBuilder();
              }
              roomInfo_ = input.readMessage(protobuf.clazz.Protocol.RoomInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roomInfo_);
                roomInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_CallBankerResponse_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_CallBankerResponse_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<CallBankerResponse_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<CallBankerResponse_hrdz>() {
      public CallBankerResponse_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallBankerResponse_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CallBankerResponse_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_action = 1;
    public static final int OPREATE_ACTION_FIELD_NUMBER = 1;
    private int opreateAction_;
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不包 1：包
     * </pre>
     */
    public boolean hasOpreateAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_action = 1;</code>
     *
     * <pre>
     *0:不包 1：包
     * </pre>
     */
    public int getOpreateAction() {
      return opreateAction_;
    }

    // optional int32 call_player = 2;
    public static final int CALL_PLAYER_FIELD_NUMBER = 2;
    private int callPlayer_;
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    public boolean hasCallPlayer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 call_player = 2;</code>
     *
     * <pre>
     *操作玩家 -1：通知第一次叫庄
     * </pre>
     */
    public int getCallPlayer() {
      return callPlayer_;
    }

    // optional int32 current_player = 3;
    public static final int CURRENT_PLAYER_FIELD_NUMBER = 3;
    private int currentPlayer_;
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    public boolean hasCurrentPlayer() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 current_player = 3;</code>
     *
     * <pre>
     *当前玩家 -1：叫庄结束
     * </pre>
     */
    public int getCurrentPlayer() {
      return currentPlayer_;
    }

    // optional int32 banker_player = 4;
    public static final int BANKER_PLAYER_FIELD_NUMBER = 4;
    private int bankerPlayer_;
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    public boolean hasBankerPlayer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 banker_player = 4;</code>
     *
     * <pre>
     *-1：表示庄家未确定
     * </pre>
     */
    public int getBankerPlayer() {
      return bankerPlayer_;
    }

    // optional int32 display_time = 5;
    public static final int DISPLAY_TIME_FIELD_NUMBER = 5;
    private int displayTime_;
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public boolean hasDisplayTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 display_time = 5;</code>
     *
     * <pre>
     *显示时间
     * </pre>
     */
    public int getDisplayTime() {
      return displayTime_;
    }

    // optional .RoomInfo room_info = 6;
    public static final int ROOM_INFO_FIELD_NUMBER = 6;
    private protobuf.clazz.Protocol.RoomInfo roomInfo_;
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasRoomInfo() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
      return roomInfo_;
    }
    /**
     * <code>optional .RoomInfo room_info = 6;</code>
     *
     * <pre>
     * </pre>
     */
    public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
      return roomInfo_;
    }

    private void initFields() {
      opreateAction_ = 0;
      callPlayer_ = 0;
      currentPlayer_ = 0;
      bankerPlayer_ = 0;
      displayTime_ = 0;
      roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateAction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, displayTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, roomInfo_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateAction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, callPlayer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, currentPlayer_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, bankerPlayer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, displayTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, roomInfo_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.CallBankerResponse_hrdz}
     *
     * <pre>
     *1009 叫庄结果
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_CallBankerResponse_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_CallBankerResponse_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateAction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        callPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        currentPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        bankerPlayer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        displayTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_CallBankerResponse_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateAction_ = opreateAction_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.callPlayer_ = callPlayer_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.currentPlayer_ = currentPlayer_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bankerPlayer_ = bankerPlayer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.displayTime_ = displayTime_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (roomInfoBuilder_ == null) {
          result.roomInfo_ = roomInfo_;
        } else {
          result.roomInfo_ = roomInfoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz.getDefaultInstance()) return this;
        if (other.hasOpreateAction()) {
          setOpreateAction(other.getOpreateAction());
        }
        if (other.hasCallPlayer()) {
          setCallPlayer(other.getCallPlayer());
        }
        if (other.hasCurrentPlayer()) {
          setCurrentPlayer(other.getCurrentPlayer());
        }
        if (other.hasBankerPlayer()) {
          setBankerPlayer(other.getBankerPlayer());
        }
        if (other.hasDisplayTime()) {
          setDisplayTime(other.getDisplayTime());
        }
        if (other.hasRoomInfo()) {
          mergeRoomInfo(other.getRoomInfo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.CallBankerResponse_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_action = 1;
      private int opreateAction_ ;
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不包 1：包
       * </pre>
       */
      public boolean hasOpreateAction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不包 1：包
       * </pre>
       */
      public int getOpreateAction() {
        return opreateAction_;
      }
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不包 1：包
       * </pre>
       */
      public Builder setOpreateAction(int value) {
        bitField0_ |= 0x00000001;
        opreateAction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_action = 1;</code>
       *
       * <pre>
       *0:不包 1：包
       * </pre>
       */
      public Builder clearOpreateAction() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateAction_ = 0;
        onChanged();
        return this;
      }

      // optional int32 call_player = 2;
      private int callPlayer_ ;
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public boolean hasCallPlayer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public int getCallPlayer() {
        return callPlayer_;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public Builder setCallPlayer(int value) {
        bitField0_ |= 0x00000002;
        callPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 call_player = 2;</code>
       *
       * <pre>
       *操作玩家 -1：通知第一次叫庄
       * </pre>
       */
      public Builder clearCallPlayer() {
        bitField0_ = (bitField0_ & ~0x00000002);
        callPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 current_player = 3;
      private int currentPlayer_ ;
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public boolean hasCurrentPlayer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public int getCurrentPlayer() {
        return currentPlayer_;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public Builder setCurrentPlayer(int value) {
        bitField0_ |= 0x00000004;
        currentPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 current_player = 3;</code>
       *
       * <pre>
       *当前玩家 -1：叫庄结束
       * </pre>
       */
      public Builder clearCurrentPlayer() {
        bitField0_ = (bitField0_ & ~0x00000004);
        currentPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 banker_player = 4;
      private int bankerPlayer_ ;
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public boolean hasBankerPlayer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public int getBankerPlayer() {
        return bankerPlayer_;
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public Builder setBankerPlayer(int value) {
        bitField0_ |= 0x00000008;
        bankerPlayer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 banker_player = 4;</code>
       *
       * <pre>
       *-1：表示庄家未确定
       * </pre>
       */
      public Builder clearBankerPlayer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bankerPlayer_ = 0;
        onChanged();
        return this;
      }

      // optional int32 display_time = 5;
      private int displayTime_ ;
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public boolean hasDisplayTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public int getDisplayTime() {
        return displayTime_;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder setDisplayTime(int value) {
        bitField0_ |= 0x00000010;
        displayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display_time = 5;</code>
       *
       * <pre>
       *显示时间
       * </pre>
       */
      public Builder clearDisplayTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        displayTime_ = 0;
        onChanged();
        return this;
      }

      // optional .RoomInfo room_info = 6;
      private protobuf.clazz.Protocol.RoomInfo roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> roomInfoBuilder_;
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasRoomInfo() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfo getRoomInfo() {
        if (roomInfoBuilder_ == null) {
          return roomInfo_;
        } else {
          return roomInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomInfo_ = value;
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setRoomInfo(
          protobuf.clazz.Protocol.RoomInfo.Builder builderForValue) {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = builderForValue.build();
          onChanged();
        } else {
          roomInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder mergeRoomInfo(protobuf.clazz.Protocol.RoomInfo value) {
        if (roomInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              roomInfo_ != protobuf.clazz.Protocol.RoomInfo.getDefaultInstance()) {
            roomInfo_ =
              protobuf.clazz.Protocol.RoomInfo.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
          } else {
            roomInfo_ = value;
          }
          onChanged();
        } else {
          roomInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearRoomInfo() {
        if (roomInfoBuilder_ == null) {
          roomInfo_ = protobuf.clazz.Protocol.RoomInfo.getDefaultInstance();
          onChanged();
        } else {
          roomInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfo.Builder getRoomInfoBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getRoomInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      public protobuf.clazz.Protocol.RoomInfoOrBuilder getRoomInfoOrBuilder() {
        if (roomInfoBuilder_ != null) {
          return roomInfoBuilder_.getMessageOrBuilder();
        } else {
          return roomInfo_;
        }
      }
      /**
       * <code>optional .RoomInfo room_info = 6;</code>
       *
       * <pre>
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder> 
          getRoomInfoFieldBuilder() {
        if (roomInfoBuilder_ == null) {
          roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              protobuf.clazz.Protocol.RoomInfo, protobuf.clazz.Protocol.RoomInfo.Builder, protobuf.clazz.Protocol.RoomInfoOrBuilder>(
                  roomInfo_,
                  getParentForChildren(),
                  isClean());
          roomInfo_ = null;
        }
        return roomInfoBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.CallBankerResponse_hrdz)
    }

    static {
      defaultInstance = new CallBankerResponse_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.CallBankerResponse_hrdz)
  }

  public interface RefreshCardData_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 hand_card_count = 1;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    java.util.List<java.lang.Integer> getHandCardCountList();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCountCount();
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    int getHandCardCount(int index);

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> 
        getHandCardsDataList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index);
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    int getHandCardsDataCount();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList();
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code hrdz.RefreshCardData_hrdz}
   *
   * <pre>
   *1010 刷新手牌
   * </pre>
   */
  public static final class RefreshCardData_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements RefreshCardData_hrdzOrBuilder {
    // Use RefreshCardData_hrdz.newBuilder() to construct.
    private RefreshCardData_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshCardData_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshCardData_hrdz defaultInstance;
    public static RefreshCardData_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshCardData_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshCardData_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              handCardCount_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                handCardCount_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                handCardCount_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>();
                mutable_bitField0_ |= 0x00000002;
              }
              handCardsData_.add(input.readMessage(protobuf.clazz.Protocol.Int32ArrayResponse.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshCardData_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshCardData_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshCardData_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<RefreshCardData_hrdz>() {
      public RefreshCardData_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshCardData_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshCardData_hrdz> getParserForType() {
      return PARSER;
    }

    // repeated int32 hand_card_count = 1;
    public static final int HAND_CARD_COUNT_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> handCardCount_;
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getHandCardCountList() {
      return handCardCount_;
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCountCount() {
      return handCardCount_.size();
    }
    /**
     * <code>repeated int32 hand_card_count = 1;</code>
     *
     * <pre>
     *扑克数目
     * </pre>
     */
    public int getHandCardCount(int index) {
      return handCardCount_.get(index);
    }

    // repeated .Int32ArrayResponse hand_cards_data = 2;
    public static final int HAND_CARDS_DATA_FIELD_NUMBER = 2;
    private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_;
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
        getHandCardsDataOrBuilderList() {
      return handCardsData_;
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public int getHandCardsDataCount() {
      return handCardsData_.size();
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
      return handCardsData_.get(index);
    }
    /**
     * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
     *
     * <pre>
     *扑克列表
     * </pre>
     */
    public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
        int index) {
      return handCardsData_.get(index);
    }

    private void initFields() {
      handCardCount_ = java.util.Collections.emptyList();
      handCardsData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < handCardCount_.size(); i++) {
        output.writeInt32(1, handCardCount_.get(i));
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        output.writeMessage(2, handCardsData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < handCardCount_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(handCardCount_.get(i));
        }
        size += dataSize;
        size += 1 * getHandCardCountList().size();
      }
      for (int i = 0; i < handCardsData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, handCardsData_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.RefreshCardData_hrdz}
     *
     * <pre>
     *1010 刷新手牌
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshCardData_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshCardData_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandCardsDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshCardData_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = java.util.Collections.unmodifiableList(handCardCount_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.handCardCount_ = handCardCount_;
        if (handCardsDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            handCardsData_ = java.util.Collections.unmodifiableList(handCardsData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.handCardsData_ = handCardsData_;
        } else {
          result.handCardsData_ = handCardsDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz.getDefaultInstance()) return this;
        if (!other.handCardCount_.isEmpty()) {
          if (handCardCount_.isEmpty()) {
            handCardCount_ = other.handCardCount_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHandCardCountIsMutable();
            handCardCount_.addAll(other.handCardCount_);
          }
          onChanged();
        }
        if (handCardsDataBuilder_ == null) {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsData_.isEmpty()) {
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureHandCardsDataIsMutable();
              handCardsData_.addAll(other.handCardsData_);
            }
            onChanged();
          }
        } else {
          if (!other.handCardsData_.isEmpty()) {
            if (handCardsDataBuilder_.isEmpty()) {
              handCardsDataBuilder_.dispose();
              handCardsDataBuilder_ = null;
              handCardsData_ = other.handCardsData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              handCardsDataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHandCardsDataFieldBuilder() : null;
            } else {
              handCardsDataBuilder_.addAllMessages(other.handCardsData_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.RefreshCardData_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 hand_card_count = 1;
      private java.util.List<java.lang.Integer> handCardCount_ = java.util.Collections.emptyList();
      private void ensureHandCardCountIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          handCardCount_ = new java.util.ArrayList<java.lang.Integer>(handCardCount_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHandCardCountList() {
        return java.util.Collections.unmodifiableList(handCardCount_);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCountCount() {
        return handCardCount_.size();
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public int getHandCardCount(int index) {
        return handCardCount_.get(index);
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder setHandCardCount(
          int index, int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addHandCardCount(int value) {
        ensureHandCardCountIsMutable();
        handCardCount_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder addAllHandCardCount(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureHandCardCountIsMutable();
        super.addAll(values, handCardCount_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 hand_card_count = 1;</code>
       *
       * <pre>
       *扑克数目
       * </pre>
       */
      public Builder clearHandCardCount() {
        handCardCount_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated .Int32ArrayResponse hand_cards_data = 2;
      private java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> handCardsData_ =
        java.util.Collections.emptyList();
      private void ensureHandCardsDataIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          handCardsData_ = new java.util.ArrayList<protobuf.clazz.Protocol.Int32ArrayResponse>(handCardsData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> handCardsDataBuilder_;

      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse> getHandCardsDataList() {
        if (handCardsDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(handCardsData_);
        } else {
          return handCardsDataBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public int getHandCardsDataCount() {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.size();
        } else {
          return handCardsDataBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse getHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);
        } else {
          return handCardsDataBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder setHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.set(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse value) {
        if (handCardsDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, value);
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addHandCardsData(
          int index, protobuf.clazz.Protocol.Int32ArrayResponse.Builder builderForValue) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.add(index, builderForValue.build());
          onChanged();
        } else {
          handCardsDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder addAllHandCardsData(
          java.lang.Iterable<? extends protobuf.clazz.Protocol.Int32ArrayResponse> values) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          super.addAll(values, handCardsData_);
          onChanged();
        } else {
          handCardsDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder clearHandCardsData() {
        if (handCardsDataBuilder_ == null) {
          handCardsData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          handCardsDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public Builder removeHandCardsData(int index) {
        if (handCardsDataBuilder_ == null) {
          ensureHandCardsDataIsMutable();
          handCardsData_.remove(index);
          onChanged();
        } else {
          handCardsDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder getHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder getHandCardsDataOrBuilder(
          int index) {
        if (handCardsDataBuilder_ == null) {
          return handCardsData_.get(index);  } else {
          return handCardsDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<? extends protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
           getHandCardsDataOrBuilderList() {
        if (handCardsDataBuilder_ != null) {
          return handCardsDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(handCardsData_);
        }
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder() {
        return getHandCardsDataFieldBuilder().addBuilder(
            protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public protobuf.clazz.Protocol.Int32ArrayResponse.Builder addHandCardsDataBuilder(
          int index) {
        return getHandCardsDataFieldBuilder().addBuilder(
            index, protobuf.clazz.Protocol.Int32ArrayResponse.getDefaultInstance());
      }
      /**
       * <code>repeated .Int32ArrayResponse hand_cards_data = 2;</code>
       *
       * <pre>
       *扑克列表
       * </pre>
       */
      public java.util.List<protobuf.clazz.Protocol.Int32ArrayResponse.Builder> 
           getHandCardsDataBuilderList() {
        return getHandCardsDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder> 
          getHandCardsDataFieldBuilder() {
        if (handCardsDataBuilder_ == null) {
          handCardsDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              protobuf.clazz.Protocol.Int32ArrayResponse, protobuf.clazz.Protocol.Int32ArrayResponse.Builder, protobuf.clazz.Protocol.Int32ArrayResponseOrBuilder>(
                  handCardsData_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          handCardsData_ = null;
        }
        return handCardsDataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.RefreshCardData_hrdz)
    }

    static {
      defaultInstance = new RefreshCardData_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.RefreshCardData_hrdz)
  }

  public interface RefreshMingji_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 card_data = 1;
    /**
     * <code>optional int32 card_data = 1;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    boolean hasCardData();
    /**
     * <code>optional int32 card_data = 1;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    int getCardData();

    // optional int32 seat_index = 2;
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    int getSeatIndex();
  }
  /**
   * Protobuf type {@code hrdz.RefreshMingji_hrdz}
   *
   * <pre>
   *1011 明鸡
   * </pre>
   */
  public static final class RefreshMingji_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements RefreshMingji_hrdzOrBuilder {
    // Use RefreshMingji_hrdz.newBuilder() to construct.
    private RefreshMingji_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RefreshMingji_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RefreshMingji_hrdz defaultInstance;
    public static RefreshMingji_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public RefreshMingji_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RefreshMingji_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cardData_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              seatIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshMingji_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshMingji_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<RefreshMingji_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<RefreshMingji_hrdz>() {
      public RefreshMingji_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RefreshMingji_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RefreshMingji_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 card_data = 1;
    public static final int CARD_DATA_FIELD_NUMBER = 1;
    private int cardData_;
    /**
     * <code>optional int32 card_data = 1;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public boolean hasCardData() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 card_data = 1;</code>
     *
     * <pre>
     *牌值
     * </pre>
     */
    public int getCardData() {
      return cardData_;
    }

    // optional int32 seat_index = 2;
    public static final int SEAT_INDEX_FIELD_NUMBER = 2;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 seat_index = 2;</code>
     *
     * <pre>
     *位置
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    private void initFields() {
      cardData_ = 0;
      seatIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, cardData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, seatIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, cardData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, seatIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.RefreshMingji_hrdz}
     *
     * <pre>
     *1011 明鸡
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshMingji_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshMingji_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cardData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_RefreshMingji_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cardData_ = cardData_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.seatIndex_ = seatIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz.getDefaultInstance()) return this;
        if (other.hasCardData()) {
          setCardData(other.getCardData());
        }
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.RefreshMingji_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 card_data = 1;
      private int cardData_ ;
      /**
       * <code>optional int32 card_data = 1;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public boolean hasCardData() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 card_data = 1;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public int getCardData() {
        return cardData_;
      }
      /**
       * <code>optional int32 card_data = 1;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder setCardData(int value) {
        bitField0_ |= 0x00000001;
        cardData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 card_data = 1;</code>
       *
       * <pre>
       *牌值
       * </pre>
       */
      public Builder clearCardData() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cardData_ = 0;
        onChanged();
        return this;
      }

      // optional int32 seat_index = 2;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000002;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 2;</code>
       *
       * <pre>
       *位置
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.RefreshMingji_hrdz)
    }

    static {
      defaultInstance = new RefreshMingji_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.RefreshMingji_hrdz)
  }

  public interface effect_type_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 seat_index = 1;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *椅子号
     * </pre>
     */
    boolean hasSeatIndex();
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *椅子号
     * </pre>
     */
    int getSeatIndex();

    // optional int32 type = 2;
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1：玩家抓了分，2：收喜钱
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1：玩家抓了分，2：收喜钱
     * </pre>
     */
    int getType();

    // repeated int32 data = 3;
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    java.util.List<java.lang.Integer> getDataList();
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    int getDataCount();
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    int getData(int index);

    // optional int32 is_animation = 4;
    /**
     * <code>optional int32 is_animation = 4;</code>
     *
     * <pre>
     *0：直接数据显示 1：需要动画
     * </pre>
     */
    boolean hasIsAnimation();
    /**
     * <code>optional int32 is_animation = 4;</code>
     *
     * <pre>
     *0：直接数据显示 1：需要动画
     * </pre>
     */
    int getIsAnimation();
  }
  /**
   * Protobuf type {@code hrdz.effect_type_hrdz}
   *
   * <pre>
   *动画特效 1012
   * </pre>
   */
  public static final class effect_type_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements effect_type_hrdzOrBuilder {
    // Use effect_type_hrdz.newBuilder() to construct.
    private effect_type_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private effect_type_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final effect_type_hrdz defaultInstance;
    public static effect_type_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public effect_type_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private effect_type_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seatIndex_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              type_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                data_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              data_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                data_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                data_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              isAnimation_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_effect_type_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_effect_type_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<effect_type_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<effect_type_hrdz>() {
      public effect_type_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new effect_type_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<effect_type_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 seat_index = 1;
    public static final int SEAT_INDEX_FIELD_NUMBER = 1;
    private int seatIndex_;
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *椅子号
     * </pre>
     */
    public boolean hasSeatIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 seat_index = 1;</code>
     *
     * <pre>
     *椅子号
     * </pre>
     */
    public int getSeatIndex() {
      return seatIndex_;
    }

    // optional int32 type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1：玩家抓了分，2：收喜钱
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 type = 2;</code>
     *
     * <pre>
     *1：玩家抓了分，2：收喜钱
     * </pre>
     */
    public int getType() {
      return type_;
    }

    // repeated int32 data = 3;
    public static final int DATA_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> data_;
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDataList() {
      return data_;
    }
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated int32 data = 3;</code>
     *
     * <pre>
     * </pre>
     */
    public int getData(int index) {
      return data_.get(index);
    }

    // optional int32 is_animation = 4;
    public static final int IS_ANIMATION_FIELD_NUMBER = 4;
    private int isAnimation_;
    /**
     * <code>optional int32 is_animation = 4;</code>
     *
     * <pre>
     *0：直接数据显示 1：需要动画
     * </pre>
     */
    public boolean hasIsAnimation() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 is_animation = 4;</code>
     *
     * <pre>
     *0：直接数据显示 1：需要动画
     * </pre>
     */
    public int getIsAnimation() {
      return isAnimation_;
    }

    private void initFields() {
      seatIndex_ = 0;
      type_ = 0;
      data_ = java.util.Collections.emptyList();
      isAnimation_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, seatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, type_);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeInt32(3, data_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, isAnimation_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, seatIndex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, type_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < data_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(data_.get(i));
        }
        size += dataSize;
        size += 1 * getDataList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, isAnimation_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.effect_type_hrdz}
     *
     * <pre>
     *动画特效 1012
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_effect_type_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_effect_type_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        seatIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        isAnimation_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_effect_type_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seatIndex_ = seatIndex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isAnimation_ = isAnimation_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz.getDefaultInstance()) return this;
        if (other.hasSeatIndex()) {
          setSeatIndex(other.getSeatIndex());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          onChanged();
        }
        if (other.hasIsAnimation()) {
          setIsAnimation(other.getIsAnimation());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.effect_type_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 seat_index = 1;
      private int seatIndex_ ;
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *椅子号
       * </pre>
       */
      public boolean hasSeatIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *椅子号
       * </pre>
       */
      public int getSeatIndex() {
        return seatIndex_;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *椅子号
       * </pre>
       */
      public Builder setSeatIndex(int value) {
        bitField0_ |= 0x00000001;
        seatIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 seat_index = 1;</code>
       *
       * <pre>
       *椅子号
       * </pre>
       */
      public Builder clearSeatIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seatIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 type = 2;
      private int type_ ;
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1：玩家抓了分，2：收喜钱
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1：玩家抓了分，2：收喜钱
       * </pre>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1：玩家抓了分，2：收喜钱
       * </pre>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 2;</code>
       *
       * <pre>
       *1：玩家抓了分，2：收喜钱
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 data = 3;
      private java.util.List<java.lang.Integer> data_ = java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          data_ = new java.util.ArrayList<java.lang.Integer>(data_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDataList() {
        return java.util.Collections.unmodifiableList(data_);
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public int getDataCount() {
        return data_.size();
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public int getData(int index) {
        return data_.get(index);
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setData(
          int index, int value) {
        ensureDataIsMutable();
        data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder addData(int value) {
        ensureDataIsMutable();
        data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDataIsMutable();
        super.addAll(values, data_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 data = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearData() {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // optional int32 is_animation = 4;
      private int isAnimation_ ;
      /**
       * <code>optional int32 is_animation = 4;</code>
       *
       * <pre>
       *0：直接数据显示 1：需要动画
       * </pre>
       */
      public boolean hasIsAnimation() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 is_animation = 4;</code>
       *
       * <pre>
       *0：直接数据显示 1：需要动画
       * </pre>
       */
      public int getIsAnimation() {
        return isAnimation_;
      }
      /**
       * <code>optional int32 is_animation = 4;</code>
       *
       * <pre>
       *0：直接数据显示 1：需要动画
       * </pre>
       */
      public Builder setIsAnimation(int value) {
        bitField0_ |= 0x00000008;
        isAnimation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 is_animation = 4;</code>
       *
       * <pre>
       *0：直接数据显示 1：需要动画
       * </pre>
       */
      public Builder clearIsAnimation() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isAnimation_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.effect_type_hrdz)
    }

    static {
      defaultInstance = new effect_type_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.effect_type_hrdz)
  }

  public interface sort_type_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 sort_type = 1;
    /**
     * <code>optional int32 sort_type = 1;</code>
     *
     * <pre>
     *排序类型，//1:大小排序，2：张数排序
     * </pre>
     */
    boolean hasSortType();
    /**
     * <code>optional int32 sort_type = 1;</code>
     *
     * <pre>
     *排序类型，//1:大小排序，2：张数排序
     * </pre>
     */
    int getSortType();
  }
  /**
   * Protobuf type {@code hrdz.sort_type_hrdz}
   *
   * <pre>
   *理牌类型 1013
   * </pre>
   */
  public static final class sort_type_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements sort_type_hrdzOrBuilder {
    // Use sort_type_hrdz.newBuilder() to construct.
    private sort_type_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private sort_type_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final sort_type_hrdz defaultInstance;
    public static sort_type_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public sort_type_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private sort_type_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              sortType_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_sort_type_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_sort_type_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<sort_type_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<sort_type_hrdz>() {
      public sort_type_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new sort_type_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<sort_type_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 sort_type = 1;
    public static final int SORT_TYPE_FIELD_NUMBER = 1;
    private int sortType_;
    /**
     * <code>optional int32 sort_type = 1;</code>
     *
     * <pre>
     *排序类型，//1:大小排序，2：张数排序
     * </pre>
     */
    public boolean hasSortType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 sort_type = 1;</code>
     *
     * <pre>
     *排序类型，//1:大小排序，2：张数排序
     * </pre>
     */
    public int getSortType() {
      return sortType_;
    }

    private void initFields() {
      sortType_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, sortType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, sortType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.sort_type_hrdz}
     *
     * <pre>
     *理牌类型 1013
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_sort_type_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_sort_type_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sortType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_sort_type_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sortType_ = sortType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz.getDefaultInstance()) return this;
        if (other.hasSortType()) {
          setSortType(other.getSortType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.sort_type_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 sort_type = 1;
      private int sortType_ ;
      /**
       * <code>optional int32 sort_type = 1;</code>
       *
       * <pre>
       *排序类型，//1:大小排序，2：张数排序
       * </pre>
       */
      public boolean hasSortType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 sort_type = 1;</code>
       *
       * <pre>
       *排序类型，//1:大小排序，2：张数排序
       * </pre>
       */
      public int getSortType() {
        return sortType_;
      }
      /**
       * <code>optional int32 sort_type = 1;</code>
       *
       * <pre>
       *排序类型，//1:大小排序，2：张数排序
       * </pre>
       */
      public Builder setSortType(int value) {
        bitField0_ |= 0x00000001;
        sortType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sort_type = 1;</code>
       *
       * <pre>
       *排序类型，//1:大小排序，2：张数排序
       * </pre>
       */
      public Builder clearSortType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sortType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.sort_type_hrdz)
    }

    static {
      defaultInstance = new sort_type_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.sort_type_hrdz)
  }

  public interface Opreate_RequestWsk_hrdzOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 opreate_type = 1;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：亮牌 2:叫庄 3不叫 4:理牌排序 5:数量排序
     * </pre>
     */
    boolean hasOpreateType();
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：亮牌 2:叫庄 3不叫 4:理牌排序 5:数量排序
     * </pre>
     */
    int getOpreateType();

    // optional int32 opreate_data = 2;
    /**
     * <code>optional int32 opreate_data = 2;</code>
     *
     * <pre>
     *亮的牌
     * </pre>
     */
    boolean hasOpreateData();
    /**
     * <code>optional int32 opreate_data = 2;</code>
     *
     * <pre>
     *亮的牌
     * </pre>
     */
    int getOpreateData();
  }
  /**
   * Protobuf type {@code hrdz.Opreate_RequestWsk_hrdz}
   *
   * <pre>
   *请求 1090
   * </pre>
   */
  public static final class Opreate_RequestWsk_hrdz extends
      com.google.protobuf.GeneratedMessage
      implements Opreate_RequestWsk_hrdzOrBuilder {
    // Use Opreate_RequestWsk_hrdz.newBuilder() to construct.
    private Opreate_RequestWsk_hrdz(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Opreate_RequestWsk_hrdz(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Opreate_RequestWsk_hrdz defaultInstance;
    public static Opreate_RequestWsk_hrdz getDefaultInstance() {
      return defaultInstance;
    }

    public Opreate_RequestWsk_hrdz getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Opreate_RequestWsk_hrdz(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              opreateType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              opreateData_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_Opreate_RequestWsk_hrdz_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_Opreate_RequestWsk_hrdz_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz.Builder.class);
    }

    public static com.google.protobuf.Parser<Opreate_RequestWsk_hrdz> PARSER =
        new com.google.protobuf.AbstractParser<Opreate_RequestWsk_hrdz>() {
      public Opreate_RequestWsk_hrdz parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Opreate_RequestWsk_hrdz(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Opreate_RequestWsk_hrdz> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 opreate_type = 1;
    public static final int OPREATE_TYPE_FIELD_NUMBER = 1;
    private int opreateType_;
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：亮牌 2:叫庄 3不叫 4:理牌排序 5:数量排序
     * </pre>
     */
    public boolean hasOpreateType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 opreate_type = 1;</code>
     *
     * <pre>
     *1：亮牌 2:叫庄 3不叫 4:理牌排序 5:数量排序
     * </pre>
     */
    public int getOpreateType() {
      return opreateType_;
    }

    // optional int32 opreate_data = 2;
    public static final int OPREATE_DATA_FIELD_NUMBER = 2;
    private int opreateData_;
    /**
     * <code>optional int32 opreate_data = 2;</code>
     *
     * <pre>
     *亮的牌
     * </pre>
     */
    public boolean hasOpreateData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 opreate_data = 2;</code>
     *
     * <pre>
     *亮的牌
     * </pre>
     */
    public int getOpreateData() {
      return opreateData_;
    }

    private void initFields() {
      opreateType_ = 0;
      opreateData_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, opreateData_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, opreateType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, opreateData_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code hrdz.Opreate_RequestWsk_hrdz}
     *
     * <pre>
     *请求 1090
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdzOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_Opreate_RequestWsk_hrdz_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_Opreate_RequestWsk_hrdz_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz.class, protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz.Builder.class);
      }

      // Construct using protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        opreateType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protobuf.clazz.hrdz.hrdzRsp.internal_static_hrdz_Opreate_RequestWsk_hrdz_descriptor;
      }

      public protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz getDefaultInstanceForType() {
        return protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz.getDefaultInstance();
      }

      public protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz build() {
        protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz buildPartial() {
        protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz result = new protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.opreateType_ = opreateType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.opreateData_ = opreateData_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz) {
          return mergeFrom((protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz other) {
        if (other == protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz.getDefaultInstance()) return this;
        if (other.hasOpreateType()) {
          setOpreateType(other.getOpreateType());
        }
        if (other.hasOpreateData()) {
          setOpreateData(other.getOpreateData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protobuf.clazz.hrdz.hrdzRsp.Opreate_RequestWsk_hrdz) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 opreate_type = 1;
      private int opreateType_ ;
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：亮牌 2:叫庄 3不叫 4:理牌排序 5:数量排序
       * </pre>
       */
      public boolean hasOpreateType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：亮牌 2:叫庄 3不叫 4:理牌排序 5:数量排序
       * </pre>
       */
      public int getOpreateType() {
        return opreateType_;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：亮牌 2:叫庄 3不叫 4:理牌排序 5:数量排序
       * </pre>
       */
      public Builder setOpreateType(int value) {
        bitField0_ |= 0x00000001;
        opreateType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_type = 1;</code>
       *
       * <pre>
       *1：亮牌 2:叫庄 3不叫 4:理牌排序 5:数量排序
       * </pre>
       */
      public Builder clearOpreateType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        opreateType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 opreate_data = 2;
      private int opreateData_ ;
      /**
       * <code>optional int32 opreate_data = 2;</code>
       *
       * <pre>
       *亮的牌
       * </pre>
       */
      public boolean hasOpreateData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 opreate_data = 2;</code>
       *
       * <pre>
       *亮的牌
       * </pre>
       */
      public int getOpreateData() {
        return opreateData_;
      }
      /**
       * <code>optional int32 opreate_data = 2;</code>
       *
       * <pre>
       *亮的牌
       * </pre>
       */
      public Builder setOpreateData(int value) {
        bitField0_ |= 0x00000002;
        opreateData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 opreate_data = 2;</code>
       *
       * <pre>
       *亮的牌
       * </pre>
       */
      public Builder clearOpreateData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        opreateData_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:hrdz.Opreate_RequestWsk_hrdz)
    }

    static {
      defaultInstance = new Opreate_RequestWsk_hrdz(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:hrdz.Opreate_RequestWsk_hrdz)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_GameStart_Wsk_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_GameStart_Wsk_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_TableResponse_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_TableResponse_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_OutCardDataWsk_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_OutCardDataWsk_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_PukeGameEndWsk_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_PukeGameEndWsk_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_RefreshScore_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_RefreshScore_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_PaiFenData_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_PaiFenData_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_LiangPai_Begin_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_LiangPai_Begin_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_LiangPai_Result_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_LiangPai_Result_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_CallBankerResponse_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_CallBankerResponse_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_RefreshCardData_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_RefreshCardData_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_RefreshMingji_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_RefreshMingji_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_effect_type_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_effect_type_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_sort_type_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_sort_type_hrdz_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_hrdz_Opreate_RequestWsk_hrdz_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_hrdz_Opreate_RequestWsk_hrdz_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031wsk/huarongdazhadan.proto\022\004hrdz\032\024basic" +
      "/protocol.proto\"\277\001\n\022GameStart_Wsk_hrdz\022\034" +
      "\n\troom_info\030\001 \001(\0132\t.RoomInfo\022$\n\007players\030" +
      "\002 \003(\0132\023.RoomPlayerResponse\022\022\n\ncur_banker" +
      "\030\003 \001(\005\022\022\n\ncard_count\030\004 \003(\005\022\'\n\ncards_data" +
      "\030\005 \003(\0132\023.Int32ArrayResponse\022\024\n\014display_t" +
      "ime\030\006 \001(\005\"\346\005\n\022TableResponse_hrdz\022\025\n\rbank" +
      "er_player\030\001 \001(\005\022\026\n\016current_player\030\002 \001(\005\022" +
      "\023\n\013prev_player\030\003 \001(\005\022\017\n\007trustee\030\004 \003(\010\022+\n" +
      "\016out_cards_data\030\005 \003(\0132\023.Int32ArrayRespon",
      "se\022\027\n\017out_cards_count\030\006 \003(\005\022\023\n\013player_pa" +
      "ss\030\007 \003(\005\022\021\n\tcard_type\030\010 \003(\005\022\032\n\022pr_out_ca" +
      "rd_player\030\t \001(\005\022\025\n\rpr_cards_data\030\n \003(\005\022\034" +
      "\n\024pr_cards_change_data\030\013 \003(\005\022\026\n\016pr_cards" +
      "_count\030\014 \001(\005\022\030\n\020pr_out_card_type\030\r \001(\005\022\024" +
      "\n\014is_first_out\030\016 \001(\005\022\024\n\014display_time\030\017 \001" +
      "(\005\022\022\n\ncard_count\030\020 \003(\005\022\'\n\ncards_data\030\021 \003" +
      "(\0132\023.Int32ArrayResponse\022\034\n\troom_info\030\022 \001" +
      "(\0132\t.RoomInfo\022$\n\007players\030\023 \003(\0132\023.RoomPla" +
      "yerResponse\022\031\n\021user_can_out_data\030\024 \003(\005\022\032",
      "\n\022user_can_out_count\030\025 \001(\005\022\026\n\016user_get_s" +
      "core\030\026 \003(\005\022\021\n\twin_order\030\027 \003(\005\022\024\n\014is_yi_d" +
      "a_san\030\030 \001(\010\022\026\n\016jiao_card_data\030\031 \001(\005\022\026\n\016i" +
      "s_call_banker\030\032 \003(\010\022\032\n\022banker_friend_sea" +
      "t\030\033 \001(\005\022\031\n\021friend_seat_index\030\034 \001(\005\"\275\004\n\023O" +
      "utCardDataWsk_hrdz\022\027\n\017out_card_player\030\001 " +
      "\001(\005\022\022\n\ncards_data\030\002 \003(\005\022\031\n\021cards_change_" +
      "data\030\003 \003(\005\022\023\n\013cards_count\030\004 \001(\005\022\021\n\tcard_" +
      "type\030\005 \001(\005\022\022\n\ncur_player\030\006 \001(\005\022\025\n\rpr_car" +
      "ds_data\030\007 \003(\005\022\034\n\024pr_cards_change_data\030\010 ",
      "\003(\005\022\026\n\016pr_cards_count\030\t \001(\005\022\030\n\020pr_out_ca" +
      "rd_type\030\n \001(\005\022\024\n\014is_first_out\030\013 \001(\010\022\024\n\014d" +
      "isplay_time\030\014 \001(\005\022\031\n\021user_can_out_data\030\r" +
      " \003(\005\022\032\n\022user_can_out_count\030\016 \001(\005\022\026\n\016user" +
      "_get_score\030\017 \003(\005\022\027\n\017hand_card_count\030\020 \003(" +
      "\005\022,\n\017hand_cards_data\030\021 \003(\0132\023.Int32ArrayR" +
      "esponse\022\021\n\twin_order\030\022 \003(\005\022\034\n\024is_current" +
      "_first_out\030\023 \001(\005\022\030\n\020is_have_not_card\030\024 \001" +
      "(\005\022\023\n\013is_bao_jing\030\025 \001(\005\022\031\n\021friend_seat_i" +
      "ndex\030\026 \001(\005\"\342\004\n\023PukeGameEndWsk_hrdz\022\034\n\tro",
      "om_info\030\001 \001(\0132\t.RoomInfo\022\021\n\tcur_round\030\002 " +
      "\001(\005\022\022\n\ngame_round\030\003 \001(\005\022\022\n\ncard_count\030\004 " +
      "\003(\005\022\'\n\ncards_data\030\005 \003(\0132\023.Int32ArrayResp" +
      "onse\022\025\n\rboom_card_num\030\006 \003(\005\022\021\n\tend_score" +
      "\030\007 \003(\005\022\022\n\nplayer_num\030\010 \001(\005\022\025\n\rbanker_pla" +
      "yer\030\t \001(\005\022\016\n\006reason\030\n \001(\005\022\021\n\twin_order\030\013" +
      " \003(\005\022\026\n\016jiang_fa_score\030\014 \003(\005\022\022\n\nzhua_sco" +
      "re\030\r \003(\005\022\020\n\010xi_score\030\016 \003(\005\022\020\n\010hong_pai\030\017" +
      " \003(\005\022\025\n\rdang_ju_score\030\020 \003(\005\022\022\n\nbao_playe" +
      "r\030\031 \001(\005\022\022\n\nban_player\030\032 \001(\005\022\025\n\rall_end_s",
      "core\030\021 \003(\005\022\026\n\016end_score_zhua\030\022 \003(\005\022$\n\007pl" +
      "ayers\030\023 \003(\0132\023.RoomPlayerResponse\022\024\n\014yi_y" +
      "ao_times\030\024 \003(\005\022\024\n\014er_yao_times\030\025 \003(\005\022\025\n\r" +
      "san_yao_times\030\026 \003(\005\022\024\n\014si_yao_times\030\027 \003(" +
      "\005\022\024\n\014qi_fen_times\030\030 \003(\005\"Y\n\021RefreshScore_" +
      "hrdz\022\026\n\016user_get_score\030\001 \003(\005\022\023\n\013table_sc" +
      "ore\030\002 \001(\005\022\027\n\017xian_qian_score\030\003 \003(\005\"a\n\017Pa" +
      "iFenData_hrdz\022\'\n\ncards_data\030\001 \003(\0132\023.Int3" +
      "2ArrayResponse\022\023\n\013cards_count\030\002 \003(\005\022\020\n\010y" +
      "u_score\030\003 \001(\005\"?\n\023LiangPai_Begin_hrdz\022\022\n\n",
      "cur_player\030\001 \001(\005\022\024\n\014display_time\030\002 \001(\005\"A" +
      "\n\024LiangPai_Result_hrdz\022\026\n\016opreate_player" +
      "\030\001 \001(\005\022\021\n\tcard_data\030\002 \001(\005\"\251\001\n\027CallBanker" +
      "Response_hrdz\022\026\n\016opreate_action\030\001 \001(\005\022\023\n" +
      "\013call_player\030\002 \001(\005\022\026\n\016current_player\030\003 \001" +
      "(\005\022\025\n\rbanker_player\030\004 \001(\005\022\024\n\014display_tim" +
      "e\030\005 \001(\005\022\034\n\troom_info\030\006 \001(\0132\t.RoomInfo\"]\n" +
      "\024RefreshCardData_hrdz\022\027\n\017hand_card_count" +
      "\030\001 \003(\005\022,\n\017hand_cards_data\030\002 \003(\0132\023.Int32A" +
      "rrayResponse\";\n\022RefreshMingji_hrdz\022\021\n\tca",
      "rd_data\030\001 \001(\005\022\022\n\nseat_index\030\002 \001(\005\"X\n\020eff" +
      "ect_type_hrdz\022\022\n\nseat_index\030\001 \001(\005\022\014\n\004typ" +
      "e\030\002 \001(\005\022\014\n\004data\030\003 \003(\005\022\024\n\014is_animation\030\004 " +
      "\001(\005\"#\n\016sort_type_hrdz\022\021\n\tsort_type\030\001 \001(\005" +
      "\"E\n\027Opreate_RequestWsk_hrdz\022\024\n\014opreate_t" +
      "ype\030\001 \001(\005\022\024\n\014opreate_data\030\002 \001(\005B\036\n\023proto" +
      "buf.clazz.hrdzB\007hrdzRsp"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_hrdz_GameStart_Wsk_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_hrdz_GameStart_Wsk_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_GameStart_Wsk_hrdz_descriptor,
              new java.lang.String[] { "RoomInfo", "Players", "CurBanker", "CardCount", "CardsData", "DisplayTime", });
          internal_static_hrdz_TableResponse_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_hrdz_TableResponse_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_TableResponse_hrdz_descriptor,
              new java.lang.String[] { "BankerPlayer", "CurrentPlayer", "PrevPlayer", "Trustee", "OutCardsData", "OutCardsCount", "PlayerPass", "CardType", "PrOutCardPlayer", "PrCardsData", "PrCardsChangeData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "CardCount", "CardsData", "RoomInfo", "Players", "UserCanOutData", "UserCanOutCount", "UserGetScore", "WinOrder", "IsYiDaSan", "JiaoCardData", "IsCallBanker", "BankerFriendSeat", "FriendSeatIndex", });
          internal_static_hrdz_OutCardDataWsk_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_hrdz_OutCardDataWsk_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_OutCardDataWsk_hrdz_descriptor,
              new java.lang.String[] { "OutCardPlayer", "CardsData", "CardsChangeData", "CardsCount", "CardType", "CurPlayer", "PrCardsData", "PrCardsChangeData", "PrCardsCount", "PrOutCardType", "IsFirstOut", "DisplayTime", "UserCanOutData", "UserCanOutCount", "UserGetScore", "HandCardCount", "HandCardsData", "WinOrder", "IsCurrentFirstOut", "IsHaveNotCard", "IsBaoJing", "FriendSeatIndex", });
          internal_static_hrdz_PukeGameEndWsk_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_hrdz_PukeGameEndWsk_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_PukeGameEndWsk_hrdz_descriptor,
              new java.lang.String[] { "RoomInfo", "CurRound", "GameRound", "CardCount", "CardsData", "BoomCardNum", "EndScore", "PlayerNum", "BankerPlayer", "Reason", "WinOrder", "JiangFaScore", "ZhuaScore", "XiScore", "HongPai", "DangJuScore", "BaoPlayer", "BanPlayer", "AllEndScore", "EndScoreZhua", "Players", "YiYaoTimes", "ErYaoTimes", "SanYaoTimes", "SiYaoTimes", "QiFenTimes", });
          internal_static_hrdz_RefreshScore_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_hrdz_RefreshScore_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_RefreshScore_hrdz_descriptor,
              new java.lang.String[] { "UserGetScore", "TableScore", "XianQianScore", });
          internal_static_hrdz_PaiFenData_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_hrdz_PaiFenData_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_PaiFenData_hrdz_descriptor,
              new java.lang.String[] { "CardsData", "CardsCount", "YuScore", });
          internal_static_hrdz_LiangPai_Begin_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_hrdz_LiangPai_Begin_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_LiangPai_Begin_hrdz_descriptor,
              new java.lang.String[] { "CurPlayer", "DisplayTime", });
          internal_static_hrdz_LiangPai_Result_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_hrdz_LiangPai_Result_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_LiangPai_Result_hrdz_descriptor,
              new java.lang.String[] { "OpreatePlayer", "CardData", });
          internal_static_hrdz_CallBankerResponse_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_hrdz_CallBankerResponse_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_CallBankerResponse_hrdz_descriptor,
              new java.lang.String[] { "OpreateAction", "CallPlayer", "CurrentPlayer", "BankerPlayer", "DisplayTime", "RoomInfo", });
          internal_static_hrdz_RefreshCardData_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_hrdz_RefreshCardData_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_RefreshCardData_hrdz_descriptor,
              new java.lang.String[] { "HandCardCount", "HandCardsData", });
          internal_static_hrdz_RefreshMingji_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_hrdz_RefreshMingji_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_RefreshMingji_hrdz_descriptor,
              new java.lang.String[] { "CardData", "SeatIndex", });
          internal_static_hrdz_effect_type_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_hrdz_effect_type_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_effect_type_hrdz_descriptor,
              new java.lang.String[] { "SeatIndex", "Type", "Data", "IsAnimation", });
          internal_static_hrdz_sort_type_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_hrdz_sort_type_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_sort_type_hrdz_descriptor,
              new java.lang.String[] { "SortType", });
          internal_static_hrdz_Opreate_RequestWsk_hrdz_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_hrdz_Opreate_RequestWsk_hrdz_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_hrdz_Opreate_RequestWsk_hrdz_descriptor,
              new java.lang.String[] { "OpreateType", "OpreateData", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          protobuf.clazz.Protocol.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
